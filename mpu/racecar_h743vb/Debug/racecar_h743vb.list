
racecar_h743vb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013d28  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  08013fc0  08013fc0  00023fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014398  08014398  00024398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  080143a0  080143a0  000243a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080143a8  080143a8  000243a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000060  24000000  080143ac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000019e4  24000060  0801440c  00030060  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24001a44  0801440c  00031a44  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030060  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0003008e  2**0
                  CONTENTS, READONLY
 11 .debug_info   000327ee  00000000  00000000  000300d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004ebc  00000000  00000000  000628bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002550  00000000  00000000  00067780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001d4c  00000000  00000000  00069cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003e4c4  00000000  00000000  0006ba1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002f419  00000000  00000000  000a9ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0018d49b  00000000  00000000  000d92f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000a880  00000000  00000000  00266794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006d  00000000  00000000  00271014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000060 	.word	0x24000060
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08013fa8 	.word	0x08013fa8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000064 	.word	0x24000064
 80002d4:	08013fa8 	.word	0x08013fa8

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002fc:	f000 b970 	b.w	80005e0 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9e08      	ldr	r6, [sp, #32]
 800031e:	460d      	mov	r5, r1
 8000320:	4604      	mov	r4, r0
 8000322:	460f      	mov	r7, r1
 8000324:	2b00      	cmp	r3, #0
 8000326:	d14a      	bne.n	80003be <__udivmoddi4+0xa6>
 8000328:	428a      	cmp	r2, r1
 800032a:	4694      	mov	ip, r2
 800032c:	d965      	bls.n	80003fa <__udivmoddi4+0xe2>
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	b143      	cbz	r3, 8000346 <__udivmoddi4+0x2e>
 8000334:	fa02 fc03 	lsl.w	ip, r2, r3
 8000338:	f1c3 0220 	rsb	r2, r3, #32
 800033c:	409f      	lsls	r7, r3
 800033e:	fa20 f202 	lsr.w	r2, r0, r2
 8000342:	4317      	orrs	r7, r2
 8000344:	409c      	lsls	r4, r3
 8000346:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800034a:	fa1f f58c 	uxth.w	r5, ip
 800034e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000352:	0c22      	lsrs	r2, r4, #16
 8000354:	fb0e 7711 	mls	r7, lr, r1, r7
 8000358:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800035c:	fb01 f005 	mul.w	r0, r1, r5
 8000360:	4290      	cmp	r0, r2
 8000362:	d90a      	bls.n	800037a <__udivmoddi4+0x62>
 8000364:	eb1c 0202 	adds.w	r2, ip, r2
 8000368:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800036c:	f080 811c 	bcs.w	80005a8 <__udivmoddi4+0x290>
 8000370:	4290      	cmp	r0, r2
 8000372:	f240 8119 	bls.w	80005a8 <__udivmoddi4+0x290>
 8000376:	3902      	subs	r1, #2
 8000378:	4462      	add	r2, ip
 800037a:	1a12      	subs	r2, r2, r0
 800037c:	b2a4      	uxth	r4, r4
 800037e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000382:	fb0e 2210 	mls	r2, lr, r0, r2
 8000386:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800038a:	fb00 f505 	mul.w	r5, r0, r5
 800038e:	42a5      	cmp	r5, r4
 8000390:	d90a      	bls.n	80003a8 <__udivmoddi4+0x90>
 8000392:	eb1c 0404 	adds.w	r4, ip, r4
 8000396:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800039a:	f080 8107 	bcs.w	80005ac <__udivmoddi4+0x294>
 800039e:	42a5      	cmp	r5, r4
 80003a0:	f240 8104 	bls.w	80005ac <__udivmoddi4+0x294>
 80003a4:	4464      	add	r4, ip
 80003a6:	3802      	subs	r0, #2
 80003a8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	2100      	movs	r1, #0
 80003b0:	b11e      	cbz	r6, 80003ba <__udivmoddi4+0xa2>
 80003b2:	40dc      	lsrs	r4, r3
 80003b4:	2300      	movs	r3, #0
 80003b6:	e9c6 4300 	strd	r4, r3, [r6]
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	428b      	cmp	r3, r1
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0xbc>
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	f000 80ed 	beq.w	80005a2 <__udivmoddi4+0x28a>
 80003c8:	2100      	movs	r1, #0
 80003ca:	e9c6 0500 	strd	r0, r5, [r6]
 80003ce:	4608      	mov	r0, r1
 80003d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d4:	fab3 f183 	clz	r1, r3
 80003d8:	2900      	cmp	r1, #0
 80003da:	d149      	bne.n	8000470 <__udivmoddi4+0x158>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	d302      	bcc.n	80003e6 <__udivmoddi4+0xce>
 80003e0:	4282      	cmp	r2, r0
 80003e2:	f200 80f8 	bhi.w	80005d6 <__udivmoddi4+0x2be>
 80003e6:	1a84      	subs	r4, r0, r2
 80003e8:	eb65 0203 	sbc.w	r2, r5, r3
 80003ec:	2001      	movs	r0, #1
 80003ee:	4617      	mov	r7, r2
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d0e2      	beq.n	80003ba <__udivmoddi4+0xa2>
 80003f4:	e9c6 4700 	strd	r4, r7, [r6]
 80003f8:	e7df      	b.n	80003ba <__udivmoddi4+0xa2>
 80003fa:	b902      	cbnz	r2, 80003fe <__udivmoddi4+0xe6>
 80003fc:	deff      	udf	#255	; 0xff
 80003fe:	fab2 f382 	clz	r3, r2
 8000402:	2b00      	cmp	r3, #0
 8000404:	f040 8090 	bne.w	8000528 <__udivmoddi4+0x210>
 8000408:	1a8a      	subs	r2, r1, r2
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2101      	movs	r1, #1
 8000414:	fbb2 f5f7 	udiv	r5, r2, r7
 8000418:	fb07 2015 	mls	r0, r7, r5, r2
 800041c:	0c22      	lsrs	r2, r4, #16
 800041e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000422:	fb0e f005 	mul.w	r0, lr, r5
 8000426:	4290      	cmp	r0, r2
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x124>
 800042a:	eb1c 0202 	adds.w	r2, ip, r2
 800042e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x122>
 8000434:	4290      	cmp	r0, r2
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2b8>
 800043a:	4645      	mov	r5, r8
 800043c:	1a12      	subs	r2, r2, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb2 f0f7 	udiv	r0, r2, r7
 8000444:	fb07 2210 	mls	r2, r7, r0, r2
 8000448:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x14e>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x14c>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2c2>
 8000464:	4610      	mov	r0, r2
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800046e:	e79f      	b.n	80003b0 <__udivmoddi4+0x98>
 8000470:	f1c1 0720 	rsb	r7, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa05 f401 	lsl.w	r4, r5, r1
 8000482:	fa20 f307 	lsr.w	r3, r0, r7
 8000486:	40fd      	lsrs	r5, r7
 8000488:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048c:	4323      	orrs	r3, r4
 800048e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000492:	fa1f fe8c 	uxth.w	lr, ip
 8000496:	fb09 5518 	mls	r5, r9, r8, r5
 800049a:	0c1c      	lsrs	r4, r3, #16
 800049c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a0:	fb08 f50e 	mul.w	r5, r8, lr
 80004a4:	42a5      	cmp	r5, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	fa00 f001 	lsl.w	r0, r0, r1
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b0>
 80004b0:	eb1c 0404 	adds.w	r4, ip, r4
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2b4>
 80004bc:	42a5      	cmp	r5, r4
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2b4>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4464      	add	r4, ip
 80004c8:	1b64      	subs	r4, r4, r5
 80004ca:	b29d      	uxth	r5, r3
 80004cc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d0:	fb09 4413 	mls	r4, r9, r3, r4
 80004d4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004dc:	45a6      	cmp	lr, r4
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1da>
 80004e0:	eb1c 0404 	adds.w	r4, ip, r4
 80004e4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2ac>
 80004ea:	45a6      	cmp	lr, r4
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2ac>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	4464      	add	r4, ip
 80004f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004f6:	fba3 9502 	umull	r9, r5, r3, r2
 80004fa:	eba4 040e 	sub.w	r4, r4, lr
 80004fe:	42ac      	cmp	r4, r5
 8000500:	46c8      	mov	r8, r9
 8000502:	46ae      	mov	lr, r5
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x29c>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x298>
 8000508:	b156      	cbz	r6, 8000520 <__udivmoddi4+0x208>
 800050a:	ebb0 0208 	subs.w	r2, r0, r8
 800050e:	eb64 040e 	sbc.w	r4, r4, lr
 8000512:	fa04 f707 	lsl.w	r7, r4, r7
 8000516:	40ca      	lsrs	r2, r1
 8000518:	40cc      	lsrs	r4, r1
 800051a:	4317      	orrs	r7, r2
 800051c:	e9c6 7400 	strd	r7, r4, [r6]
 8000520:	4618      	mov	r0, r3
 8000522:	2100      	movs	r1, #0
 8000524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000528:	f1c3 0120 	rsb	r1, r3, #32
 800052c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000530:	fa20 f201 	lsr.w	r2, r0, r1
 8000534:	fa25 f101 	lsr.w	r1, r5, r1
 8000538:	409d      	lsls	r5, r3
 800053a:	432a      	orrs	r2, r5
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb1 f0f7 	udiv	r0, r1, r7
 8000548:	fb07 1510 	mls	r5, r7, r0, r1
 800054c:	0c11      	lsrs	r1, r2, #16
 800054e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000552:	fb00 f50e 	mul.w	r5, r0, lr
 8000556:	428d      	cmp	r5, r1
 8000558:	fa04 f403 	lsl.w	r4, r4, r3
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x258>
 800055e:	eb1c 0101 	adds.w	r1, ip, r1
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b0>
 8000568:	428d      	cmp	r5, r1
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b0>
 800056c:	3802      	subs	r0, #2
 800056e:	4461      	add	r1, ip
 8000570:	1b49      	subs	r1, r1, r5
 8000572:	b292      	uxth	r2, r2
 8000574:	fbb1 f5f7 	udiv	r5, r1, r7
 8000578:	fb07 1115 	mls	r1, r7, r5, r1
 800057c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000580:	fb05 f10e 	mul.w	r1, r5, lr
 8000584:	4291      	cmp	r1, r2
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x282>
 8000588:	eb1c 0202 	adds.w	r2, ip, r2
 800058c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2a8>
 8000592:	4291      	cmp	r1, r2
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2a8>
 8000596:	3d02      	subs	r5, #2
 8000598:	4462      	add	r2, ip
 800059a:	1a52      	subs	r2, r2, r1
 800059c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0xfc>
 80005a2:	4631      	mov	r1, r6
 80005a4:	4630      	mov	r0, r6
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xa2>
 80005a8:	4639      	mov	r1, r7
 80005aa:	e6e6      	b.n	800037a <__udivmoddi4+0x62>
 80005ac:	4610      	mov	r0, r2
 80005ae:	e6fb      	b.n	80003a8 <__udivmoddi4+0x90>
 80005b0:	4548      	cmp	r0, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f0>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005bc:	3b01      	subs	r3, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f0>
 80005c0:	4645      	mov	r5, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x282>
 80005c4:	462b      	mov	r3, r5
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1da>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x258>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b0>
 80005d0:	3d02      	subs	r5, #2
 80005d2:	4462      	add	r2, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x124>
 80005d6:	4608      	mov	r0, r1
 80005d8:	e70a      	b.n	80003f0 <__udivmoddi4+0xd8>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x14e>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e8:	f005 f870 	bl	80056cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ec:	f000 f82c 	bl	8000648 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005f0:	f000 f8a4 	bl	800073c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f4:	f000 fe90 	bl	8001318 <MX_GPIO_Init>
  MX_BDMA_Init();
 80005f8:	f000 fe3e 	bl	8001278 <MX_BDMA_Init>
  MX_DMA_Init();
 80005fc:	f000 fe5c 	bl	80012b8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000600:	f000 f8ce 	bl	80007a0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000604:	f000 f944 	bl	8000890 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8000608:	f000 f982 	bl	8000910 <MX_LPUART1_UART_Init>
  MX_UART4_Init();
 800060c:	f000 f9cc 	bl	80009a8 <MX_UART4_Init>
  MX_UART5_Init();
 8000610:	f000 fa16 	bl	8000a40 <MX_UART5_Init>
  MX_UART7_Init();
 8000614:	f000 fa60 	bl	8000ad8 <MX_UART7_Init>
  MX_USART3_UART_Init();
 8000618:	f000 faaa 	bl	8000b70 <MX_USART3_UART_Init>
  MX_QUADSPI_Init();
 800061c:	f000 faf4 	bl	8000c08 <MX_QUADSPI_Init>
  MX_SDMMC1_SD_Init();
 8000620:	f000 fb1e 	bl	8000c60 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8000624:	f000 fb40 	bl	8000ca8 <MX_SPI1_Init>
  MX_TIM5_Init();
 8000628:	f000 fc7e 	bl	8000f28 <MX_TIM5_Init>
  MX_TIM2_Init();
 800062c:	f000 fb92 	bl	8000d54 <MX_TIM2_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000630:	f000 fdf0 	bl	8001214 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 8000634:	f000 fc12 	bl	8000e5c <MX_TIM3_Init>
  MX_TIM15_Init();
 8000638:	f000 fd68 	bl	800110c <MX_TIM15_Init>
  MX_TIM6_Init();
 800063c:	f000 fcf6 	bl	800102c <MX_TIM6_Init>
  MX_TIM7_Init();
 8000640:	f000 fd2c 	bl	800109c <MX_TIM7_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000644:	e7fe      	b.n	8000644 <main+0x60>
	...

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b09c      	sub	sp, #112	; 0x70
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000652:	224c      	movs	r2, #76	; 0x4c
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f013 fbff 	bl	8013e5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	2220      	movs	r2, #32
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f013 fbf9 	bl	8013e5a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000668:	2002      	movs	r0, #2
 800066a:	f009 fd05 	bl	800a078 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066e:	2300      	movs	r3, #0
 8000670:	603b      	str	r3, [r7, #0]
 8000672:	4b30      	ldr	r3, [pc, #192]	; (8000734 <SystemClock_Config+0xec>)
 8000674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000676:	4a2f      	ldr	r2, [pc, #188]	; (8000734 <SystemClock_Config+0xec>)
 8000678:	f023 0301 	bic.w	r3, r3, #1
 800067c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800067e:	4b2d      	ldr	r3, [pc, #180]	; (8000734 <SystemClock_Config+0xec>)
 8000680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	4b2b      	ldr	r3, [pc, #172]	; (8000738 <SystemClock_Config+0xf0>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	4a2a      	ldr	r2, [pc, #168]	; (8000738 <SystemClock_Config+0xf0>)
 800068e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000692:	6193      	str	r3, [r2, #24]
 8000694:	4b28      	ldr	r3, [pc, #160]	; (8000738 <SystemClock_Config+0xf0>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800069c:	603b      	str	r3, [r7, #0]
 800069e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006a0:	bf00      	nop
 80006a2:	4b25      	ldr	r3, [pc, #148]	; (8000738 <SystemClock_Config+0xf0>)
 80006a4:	699b      	ldr	r3, [r3, #24]
 80006a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006ae:	d1f8      	bne.n	80006a2 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b0:	2301      	movs	r3, #1
 80006b2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ba:	2302      	movs	r3, #2
 80006bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006be:	2302      	movs	r3, #2
 80006c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80006c2:	2305      	movs	r3, #5
 80006c4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 80006c6:	23a0      	movs	r3, #160	; 0xa0
 80006c8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 20;
 80006ce:	2314      	movs	r3, #20
 80006d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80006d6:	2308      	movs	r3, #8
 80006d8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006da:	2300      	movs	r3, #0
 80006dc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006e6:	4618      	mov	r0, r3
 80006e8:	f009 fdca 	bl	800a280 <HAL_RCC_OscConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006f2:	f000 feeb 	bl	80014cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f6:	233f      	movs	r3, #63	; 0x3f
 80006f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fa:	2303      	movs	r3, #3
 80006fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000702:	2308      	movs	r3, #8
 8000704:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000706:	2340      	movs	r3, #64	; 0x40
 8000708:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 800070a:	2350      	movs	r3, #80	; 0x50
 800070c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 800070e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000712:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000714:	2340      	movs	r3, #64	; 0x40
 8000716:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2102      	movs	r1, #2
 800071c:	4618      	mov	r0, r3
 800071e:	f00a fa09 	bl	800ab34 <HAL_RCC_ClockConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000728:	f000 fed0 	bl	80014cc <Error_Handler>
  }
}
 800072c:	bf00      	nop
 800072e:	3770      	adds	r7, #112	; 0x70
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	58000400 	.word	0x58000400
 8000738:	58024800 	.word	0x58024800

0800073c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b0b0      	sub	sp, #192	; 0xc0
 8000740:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000742:	463b      	mov	r3, r7
 8000744:	22c0      	movs	r2, #192	; 0xc0
 8000746:	2100      	movs	r1, #0
 8000748:	4618      	mov	r0, r3
 800074a:	f013 fb86 	bl	8013e5a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SDMMC;
 800074e:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8000752:	f04f 0300 	mov.w	r3, #0
 8000756:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 10;
 800075a:	230a      	movs	r3, #10
 800075c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 60;
 800075e:	233c      	movs	r3, #60	; 0x3c
 8000760:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000762:	2302      	movs	r3, #2
 8000764:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 8000766:	2304      	movs	r3, #4
 8000768:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800076a:	2302      	movs	r3, #2
 800076c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 800076e:	2340      	movs	r3, #64	; 0x40
 8000770:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000772:	2320      	movs	r3, #32
 8000774:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000776:	2300      	movs	r3, #0
 8000778:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 800077a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800077e:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000780:	2300      	movs	r3, #0
 8000782:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000786:	463b      	mov	r3, r7
 8000788:	4618      	mov	r0, r3
 800078a:	f00a fd5f 	bl	800b24c <HAL_RCCEx_PeriphCLKConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8000794:	f000 fe9a 	bl	80014cc <Error_Handler>
  }
}
 8000798:	bf00      	nop
 800079a:	37c0      	adds	r7, #192	; 0xc0
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08a      	sub	sp, #40	; 0x28
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007a6:	f107 031c 	add.w	r3, r7, #28
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007b2:	463b      	mov	r3, r7
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
 80007c0:	615a      	str	r2, [r3, #20]
 80007c2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007c4:	4b2f      	ldr	r3, [pc, #188]	; (8000884 <MX_ADC1_Init+0xe4>)
 80007c6:	4a30      	ldr	r2, [pc, #192]	; (8000888 <MX_ADC1_Init+0xe8>)
 80007c8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007ca:	4b2e      	ldr	r3, [pc, #184]	; (8000884 <MX_ADC1_Init+0xe4>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80007d0:	4b2c      	ldr	r3, [pc, #176]	; (8000884 <MX_ADC1_Init+0xe4>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007d6:	4b2b      	ldr	r3, [pc, #172]	; (8000884 <MX_ADC1_Init+0xe4>)
 80007d8:	2200      	movs	r2, #0
 80007da:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007dc:	4b29      	ldr	r3, [pc, #164]	; (8000884 <MX_ADC1_Init+0xe4>)
 80007de:	2204      	movs	r2, #4
 80007e0:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007e2:	4b28      	ldr	r3, [pc, #160]	; (8000884 <MX_ADC1_Init+0xe4>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007e8:	4b26      	ldr	r3, [pc, #152]	; (8000884 <MX_ADC1_Init+0xe4>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80007ee:	4b25      	ldr	r3, [pc, #148]	; (8000884 <MX_ADC1_Init+0xe4>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007f4:	4b23      	ldr	r3, [pc, #140]	; (8000884 <MX_ADC1_Init+0xe4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007fa:	4b22      	ldr	r3, [pc, #136]	; (8000884 <MX_ADC1_Init+0xe4>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000800:	4b20      	ldr	r3, [pc, #128]	; (8000884 <MX_ADC1_Init+0xe4>)
 8000802:	2200      	movs	r2, #0
 8000804:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000806:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <MX_ADC1_Init+0xe4>)
 8000808:	2200      	movs	r2, #0
 800080a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800080c:	4b1d      	ldr	r3, [pc, #116]	; (8000884 <MX_ADC1_Init+0xe4>)
 800080e:	2200      	movs	r2, #0
 8000810:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000812:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <MX_ADC1_Init+0xe4>)
 8000814:	2200      	movs	r2, #0
 8000816:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000818:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <MX_ADC1_Init+0xe4>)
 800081a:	2200      	movs	r2, #0
 800081c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000820:	4818      	ldr	r0, [pc, #96]	; (8000884 <MX_ADC1_Init+0xe4>)
 8000822:	f005 f9a1 	bl	8005b68 <HAL_ADC_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800082c:	f000 fe4e 	bl	80014cc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000834:	f107 031c 	add.w	r3, r7, #28
 8000838:	4619      	mov	r1, r3
 800083a:	4812      	ldr	r0, [pc, #72]	; (8000884 <MX_ADC1_Init+0xe4>)
 800083c:	f005 ffb8 	bl	80067b0 <HAL_ADCEx_MultiModeConfigChannel>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000846:	f000 fe41 	bl	80014cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800084a:	4b10      	ldr	r3, [pc, #64]	; (800088c <MX_ADC1_Init+0xec>)
 800084c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800084e:	2306      	movs	r3, #6
 8000850:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000856:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800085a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800085c:	2304      	movs	r3, #4
 800085e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000864:	2300      	movs	r3, #0
 8000866:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000868:	463b      	mov	r3, r7
 800086a:	4619      	mov	r1, r3
 800086c:	4805      	ldr	r0, [pc, #20]	; (8000884 <MX_ADC1_Init+0xe4>)
 800086e:	f005 fb1d 	bl	8005eac <HAL_ADC_ConfigChannel>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000878:	f000 fe28 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800087c:	bf00      	nop
 800087e:	3728      	adds	r7, #40	; 0x28
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	2400007c 	.word	0x2400007c
 8000888:	40022000 	.word	0x40022000
 800088c:	0c900008 	.word	0x0c900008

08000890 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000894:	4b1b      	ldr	r3, [pc, #108]	; (8000904 <MX_I2C1_Init+0x74>)
 8000896:	4a1c      	ldr	r2, [pc, #112]	; (8000908 <MX_I2C1_Init+0x78>)
 8000898:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800089a:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <MX_I2C1_Init+0x74>)
 800089c:	4a1b      	ldr	r2, [pc, #108]	; (800090c <MX_I2C1_Init+0x7c>)
 800089e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008a0:	4b18      	ldr	r3, [pc, #96]	; (8000904 <MX_I2C1_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008a6:	4b17      	ldr	r3, [pc, #92]	; (8000904 <MX_I2C1_Init+0x74>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008ac:	4b15      	ldr	r3, [pc, #84]	; (8000904 <MX_I2C1_Init+0x74>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008b2:	4b14      	ldr	r3, [pc, #80]	; (8000904 <MX_I2C1_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <MX_I2C1_Init+0x74>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_I2C1_Init+0x74>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_I2C1_Init+0x74>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008ca:	480e      	ldr	r0, [pc, #56]	; (8000904 <MX_I2C1_Init+0x74>)
 80008cc:	f009 f964 	bl	8009b98 <HAL_I2C_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008d6:	f000 fdf9 	bl	80014cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008da:	2100      	movs	r1, #0
 80008dc:	4809      	ldr	r0, [pc, #36]	; (8000904 <MX_I2C1_Init+0x74>)
 80008de:	f009 f9eb 	bl	8009cb8 <HAL_I2CEx_ConfigAnalogFilter>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008e8:	f000 fdf0 	bl	80014cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008ec:	2100      	movs	r1, #0
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_I2C1_Init+0x74>)
 80008f0:	f009 fa2d 	bl	8009d4e <HAL_I2CEx_ConfigDigitalFilter>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008fa:	f000 fde7 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	240000e0 	.word	0x240000e0
 8000908:	40005400 	.word	0x40005400
 800090c:	00c0eaff 	.word	0x00c0eaff

08000910 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000914:	4b22      	ldr	r3, [pc, #136]	; (80009a0 <MX_LPUART1_UART_Init+0x90>)
 8000916:	4a23      	ldr	r2, [pc, #140]	; (80009a4 <MX_LPUART1_UART_Init+0x94>)
 8000918:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800091a:	4b21      	ldr	r3, [pc, #132]	; (80009a0 <MX_LPUART1_UART_Init+0x90>)
 800091c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000920:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000922:	4b1f      	ldr	r3, [pc, #124]	; (80009a0 <MX_LPUART1_UART_Init+0x90>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000928:	4b1d      	ldr	r3, [pc, #116]	; (80009a0 <MX_LPUART1_UART_Init+0x90>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800092e:	4b1c      	ldr	r3, [pc, #112]	; (80009a0 <MX_LPUART1_UART_Init+0x90>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000934:	4b1a      	ldr	r3, [pc, #104]	; (80009a0 <MX_LPUART1_UART_Init+0x90>)
 8000936:	220c      	movs	r2, #12
 8000938:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093a:	4b19      	ldr	r3, [pc, #100]	; (80009a0 <MX_LPUART1_UART_Init+0x90>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000940:	4b17      	ldr	r3, [pc, #92]	; (80009a0 <MX_LPUART1_UART_Init+0x90>)
 8000942:	2200      	movs	r2, #0
 8000944:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000946:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <MX_LPUART1_UART_Init+0x90>)
 8000948:	2200      	movs	r2, #0
 800094a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800094c:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <MX_LPUART1_UART_Init+0x90>)
 800094e:	2200      	movs	r2, #0
 8000950:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000952:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <MX_LPUART1_UART_Init+0x90>)
 8000954:	2200      	movs	r2, #0
 8000956:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000958:	4811      	ldr	r0, [pc, #68]	; (80009a0 <MX_LPUART1_UART_Init+0x90>)
 800095a:	f010 f995 	bl	8010c88 <HAL_UART_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000964:	f000 fdb2 	bl	80014cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000968:	2100      	movs	r1, #0
 800096a:	480d      	ldr	r0, [pc, #52]	; (80009a0 <MX_LPUART1_UART_Init+0x90>)
 800096c:	f012 f8d0 	bl	8012b10 <HAL_UARTEx_SetTxFifoThreshold>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000976:	f000 fda9 	bl	80014cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800097a:	2100      	movs	r1, #0
 800097c:	4808      	ldr	r0, [pc, #32]	; (80009a0 <MX_LPUART1_UART_Init+0x90>)
 800097e:	f012 f905 	bl	8012b8c <HAL_UARTEx_SetRxFifoThreshold>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000988:	f000 fda0 	bl	80014cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800098c:	4804      	ldr	r0, [pc, #16]	; (80009a0 <MX_LPUART1_UART_Init+0x90>)
 800098e:	f012 f886 	bl	8012a9e <HAL_UARTEx_DisableFifoMode>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000998:	f000 fd98 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	24000134 	.word	0x24000134
 80009a4:	58000c00 	.word	0x58000c00

080009a8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80009ac:	4b22      	ldr	r3, [pc, #136]	; (8000a38 <MX_UART4_Init+0x90>)
 80009ae:	4a23      	ldr	r2, [pc, #140]	; (8000a3c <MX_UART4_Init+0x94>)
 80009b0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80009b2:	4b21      	ldr	r3, [pc, #132]	; (8000a38 <MX_UART4_Init+0x90>)
 80009b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80009ba:	4b1f      	ldr	r3, [pc, #124]	; (8000a38 <MX_UART4_Init+0x90>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80009c0:	4b1d      	ldr	r3, [pc, #116]	; (8000a38 <MX_UART4_Init+0x90>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80009c6:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <MX_UART4_Init+0x90>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80009cc:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <MX_UART4_Init+0x90>)
 80009ce:	220c      	movs	r2, #12
 80009d0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d2:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <MX_UART4_Init+0x90>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d8:	4b17      	ldr	r3, [pc, #92]	; (8000a38 <MX_UART4_Init+0x90>)
 80009da:	2200      	movs	r2, #0
 80009dc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009de:	4b16      	ldr	r3, [pc, #88]	; (8000a38 <MX_UART4_Init+0x90>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009e4:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <MX_UART4_Init+0x90>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ea:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <MX_UART4_Init+0x90>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80009f0:	4811      	ldr	r0, [pc, #68]	; (8000a38 <MX_UART4_Init+0x90>)
 80009f2:	f010 f949 	bl	8010c88 <HAL_UART_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80009fc:	f000 fd66 	bl	80014cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a00:	2100      	movs	r1, #0
 8000a02:	480d      	ldr	r0, [pc, #52]	; (8000a38 <MX_UART4_Init+0x90>)
 8000a04:	f012 f884 	bl	8012b10 <HAL_UARTEx_SetTxFifoThreshold>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000a0e:	f000 fd5d 	bl	80014cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a12:	2100      	movs	r1, #0
 8000a14:	4808      	ldr	r0, [pc, #32]	; (8000a38 <MX_UART4_Init+0x90>)
 8000a16:	f012 f8b9 	bl	8012b8c <HAL_UARTEx_SetRxFifoThreshold>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000a20:	f000 fd54 	bl	80014cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000a24:	4804      	ldr	r0, [pc, #16]	; (8000a38 <MX_UART4_Init+0x90>)
 8000a26:	f012 f83a 	bl	8012a9e <HAL_UARTEx_DisableFifoMode>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000a30:	f000 fd4c 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	240001c8 	.word	0x240001c8
 8000a3c:	40004c00 	.word	0x40004c00

08000a40 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000a44:	4b22      	ldr	r3, [pc, #136]	; (8000ad0 <MX_UART5_Init+0x90>)
 8000a46:	4a23      	ldr	r2, [pc, #140]	; (8000ad4 <MX_UART5_Init+0x94>)
 8000a48:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000a4a:	4b21      	ldr	r3, [pc, #132]	; (8000ad0 <MX_UART5_Init+0x90>)
 8000a4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a50:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000a52:	4b1f      	ldr	r3, [pc, #124]	; (8000ad0 <MX_UART5_Init+0x90>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000a58:	4b1d      	ldr	r3, [pc, #116]	; (8000ad0 <MX_UART5_Init+0x90>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000a5e:	4b1c      	ldr	r3, [pc, #112]	; (8000ad0 <MX_UART5_Init+0x90>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000a64:	4b1a      	ldr	r3, [pc, #104]	; (8000ad0 <MX_UART5_Init+0x90>)
 8000a66:	220c      	movs	r2, #12
 8000a68:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6a:	4b19      	ldr	r3, [pc, #100]	; (8000ad0 <MX_UART5_Init+0x90>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a70:	4b17      	ldr	r3, [pc, #92]	; (8000ad0 <MX_UART5_Init+0x90>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a76:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <MX_UART5_Init+0x90>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a7c:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <MX_UART5_Init+0x90>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a82:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <MX_UART5_Init+0x90>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000a88:	4811      	ldr	r0, [pc, #68]	; (8000ad0 <MX_UART5_Init+0x90>)
 8000a8a:	f010 f8fd 	bl	8010c88 <HAL_UART_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000a94:	f000 fd1a 	bl	80014cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a98:	2100      	movs	r1, #0
 8000a9a:	480d      	ldr	r0, [pc, #52]	; (8000ad0 <MX_UART5_Init+0x90>)
 8000a9c:	f012 f838 	bl	8012b10 <HAL_UARTEx_SetTxFifoThreshold>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8000aa6:	f000 fd11 	bl	80014cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4808      	ldr	r0, [pc, #32]	; (8000ad0 <MX_UART5_Init+0x90>)
 8000aae:	f012 f86d 	bl	8012b8c <HAL_UARTEx_SetRxFifoThreshold>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8000ab8:	f000 fd08 	bl	80014cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8000abc:	4804      	ldr	r0, [pc, #16]	; (8000ad0 <MX_UART5_Init+0x90>)
 8000abe:	f011 ffee 	bl	8012a9e <HAL_UARTEx_DisableFifoMode>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8000ac8:	f000 fd00 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	2400025c 	.word	0x2400025c
 8000ad4:	40005000 	.word	0x40005000

08000ad8 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000adc:	4b22      	ldr	r3, [pc, #136]	; (8000b68 <MX_UART7_Init+0x90>)
 8000ade:	4a23      	ldr	r2, [pc, #140]	; (8000b6c <MX_UART7_Init+0x94>)
 8000ae0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000ae2:	4b21      	ldr	r3, [pc, #132]	; (8000b68 <MX_UART7_Init+0x90>)
 8000ae4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ae8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000aea:	4b1f      	ldr	r3, [pc, #124]	; (8000b68 <MX_UART7_Init+0x90>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000af0:	4b1d      	ldr	r3, [pc, #116]	; (8000b68 <MX_UART7_Init+0x90>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000af6:	4b1c      	ldr	r3, [pc, #112]	; (8000b68 <MX_UART7_Init+0x90>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000afc:	4b1a      	ldr	r3, [pc, #104]	; (8000b68 <MX_UART7_Init+0x90>)
 8000afe:	220c      	movs	r2, #12
 8000b00:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b02:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <MX_UART7_Init+0x90>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b08:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <MX_UART7_Init+0x90>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b0e:	4b16      	ldr	r3, [pc, #88]	; (8000b68 <MX_UART7_Init+0x90>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b14:	4b14      	ldr	r3, [pc, #80]	; (8000b68 <MX_UART7_Init+0x90>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b1a:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <MX_UART7_Init+0x90>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000b20:	4811      	ldr	r0, [pc, #68]	; (8000b68 <MX_UART7_Init+0x90>)
 8000b22:	f010 f8b1 	bl	8010c88 <HAL_UART_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8000b2c:	f000 fcce 	bl	80014cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b30:	2100      	movs	r1, #0
 8000b32:	480d      	ldr	r0, [pc, #52]	; (8000b68 <MX_UART7_Init+0x90>)
 8000b34:	f011 ffec 	bl	8012b10 <HAL_UARTEx_SetTxFifoThreshold>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8000b3e:	f000 fcc5 	bl	80014cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b42:	2100      	movs	r1, #0
 8000b44:	4808      	ldr	r0, [pc, #32]	; (8000b68 <MX_UART7_Init+0x90>)
 8000b46:	f012 f821 	bl	8012b8c <HAL_UARTEx_SetRxFifoThreshold>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8000b50:	f000 fcbc 	bl	80014cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8000b54:	4804      	ldr	r0, [pc, #16]	; (8000b68 <MX_UART7_Init+0x90>)
 8000b56:	f011 ffa2 	bl	8012a9e <HAL_UARTEx_DisableFifoMode>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8000b60:	f000 fcb4 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	240002f0 	.word	0x240002f0
 8000b6c:	40007800 	.word	0x40007800

08000b70 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b74:	4b22      	ldr	r3, [pc, #136]	; (8000c00 <MX_USART3_UART_Init+0x90>)
 8000b76:	4a23      	ldr	r2, [pc, #140]	; (8000c04 <MX_USART3_UART_Init+0x94>)
 8000b78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b7a:	4b21      	ldr	r3, [pc, #132]	; (8000c00 <MX_USART3_UART_Init+0x90>)
 8000b7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b82:	4b1f      	ldr	r3, [pc, #124]	; (8000c00 <MX_USART3_UART_Init+0x90>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b88:	4b1d      	ldr	r3, [pc, #116]	; (8000c00 <MX_USART3_UART_Init+0x90>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b8e:	4b1c      	ldr	r3, [pc, #112]	; (8000c00 <MX_USART3_UART_Init+0x90>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b94:	4b1a      	ldr	r3, [pc, #104]	; (8000c00 <MX_USART3_UART_Init+0x90>)
 8000b96:	220c      	movs	r2, #12
 8000b98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b9a:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <MX_USART3_UART_Init+0x90>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba0:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <MX_USART3_UART_Init+0x90>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ba6:	4b16      	ldr	r3, [pc, #88]	; (8000c00 <MX_USART3_UART_Init+0x90>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bac:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <MX_USART3_UART_Init+0x90>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bb2:	4b13      	ldr	r3, [pc, #76]	; (8000c00 <MX_USART3_UART_Init+0x90>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bb8:	4811      	ldr	r0, [pc, #68]	; (8000c00 <MX_USART3_UART_Init+0x90>)
 8000bba:	f010 f865 	bl	8010c88 <HAL_UART_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000bc4:	f000 fc82 	bl	80014cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bc8:	2100      	movs	r1, #0
 8000bca:	480d      	ldr	r0, [pc, #52]	; (8000c00 <MX_USART3_UART_Init+0x90>)
 8000bcc:	f011 ffa0 	bl	8012b10 <HAL_UARTEx_SetTxFifoThreshold>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000bd6:	f000 fc79 	bl	80014cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4808      	ldr	r0, [pc, #32]	; (8000c00 <MX_USART3_UART_Init+0x90>)
 8000bde:	f011 ffd5 	bl	8012b8c <HAL_UARTEx_SetRxFifoThreshold>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000be8:	f000 fc70 	bl	80014cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000bec:	4804      	ldr	r0, [pc, #16]	; (8000c00 <MX_USART3_UART_Init+0x90>)
 8000bee:	f011 ff56 	bl	8012a9e <HAL_UARTEx_DisableFifoMode>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000bf8:	f000 fc68 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	24000384 	.word	0x24000384
 8000c04:	40004800 	.word	0x40004800

08000c08 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000c0c:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <MX_QUADSPI_Init+0x50>)
 8000c0e:	4a13      	ldr	r2, [pc, #76]	; (8000c5c <MX_QUADSPI_Init+0x54>)
 8000c10:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000c12:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <MX_QUADSPI_Init+0x50>)
 8000c14:	22ff      	movs	r2, #255	; 0xff
 8000c16:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000c18:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <MX_QUADSPI_Init+0x50>)
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <MX_QUADSPI_Init+0x50>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000c24:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <MX_QUADSPI_Init+0x50>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000c2a:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <MX_QUADSPI_Init+0x50>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000c30:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <MX_QUADSPI_Init+0x50>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000c36:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <MX_QUADSPI_Init+0x50>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <MX_QUADSPI_Init+0x50>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000c42:	4805      	ldr	r0, [pc, #20]	; (8000c58 <MX_QUADSPI_Init+0x50>)
 8000c44:	f009 fa62 	bl	800a10c <HAL_QSPI_Init>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000c4e:	f000 fc3d 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	240005f8 	.word	0x240005f8
 8000c5c:	52005000 	.word	0x52005000

08000c60 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000c64:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <MX_SDMMC1_SD_Init+0x40>)
 8000c66:	4a0f      	ldr	r2, [pc, #60]	; (8000ca4 <MX_SDMMC1_SD_Init+0x44>)
 8000c68:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000c6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ca0 <MX_SDMMC1_SD_Init+0x40>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000c70:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <MX_SDMMC1_SD_Init+0x40>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000c76:	4b0a      	ldr	r3, [pc, #40]	; (8000ca0 <MX_SDMMC1_SD_Init+0x40>)
 8000c78:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c7c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000c7e:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <MX_SDMMC1_SD_Init+0x40>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <MX_SDMMC1_SD_Init+0x40>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000c8a:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <MX_SDMMC1_SD_Init+0x40>)
 8000c8c:	f00c ffdc 	bl	800dc48 <HAL_SD_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8000c96:	f000 fc19 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	24000644 	.word	0x24000644
 8000ca4:	52007000 	.word	0x52007000

08000ca8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000cac:	4b27      	ldr	r3, [pc, #156]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000cae:	4a28      	ldr	r2, [pc, #160]	; (8000d50 <MX_SPI1_Init+0xa8>)
 8000cb0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cb2:	4b26      	ldr	r3, [pc, #152]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000cb4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000cb8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cba:	4b24      	ldr	r3, [pc, #144]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000cc0:	4b22      	ldr	r3, [pc, #136]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000cc2:	2203      	movs	r2, #3
 8000cc4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cc6:	4b21      	ldr	r3, [pc, #132]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ccc:	4b1f      	ldr	r3, [pc, #124]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cd2:	4b1e      	ldr	r3, [pc, #120]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000cd4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000cd8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cda:	4b1c      	ldr	r3, [pc, #112]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ce6:	4b19      	ldr	r3, [pc, #100]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cec:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000cf2:	4b16      	ldr	r3, [pc, #88]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cf8:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000cfa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cfe:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d00:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d06:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d12:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d18:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d1e:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d24:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d2a:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d36:	4805      	ldr	r0, [pc, #20]	; (8000d4c <MX_SPI1_Init+0xa4>)
 8000d38:	f00d fff4 	bl	800ed24 <HAL_SPI_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000d42:	f000 fbc3 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	240006c0 	.word	0x240006c0
 8000d50:	40013000 	.word	0x40013000

08000d54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	; 0x28
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d5a:	f107 031c 	add.w	r3, r7, #28
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d66:	463b      	mov	r3, r7
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
 8000d74:	615a      	str	r2, [r3, #20]
 8000d76:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d78:	4b37      	ldr	r3, [pc, #220]	; (8000e58 <MX_TIM2_Init+0x104>)
 8000d7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d80:	4b35      	ldr	r3, [pc, #212]	; (8000e58 <MX_TIM2_Init+0x104>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d86:	4b34      	ldr	r3, [pc, #208]	; (8000e58 <MX_TIM2_Init+0x104>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000d8c:	4b32      	ldr	r3, [pc, #200]	; (8000e58 <MX_TIM2_Init+0x104>)
 8000d8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d92:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d94:	4b30      	ldr	r3, [pc, #192]	; (8000e58 <MX_TIM2_Init+0x104>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d9a:	4b2f      	ldr	r3, [pc, #188]	; (8000e58 <MX_TIM2_Init+0x104>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000da0:	482d      	ldr	r0, [pc, #180]	; (8000e58 <MX_TIM2_Init+0x104>)
 8000da2:	f00e f9b6 	bl	800f112 <HAL_TIM_PWM_Init>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000dac:	f000 fb8e 	bl	80014cc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000db0:	4829      	ldr	r0, [pc, #164]	; (8000e58 <MX_TIM2_Init+0x104>)
 8000db2:	f00e f94d 	bl	800f050 <HAL_TIM_OC_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000dbc:	f000 fb86 	bl	80014cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dc8:	f107 031c 	add.w	r3, r7, #28
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4822      	ldr	r0, [pc, #136]	; (8000e58 <MX_TIM2_Init+0x104>)
 8000dd0:	f00f feae 	bl	8010b30 <HAL_TIMEx_MasterConfigSynchronization>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000dda:	f000 fb77 	bl	80014cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dde:	2360      	movs	r3, #96	; 0x60
 8000de0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dee:	463b      	mov	r3, r7
 8000df0:	2200      	movs	r2, #0
 8000df2:	4619      	mov	r1, r3
 8000df4:	4818      	ldr	r0, [pc, #96]	; (8000e58 <MX_TIM2_Init+0x104>)
 8000df6:	f00e fec5 	bl	800fb84 <HAL_TIM_PWM_ConfigChannel>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000e00:	f000 fb64 	bl	80014cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e04:	463b      	mov	r3, r7
 8000e06:	2204      	movs	r2, #4
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4813      	ldr	r0, [pc, #76]	; (8000e58 <MX_TIM2_Init+0x104>)
 8000e0c:	f00e feba 	bl	800fb84 <HAL_TIM_PWM_ConfigChannel>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8000e16:	f000 fb59 	bl	80014cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e1a:	463b      	mov	r3, r7
 8000e1c:	2208      	movs	r2, #8
 8000e1e:	4619      	mov	r1, r3
 8000e20:	480d      	ldr	r0, [pc, #52]	; (8000e58 <MX_TIM2_Init+0x104>)
 8000e22:	f00e feaf 	bl	800fb84 <HAL_TIM_PWM_ConfigChannel>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000e2c:	f000 fb4e 	bl	80014cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000e30:	2300      	movs	r3, #0
 8000e32:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e34:	463b      	mov	r3, r7
 8000e36:	220c      	movs	r2, #12
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4807      	ldr	r0, [pc, #28]	; (8000e58 <MX_TIM2_Init+0x104>)
 8000e3c:	f00e fd8c 	bl	800f958 <HAL_TIM_OC_ConfigChannel>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 8000e46:	f000 fb41 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e4a:	4803      	ldr	r0, [pc, #12]	; (8000e58 <MX_TIM2_Init+0x104>)
 8000e4c:	f004 f9d8 	bl	8005200 <HAL_TIM_MspPostInit>

}
 8000e50:	bf00      	nop
 8000e52:	3728      	adds	r7, #40	; 0x28
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	24000748 	.word	0x24000748

08000e5c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08a      	sub	sp, #40	; 0x28
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e62:	f107 031c 	add.w	r3, r7, #28
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e6e:	463b      	mov	r3, r7
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
 8000e7c:	615a      	str	r2, [r3, #20]
 8000e7e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e80:	4b27      	ldr	r3, [pc, #156]	; (8000f20 <MX_TIM3_Init+0xc4>)
 8000e82:	4a28      	ldr	r2, [pc, #160]	; (8000f24 <MX_TIM3_Init+0xc8>)
 8000e84:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e86:	4b26      	ldr	r3, [pc, #152]	; (8000f20 <MX_TIM3_Init+0xc4>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8c:	4b24      	ldr	r3, [pc, #144]	; (8000f20 <MX_TIM3_Init+0xc4>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e92:	4b23      	ldr	r3, [pc, #140]	; (8000f20 <MX_TIM3_Init+0xc4>)
 8000e94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e98:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e9a:	4b21      	ldr	r3, [pc, #132]	; (8000f20 <MX_TIM3_Init+0xc4>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea0:	4b1f      	ldr	r3, [pc, #124]	; (8000f20 <MX_TIM3_Init+0xc4>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ea6:	481e      	ldr	r0, [pc, #120]	; (8000f20 <MX_TIM3_Init+0xc4>)
 8000ea8:	f00e f933 	bl	800f112 <HAL_TIM_PWM_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000eb2:	f000 fb0b 	bl	80014cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ebe:	f107 031c 	add.w	r3, r7, #28
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4816      	ldr	r0, [pc, #88]	; (8000f20 <MX_TIM3_Init+0xc4>)
 8000ec6:	f00f fe33 	bl	8010b30 <HAL_TIMEx_MasterConfigSynchronization>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000ed0:	f000 fafc 	bl	80014cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ed4:	2360      	movs	r3, #96	; 0x60
 8000ed6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000edc:	2300      	movs	r3, #0
 8000ede:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ee4:	463b      	mov	r3, r7
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	4619      	mov	r1, r3
 8000eea:	480d      	ldr	r0, [pc, #52]	; (8000f20 <MX_TIM3_Init+0xc4>)
 8000eec:	f00e fe4a 	bl	800fb84 <HAL_TIM_PWM_ConfigChannel>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000ef6:	f000 fae9 	bl	80014cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000efa:	463b      	mov	r3, r7
 8000efc:	2204      	movs	r2, #4
 8000efe:	4619      	mov	r1, r3
 8000f00:	4807      	ldr	r0, [pc, #28]	; (8000f20 <MX_TIM3_Init+0xc4>)
 8000f02:	f00e fe3f 	bl	800fb84 <HAL_TIM_PWM_ConfigChannel>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000f0c:	f000 fade 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f10:	4803      	ldr	r0, [pc, #12]	; (8000f20 <MX_TIM3_Init+0xc4>)
 8000f12:	f004 f975 	bl	8005200 <HAL_TIM_MspPostInit>

}
 8000f16:	bf00      	nop
 8000f18:	3728      	adds	r7, #40	; 0x28
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	24000794 	.word	0x24000794
 8000f24:	40000400 	.word	0x40000400

08000f28 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08c      	sub	sp, #48	; 0x30
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000f2e:	f107 031c 	add.w	r3, r7, #28
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
 8000f3c:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f3e:	f107 030c 	add.w	r3, r7, #12
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f4c:	463b      	mov	r3, r7
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f56:	4b33      	ldr	r3, [pc, #204]	; (8001024 <MX_TIM5_Init+0xfc>)
 8000f58:	4a33      	ldr	r2, [pc, #204]	; (8001028 <MX_TIM5_Init+0x100>)
 8000f5a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000f5c:	4b31      	ldr	r3, [pc, #196]	; (8001024 <MX_TIM5_Init+0xfc>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f62:	4b30      	ldr	r3, [pc, #192]	; (8001024 <MX_TIM5_Init+0xfc>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000f68:	4b2e      	ldr	r3, [pc, #184]	; (8001024 <MX_TIM5_Init+0xfc>)
 8000f6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f6e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f70:	4b2c      	ldr	r3, [pc, #176]	; (8001024 <MX_TIM5_Init+0xfc>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f76:	4b2b      	ldr	r3, [pc, #172]	; (8001024 <MX_TIM5_Init+0xfc>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8000f7c:	4829      	ldr	r0, [pc, #164]	; (8001024 <MX_TIM5_Init+0xfc>)
 8000f7e:	f00e f91f 	bl	800f1c0 <HAL_TIM_IC_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 8000f88:	f000 faa0 	bl	80014cc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000f8c:	2304      	movs	r3, #4
 8000f8e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000f90:	2350      	movs	r3, #80	; 0x50
 8000f92:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f94:	2300      	movs	r3, #0
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8000fa0:	f107 031c 	add.w	r3, r7, #28
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	481f      	ldr	r0, [pc, #124]	; (8001024 <MX_TIM5_Init+0xfc>)
 8000fa8:	f00e ff00 	bl	800fdac <HAL_TIM_SlaveConfigSynchro>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8000fb2:	f000 fa8b 	bl	80014cc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000fc6:	f107 030c 	add.w	r3, r7, #12
 8000fca:	2200      	movs	r2, #0
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4815      	ldr	r0, [pc, #84]	; (8001024 <MX_TIM5_Init+0xfc>)
 8000fd0:	f00e fd3c 	bl	800fa4c <HAL_TIM_IC_ConfigChannel>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_TIM5_Init+0xb6>
  {
    Error_Handler();
 8000fda:	f000 fa77 	bl	80014cc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000fe6:	f107 030c 	add.w	r3, r7, #12
 8000fea:	2204      	movs	r2, #4
 8000fec:	4619      	mov	r1, r3
 8000fee:	480d      	ldr	r0, [pc, #52]	; (8001024 <MX_TIM5_Init+0xfc>)
 8000ff0:	f00e fd2c 	bl	800fa4c <HAL_TIM_IC_ConfigChannel>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8000ffa:	f000 fa67 	bl	80014cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ffe:	2300      	movs	r3, #0
 8001000:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001002:	2300      	movs	r3, #0
 8001004:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001006:	463b      	mov	r3, r7
 8001008:	4619      	mov	r1, r3
 800100a:	4806      	ldr	r0, [pc, #24]	; (8001024 <MX_TIM5_Init+0xfc>)
 800100c:	f00f fd90 	bl	8010b30 <HAL_TIMEx_MasterConfigSynchronization>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM5_Init+0xf2>
  {
    Error_Handler();
 8001016:	f000 fa59 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800101a:	bf00      	nop
 800101c:	3730      	adds	r7, #48	; 0x30
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	240007e0 	.word	0x240007e0
 8001028:	40000c00 	.word	0x40000c00

0800102c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800103c:	4b15      	ldr	r3, [pc, #84]	; (8001094 <MX_TIM6_Init+0x68>)
 800103e:	4a16      	ldr	r2, [pc, #88]	; (8001098 <MX_TIM6_Init+0x6c>)
 8001040:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9999;
 8001042:	4b14      	ldr	r3, [pc, #80]	; (8001094 <MX_TIM6_Init+0x68>)
 8001044:	f242 720f 	movw	r2, #9999	; 0x270f
 8001048:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800104a:	4b12      	ldr	r3, [pc, #72]	; (8001094 <MX_TIM6_Init+0x68>)
 800104c:	2200      	movs	r2, #0
 800104e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 499;
 8001050:	4b10      	ldr	r3, [pc, #64]	; (8001094 <MX_TIM6_Init+0x68>)
 8001052:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001056:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001058:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <MX_TIM6_Init+0x68>)
 800105a:	2280      	movs	r2, #128	; 0x80
 800105c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800105e:	480d      	ldr	r0, [pc, #52]	; (8001094 <MX_TIM6_Init+0x68>)
 8001060:	f00d ff9f 	bl	800efa2 <HAL_TIM_Base_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800106a:	f000 fa2f 	bl	80014cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800106e:	2300      	movs	r3, #0
 8001070:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001076:	1d3b      	adds	r3, r7, #4
 8001078:	4619      	mov	r1, r3
 800107a:	4806      	ldr	r0, [pc, #24]	; (8001094 <MX_TIM6_Init+0x68>)
 800107c:	f00f fd58 	bl	8010b30 <HAL_TIMEx_MasterConfigSynchronization>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001086:	f000 fa21 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800108a:	bf00      	nop
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	2400082c 	.word	0x2400082c
 8001098:	40001000 	.word	0x40001000

0800109c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80010ac:	4b15      	ldr	r3, [pc, #84]	; (8001104 <MX_TIM7_Init+0x68>)
 80010ae:	4a16      	ldr	r2, [pc, #88]	; (8001108 <MX_TIM7_Init+0x6c>)
 80010b0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9999;
 80010b2:	4b14      	ldr	r3, [pc, #80]	; (8001104 <MX_TIM7_Init+0x68>)
 80010b4:	f242 720f 	movw	r2, #9999	; 0x270f
 80010b8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ba:	4b12      	ldr	r3, [pc, #72]	; (8001104 <MX_TIM7_Init+0x68>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 80010c0:	4b10      	ldr	r3, [pc, #64]	; (8001104 <MX_TIM7_Init+0x68>)
 80010c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010c6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010c8:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <MX_TIM7_Init+0x68>)
 80010ca:	2280      	movs	r2, #128	; 0x80
 80010cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80010ce:	480d      	ldr	r0, [pc, #52]	; (8001104 <MX_TIM7_Init+0x68>)
 80010d0:	f00d ff67 	bl	800efa2 <HAL_TIM_Base_Init>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80010da:	f000 f9f7 	bl	80014cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010de:	2300      	movs	r3, #0
 80010e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	4619      	mov	r1, r3
 80010ea:	4806      	ldr	r0, [pc, #24]	; (8001104 <MX_TIM7_Init+0x68>)
 80010ec:	f00f fd20 	bl	8010b30 <HAL_TIMEx_MasterConfigSynchronization>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80010f6:	f000 f9e9 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80010fa:	bf00      	nop
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	24000878 	.word	0x24000878
 8001108:	40001400 	.word	0x40001400

0800110c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08c      	sub	sp, #48	; 0x30
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001112:	f107 031c 	add.w	r3, r7, #28
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]
 8001120:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001122:	f107 030c 	add.w	r3, r7, #12
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001130:	463b      	mov	r3, r7
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800113a:	4b34      	ldr	r3, [pc, #208]	; (800120c <MX_TIM15_Init+0x100>)
 800113c:	4a34      	ldr	r2, [pc, #208]	; (8001210 <MX_TIM15_Init+0x104>)
 800113e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001140:	4b32      	ldr	r3, [pc, #200]	; (800120c <MX_TIM15_Init+0x100>)
 8001142:	2200      	movs	r2, #0
 8001144:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001146:	4b31      	ldr	r3, [pc, #196]	; (800120c <MX_TIM15_Init+0x100>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 800114c:	4b2f      	ldr	r3, [pc, #188]	; (800120c <MX_TIM15_Init+0x100>)
 800114e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001152:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001154:	4b2d      	ldr	r3, [pc, #180]	; (800120c <MX_TIM15_Init+0x100>)
 8001156:	2200      	movs	r2, #0
 8001158:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800115a:	4b2c      	ldr	r3, [pc, #176]	; (800120c <MX_TIM15_Init+0x100>)
 800115c:	2200      	movs	r2, #0
 800115e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001160:	4b2a      	ldr	r3, [pc, #168]	; (800120c <MX_TIM15_Init+0x100>)
 8001162:	2200      	movs	r2, #0
 8001164:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8001166:	4829      	ldr	r0, [pc, #164]	; (800120c <MX_TIM15_Init+0x100>)
 8001168:	f00e f82a 	bl	800f1c0 <HAL_TIM_IC_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM15_Init+0x6a>
  {
    Error_Handler();
 8001172:	f000 f9ab 	bl	80014cc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001176:	2304      	movs	r3, #4
 8001178:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800117a:	2350      	movs	r3, #80	; 0x50
 800117c:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800117e:	2300      	movs	r3, #0
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001182:	2300      	movs	r3, #0
 8001184:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 800118a:	f107 031c 	add.w	r3, r7, #28
 800118e:	4619      	mov	r1, r3
 8001190:	481e      	ldr	r0, [pc, #120]	; (800120c <MX_TIM15_Init+0x100>)
 8001192:	f00e fe0b 	bl	800fdac <HAL_TIM_SlaveConfigSynchro>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 800119c:	f000 f996 	bl	80014cc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80011a4:	2301      	movs	r3, #1
 80011a6:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80011b0:	f107 030c 	add.w	r3, r7, #12
 80011b4:	2200      	movs	r2, #0
 80011b6:	4619      	mov	r1, r3
 80011b8:	4814      	ldr	r0, [pc, #80]	; (800120c <MX_TIM15_Init+0x100>)
 80011ba:	f00e fc47 	bl	800fa4c <HAL_TIM_IC_ConfigChannel>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_TIM15_Init+0xbc>
  {
    Error_Handler();
 80011c4:	f000 f982 	bl	80014cc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80011c8:	2302      	movs	r3, #2
 80011ca:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80011cc:	2302      	movs	r3, #2
 80011ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80011d0:	f107 030c 	add.w	r3, r7, #12
 80011d4:	2204      	movs	r2, #4
 80011d6:	4619      	mov	r1, r3
 80011d8:	480c      	ldr	r0, [pc, #48]	; (800120c <MX_TIM15_Init+0x100>)
 80011da:	f00e fc37 	bl	800fa4c <HAL_TIM_IC_ConfigChannel>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM15_Init+0xdc>
  {
    Error_Handler();
 80011e4:	f000 f972 	bl	80014cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e8:	2300      	movs	r3, #0
 80011ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ec:	2300      	movs	r3, #0
 80011ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80011f0:	463b      	mov	r3, r7
 80011f2:	4619      	mov	r1, r3
 80011f4:	4805      	ldr	r0, [pc, #20]	; (800120c <MX_TIM15_Init+0x100>)
 80011f6:	f00f fc9b 	bl	8010b30 <HAL_TIMEx_MasterConfigSynchronization>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM15_Init+0xf8>
  {
    Error_Handler();
 8001200:	f000 f964 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001204:	bf00      	nop
 8001206:	3730      	adds	r7, #48	; 0x30
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	240008c4 	.word	0x240008c4
 8001210:	40014000 	.word	0x40014000

08001214 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001218:	4b15      	ldr	r3, [pc, #84]	; (8001270 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800121a:	4a16      	ldr	r2, [pc, #88]	; (8001274 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800121c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800121e:	4b14      	ldr	r3, [pc, #80]	; (8001270 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001220:	2209      	movs	r2, #9
 8001222:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001224:	4b12      	ldr	r3, [pc, #72]	; (8001270 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001226:	2202      	movs	r2, #2
 8001228:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800122a:	4b11      	ldr	r3, [pc, #68]	; (8001270 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800122c:	2200      	movs	r2, #0
 800122e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001230:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001232:	2202      	movs	r2, #2
 8001234:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001236:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001238:	2200      	movs	r2, #0
 800123a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800123e:	2200      	movs	r2, #0
 8001240:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001242:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001244:	2200      	movs	r2, #0
 8001246:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001248:	4b09      	ldr	r3, [pc, #36]	; (8001270 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800124a:	2200      	movs	r2, #0
 800124c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800124e:	4b08      	ldr	r3, [pc, #32]	; (8001270 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001250:	2200      	movs	r2, #0
 8001252:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001256:	2200      	movs	r2, #0
 8001258:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800125a:	4805      	ldr	r0, [pc, #20]	; (8001270 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800125c:	f008 fdc3 	bl	8009de6 <HAL_PCD_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001266:	f000 f931 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	24000910 	.word	0x24000910
 8001274:	40080000 	.word	0x40080000

08001278 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 800127e:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <MX_BDMA_Init+0x3c>)
 8001280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001284:	4a0b      	ldr	r2, [pc, #44]	; (80012b4 <MX_BDMA_Init+0x3c>)
 8001286:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800128a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800128e:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <MX_BDMA_Init+0x3c>)
 8001290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001294:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 800129c:	2200      	movs	r2, #0
 800129e:	2100      	movs	r1, #0
 80012a0:	2081      	movs	r0, #129	; 0x81
 80012a2:	f005 fc3e 	bl	8006b22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 80012a6:	2081      	movs	r0, #129	; 0x81
 80012a8:	f005 fc55 	bl	8006b56 <HAL_NVIC_EnableIRQ>

}
 80012ac:	bf00      	nop
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	58024400 	.word	0x58024400

080012b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012be:	4b15      	ldr	r3, [pc, #84]	; (8001314 <MX_DMA_Init+0x5c>)
 80012c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012c4:	4a13      	ldr	r2, [pc, #76]	; (8001314 <MX_DMA_Init+0x5c>)
 80012c6:	f043 0301 	orr.w	r3, r3, #1
 80012ca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80012ce:	4b11      	ldr	r3, [pc, #68]	; (8001314 <MX_DMA_Init+0x5c>)
 80012d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	607b      	str	r3, [r7, #4]
 80012da:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80012dc:	2200      	movs	r2, #0
 80012de:	2100      	movs	r1, #0
 80012e0:	200b      	movs	r0, #11
 80012e2:	f005 fc1e 	bl	8006b22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80012e6:	200b      	movs	r0, #11
 80012e8:	f005 fc35 	bl	8006b56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80012ec:	2200      	movs	r2, #0
 80012ee:	2100      	movs	r1, #0
 80012f0:	200c      	movs	r0, #12
 80012f2:	f005 fc16 	bl	8006b22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80012f6:	200c      	movs	r0, #12
 80012f8:	f005 fc2d 	bl	8006b56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80012fc:	2200      	movs	r2, #0
 80012fe:	2100      	movs	r1, #0
 8001300:	200d      	movs	r0, #13
 8001302:	f005 fc0e 	bl	8006b22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001306:	200d      	movs	r0, #13
 8001308:	f005 fc25 	bl	8006b56 <HAL_NVIC_EnableIRQ>

}
 800130c:	bf00      	nop
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	58024400 	.word	0x58024400

08001318 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08c      	sub	sp, #48	; 0x30
 800131c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131e:	f107 031c 	add.w	r3, r7, #28
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]
 8001328:	609a      	str	r2, [r3, #8]
 800132a:	60da      	str	r2, [r3, #12]
 800132c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800132e:	4b62      	ldr	r3, [pc, #392]	; (80014b8 <MX_GPIO_Init+0x1a0>)
 8001330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001334:	4a60      	ldr	r2, [pc, #384]	; (80014b8 <MX_GPIO_Init+0x1a0>)
 8001336:	f043 0310 	orr.w	r3, r3, #16
 800133a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800133e:	4b5e      	ldr	r3, [pc, #376]	; (80014b8 <MX_GPIO_Init+0x1a0>)
 8001340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001344:	f003 0310 	and.w	r3, r3, #16
 8001348:	61bb      	str	r3, [r7, #24]
 800134a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800134c:	4b5a      	ldr	r3, [pc, #360]	; (80014b8 <MX_GPIO_Init+0x1a0>)
 800134e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001352:	4a59      	ldr	r2, [pc, #356]	; (80014b8 <MX_GPIO_Init+0x1a0>)
 8001354:	f043 0304 	orr.w	r3, r3, #4
 8001358:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800135c:	4b56      	ldr	r3, [pc, #344]	; (80014b8 <MX_GPIO_Init+0x1a0>)
 800135e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001362:	f003 0304 	and.w	r3, r3, #4
 8001366:	617b      	str	r3, [r7, #20]
 8001368:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800136a:	4b53      	ldr	r3, [pc, #332]	; (80014b8 <MX_GPIO_Init+0x1a0>)
 800136c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001370:	4a51      	ldr	r2, [pc, #324]	; (80014b8 <MX_GPIO_Init+0x1a0>)
 8001372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001376:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800137a:	4b4f      	ldr	r3, [pc, #316]	; (80014b8 <MX_GPIO_Init+0x1a0>)
 800137c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001384:	613b      	str	r3, [r7, #16]
 8001386:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001388:	4b4b      	ldr	r3, [pc, #300]	; (80014b8 <MX_GPIO_Init+0x1a0>)
 800138a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800138e:	4a4a      	ldr	r2, [pc, #296]	; (80014b8 <MX_GPIO_Init+0x1a0>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001398:	4b47      	ldr	r3, [pc, #284]	; (80014b8 <MX_GPIO_Init+0x1a0>)
 800139a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a6:	4b44      	ldr	r3, [pc, #272]	; (80014b8 <MX_GPIO_Init+0x1a0>)
 80013a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ac:	4a42      	ldr	r2, [pc, #264]	; (80014b8 <MX_GPIO_Init+0x1a0>)
 80013ae:	f043 0302 	orr.w	r3, r3, #2
 80013b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013b6:	4b40      	ldr	r3, [pc, #256]	; (80014b8 <MX_GPIO_Init+0x1a0>)
 80013b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013bc:	f003 0302 	and.w	r3, r3, #2
 80013c0:	60bb      	str	r3, [r7, #8]
 80013c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013c4:	4b3c      	ldr	r3, [pc, #240]	; (80014b8 <MX_GPIO_Init+0x1a0>)
 80013c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ca:	4a3b      	ldr	r2, [pc, #236]	; (80014b8 <MX_GPIO_Init+0x1a0>)
 80013cc:	f043 0308 	orr.w	r3, r3, #8
 80013d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013d4:	4b38      	ldr	r3, [pc, #224]	; (80014b8 <MX_GPIO_Init+0x1a0>)
 80013d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013da:	f003 0308 	and.w	r3, r3, #8
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ONBOARD_LED_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80013e2:	2200      	movs	r2, #0
 80013e4:	f248 0108 	movw	r1, #32776	; 0x8008
 80013e8:	4834      	ldr	r0, [pc, #208]	; (80014bc <MX_GPIO_Init+0x1a4>)
 80013ea:	f008 fbbb 	bl	8009b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BNO_NRST_Pin|BNO_BOOTN_Pin|Manual_Output_Pin, GPIO_PIN_RESET);
 80013ee:	2200      	movs	r2, #0
 80013f0:	f24c 0120 	movw	r1, #49184	; 0xc020
 80013f4:	4832      	ldr	r0, [pc, #200]	; (80014c0 <MX_GPIO_Init+0x1a8>)
 80013f6:	f008 fbb5 	bl	8009b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BNO_P0_Pin|BNO_P1_Pin|PCA9685_OE_Pin|LED_BLUE_Pin
 80013fa:	2200      	movs	r2, #0
 80013fc:	f44f 61ed 	mov.w	r1, #1896	; 0x768
 8001400:	4830      	ldr	r0, [pc, #192]	; (80014c4 <MX_GPIO_Init+0x1ac>)
 8001402:	f008 fbaf 	bl	8009b64 <HAL_GPIO_WritePin>
                          |LED_YELLOW_Pin|SPI_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : ONBOARD_LED_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = ONBOARD_LED_Pin|LED_RED_Pin;
 8001406:	f248 0308 	movw	r3, #32776	; 0x8008
 800140a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140c:	2301      	movs	r3, #1
 800140e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001414:	2300      	movs	r3, #0
 8001416:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001418:	f107 031c 	add.w	r3, r7, #28
 800141c:	4619      	mov	r1, r3
 800141e:	4827      	ldr	r0, [pc, #156]	; (80014bc <MX_GPIO_Init+0x1a4>)
 8001420:	f008 f9f0 	bl	8009804 <HAL_GPIO_Init>

  /*Configure GPIO pin : Onboard_Key1_Pin */
  GPIO_InitStruct.Pin = Onboard_Key1_Pin;
 8001424:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001428:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800142a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800142e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Onboard_Key1_GPIO_Port, &GPIO_InitStruct);
 8001434:	f107 031c 	add.w	r3, r7, #28
 8001438:	4619      	mov	r1, r3
 800143a:	4823      	ldr	r0, [pc, #140]	; (80014c8 <MX_GPIO_Init+0x1b0>)
 800143c:	f008 f9e2 	bl	8009804 <HAL_GPIO_Init>

  /*Configure GPIO pin : BNO_INT_Pin */
  GPIO_InitStruct.Pin = BNO_INT_Pin;
 8001440:	2380      	movs	r3, #128	; 0x80
 8001442:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001444:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001448:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BNO_INT_GPIO_Port, &GPIO_InitStruct);
 800144e:	f107 031c 	add.w	r3, r7, #28
 8001452:	4619      	mov	r1, r3
 8001454:	4819      	ldr	r0, [pc, #100]	; (80014bc <MX_GPIO_Init+0x1a4>)
 8001456:	f008 f9d5 	bl	8009804 <HAL_GPIO_Init>

  /*Configure GPIO pins : BNO_NRST_Pin BNO_BOOTN_Pin Manual_Output_Pin */
  GPIO_InitStruct.Pin = BNO_NRST_Pin|BNO_BOOTN_Pin|Manual_Output_Pin;
 800145a:	f24c 0320 	movw	r3, #49184	; 0xc020
 800145e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001460:	2301      	movs	r3, #1
 8001462:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001468:	2300      	movs	r3, #0
 800146a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146c:	f107 031c 	add.w	r3, r7, #28
 8001470:	4619      	mov	r1, r3
 8001472:	4813      	ldr	r0, [pc, #76]	; (80014c0 <MX_GPIO_Init+0x1a8>)
 8001474:	f008 f9c6 	bl	8009804 <HAL_GPIO_Init>

  /*Configure GPIO pins : BNO_P0_Pin BNO_P1_Pin PCA9685_OE_Pin LED_BLUE_Pin
                           LED_YELLOW_Pin SPI_CS_Pin */
  GPIO_InitStruct.Pin = BNO_P0_Pin|BNO_P1_Pin|PCA9685_OE_Pin|LED_BLUE_Pin
 8001478:	f44f 63ed 	mov.w	r3, #1896	; 0x768
 800147c:	61fb      	str	r3, [r7, #28]
                          |LED_YELLOW_Pin|SPI_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147e:	2301      	movs	r3, #1
 8001480:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001486:	2300      	movs	r3, #0
 8001488:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800148a:	f107 031c 	add.w	r3, r7, #28
 800148e:	4619      	mov	r1, r3
 8001490:	480c      	ldr	r0, [pc, #48]	; (80014c4 <MX_GPIO_Init+0x1ac>)
 8001492:	f008 f9b7 	bl	8009804 <HAL_GPIO_Init>

  /*Configure GPIO pin : Manual_Input_Pin */
  GPIO_InitStruct.Pin = Manual_Input_Pin;
 8001496:	2380      	movs	r3, #128	; 0x80
 8001498:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800149a:	2300      	movs	r3, #0
 800149c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Manual_Input_GPIO_Port, &GPIO_InitStruct);
 80014a2:	f107 031c 	add.w	r3, r7, #28
 80014a6:	4619      	mov	r1, r3
 80014a8:	4805      	ldr	r0, [pc, #20]	; (80014c0 <MX_GPIO_Init+0x1a8>)
 80014aa:	f008 f9ab 	bl	8009804 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014ae:	bf00      	nop
 80014b0:	3730      	adds	r7, #48	; 0x30
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	58024400 	.word	0x58024400
 80014bc:	58021000 	.word	0x58021000
 80014c0:	58020400 	.word	0x58020400
 80014c4:	58020c00 	.word	0x58020c00
 80014c8:	58020800 	.word	0x58020800

080014cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d0:	b672      	cpsid	i
}
 80014d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <Error_Handler+0x8>

080014d6 <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	bfb8      	it	lt
 80014e4:	425b      	neglt	r3, r3
 80014e6:	4618      	mov	r0, r3
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <_ZN3ros3Msg19serializeAvrFloat64EPhf>:
   * @param[in] f value to serialize.
   *
   * @return number of bytes to advance the buffer pointer.
   *
   */
  static int serializeAvrFloat64(unsigned char* outbuffer, const float f)
 80014f2:	b480      	push	{r7}
 80014f4:	b087      	sub	sp, #28
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
 80014fa:	ed87 0a00 	vstr	s0, [r7]
 80014fe:	683b      	ldr	r3, [r7, #0]
  {
    int32_t val;
    std::memcpy(&val, &f, sizeof(val));
 8001500:	60fb      	str	r3, [r7, #12]

    int16_t exp = ((val >> 23) & 255);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	15db      	asrs	r3, r3, #23
 8001506:	b21b      	sxth	r3, r3
 8001508:	b2db      	uxtb	r3, r3
 800150a:	82fb      	strh	r3, [r7, #22]
    uint32_t mantissa = val & 0x7FFFFF;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8001512:	613b      	str	r3, [r7, #16]

    if (exp == 255)
 8001514:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001518:	2bff      	cmp	r3, #255	; 0xff
 800151a:	d103      	bne.n	8001524 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x32>
    {
      exp = 2047; // Special value for NaN, infinity etc.
 800151c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001520:	82fb      	strh	r3, [r7, #22]
 8001522:	e02a      	b.n	800157a <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x88>
    }
    else if (exp != 0)
 8001524:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d005      	beq.n	8001538 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x46>
    {
      exp += 1023 - 127; // Normal case
 800152c:	8afb      	ldrh	r3, [r7, #22]
 800152e:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8001532:	b29b      	uxth	r3, r3
 8001534:	82fb      	strh	r3, [r7, #22]
 8001536:	e020      	b.n	800157a <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x88>
    }
    else if (!mantissa)
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d102      	bne.n	8001544 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x52>
    {
      exp = 0; // Zero
 800153e:	2300      	movs	r3, #0
 8001540:	82fb      	strh	r3, [r7, #22]
 8001542:	e01a      	b.n	800157a <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x88>
    }
    else
    {
      // Denormalized value in float, will fit as normalized value in double
      exp += 1023 - 127;
 8001544:	8afb      	ldrh	r3, [r7, #22]
 8001546:	f503 7360 	add.w	r3, r3, #896	; 0x380
 800154a:	b29b      	uxth	r3, r3
 800154c:	82fb      	strh	r3, [r7, #22]
      mantissa <<= 1;
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	613b      	str	r3, [r7, #16]
      while (!(mantissa & 0x800000))
 8001554:	e008      	b.n	8001568 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x76>
      {
          mantissa <<= 1;
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	613b      	str	r3, [r7, #16]
          exp--;
 800155c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001560:	b29b      	uxth	r3, r3
 8001562:	3b01      	subs	r3, #1
 8001564:	b29b      	uxth	r3, r3
 8001566:	82fb      	strh	r3, [r7, #22]
      while (!(mantissa & 0x800000))
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d0f1      	beq.n	8001556 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x64>
      }
      mantissa &= 0x7FFFFF;
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8001578:	613b      	str	r3, [r7, #16]
    }

    *(outbuffer++) = 0;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	1c5a      	adds	r2, r3, #1
 800157e:	607a      	str	r2, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	1c5a      	adds	r2, r3, #1
 8001588:	607a      	str	r2, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	1c5a      	adds	r2, r3, #1
 8001592:	607a      	str	r2, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (mantissa << 5) & 0xff;
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	b2da      	uxtb	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	1c59      	adds	r1, r3, #1
 80015a0:	6079      	str	r1, [r7, #4]
 80015a2:	0152      	lsls	r2, r2, #5
 80015a4:	b2d2      	uxtb	r2, r2
 80015a6:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (mantissa >> 3) & 0xff;
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	08d9      	lsrs	r1, r3, #3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	1c5a      	adds	r2, r3, #1
 80015b0:	607a      	str	r2, [r7, #4]
 80015b2:	b2ca      	uxtb	r2, r1
 80015b4:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (mantissa >> 11) & 0xff;
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	0ad9      	lsrs	r1, r3, #11
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	1c5a      	adds	r2, r3, #1
 80015be:	607a      	str	r2, [r7, #4]
 80015c0:	b2ca      	uxtb	r2, r1
 80015c2:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((mantissa >> 19) & 0x0F);
 80015c4:	8afb      	ldrh	r3, [r7, #22]
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	011b      	lsls	r3, r3, #4
 80015ca:	b2d9      	uxtb	r1, r3
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	0cdb      	lsrs	r3, r3, #19
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	f003 030f 	and.w	r3, r3, #15
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	1c58      	adds	r0, r3, #1
 80015dc:	6078      	str	r0, [r7, #4]
 80015de:	430a      	orrs	r2, r1
 80015e0:	b2d2      	uxtb	r2, r2
 80015e2:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (exp >> 4) & 0x7F;
 80015e4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015e8:	111b      	asrs	r3, r3, #4
 80015ea:	b21b      	sxth	r3, r3
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	1c59      	adds	r1, r3, #1
 80015f2:	6079      	str	r1, [r7, #4]
 80015f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	701a      	strb	r2, [r3, #0]

    // Mark negative bit as necessary.
    if (f < 0)
 80015fc:	edd7 7a00 	vldr	s15, [r7]
 8001600:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001608:	d508      	bpl.n	800161c <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x12a>
    {
      *(outbuffer - 1) |= 0x80;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	3b01      	subs	r3, #1
 800160e:	781a      	ldrb	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3b01      	subs	r3, #1
 8001614:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001618:	b2d2      	uxtb	r2, r2
 800161a:	701a      	strb	r2, [r3, #0]
    }

    return 8;
 800161c:	2308      	movs	r3, #8
  }
 800161e:	4618      	mov	r0, r3
 8001620:	371c      	adds	r7, #28
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>:
   * @param[in] inbuffer pointer for buffer to deserialize from.
   * @param[out] f pointer to place the deserialized value in.
   *
   * @return number of bytes to advance the buffer pointer.
   */
  static int deserializeAvrFloat64(const unsigned char* inbuffer, float* f)
 800162a:	b480      	push	{r7}
 800162c:	b087      	sub	sp, #28
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
 8001632:	6039      	str	r1, [r7, #0]
  {
    int16_t exp;
    uint32_t mantissa;

    // Skip lowest 24 bits
    inbuffer += 3;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3303      	adds	r3, #3
 8001638:	607b      	str	r3, [r7, #4]

    // Copy truncated mantissa.
    mantissa = ((uint32_t)(*(inbuffer++)) >> 4 & 0x0F);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	1c5a      	adds	r2, r3, #1
 800163e:	607a      	str	r2, [r7, #4]
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	091b      	lsrs	r3, r3, #4
 8001644:	b2db      	uxtb	r3, r3
 8001646:	f003 030f 	and.w	r3, r3, #15
 800164a:	613b      	str	r3, [r7, #16]
    mantissa |= ((uint32_t)(*(inbuffer++)) & 0xff) << 4;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	1c5a      	adds	r2, r3, #1
 8001650:	607a      	str	r2, [r7, #4]
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	011b      	lsls	r3, r3, #4
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4313      	orrs	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
    mantissa |= ((uint32_t)(*(inbuffer++)) & 0xff) << 12;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	1c5a      	adds	r2, r3, #1
 8001660:	607a      	str	r2, [r7, #4]
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	031b      	lsls	r3, r3, #12
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	4313      	orrs	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
    mantissa |= ((uint32_t)(*inbuffer) & 0x0f) << 20;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	051b      	lsls	r3, r3, #20
 8001672:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	4313      	orrs	r3, r2
 800167a:	613b      	str	r3, [r7, #16]

    // Copy exponent.
    exp = ((uint32_t)(*(inbuffer++)) & 0xf0) >> 4;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	1c5a      	adds	r2, r3, #1
 8001680:	607a      	str	r2, [r7, #4]
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	091b      	lsrs	r3, r3, #4
 8001686:	b2db      	uxtb	r3, r3
 8001688:	b21b      	sxth	r3, r3
 800168a:	f003 030f 	and.w	r3, r3, #15
 800168e:	82fb      	strh	r3, [r7, #22]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	b29b      	uxth	r3, r3
 8001696:	011b      	lsls	r3, r3, #4
 8001698:	b29b      	uxth	r3, r3
 800169a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800169e:	b29a      	uxth	r2, r3
 80016a0:	8afb      	ldrh	r3, [r7, #22]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	82fb      	strh	r3, [r7, #22]

    if (exp == 2047)
 80016a8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016ac:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d102      	bne.n	80016ba <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0x90>
    {
      exp = 255; // NaN, infinity etc.
 80016b4:	23ff      	movs	r3, #255	; 0xff
 80016b6:	82fb      	strh	r3, [r7, #22]
 80016b8:	e02c      	b.n	8001714 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xea>
    }
    else if (exp - 1023 > 127)
 80016ba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016be:	f240 427e 	movw	r2, #1150	; 0x47e
 80016c2:	4293      	cmp	r3, r2
 80016c4:	dd04      	ble.n	80016d0 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xa6>
    {
      exp = 255;
 80016c6:	23ff      	movs	r3, #255	; 0xff
 80016c8:	82fb      	strh	r3, [r7, #22]
      mantissa = 0; // Too large for float, convert to infinity
 80016ca:	2300      	movs	r3, #0
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	e021      	b.n	8001714 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xea>
    }
    else if (exp - 1023 >= -126)
 80016d0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016d4:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 80016d8:	dd05      	ble.n	80016e6 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xbc>
    {
      exp -= 1023 - 127; // Normal case
 80016da:	8afb      	ldrh	r3, [r7, #22]
 80016dc:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	82fb      	strh	r3, [r7, #22]
 80016e4:	e016      	b.n	8001714 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xea>
    }
    else if (exp - 1023 < -150)
 80016e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016ea:	f5b3 7f5a 	cmp.w	r3, #872	; 0x368
 80016ee:	dc02      	bgt.n	80016f6 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xcc>
    {
      exp = 0; // Too small or zero
 80016f0:	2300      	movs	r3, #0
 80016f2:	82fb      	strh	r3, [r7, #22]
 80016f4:	e00e      	b.n	8001714 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xea>
    }
    else
    {
      // Have to convert to denormalized representation for float
      mantissa |= 0x1000000;
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016fc:	613b      	str	r3, [r7, #16]
      mantissa >>= ((-126 + 1023) - exp);
 80016fe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001702:	f240 3381 	movw	r3, #897	; 0x381
 8001706:	1a9b      	subs	r3, r3, r2
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	fa22 f303 	lsr.w	r3, r2, r3
 800170e:	613b      	str	r3, [r7, #16]
      exp = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	82fb      	strh	r3, [r7, #22]
    }

    // Round off mantissa
    if (mantissa != 0xFFFFFF)
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800171a:	4293      	cmp	r3, r2
 800171c:	d002      	beq.n	8001724 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0xfa>
      mantissa += 1;
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	3301      	adds	r3, #1
 8001722:	613b      	str	r3, [r7, #16]

    mantissa >>= 1;
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	085b      	lsrs	r3, r3, #1
 8001728:	613b      	str	r3, [r7, #16]

    // Put mantissa and exponent into place
    uint32_t val = mantissa;
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	60fb      	str	r3, [r7, #12]
    val |= static_cast<uint32_t>(exp) << 23;
 800172e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001732:	05da      	lsls	r2, r3, #23
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4313      	orrs	r3, r2
 8001738:	60fb      	str	r3, [r7, #12]

    // Copy negative sign.
    val |= (static_cast<uint32_t>(*(inbuffer++)) & 0x80) << 24;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	1c5a      	adds	r2, r3, #1
 800173e:	607a      	str	r2, [r7, #4]
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	061b      	lsls	r3, r3, #24
 8001744:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4313      	orrs	r3, r2
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	68fa      	ldr	r2, [r7, #12]

    std::memcpy(f, &val, sizeof(val));
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	601a      	str	r2, [r3, #0]
    return 8;
 8001754:	2308      	movs	r3, #8
  }
 8001756:	4618      	mov	r0, r3
 8001758:	371c      	adds	r7, #28
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4618      	mov	r0, r3
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <_ZN3ros3MsgC1Ev>:
class Msg
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	4a04      	ldr	r2, [pc, #16]	; (80017a0 <_ZN3ros3MsgC1Ev+0x1c>)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4618      	mov	r0, r3
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	08014348 	.word	0x08014348

080017a4 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
      data()
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff ffe8 	bl	8001784 <_ZN3ros3MsgC1Ev>
 80017b4:	4a06      	ldr	r2, [pc, #24]	; (80017d0 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	3304      	adds	r3, #4
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff ffcf 	bl	8001762 <_ZN3ros4TimeC1Ev>
    {
    }
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4618      	mov	r0, r3
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	08014330 	.word	0x08014330

080017d4 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80017de:	2300      	movs	r3, #0
 80017e0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6859      	ldr	r1, [r3, #4]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	4413      	add	r3, r2
 80017ec:	b2ca      	uxtb	r2, r1
 80017ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	0a19      	lsrs	r1, r3, #8
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	3301      	adds	r3, #1
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	4413      	add	r3, r2
 80017fe:	b2ca      	uxtb	r2, r1
 8001800:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	0c19      	lsrs	r1, r3, #16
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	3302      	adds	r3, #2
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	4413      	add	r3, r2
 8001810:	b2ca      	uxtb	r2, r1
 8001812:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	0e19      	lsrs	r1, r3, #24
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	3303      	adds	r3, #3
 800181e:	683a      	ldr	r2, [r7, #0]
 8001820:	4413      	add	r3, r2
 8001822:	b2ca      	uxtb	r2, r1
 8001824:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	3304      	adds	r3, #4
 800182a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6899      	ldr	r1, [r3, #8]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	4413      	add	r3, r2
 8001836:	b2ca      	uxtb	r2, r1
 8001838:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	0a19      	lsrs	r1, r3, #8
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	3301      	adds	r3, #1
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	4413      	add	r3, r2
 8001848:	b2ca      	uxtb	r2, r1
 800184a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	0c19      	lsrs	r1, r3, #16
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	3302      	adds	r3, #2
 8001856:	683a      	ldr	r2, [r7, #0]
 8001858:	4413      	add	r3, r2
 800185a:	b2ca      	uxtb	r2, r1
 800185c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	0e19      	lsrs	r1, r3, #24
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	3303      	adds	r3, #3
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	4413      	add	r3, r2
 800186c:	b2ca      	uxtb	r2, r1
 800186e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	3304      	adds	r3, #4
 8001874:	60fb      	str	r3, [r7, #12]
      return offset;
 8001876:	68fb      	ldr	r3, [r7, #12]
    }
 8001878:	4618      	mov	r0, r3
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	4413      	add	r3, r2
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	461a      	mov	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685a      	ldr	r2, [r3, #4]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	3301      	adds	r3, #1
 80018a8:	6839      	ldr	r1, [r7, #0]
 80018aa:	440b      	add	r3, r1
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	021b      	lsls	r3, r3, #8
 80018b0:	431a      	orrs	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	3302      	adds	r3, #2
 80018be:	6839      	ldr	r1, [r7, #0]
 80018c0:	440b      	add	r3, r1
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	041b      	lsls	r3, r3, #16
 80018c6:	431a      	orrs	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685a      	ldr	r2, [r3, #4]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	3303      	adds	r3, #3
 80018d4:	6839      	ldr	r1, [r7, #0]
 80018d6:	440b      	add	r3, r1
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	061b      	lsls	r3, r3, #24
 80018dc:	431a      	orrs	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	3304      	adds	r3, #4
 80018e6:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	4413      	add	r3, r2
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	461a      	mov	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689a      	ldr	r2, [r3, #8]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	3301      	adds	r3, #1
 80018fe:	6839      	ldr	r1, [r7, #0]
 8001900:	440b      	add	r3, r1
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	021b      	lsls	r3, r3, #8
 8001906:	431a      	orrs	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	3302      	adds	r3, #2
 8001914:	6839      	ldr	r1, [r7, #0]
 8001916:	440b      	add	r3, r1
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	041b      	lsls	r3, r3, #16
 800191c:	431a      	orrs	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	689a      	ldr	r2, [r3, #8]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	3303      	adds	r3, #3
 800192a:	6839      	ldr	r1, [r7, #0]
 800192c:	440b      	add	r3, r1
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	061b      	lsls	r3, r3, #24
 8001932:	431a      	orrs	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	3304      	adds	r3, #4
 800193c:	60fb      	str	r3, [r7, #12]
     return offset;
 800193e:	68fb      	ldr	r3, [r7, #12]
    }
 8001940:	4618      	mov	r0, r3
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	4b03      	ldr	r3, [pc, #12]	; (8001964 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001956:	4618      	mov	r0, r3
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	08013fc0 	.word	0x08013fc0

08001968 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	4b03      	ldr	r3, [pc, #12]	; (8001980 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001972:	4618      	mov	r0, r3
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	08013fd0 	.word	0x08013fd0

08001984 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fef8 	bl	8001784 <_ZN3ros3MsgC1Ev>
 8001994:	4a0b      	ldr	r2, [pc, #44]	; (80019c4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	601a      	str	r2, [r3, #0]
      topic_id(0),
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a09      	ldr	r2, [pc, #36]	; (80019c8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80019a4:	609a      	str	r2, [r3, #8]
      message_type(""),
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a07      	ldr	r2, [pc, #28]	; (80019c8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80019aa:	60da      	str	r2, [r3, #12]
      md5sum(""),
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a06      	ldr	r2, [pc, #24]	; (80019c8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80019b0:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	615a      	str	r2, [r3, #20]
    {
    }
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4618      	mov	r0, r3
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	08014318 	.word	0x08014318
 80019c8:	08013ff4 	.word	0x08013ff4

080019cc <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b088      	sub	sp, #32
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	8899      	ldrh	r1, [r3, #4]
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	4413      	add	r3, r2
 80019e4:	b2ca      	uxtb	r2, r1
 80019e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	889b      	ldrh	r3, [r3, #4]
 80019ec:	0a1b      	lsrs	r3, r3, #8
 80019ee:	b299      	uxth	r1, r3
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	3301      	adds	r3, #1
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	4413      	add	r3, r2
 80019f8:	b2ca      	uxtb	r2, r1
 80019fa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	3302      	adds	r3, #2
 8001a00:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7fe fc66 	bl	80002d8 <strlen>
 8001a0c:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	4413      	add	r3, r2
 8001a14:	69b9      	ldr	r1, [r7, #24]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f002 f860 	bl	8003adc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	3304      	adds	r3, #4
 8001a20:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	18d0      	adds	r0, r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4619      	mov	r1, r3
 8001a30:	f012 fa58 	bl	8013ee4 <memcpy>
      offset += length_topic_name;
 8001a34:	69fa      	ldr	r2, [r7, #28]
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	4413      	add	r3, r2
 8001a3a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7fe fc49 	bl	80002d8 <strlen>
 8001a46:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	6979      	ldr	r1, [r7, #20]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f002 f843 	bl	8003adc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	3304      	adds	r3, #4
 8001a5a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	18d0      	adds	r0, r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	4619      	mov	r1, r3
 8001a6a:	f012 fa3b 	bl	8013ee4 <memcpy>
      offset += length_message_type;
 8001a6e:	69fa      	ldr	r2, [r7, #28]
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	4413      	add	r3, r2
 8001a74:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7fe fc2c 	bl	80002d8 <strlen>
 8001a80:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	4413      	add	r3, r2
 8001a88:	6939      	ldr	r1, [r7, #16]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f002 f826 	bl	8003adc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	3304      	adds	r3, #4
 8001a94:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	18d0      	adds	r0, r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	f012 fa1e 	bl	8013ee4 <memcpy>
      offset += length_md5sum;
 8001aa8:	69fa      	ldr	r2, [r7, #28]
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	4413      	add	r3, r2
 8001aae:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	695b      	ldr	r3, [r3, #20]
 8001ab4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001ab6:	68f9      	ldr	r1, [r7, #12]
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	4413      	add	r3, r2
 8001abe:	b2ca      	uxtb	r2, r1
 8001ac0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	0a19      	lsrs	r1, r3, #8
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	4413      	add	r3, r2
 8001ace:	b2ca      	uxtb	r2, r1
 8001ad0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	0c19      	lsrs	r1, r3, #16
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	3302      	adds	r3, #2
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	4413      	add	r3, r2
 8001ade:	b2ca      	uxtb	r2, r1
 8001ae0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	0e19      	lsrs	r1, r3, #24
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	3303      	adds	r3, #3
 8001aea:	683a      	ldr	r2, [r7, #0]
 8001aec:	4413      	add	r3, r2
 8001aee:	b2ca      	uxtb	r2, r1
 8001af0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	3304      	adds	r3, #4
 8001af6:	61fb      	str	r3, [r7, #28]
      return offset;
 8001af8:	69fb      	ldr	r3, [r7, #28]
    }
 8001afa:	4618      	mov	r0, r3
 8001afc:	3720      	adds	r7, #32
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b08a      	sub	sp, #40	; 0x28
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
 8001b0a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	4413      	add	r3, r2
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	889b      	ldrh	r3, [r3, #4]
 8001b22:	b21a      	sxth	r2, r3
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	3301      	adds	r3, #1
 8001b28:	6839      	ldr	r1, [r7, #0]
 8001b2a:	440b      	add	r3, r1
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	021b      	lsls	r3, r3, #8
 8001b30:	b21b      	sxth	r3, r3
 8001b32:	4313      	orrs	r3, r2
 8001b34:	b21b      	sxth	r3, r3
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	3302      	adds	r3, #2
 8001b40:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	441a      	add	r2, r3
 8001b48:	f107 0314 	add.w	r3, r7, #20
 8001b4c:	4611      	mov	r1, r2
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f001 ffe3 	bl	8003b1a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	3304      	adds	r3, #4
 8001b58:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b5e:	e00b      	b.n	8001b78 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b64:	441a      	add	r2, r3
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	6839      	ldr	r1, [r7, #0]
 8001b6c:	440b      	add	r3, r1
 8001b6e:	7812      	ldrb	r2, [r2, #0]
 8001b70:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b74:	3301      	adds	r3, #1
 8001b76:	627b      	str	r3, [r7, #36]	; 0x24
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d3ed      	bcc.n	8001b60 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	4413      	add	r3, r2
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	4413      	add	r3, r2
 8001b90:	2200      	movs	r2, #0
 8001b92:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	441a      	add	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	441a      	add	r2, r3
 8001bae:	f107 0310 	add.w	r3, r7, #16
 8001bb2:	4611      	mov	r1, r2
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f001 ffb0 	bl	8003b1a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	3304      	adds	r3, #4
 8001bbe:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	623b      	str	r3, [r7, #32]
 8001bc4:	e00b      	b.n	8001bde <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	6a3b      	ldr	r3, [r7, #32]
 8001bca:	441a      	add	r2, r3
 8001bcc:	6a3b      	ldr	r3, [r7, #32]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	6839      	ldr	r1, [r7, #0]
 8001bd2:	440b      	add	r3, r1
 8001bd4:	7812      	ldrb	r2, [r2, #0]
 8001bd6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001bd8:	6a3b      	ldr	r3, [r7, #32]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	623b      	str	r3, [r7, #32]
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	4413      	add	r3, r2
 8001be4:	6a3a      	ldr	r2, [r7, #32]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d3ed      	bcc.n	8001bc6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	4413      	add	r3, r2
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	683a      	ldr	r2, [r7, #0]
 8001c00:	441a      	add	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	441a      	add	r2, r3
 8001c14:	f107 030c 	add.w	r3, r7, #12
 8001c18:	4611      	mov	r1, r2
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f001 ff7d 	bl	8003b1a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	3304      	adds	r3, #4
 8001c24:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	61fb      	str	r3, [r7, #28]
 8001c2a:	e00b      	b.n	8001c44 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	441a      	add	r2, r3
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	3b01      	subs	r3, #1
 8001c36:	6839      	ldr	r1, [r7, #0]
 8001c38:	440b      	add	r3, r1
 8001c3a:	7812      	ldrb	r2, [r2, #0]
 8001c3c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3301      	adds	r3, #1
 8001c42:	61fb      	str	r3, [r7, #28]
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	4413      	add	r3, r2
 8001c4a:	69fa      	ldr	r2, [r7, #28]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d3ed      	bcc.n	8001c2c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	4413      	add	r3, r2
 8001c56:	3b01      	subs	r3, #1
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	441a      	add	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	4413      	add	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	6839      	ldr	r1, [r7, #0]
 8001c7e:	440a      	add	r2, r1
 8001c80:	7812      	ldrb	r2, [r2, #0]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001c86:	68ba      	ldr	r2, [r7, #8]
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	6839      	ldr	r1, [r7, #0]
 8001c8e:	440b      	add	r3, r1
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	021b      	lsls	r3, r3, #8
 8001c94:	4313      	orrs	r3, r2
 8001c96:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001c98:	68ba      	ldr	r2, [r7, #8]
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	3302      	adds	r3, #2
 8001c9e:	6839      	ldr	r1, [r7, #0]
 8001ca0:	440b      	add	r3, r1
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	041b      	lsls	r3, r3, #16
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001caa:	68ba      	ldr	r2, [r7, #8]
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	3303      	adds	r3, #3
 8001cb0:	6839      	ldr	r1, [r7, #0]
 8001cb2:	440b      	add	r3, r1
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	061b      	lsls	r3, r3, #24
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001cbc:	68ba      	ldr	r2, [r7, #8]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	61bb      	str	r3, [r7, #24]
     return offset;
 8001cc8:	69bb      	ldr	r3, [r7, #24]
    }
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3728      	adds	r7, #40	; 0x28
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
	...

08001cd4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	4b03      	ldr	r3, [pc, #12]	; (8001cec <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001cde:	4618      	mov	r0, r3
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	08013ff8 	.word	0x08013ff8

08001cf0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	4b03      	ldr	r3, [pc, #12]	; (8001d08 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	08014014 	.word	0x08014014

08001d0c <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff fd34 	bl	8001784 <_ZN3ros3MsgC1Ev>
 8001d1c:	4a06      	ldr	r2, [pc, #24]	; (8001d38 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	601a      	str	r2, [r3, #0]
      level(0),
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	711a      	strb	r2, [r3, #4]
      msg("")
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a04      	ldr	r2, [pc, #16]	; (8001d3c <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001d2c:	609a      	str	r2, [r3, #8]
    {
    }
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4618      	mov	r0, r3
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	08014300 	.word	0x08014300
 8001d3c:	08013ff4 	.word	0x08013ff4

08001d40 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	4413      	add	r3, r2
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	7912      	ldrb	r2, [r2, #4]
 8001d58:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7fe fab7 	bl	80002d8 <strlen>
 8001d6a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	683a      	ldr	r2, [r7, #0]
 8001d70:	4413      	add	r3, r2
 8001d72:	68b9      	ldr	r1, [r7, #8]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f001 feb1 	bl	8003adc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	18d0      	adds	r0, r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	68ba      	ldr	r2, [r7, #8]
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	f012 f8a9 	bl	8013ee4 <memcpy>
      offset += length_msg;
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	4413      	add	r3, r2
 8001d98:	60fb      	str	r3, [r7, #12]
      return offset;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
    }
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3710      	adds	r7, #16
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001dae:	2300      	movs	r3, #0
 8001db0:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	4413      	add	r3, r2
 8001db8:	781a      	ldrb	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	441a      	add	r2, r3
 8001dca:	f107 030c 	add.w	r3, r7, #12
 8001dce:	4611      	mov	r1, r2
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f001 fea2 	bl	8003b1a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	3304      	adds	r3, #4
 8001dda:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	617b      	str	r3, [r7, #20]
 8001de0:	e00b      	b.n	8001dfa <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 8001de2:	683a      	ldr	r2, [r7, #0]
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	441a      	add	r2, r3
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	3b01      	subs	r3, #1
 8001dec:	6839      	ldr	r1, [r7, #0]
 8001dee:	440b      	add	r3, r1
 8001df0:	7812      	ldrb	r2, [r2, #0]
 8001df2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	3301      	adds	r3, #1
 8001df8:	617b      	str	r3, [r7, #20]
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4413      	add	r3, r2
 8001e00:	697a      	ldr	r2, [r7, #20]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d3ed      	bcc.n	8001de2 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	4413      	add	r3, r2
 8001e12:	2200      	movs	r2, #0
 8001e14:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	441a      	add	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4413      	add	r3, r2
 8001e28:	613b      	str	r3, [r7, #16]
     return offset;
 8001e2a:	693b      	ldr	r3, [r7, #16]
    }
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3718      	adds	r7, #24
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	4b03      	ldr	r3, [pc, #12]	; (8001e4c <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001e3e:	4618      	mov	r0, r3
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	08014038 	.word	0x08014038

08001e50 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	4b03      	ldr	r3, [pc, #12]	; (8001e68 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	0801404c 	.word	0x0801404c

08001e6c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff fc84 	bl	8001784 <_ZN3ros3MsgC1Ev>
 8001e7c:	4a11      	ldr	r2, [pc, #68]	; (8001ec4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	605a      	str	r2, [r3, #4]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	609a      	str	r2, [r3, #8]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	611a      	str	r2, [r3, #16]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f04f 0200 	mov.w	r2, #0
 8001ea0:	615a      	str	r2, [r3, #20]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	61da      	str	r2, [r3, #28]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	621a      	str	r2, [r3, #32]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	080142e8 	.word	0x080142e8

08001ec8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b08a      	sub	sp, #40	; 0x28
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6859      	ldr	r1, [r3, #4]
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	4413      	add	r3, r2
 8001ee0:	b2ca      	uxtb	r2, r1
 8001ee2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	0a19      	lsrs	r1, r3, #8
 8001eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eec:	3301      	adds	r3, #1
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	b2ca      	uxtb	r2, r1
 8001ef4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	0c19      	lsrs	r1, r3, #16
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	3302      	adds	r3, #2
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	4413      	add	r3, r2
 8001f04:	b2ca      	uxtb	r2, r1
 8001f06:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	0e19      	lsrs	r1, r3, #24
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	3303      	adds	r3, #3
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	4413      	add	r3, r2
 8001f16:	b2ca      	uxtb	r2, r1
 8001f18:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001f20:	2300      	movs	r3, #0
 8001f22:	623b      	str	r3, [r7, #32]
 8001f24:	e02a      	b.n	8001f7c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68da      	ldr	r2, [r3, #12]
 8001f2a:	6a3b      	ldr	r3, [r7, #32]
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	4413      	add	r3, r2
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001f34:	6939      	ldr	r1, [r7, #16]
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	b2ca      	uxtb	r2, r1
 8001f3e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	0a19      	lsrs	r1, r3, #8
 8001f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f46:	3301      	adds	r3, #1
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	b2ca      	uxtb	r2, r1
 8001f4e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	0c19      	lsrs	r1, r3, #16
 8001f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f56:	3302      	adds	r3, #2
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	b2ca      	uxtb	r2, r1
 8001f5e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	0e19      	lsrs	r1, r3, #24
 8001f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f66:	3303      	adds	r3, #3
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	b2ca      	uxtb	r2, r1
 8001f6e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f72:	3304      	adds	r3, #4
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001f76:	6a3b      	ldr	r3, [r7, #32]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	623b      	str	r3, [r7, #32]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	6a3a      	ldr	r2, [r7, #32]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d3cf      	bcc.n	8001f26 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6919      	ldr	r1, [r3, #16]
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	4413      	add	r3, r2
 8001f90:	b2ca      	uxtb	r2, r1
 8001f92:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	0a19      	lsrs	r1, r3, #8
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	b2ca      	uxtb	r2, r1
 8001fa4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	0c19      	lsrs	r1, r3, #16
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	3302      	adds	r3, #2
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	b2ca      	uxtb	r2, r1
 8001fb6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	0e19      	lsrs	r1, r3, #24
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc0:	3303      	adds	r3, #3
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	b2ca      	uxtb	r2, r1
 8001fc8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fcc:	3304      	adds	r3, #4
 8001fce:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	61fb      	str	r3, [r7, #28]
 8001fd4:	e02a      	b.n	800202c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	699a      	ldr	r2, [r3, #24]
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4413      	add	r3, r2
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001fe4:	68f9      	ldr	r1, [r7, #12]
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	4413      	add	r3, r2
 8001fec:	b2ca      	uxtb	r2, r1
 8001fee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	0a19      	lsrs	r1, r3, #8
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	b2ca      	uxtb	r2, r1
 8001ffe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	0c19      	lsrs	r1, r3, #16
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	3302      	adds	r3, #2
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	4413      	add	r3, r2
 800200c:	b2ca      	uxtb	r2, r1
 800200e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	0e19      	lsrs	r1, r3, #24
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	3303      	adds	r3, #3
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	4413      	add	r3, r2
 800201c:	b2ca      	uxtb	r2, r1
 800201e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002022:	3304      	adds	r3, #4
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	3301      	adds	r3, #1
 800202a:	61fb      	str	r3, [r7, #28]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	69fa      	ldr	r2, [r7, #28]
 8002032:	429a      	cmp	r2, r3
 8002034:	d3cf      	bcc.n	8001fd6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	69d9      	ldr	r1, [r3, #28]
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	4413      	add	r3, r2
 8002040:	b2ca      	uxtb	r2, r1
 8002042:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	69db      	ldr	r3, [r3, #28]
 8002048:	0a19      	lsrs	r1, r3, #8
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	3301      	adds	r3, #1
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	4413      	add	r3, r2
 8002052:	b2ca      	uxtb	r2, r1
 8002054:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	0c19      	lsrs	r1, r3, #16
 800205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205e:	3302      	adds	r3, #2
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	4413      	add	r3, r2
 8002064:	b2ca      	uxtb	r2, r1
 8002066:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	69db      	ldr	r3, [r3, #28]
 800206c:	0e19      	lsrs	r1, r3, #24
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	3303      	adds	r3, #3
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	4413      	add	r3, r2
 8002076:	b2ca      	uxtb	r2, r1
 8002078:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	3304      	adds	r3, #4
 800207e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002080:	2300      	movs	r3, #0
 8002082:	61bb      	str	r3, [r7, #24]
 8002084:	e027      	b.n	80020d6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe f920 	bl	80002d8 <strlen>
 8002098:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	4413      	add	r3, r2
 80020a0:	6979      	ldr	r1, [r7, #20]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f001 fd1a 	bl	8003adc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80020a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020aa:	3304      	adds	r3, #4
 80020ac:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	18d0      	adds	r0, r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	4413      	add	r3, r2
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	697a      	ldr	r2, [r7, #20]
 80020c2:	4619      	mov	r1, r3
 80020c4:	f011 ff0e 	bl	8013ee4 <memcpy>
      offset += length_stringsi;
 80020c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	4413      	add	r3, r2
 80020ce:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	3301      	adds	r3, #1
 80020d4:	61bb      	str	r3, [r7, #24]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d3d2      	bcc.n	8002086 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80020e2:	4618      	mov	r0, r3
 80020e4:	3728      	adds	r7, #40	; 0x28
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b08e      	sub	sp, #56	; 0x38
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
 80020f2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80020f4:	2300      	movs	r3, #0
 80020f6:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80020f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	4413      	add	r3, r2
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002104:	3301      	adds	r3, #1
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	4413      	add	r3, r2
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	021b      	lsls	r3, r3, #8
 800210e:	6a3a      	ldr	r2, [r7, #32]
 8002110:	4313      	orrs	r3, r2
 8002112:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002116:	3302      	adds	r3, #2
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	4413      	add	r3, r2
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	041b      	lsls	r3, r3, #16
 8002120:	6a3a      	ldr	r2, [r7, #32]
 8002122:	4313      	orrs	r3, r2
 8002124:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002128:	3303      	adds	r3, #3
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	4413      	add	r3, r2
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	061b      	lsls	r3, r3, #24
 8002132:	6a3a      	ldr	r2, [r7, #32]
 8002134:	4313      	orrs	r3, r2
 8002136:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800213a:	3304      	adds	r3, #4
 800213c:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	6a3a      	ldr	r2, [r7, #32]
 8002144:	429a      	cmp	r2, r3
 8002146:	d90a      	bls.n	800215e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68da      	ldr	r2, [r3, #12]
 800214c:	6a3b      	ldr	r3, [r7, #32]
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4619      	mov	r1, r3
 8002152:	4610      	mov	r0, r2
 8002154:	f011 fe4a 	bl	8013dec <realloc>
 8002158:	4602      	mov	r2, r0
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a3a      	ldr	r2, [r7, #32]
 8002162:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002164:	2300      	movs	r3, #0
 8002166:	633b      	str	r3, [r7, #48]	; 0x30
 8002168:	e035      	b.n	80021d6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800216a:	2300      	movs	r3, #0
 800216c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002172:	6839      	ldr	r1, [r7, #0]
 8002174:	440a      	add	r2, r1
 8002176:	7812      	ldrb	r2, [r2, #0]
 8002178:	4313      	orrs	r3, r2
 800217a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800217c:	697a      	ldr	r2, [r7, #20]
 800217e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002180:	3301      	adds	r3, #1
 8002182:	6839      	ldr	r1, [r7, #0]
 8002184:	440b      	add	r3, r1
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	021b      	lsls	r3, r3, #8
 800218a:	4313      	orrs	r3, r2
 800218c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002192:	3302      	adds	r3, #2
 8002194:	6839      	ldr	r1, [r7, #0]
 8002196:	440b      	add	r3, r1
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	041b      	lsls	r3, r3, #16
 800219c:	4313      	orrs	r3, r2
 800219e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80021a0:	697a      	ldr	r2, [r7, #20]
 80021a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021a4:	3303      	adds	r3, #3
 80021a6:	6839      	ldr	r1, [r7, #0]
 80021a8:	440b      	add	r3, r1
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	061b      	lsls	r3, r3, #24
 80021ae:	4313      	orrs	r3, r2
 80021b0:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80021b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ba:	3304      	adds	r3, #4
 80021bc:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	68da      	ldr	r2, [r3, #12]
 80021c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	3208      	adds	r2, #8
 80021cc:	6812      	ldr	r2, [r2, #0]
 80021ce:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80021d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d2:	3301      	adds	r3, #1
 80021d4:	633b      	str	r3, [r7, #48]	; 0x30
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021dc:	429a      	cmp	r2, r3
 80021de:	d3c4      	bcc.n	800216a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80021e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	4413      	add	r3, r2
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80021ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ec:	3301      	adds	r3, #1
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	4413      	add	r3, r2
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	021b      	lsls	r3, r3, #8
 80021f6:	69fa      	ldr	r2, [r7, #28]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80021fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021fe:	3302      	adds	r3, #2
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	4413      	add	r3, r2
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	041b      	lsls	r3, r3, #16
 8002208:	69fa      	ldr	r2, [r7, #28]
 800220a:	4313      	orrs	r3, r2
 800220c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800220e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002210:	3303      	adds	r3, #3
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	4413      	add	r3, r2
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	061b      	lsls	r3, r3, #24
 800221a:	69fa      	ldr	r2, [r7, #28]
 800221c:	4313      	orrs	r3, r2
 800221e:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002222:	3304      	adds	r3, #4
 8002224:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	69fa      	ldr	r2, [r7, #28]
 800222c:	429a      	cmp	r2, r3
 800222e:	d90a      	bls.n	8002246 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	699a      	ldr	r2, [r3, #24]
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4619      	mov	r1, r3
 800223a:	4610      	mov	r0, r2
 800223c:	f011 fdd6 	bl	8013dec <realloc>
 8002240:	4602      	mov	r2, r0
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	69fa      	ldr	r2, [r7, #28]
 800224a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 800224c:	2300      	movs	r3, #0
 800224e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002250:	e035      	b.n	80022be <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002252:	2300      	movs	r3, #0
 8002254:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800225a:	6839      	ldr	r1, [r7, #0]
 800225c:	440a      	add	r2, r1
 800225e:	7812      	ldrb	r2, [r2, #0]
 8002260:	4313      	orrs	r3, r2
 8002262:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002268:	3301      	adds	r3, #1
 800226a:	6839      	ldr	r1, [r7, #0]
 800226c:	440b      	add	r3, r1
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	021b      	lsls	r3, r3, #8
 8002272:	4313      	orrs	r3, r2
 8002274:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800227a:	3302      	adds	r3, #2
 800227c:	6839      	ldr	r1, [r7, #0]
 800227e:	440b      	add	r3, r1
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	041b      	lsls	r3, r3, #16
 8002284:	4313      	orrs	r3, r2
 8002286:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800228c:	3303      	adds	r3, #3
 800228e:	6839      	ldr	r1, [r7, #0]
 8002290:	440b      	add	r3, r1
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	061b      	lsls	r3, r3, #24
 8002296:	4313      	orrs	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80022a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022a2:	3304      	adds	r3, #4
 80022a4:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	699a      	ldr	r2, [r3, #24]
 80022aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4413      	add	r3, r2
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	3214      	adds	r2, #20
 80022b4:	6812      	ldr	r2, [r2, #0]
 80022b6:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80022b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ba:	3301      	adds	r3, #1
 80022bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d3c4      	bcc.n	8002252 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80022c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	4413      	add	r3, r2
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80022d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022d4:	3301      	adds	r3, #1
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	4413      	add	r3, r2
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	021b      	lsls	r3, r3, #8
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80022e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022e6:	3302      	adds	r3, #2
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	4413      	add	r3, r2
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	041b      	lsls	r3, r3, #16
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80022f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022f8:	3303      	adds	r3, #3
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	4413      	add	r3, r2
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	061b      	lsls	r3, r3, #24
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4313      	orrs	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800230a:	3304      	adds	r3, #4
 800230c:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	429a      	cmp	r2, r3
 8002316:	d90a      	bls.n	800232e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4619      	mov	r1, r3
 8002322:	4610      	mov	r0, r2
 8002324:	f011 fd62 	bl	8013dec <realloc>
 8002328:	4602      	mov	r2, r0
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002334:	2300      	movs	r3, #0
 8002336:	62bb      	str	r3, [r7, #40]	; 0x28
 8002338:	e03e      	b.n	80023b8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800233a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	441a      	add	r2, r3
 8002340:	f107 030c 	add.w	r3, r7, #12
 8002344:	4611      	mov	r1, r2
 8002346:	4618      	mov	r0, r3
 8002348:	f001 fbe7 	bl	8003b1a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800234c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800234e:	3304      	adds	r3, #4
 8002350:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002354:	627b      	str	r3, [r7, #36]	; 0x24
 8002356:	e00b      	b.n	8002370 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	441a      	add	r2, r3
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	3b01      	subs	r3, #1
 8002362:	6839      	ldr	r1, [r7, #0]
 8002364:	440b      	add	r3, r1
 8002366:	7812      	ldrb	r2, [r2, #0]
 8002368:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	3301      	adds	r3, #1
 800236e:	627b      	str	r3, [r7, #36]	; 0x24
 8002370:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	4413      	add	r3, r2
 8002376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002378:	429a      	cmp	r2, r3
 800237a:	d3ed      	bcc.n	8002358 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 800237c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	4413      	add	r3, r2
 8002382:	3b01      	subs	r3, #1
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	4413      	add	r3, r2
 8002388:	2200      	movs	r2, #0
 800238a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 800238c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800238e:	3b01      	subs	r3, #1
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	441a      	add	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002398:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	4413      	add	r3, r2
 800239e:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	4413      	add	r3, r2
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	3220      	adds	r2, #32
 80023ae:	6812      	ldr	r2, [r2, #0]
 80023b0:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80023b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b4:	3301      	adds	r3, #1
 80023b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	69db      	ldr	r3, [r3, #28]
 80023bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023be:	429a      	cmp	r2, r3
 80023c0:	d3bb      	bcc.n	800233a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 80023c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80023c4:	4618      	mov	r0, r3
 80023c6:	3738      	adds	r7, #56	; 0x38
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	4b03      	ldr	r3, [pc, #12]	; (80023e4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80023d6:	4618      	mov	r0, r3
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	0801423c 	.word	0x0801423c

080023e8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	4b03      	ldr	r3, [pc, #12]	; (8002400 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80023f2:	4618      	mov	r0, r3
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	08014070 	.word	0x08014070

08002404 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
 8002410:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	68ba      	ldr	r2, [r7, #8]
 8002416:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	611a      	str	r2, [r3, #16]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	4618      	mov	r0, r3
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr

08002432 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002432:	b580      	push	{r7, lr}
 8002434:	b082      	sub	sp, #8
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
 800243a:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68d8      	ldr	r0, [r3, #12]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	6891      	ldr	r1, [r2, #8]
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	4798      	blx	r3
 8002450:	4603      	mov	r3, r0
  };
 8002452:	4618      	mov	r0, r3
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
  }
 8002466:	4618      	mov	r0, r3
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
	...

08002474 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a4b      	ldr	r2, [pc, #300]	; (80025b4 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d077      	beq.n	800257c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a48      	ldr	r2, [pc, #288]	; (80025b8 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d06f      	beq.n	800257c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a45      	ldr	r2, [pc, #276]	; (80025bc <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d067      	beq.n	800257c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a42      	ldr	r2, [pc, #264]	; (80025c0 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d05f      	beq.n	800257c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a3f      	ldr	r2, [pc, #252]	; (80025c4 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d057      	beq.n	800257c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a3c      	ldr	r2, [pc, #240]	; (80025c8 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d04f      	beq.n	800257c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a39      	ldr	r2, [pc, #228]	; (80025cc <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d047      	beq.n	800257c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a36      	ldr	r2, [pc, #216]	; (80025d0 <_ZN13STM32Hardware10getRdmaIndEv+0x15c>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d03f      	beq.n	800257c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a33      	ldr	r2, [pc, #204]	; (80025d4 <_ZN13STM32Hardware10getRdmaIndEv+0x160>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d037      	beq.n	800257c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a30      	ldr	r2, [pc, #192]	; (80025d8 <_ZN13STM32Hardware10getRdmaIndEv+0x164>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d02f      	beq.n	800257c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a2d      	ldr	r2, [pc, #180]	; (80025dc <_ZN13STM32Hardware10getRdmaIndEv+0x168>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d027      	beq.n	800257c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a2a      	ldr	r2, [pc, #168]	; (80025e0 <_ZN13STM32Hardware10getRdmaIndEv+0x16c>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d01f      	beq.n	800257c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a27      	ldr	r2, [pc, #156]	; (80025e4 <_ZN13STM32Hardware10getRdmaIndEv+0x170>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d017      	beq.n	800257c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a24      	ldr	r2, [pc, #144]	; (80025e8 <_ZN13STM32Hardware10getRdmaIndEv+0x174>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d00f      	beq.n	800257c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a21      	ldr	r2, [pc, #132]	; (80025ec <_ZN13STM32Hardware10getRdmaIndEv+0x178>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d007      	beq.n	800257c <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a1e      	ldr	r2, [pc, #120]	; (80025f0 <_ZN13STM32Hardware10getRdmaIndEv+0x17c>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d10a      	bne.n	8002592 <_ZN13STM32Hardware10getRdmaIndEv+0x11e>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800258c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002590:	e009      	b.n	80025a6 <_ZN13STM32Hardware10getRdmaIndEv+0x132>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80025a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025a6:	4618      	mov	r0, r3
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	40020010 	.word	0x40020010
 80025b8:	40020028 	.word	0x40020028
 80025bc:	40020040 	.word	0x40020040
 80025c0:	40020058 	.word	0x40020058
 80025c4:	40020070 	.word	0x40020070
 80025c8:	40020088 	.word	0x40020088
 80025cc:	400200a0 	.word	0x400200a0
 80025d0:	400200b8 	.word	0x400200b8
 80025d4:	40020410 	.word	0x40020410
 80025d8:	40020428 	.word	0x40020428
 80025dc:	40020440 	.word	0x40020440
 80025e0:	40020458 	.word	0x40020458
 80025e4:	40020470 	.word	0x40020470
 80025e8:	40020488 	.word	0x40020488
 80025ec:	400204a0 	.word	0x400204a0
 80025f0:	400204b8 	.word	0x400204b8

080025f4 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
      huart(&huart4), rind(0), twind(0), tfind(0){
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a0a      	ldr	r2, [pc, #40]	; (8002628 <_ZN13STM32HardwareC1Ev+0x34>)
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4618      	mov	r0, r3
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr
 8002628:	240001c8 	.word	0x240001c8

0800262c <_ZN13STM32Hardware10reset_rbufEv>:
  
    void init(){
      reset_rbuf();
    }

    void reset_rbuf(void){
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6818      	ldr	r0, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3304      	adds	r3, #4
 800263c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002640:	4619      	mov	r1, r3
 8002642:	f00e fbf1 	bl	8010e28 <HAL_UART_Receive_DMA>
    }
 8002646:	bf00      	nop
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <_ZN13STM32Hardware4readEv>:

    int read(){
 800264e:	b590      	push	{r4, r7, lr}
 8002650:	b085      	sub	sp, #20
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002656:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800265a:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7ff ff06 	bl	8002474 <_ZN13STM32Hardware10getRdmaIndEv>
 8002668:	4603      	mov	r3, r0
 800266a:	429c      	cmp	r4, r3
 800266c:	bf14      	ite	ne
 800266e:	2301      	movne	r3, #1
 8002670:	2300      	moveq	r3, #0
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b00      	cmp	r3, #0
 8002676:	d012      	beq.n	800269e <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800267e:	1c59      	adds	r1, r3, #1
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	4413      	add	r3, r2
 800268a:	791b      	ldrb	r3, [r3, #4]
 800268c:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002694:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 800269e:	68fb      	ldr	r3, [r7, #12]
    }
 80026a0:	4618      	mov	r0, r3
 80026a2:	3714      	adds	r7, #20
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd90      	pop	{r4, r7, pc}

080026a8 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b8:	2b20      	cmp	r3, #32
 80026ba:	d108      	bne.n	80026ce <_ZN13STM32Hardware5flushEv+0x26>
 80026bc:	4b27      	ldr	r3, [pc, #156]	; (800275c <_ZN13STM32Hardware5flushEv+0xb4>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	f083 0301 	eor.w	r3, r3, #1
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <_ZN13STM32Hardware5flushEv+0x26>
 80026ca:	2301      	movs	r3, #1
 80026cc:	e000      	b.n	80026d0 <_ZN13STM32Hardware5flushEv+0x28>
 80026ce:	2300      	movs	r3, #0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d03f      	beq.n	8002754 <_ZN13STM32Hardware5flushEv+0xac>
        mutex = true;
 80026d4:	4b21      	ldr	r3, [pc, #132]	; (800275c <_ZN13STM32Hardware5flushEv+0xb4>)
 80026d6:	2201      	movs	r2, #1
 80026d8:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d031      	beq.n	800274e <_ZN13STM32Hardware5flushEv+0xa6>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d20a      	bcs.n	8002710 <_ZN13STM32Hardware5flushEv+0x68>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002700:	b29a      	uxth	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002708:	b29b      	uxth	r3, r3
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	b29b      	uxth	r3, r3
 800270e:	e006      	b.n	800271e <_ZN13STM32Hardware5flushEv+0x76>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002716:	b29b      	uxth	r3, r3
 8002718:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800271c:	b29b      	uxth	r3, r3
 800271e:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6818      	ldr	r0, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800272a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	4413      	add	r3, r2
 8002732:	89fa      	ldrh	r2, [r7, #14]
 8002734:	4619      	mov	r1, r3
 8002736:	f00e faf7 	bl	8010d28 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002740:	89fb      	ldrh	r3, [r7, #14]
 8002742:	4413      	add	r3, r2
 8002744:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 800274e:	4b03      	ldr	r3, [pc, #12]	; (800275c <_ZN13STM32Hardware5flushEv+0xb4>)
 8002750:	2200      	movs	r2, #0
 8002752:	701a      	strb	r2, [r3, #0]
      }
    }
 8002754:	bf00      	nop
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	24000e1c 	.word	0x24000e1c

08002760 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
      int n = length;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002776:	bfa8      	it	ge
 8002778:	f44f 7300 	movge.w	r3, #512	; 0x200
 800277c:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002784:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	4293      	cmp	r3, r2
 800278c:	bf28      	it	cs
 800278e:	4613      	movcs	r3, r2
 8002790:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002798:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	4413      	add	r3, r2
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	68b9      	ldr	r1, [r7, #8]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f011 fb9d 	bl	8013ee4 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	4413      	add	r3, r2
 80027b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d00b      	beq.n	80027de <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f503 7002 	add.w	r0, r3, #520	; 0x208
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	68ba      	ldr	r2, [r7, #8]
 80027d0:	18d1      	adds	r1, r2, r3
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	461a      	mov	r2, r3
 80027da:	f011 fb83 	bl	8013ee4 <memcpy>
      }

      flush();
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f7ff ff62 	bl	80026a8 <_ZN13STM32Hardware5flushEv>
    }
 80027e4:	bf00      	nop
 80027e6:	3718      	adds	r7, #24
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	f002 fff0 	bl	80057d8 <HAL_GetTick>
 80027f8:	4603      	mov	r3, r0
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
	...

08002804 <_ZN8std_msgs19MultiArrayDimensionC1Ev>:
      typedef uint32_t _size_type;
      _size_type size;
      typedef uint32_t _stride_type;
      _stride_type stride;

    MultiArrayDimension():
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
      label(""),
      size(0),
      stride(0)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4618      	mov	r0, r3
 8002810:	f7fe ffb8 	bl	8001784 <_ZN3ros3MsgC1Ev>
 8002814:	4a08      	ldr	r2, [pc, #32]	; (8002838 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x34>)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	601a      	str	r2, [r3, #0]
      label(""),
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a07      	ldr	r2, [pc, #28]	; (800283c <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x38>)
 800281e:	605a      	str	r2, [r3, #4]
      size(0),
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	609a      	str	r2, [r3, #8]
      stride(0)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	60da      	str	r2, [r3, #12]
    {
    }
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4618      	mov	r0, r3
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	080142bc 	.word	0x080142bc
 800283c:	08013ff4 	.word	0x08013ff4

08002840 <_ZNK8std_msgs19MultiArrayDimension9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800284a:	2300      	movs	r3, #0
 800284c:	60fb      	str	r3, [r7, #12]
      uint32_t length_label = strlen(this->label);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	4618      	mov	r0, r3
 8002854:	f7fd fd40 	bl	80002d8 <strlen>
 8002858:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_label);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	4413      	add	r3, r2
 8002860:	68b9      	ldr	r1, [r7, #8]
 8002862:	4618      	mov	r0, r3
 8002864:	f001 f93a 	bl	8003adc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	3304      	adds	r3, #4
 800286c:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->label, length_label);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	18d0      	adds	r0, r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	68ba      	ldr	r2, [r7, #8]
 800287a:	4619      	mov	r1, r3
 800287c:	f011 fb32 	bl	8013ee4 <memcpy>
      offset += length_label;
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	4413      	add	r3, r2
 8002886:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6899      	ldr	r1, [r3, #8]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	683a      	ldr	r2, [r7, #0]
 8002890:	4413      	add	r3, r2
 8002892:	b2ca      	uxtb	r2, r1
 8002894:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	0a19      	lsrs	r1, r3, #8
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	3301      	adds	r3, #1
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	4413      	add	r3, r2
 80028a4:	b2ca      	uxtb	r2, r1
 80028a6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	0c19      	lsrs	r1, r3, #16
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	3302      	adds	r3, #2
 80028b2:	683a      	ldr	r2, [r7, #0]
 80028b4:	4413      	add	r3, r2
 80028b6:	b2ca      	uxtb	r2, r1
 80028b8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	0e19      	lsrs	r1, r3, #24
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	3303      	adds	r3, #3
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	4413      	add	r3, r2
 80028c8:	b2ca      	uxtb	r2, r1
 80028ca:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->size);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	3304      	adds	r3, #4
 80028d0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68d9      	ldr	r1, [r3, #12]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	4413      	add	r3, r2
 80028dc:	b2ca      	uxtb	r2, r1
 80028de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	0a19      	lsrs	r1, r3, #8
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	3301      	adds	r3, #1
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	4413      	add	r3, r2
 80028ee:	b2ca      	uxtb	r2, r1
 80028f0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	0c19      	lsrs	r1, r3, #16
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	3302      	adds	r3, #2
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	4413      	add	r3, r2
 8002900:	b2ca      	uxtb	r2, r1
 8002902:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	0e19      	lsrs	r1, r3, #24
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	3303      	adds	r3, #3
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	4413      	add	r3, r2
 8002912:	b2ca      	uxtb	r2, r1
 8002914:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stride);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	3304      	adds	r3, #4
 800291a:	60fb      	str	r3, [r7, #12]
      return offset;
 800291c:	68fb      	ldr	r3, [r7, #12]
    }
 800291e:	4618      	mov	r0, r3
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002926:	b580      	push	{r7, lr}
 8002928:	b086      	sub	sp, #24
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
 800292e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002930:	2300      	movs	r3, #0
 8002932:	613b      	str	r3, [r7, #16]
      uint32_t length_label;
      arrToVar(length_label, (inbuffer + offset));
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	441a      	add	r2, r3
 800293a:	f107 030c 	add.w	r3, r7, #12
 800293e:	4611      	mov	r1, r2
 8002940:	4618      	mov	r0, r3
 8002942:	f001 f8ea 	bl	8003b1a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	3304      	adds	r3, #4
 800294a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	617b      	str	r3, [r7, #20]
 8002950:	e00b      	b.n	800296a <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	441a      	add	r2, r3
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	3b01      	subs	r3, #1
 800295c:	6839      	ldr	r1, [r7, #0]
 800295e:	440b      	add	r3, r1
 8002960:	7812      	ldrb	r2, [r2, #0]
 8002962:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	3301      	adds	r3, #1
 8002968:	617b      	str	r3, [r7, #20]
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	4413      	add	r3, r2
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	429a      	cmp	r2, r3
 8002974:	d3ed      	bcc.n	8002952 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x2c>
      }
      inbuffer[offset+length_label-1]=0;
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	4413      	add	r3, r2
 800297c:	3b01      	subs	r3, #1
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	4413      	add	r3, r2
 8002982:	2200      	movs	r2, #0
 8002984:	701a      	strb	r2, [r3, #0]
      this->label = (char *)(inbuffer + offset-1);
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	3b01      	subs	r3, #1
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	441a      	add	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	605a      	str	r2, [r3, #4]
      offset += length_label;
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	4413      	add	r3, r2
 8002998:	613b      	str	r3, [r7, #16]
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	4413      	add	r3, r2
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	461a      	mov	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	3301      	adds	r3, #1
 80029b0:	6839      	ldr	r1, [r7, #0]
 80029b2:	440b      	add	r3, r1
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	021b      	lsls	r3, r3, #8
 80029b8:	431a      	orrs	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689a      	ldr	r2, [r3, #8]
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	3302      	adds	r3, #2
 80029c6:	6839      	ldr	r1, [r7, #0]
 80029c8:	440b      	add	r3, r1
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	041b      	lsls	r3, r3, #16
 80029ce:	431a      	orrs	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	3303      	adds	r3, #3
 80029dc:	6839      	ldr	r1, [r7, #0]
 80029de:	440b      	add	r3, r1
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	061b      	lsls	r3, r3, #24
 80029e4:	431a      	orrs	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->size);
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	3304      	adds	r3, #4
 80029ee:	613b      	str	r3, [r7, #16]
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	4413      	add	r3, r2
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	461a      	mov	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68da      	ldr	r2, [r3, #12]
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	3301      	adds	r3, #1
 8002a06:	6839      	ldr	r1, [r7, #0]
 8002a08:	440b      	add	r3, r1
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	021b      	lsls	r3, r3, #8
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68da      	ldr	r2, [r3, #12]
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	3302      	adds	r3, #2
 8002a1c:	6839      	ldr	r1, [r7, #0]
 8002a1e:	440b      	add	r3, r1
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	041b      	lsls	r3, r3, #16
 8002a24:	431a      	orrs	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68da      	ldr	r2, [r3, #12]
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	3303      	adds	r3, #3
 8002a32:	6839      	ldr	r1, [r7, #0]
 8002a34:	440b      	add	r3, r1
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	061b      	lsls	r3, r3, #24
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stride);
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	3304      	adds	r3, #4
 8002a44:	613b      	str	r3, [r7, #16]
     return offset;
 8002a46:	693b      	ldr	r3, [r7, #16]
    }
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3718      	adds	r7, #24
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <_ZN8std_msgs19MultiArrayDimension7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayDimension"; };
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	4b03      	ldr	r3, [pc, #12]	; (8002a68 <_ZN8std_msgs19MultiArrayDimension7getTypeEv+0x18>)
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	08014094 	.word	0x08014094

08002a6c <_ZN8std_msgs19MultiArrayDimension6getMD5Ev>:
    virtual const char * getMD5() override { return "4cd0c83a8683deae40ecdac60e53bfa8"; };
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	4b03      	ldr	r3, [pc, #12]	; (8002a84 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev+0x18>)
 8002a76:	4618      	mov	r0, r3
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	080140b4 	.word	0x080140b4

08002a88 <_ZN8std_msgs16MultiArrayLayoutC1Ev>:
      _dim_type st_dim;
      _dim_type * dim;
      typedef uint32_t _data_offset_type;
      _data_offset_type data_offset;

    MultiArrayLayout():
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
      dim_length(0), st_dim(), dim(nullptr),
      data_offset(0)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7fe fe76 	bl	8001784 <_ZN3ros3MsgC1Ev>
 8002a98:	4a0a      	ldr	r2, [pc, #40]	; (8002ac4 <_ZN8std_msgs16MultiArrayLayoutC1Ev+0x3c>)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	601a      	str	r2, [r3, #0]
      dim_length(0), st_dim(), dim(nullptr),
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	605a      	str	r2, [r3, #4]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3308      	adds	r3, #8
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff feab 	bl	8002804 <_ZN8std_msgs19MultiArrayDimensionC1Ev>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	619a      	str	r2, [r3, #24]
      data_offset(0)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	61da      	str	r2, [r3, #28]
    {
    }
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4618      	mov	r0, r3
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	080142a4 	.word	0x080142a4

08002ac8 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6859      	ldr	r1, [r3, #4]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	4413      	add	r3, r2
 8002ae0:	b2ca      	uxtb	r2, r1
 8002ae2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	0a19      	lsrs	r1, r3, #8
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	3301      	adds	r3, #1
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	4413      	add	r3, r2
 8002af2:	b2ca      	uxtb	r2, r1
 8002af4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	0c19      	lsrs	r1, r3, #16
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	3302      	adds	r3, #2
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	4413      	add	r3, r2
 8002b04:	b2ca      	uxtb	r2, r1
 8002b06:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	0e19      	lsrs	r1, r3, #24
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	3303      	adds	r3, #3
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	4413      	add	r3, r2
 8002b16:	b2ca      	uxtb	r2, r1
 8002b18:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->dim_length);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8002b20:	2300      	movs	r3, #0
 8002b22:	60bb      	str	r3, [r7, #8]
 8002b24:	e017      	b.n	8002b56 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x8e>
      offset += this->dim[i].serialize(outbuffer + offset);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	699a      	ldr	r2, [r3, #24]
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	011b      	lsls	r3, r3, #4
 8002b2e:	18d0      	adds	r0, r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	699a      	ldr	r2, [r3, #24]
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	011b      	lsls	r3, r3, #4
 8002b38:	4413      	add	r3, r2
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	6839      	ldr	r1, [r7, #0]
 8002b42:	440a      	add	r2, r1
 8002b44:	4611      	mov	r1, r2
 8002b46:	4798      	blx	r3
 8002b48:	4602      	mov	r2, r0
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	3301      	adds	r3, #1
 8002b54:	60bb      	str	r3, [r7, #8]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	68ba      	ldr	r2, [r7, #8]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d3e2      	bcc.n	8002b26 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	69d9      	ldr	r1, [r3, #28]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	4413      	add	r3, r2
 8002b6a:	b2ca      	uxtb	r2, r1
 8002b6c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	0a19      	lsrs	r1, r3, #8
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	3301      	adds	r3, #1
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	b2ca      	uxtb	r2, r1
 8002b7e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	69db      	ldr	r3, [r3, #28]
 8002b84:	0c19      	lsrs	r1, r3, #16
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	3302      	adds	r3, #2
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	b2ca      	uxtb	r2, r1
 8002b90:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	0e19      	lsrs	r1, r3, #24
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	3303      	adds	r3, #3
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	b2ca      	uxtb	r2, r1
 8002ba2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_offset);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	3304      	adds	r3, #4
 8002ba8:	60fb      	str	r3, [r7, #12]
      return offset;
 8002baa:	68fb      	ldr	r3, [r7, #12]
    }
 8002bac:	4618      	mov	r0, r3
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	617b      	str	r3, [r7, #20]
      uint32_t dim_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	021b      	lsls	r3, r3, #8
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	3302      	adds	r3, #2
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	4413      	add	r3, r2
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	041b      	lsls	r3, r3, #16
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	3303      	adds	r3, #3
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	061b      	lsls	r3, r3, #24
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->dim_length);
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	3304      	adds	r3, #4
 8002c06:	617b      	str	r3, [r7, #20]
      if(dim_lengthT > dim_length)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d90a      	bls.n	8002c28 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x74>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	699a      	ldr	r2, [r3, #24]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	011b      	lsls	r3, r3, #4
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4610      	mov	r0, r2
 8002c1e:	f011 f8e5 	bl	8013dec <realloc>
 8002c22:	4602      	mov	r2, r0
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	619a      	str	r2, [r3, #24]
      dim_length = dim_lengthT;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < dim_length; i++){
 8002c2e:	2300      	movs	r3, #0
 8002c30:	613b      	str	r3, [r7, #16]
 8002c32:	e01a      	b.n	8002c6a <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xb6>
      offset += this->st_dim.deserialize(inbuffer + offset);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f103 0008 	add.w	r0, r3, #8
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	4413      	add	r3, r2
 8002c40:	4619      	mov	r1, r3
 8002c42:	f7ff fe70 	bl	8002926 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>
 8002c46:	4602      	mov	r2, r0
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	617b      	str	r3, [r7, #20]
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	699a      	ldr	r2, [r3, #24]
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	011b      	lsls	r3, r3, #4
 8002c56:	18d0      	adds	r0, r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3308      	adds	r3, #8
 8002c5c:	2210      	movs	r2, #16
 8002c5e:	4619      	mov	r1, r3
 8002c60:	f011 f940 	bl	8013ee4 <memcpy>
      for( uint32_t i = 0; i < dim_length; i++){
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	3301      	adds	r3, #1
 8002c68:	613b      	str	r3, [r7, #16]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d3df      	bcc.n	8002c34 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x80>
      }
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	4413      	add	r3, r2
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	69da      	ldr	r2, [r3, #28]
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	3301      	adds	r3, #1
 8002c8a:	6839      	ldr	r1, [r7, #0]
 8002c8c:	440b      	add	r3, r1
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	021b      	lsls	r3, r3, #8
 8002c92:	431a      	orrs	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	69da      	ldr	r2, [r3, #28]
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	3302      	adds	r3, #2
 8002ca0:	6839      	ldr	r1, [r7, #0]
 8002ca2:	440b      	add	r3, r1
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	041b      	lsls	r3, r3, #16
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	69da      	ldr	r2, [r3, #28]
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	3303      	adds	r3, #3
 8002cb6:	6839      	ldr	r1, [r7, #0]
 8002cb8:	440b      	add	r3, r1
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	061b      	lsls	r3, r3, #24
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->data_offset);
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	3304      	adds	r3, #4
 8002cc8:	617b      	str	r3, [r7, #20]
     return offset;
 8002cca:	697b      	ldr	r3, [r7, #20]
    }
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3718      	adds	r7, #24
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <_ZN8std_msgs16MultiArrayLayout7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayLayout"; };
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	4b03      	ldr	r3, [pc, #12]	; (8002cec <_ZN8std_msgs16MultiArrayLayout7getTypeEv+0x18>)
 8002cde:	4618      	mov	r0, r3
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	080140d8 	.word	0x080140d8

08002cf0 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev>:
    virtual const char * getMD5() override { return "0fed2a11c13e11c5571b4e2a995a91a3"; };
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	4b03      	ldr	r3, [pc, #12]	; (8002d08 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev+0x18>)
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	080140f4 	.word	0x080140f4

08002d0c <_ZN8std_msgs17Float32MultiArrayC1Ev>:
      uint32_t data_length;
      typedef float _data_type;
      _data_type st_data;
      _data_type * data;

    Float32MultiArray():
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
      layout(),
      data_length(0), st_data(), data(nullptr)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7fe fd34 	bl	8001784 <_ZN3ros3MsgC1Ev>
 8002d1c:	4a0b      	ldr	r2, [pc, #44]	; (8002d4c <_ZN8std_msgs17Float32MultiArrayC1Ev+0x40>)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	601a      	str	r2, [r3, #0]
      layout(),
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	3304      	adds	r3, #4
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7ff feae 	bl	8002a88 <_ZN8std_msgs16MultiArrayLayoutC1Ev>
      data_length(0), st_data(), data(nullptr)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	625a      	str	r2, [r3, #36]	; 0x24
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f04f 0200 	mov.w	r2, #0
 8002d38:	629a      	str	r2, [r3, #40]	; 0x28
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	62da      	str	r2, [r3, #44]	; 0x2c
    {
    }
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4618      	mov	r0, r3
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	0801428c 	.word	0x0801428c

08002d50 <_ZNK8std_msgs17Float32MultiArray9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	617b      	str	r3, [r7, #20]
      offset += this->layout.serialize(outbuffer + offset);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	1d18      	adds	r0, r3, #4
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	4413      	add	r3, r2
 8002d68:	4619      	mov	r1, r3
 8002d6a:	f7ff fead 	bl	8002ac8 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	4413      	add	r3, r2
 8002d74:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	4413      	add	r3, r2
 8002d80:	b2ca      	uxtb	r2, r1
 8002d82:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d88:	0a19      	lsrs	r1, r3, #8
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	4413      	add	r3, r2
 8002d92:	b2ca      	uxtb	r2, r1
 8002d94:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9a:	0c19      	lsrs	r1, r3, #16
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	3302      	adds	r3, #2
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	4413      	add	r3, r2
 8002da4:	b2ca      	uxtb	r2, r1
 8002da6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	0e19      	lsrs	r1, r3, #24
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	3303      	adds	r3, #3
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	4413      	add	r3, r2
 8002db6:	b2ca      	uxtb	r2, r1
 8002db8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_length);
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	3304      	adds	r3, #4
 8002dbe:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	613b      	str	r3, [r7, #16]
 8002dc4:	e02a      	b.n	8002e1c <_ZNK8std_msgs17Float32MultiArray9serializeEPh+0xcc>
      union {
        float real;
        uint32_t base;
      } u_datai;
      u_datai.real = this->data[i];
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4413      	add	r3, r2
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
 8002dd4:	68f9      	ldr	r1, [r7, #12]
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	4413      	add	r3, r2
 8002ddc:	b2ca      	uxtb	r2, r1
 8002dde:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_datai.base >> (8 * 1)) & 0xFF;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	0a19      	lsrs	r1, r3, #8
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	3301      	adds	r3, #1
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	4413      	add	r3, r2
 8002dec:	b2ca      	uxtb	r2, r1
 8002dee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_datai.base >> (8 * 2)) & 0xFF;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	0c19      	lsrs	r1, r3, #16
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	3302      	adds	r3, #2
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	b2ca      	uxtb	r2, r1
 8002dfe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_datai.base >> (8 * 3)) & 0xFF;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	0e19      	lsrs	r1, r3, #24
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	3303      	adds	r3, #3
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	b2ca      	uxtb	r2, r1
 8002e0e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data[i]);
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	3304      	adds	r3, #4
 8002e14:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	613b      	str	r3, [r7, #16]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d3cf      	bcc.n	8002dc6 <_ZNK8std_msgs17Float32MultiArray9serializeEPh+0x76>
      }
      return offset;
 8002e26:	697b      	ldr	r3, [r7, #20]
    }
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3718      	adds	r7, #24
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <_ZN8std_msgs17Float32MultiArray11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	617b      	str	r3, [r7, #20]
      offset += this->layout.deserialize(inbuffer + offset);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	1d18      	adds	r0, r3, #4
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	4413      	add	r3, r2
 8002e48:	4619      	mov	r1, r3
 8002e4a:	f7ff feb3 	bl	8002bb4 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	4413      	add	r3, r2
 8002e54:	617b      	str	r3, [r7, #20]
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	3301      	adds	r3, #1
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	4413      	add	r3, r2
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	021b      	lsls	r3, r3, #8
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	3302      	adds	r3, #2
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	4413      	add	r3, r2
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	041b      	lsls	r3, r3, #16
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	3303      	adds	r3, #3
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	061b      	lsls	r3, r3, #24
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->data_length);
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	3304      	adds	r3, #4
 8002e9a:	617b      	str	r3, [r7, #20]
      if(data_lengthT > data_length)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d90a      	bls.n	8002ebc <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x8c>
        this->data = (float*)realloc(this->data, data_lengthT * sizeof(float));
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4619      	mov	r1, r3
 8002eb0:	4610      	mov	r0, r2
 8002eb2:	f010 ff9b 	bl	8013dec <realloc>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	62da      	str	r2, [r3, #44]	; 0x2c
      data_length = data_lengthT;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	625a      	str	r2, [r3, #36]	; 0x24
      for( uint32_t i = 0; i < data_length; i++){
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	613b      	str	r3, [r7, #16]
 8002ec6:	e035      	b.n	8002f34 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x104>
      union {
        float real;
        uint32_t base;
      } u_st_data;
      u_st_data.base = 0;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	6839      	ldr	r1, [r7, #0]
 8002ed2:	440a      	add	r2, r1
 8002ed4:	7812      	ldrb	r2, [r2, #0]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	6839      	ldr	r1, [r7, #0]
 8002ee2:	440b      	add	r3, r1
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	021b      	lsls	r3, r3, #8
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002eec:	68ba      	ldr	r2, [r7, #8]
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	3302      	adds	r3, #2
 8002ef2:	6839      	ldr	r1, [r7, #0]
 8002ef4:	440b      	add	r3, r1
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	041b      	lsls	r3, r3, #16
 8002efa:	4313      	orrs	r3, r2
 8002efc:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002efe:	68ba      	ldr	r2, [r7, #8]
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	3303      	adds	r3, #3
 8002f04:	6839      	ldr	r1, [r7, #0]
 8002f06:	440b      	add	r3, r1
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	061b      	lsls	r3, r3, #24
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	60bb      	str	r3, [r7, #8]
      this->st_data = u_st_data.real;
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	629a      	str	r2, [r3, #40]	; 0x28
      offset += sizeof(this->st_data);
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	3304      	adds	r3, #4
 8002f1a:	617b      	str	r3, [r7, #20]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(float));
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	4413      	add	r3, r2
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	3228      	adds	r2, #40	; 0x28
 8002f2a:	6812      	ldr	r2, [r2, #0]
 8002f2c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < data_length; i++){
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	3301      	adds	r3, #1
 8002f32:	613b      	str	r3, [r7, #16]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d3c4      	bcc.n	8002ec8 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x98>
      }
     return offset;
 8002f3e:	697b      	ldr	r3, [r7, #20]
    }
 8002f40:	4618      	mov	r0, r3
 8002f42:	3718      	adds	r7, #24
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <_ZN8std_msgs17Float32MultiArray7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Float32MultiArray"; };
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	4b03      	ldr	r3, [pc, #12]	; (8002f60 <_ZN8std_msgs17Float32MultiArray7getTypeEv+0x18>)
 8002f52:	4618      	mov	r0, r3
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	08014118 	.word	0x08014118

08002f64 <_ZN8std_msgs17Float32MultiArray6getMD5Ev>:
    virtual const char * getMD5() override { return "6a40e0ffa6a17a503ac3f8616991b1f6"; };
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	4b03      	ldr	r3, [pc, #12]	; (8002f7c <_ZN8std_msgs17Float32MultiArray6getMD5Ev+0x18>)
 8002f6e:	4618      	mov	r0, r3
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	08014134 	.word	0x08014134

08002f80 <_ZN9vesc_msgs9VescStateC1Ev>:
      enum { FAULT_CODE_DRV8302 = 3 };
      enum { FAULT_CODE_ABS_OVER_CURRENT = 4 };
      enum { FAULT_CODE_OVER_TEMP_FET = 5 };
      enum { FAULT_CODE_OVER_TEMP_MOTOR = 6 };

    VescState():
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
      charge_regen(0),
      energy_drawn(0),
      energy_regen(0),
      displacement(0),
      distance_traveled(0),
      fault_code(0)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fe fbfa 	bl	8001784 <_ZN3ros3MsgC1Ev>
 8002f90:	4a1d      	ldr	r2, [pc, #116]	; (8003008 <_ZN9vesc_msgs9VescStateC1Ev+0x88>)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	601a      	str	r2, [r3, #0]
      voltage_input(0),
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f04f 0200 	mov.w	r2, #0
 8002f9c:	605a      	str	r2, [r3, #4]
      temperature_pcb(0),
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f04f 0200 	mov.w	r2, #0
 8002fa4:	609a      	str	r2, [r3, #8]
      current_motor(0),
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f04f 0200 	mov.w	r2, #0
 8002fac:	60da      	str	r2, [r3, #12]
      current_input(0),
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f04f 0200 	mov.w	r2, #0
 8002fb4:	611a      	str	r2, [r3, #16]
      speed(0),
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f04f 0200 	mov.w	r2, #0
 8002fbc:	615a      	str	r2, [r3, #20]
      duty_cycle(0),
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f04f 0200 	mov.w	r2, #0
 8002fc4:	619a      	str	r2, [r3, #24]
      charge_drawn(0),
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f04f 0200 	mov.w	r2, #0
 8002fcc:	61da      	str	r2, [r3, #28]
      charge_regen(0),
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f04f 0200 	mov.w	r2, #0
 8002fd4:	621a      	str	r2, [r3, #32]
      energy_drawn(0),
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f04f 0200 	mov.w	r2, #0
 8002fdc:	625a      	str	r2, [r3, #36]	; 0x24
      energy_regen(0),
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f04f 0200 	mov.w	r2, #0
 8002fe4:	629a      	str	r2, [r3, #40]	; 0x28
      displacement(0),
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f04f 0200 	mov.w	r2, #0
 8002fec:	62da      	str	r2, [r3, #44]	; 0x2c
      distance_traveled(0),
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f04f 0200 	mov.w	r2, #0
 8002ff4:	631a      	str	r2, [r3, #48]	; 0x30
      fault_code(0)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	635a      	str	r2, [r3, #52]	; 0x34
    {
    }
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4618      	mov	r0, r3
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	08014274 	.word	0x08014274

0800300c <_ZNK9vesc_msgs9VescState9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003016:	2300      	movs	r3, #0
 8003018:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->voltage_input);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	441a      	add	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	edd3 7a01 	vldr	s15, [r3, #4]
 8003026:	eeb0 0a67 	vmov.f32	s0, s15
 800302a:	4610      	mov	r0, r2
 800302c:	f7fe fa61 	bl	80014f2 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8003030:	4602      	mov	r2, r0
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	4413      	add	r3, r2
 8003036:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->temperature_pcb);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	441a      	add	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	edd3 7a02 	vldr	s15, [r3, #8]
 8003044:	eeb0 0a67 	vmov.f32	s0, s15
 8003048:	4610      	mov	r0, r2
 800304a:	f7fe fa52 	bl	80014f2 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800304e:	4602      	mov	r2, r0
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	4413      	add	r3, r2
 8003054:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->current_motor);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	441a      	add	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003062:	eeb0 0a67 	vmov.f32	s0, s15
 8003066:	4610      	mov	r0, r2
 8003068:	f7fe fa43 	bl	80014f2 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800306c:	4602      	mov	r2, r0
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	4413      	add	r3, r2
 8003072:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->current_input);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	441a      	add	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	edd3 7a04 	vldr	s15, [r3, #16]
 8003080:	eeb0 0a67 	vmov.f32	s0, s15
 8003084:	4610      	mov	r0, r2
 8003086:	f7fe fa34 	bl	80014f2 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800308a:	4602      	mov	r2, r0
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4413      	add	r3, r2
 8003090:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->speed);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	441a      	add	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	edd3 7a05 	vldr	s15, [r3, #20]
 800309e:	eeb0 0a67 	vmov.f32	s0, s15
 80030a2:	4610      	mov	r0, r2
 80030a4:	f7fe fa25 	bl	80014f2 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80030a8:	4602      	mov	r2, r0
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	4413      	add	r3, r2
 80030ae:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->duty_cycle);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	441a      	add	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	edd3 7a06 	vldr	s15, [r3, #24]
 80030bc:	eeb0 0a67 	vmov.f32	s0, s15
 80030c0:	4610      	mov	r0, r2
 80030c2:	f7fe fa16 	bl	80014f2 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80030c6:	4602      	mov	r2, r0
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	4413      	add	r3, r2
 80030cc:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->charge_drawn);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	441a      	add	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	edd3 7a07 	vldr	s15, [r3, #28]
 80030da:	eeb0 0a67 	vmov.f32	s0, s15
 80030de:	4610      	mov	r0, r2
 80030e0:	f7fe fa07 	bl	80014f2 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80030e4:	4602      	mov	r2, r0
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	4413      	add	r3, r2
 80030ea:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->charge_regen);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	441a      	add	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	edd3 7a08 	vldr	s15, [r3, #32]
 80030f8:	eeb0 0a67 	vmov.f32	s0, s15
 80030fc:	4610      	mov	r0, r2
 80030fe:	f7fe f9f8 	bl	80014f2 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8003102:	4602      	mov	r2, r0
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4413      	add	r3, r2
 8003108:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->energy_drawn);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	683a      	ldr	r2, [r7, #0]
 800310e:	441a      	add	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003116:	eeb0 0a67 	vmov.f32	s0, s15
 800311a:	4610      	mov	r0, r2
 800311c:	f7fe f9e9 	bl	80014f2 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8003120:	4602      	mov	r2, r0
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	4413      	add	r3, r2
 8003126:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->energy_regen);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	683a      	ldr	r2, [r7, #0]
 800312c:	441a      	add	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003134:	eeb0 0a67 	vmov.f32	s0, s15
 8003138:	4610      	mov	r0, r2
 800313a:	f7fe f9da 	bl	80014f2 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800313e:	4602      	mov	r2, r0
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4413      	add	r3, r2
 8003144:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->displacement);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	441a      	add	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003152:	eeb0 0a67 	vmov.f32	s0, s15
 8003156:	4610      	mov	r0, r2
 8003158:	f7fe f9cb 	bl	80014f2 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800315c:	4602      	mov	r2, r0
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	4413      	add	r3, r2
 8003162:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->distance_traveled);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	441a      	add	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003170:	eeb0 0a67 	vmov.f32	s0, s15
 8003174:	4610      	mov	r0, r2
 8003176:	f7fe f9bc 	bl	80014f2 <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800317a:	4602      	mov	r2, r0
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	4413      	add	r3, r2
 8003180:	60fb      	str	r3, [r7, #12]
      union {
        int32_t real;
        uint32_t base;
      } u_fault_code;
      u_fault_code.real = this->fault_code;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003186:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_fault_code.base >> (8 * 0)) & 0xFF;
 8003188:	68b9      	ldr	r1, [r7, #8]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	683a      	ldr	r2, [r7, #0]
 800318e:	4413      	add	r3, r2
 8003190:	b2ca      	uxtb	r2, r1
 8003192:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_fault_code.base >> (8 * 1)) & 0xFF;
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	0a19      	lsrs	r1, r3, #8
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	3301      	adds	r3, #1
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	4413      	add	r3, r2
 80031a0:	b2ca      	uxtb	r2, r1
 80031a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_fault_code.base >> (8 * 2)) & 0xFF;
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	0c19      	lsrs	r1, r3, #16
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	3302      	adds	r3, #2
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	4413      	add	r3, r2
 80031b0:	b2ca      	uxtb	r2, r1
 80031b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_fault_code.base >> (8 * 3)) & 0xFF;
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	0e19      	lsrs	r1, r3, #24
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	3303      	adds	r3, #3
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	4413      	add	r3, r2
 80031c0:	b2ca      	uxtb	r2, r1
 80031c2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->fault_code);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	3304      	adds	r3, #4
 80031c8:	60fb      	str	r3, [r7, #12]
      return offset;
 80031ca:	68fb      	ldr	r3, [r7, #12]
    }
 80031cc:	4618      	mov	r0, r3
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <_ZN9vesc_msgs9VescState11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80031de:	2300      	movs	r3, #0
 80031e0:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->voltage_input));
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	441a      	add	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3304      	adds	r3, #4
 80031ec:	4619      	mov	r1, r3
 80031ee:	4610      	mov	r0, r2
 80031f0:	f7fe fa1b 	bl	800162a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80031f4:	4602      	mov	r2, r0
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	4413      	add	r3, r2
 80031fa:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->temperature_pcb));
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	441a      	add	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	3308      	adds	r3, #8
 8003206:	4619      	mov	r1, r3
 8003208:	4610      	mov	r0, r2
 800320a:	f7fe fa0e 	bl	800162a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800320e:	4602      	mov	r2, r0
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4413      	add	r3, r2
 8003214:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->current_motor));
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	441a      	add	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	330c      	adds	r3, #12
 8003220:	4619      	mov	r1, r3
 8003222:	4610      	mov	r0, r2
 8003224:	f7fe fa01 	bl	800162a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8003228:	4602      	mov	r2, r0
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4413      	add	r3, r2
 800322e:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->current_input));
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	441a      	add	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	3310      	adds	r3, #16
 800323a:	4619      	mov	r1, r3
 800323c:	4610      	mov	r0, r2
 800323e:	f7fe f9f4 	bl	800162a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8003242:	4602      	mov	r2, r0
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4413      	add	r3, r2
 8003248:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->speed));
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	441a      	add	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	3314      	adds	r3, #20
 8003254:	4619      	mov	r1, r3
 8003256:	4610      	mov	r0, r2
 8003258:	f7fe f9e7 	bl	800162a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800325c:	4602      	mov	r2, r0
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	4413      	add	r3, r2
 8003262:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->duty_cycle));
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	683a      	ldr	r2, [r7, #0]
 8003268:	441a      	add	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	3318      	adds	r3, #24
 800326e:	4619      	mov	r1, r3
 8003270:	4610      	mov	r0, r2
 8003272:	f7fe f9da 	bl	800162a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8003276:	4602      	mov	r2, r0
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	4413      	add	r3, r2
 800327c:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->charge_drawn));
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	441a      	add	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	331c      	adds	r3, #28
 8003288:	4619      	mov	r1, r3
 800328a:	4610      	mov	r0, r2
 800328c:	f7fe f9cd 	bl	800162a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8003290:	4602      	mov	r2, r0
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	4413      	add	r3, r2
 8003296:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->charge_regen));
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	441a      	add	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	3320      	adds	r3, #32
 80032a2:	4619      	mov	r1, r3
 80032a4:	4610      	mov	r0, r2
 80032a6:	f7fe f9c0 	bl	800162a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80032aa:	4602      	mov	r2, r0
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4413      	add	r3, r2
 80032b0:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->energy_drawn));
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	441a      	add	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	3324      	adds	r3, #36	; 0x24
 80032bc:	4619      	mov	r1, r3
 80032be:	4610      	mov	r0, r2
 80032c0:	f7fe f9b3 	bl	800162a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80032c4:	4602      	mov	r2, r0
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	4413      	add	r3, r2
 80032ca:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->energy_regen));
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	441a      	add	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	3328      	adds	r3, #40	; 0x28
 80032d6:	4619      	mov	r1, r3
 80032d8:	4610      	mov	r0, r2
 80032da:	f7fe f9a6 	bl	800162a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80032de:	4602      	mov	r2, r0
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4413      	add	r3, r2
 80032e4:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->displacement));
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	441a      	add	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	332c      	adds	r3, #44	; 0x2c
 80032f0:	4619      	mov	r1, r3
 80032f2:	4610      	mov	r0, r2
 80032f4:	f7fe f999 	bl	800162a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80032f8:	4602      	mov	r2, r0
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	4413      	add	r3, r2
 80032fe:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->distance_traveled));
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	683a      	ldr	r2, [r7, #0]
 8003304:	441a      	add	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	3330      	adds	r3, #48	; 0x30
 800330a:	4619      	mov	r1, r3
 800330c:	4610      	mov	r0, r2
 800330e:	f7fe f98c 	bl	800162a <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8003312:	4602      	mov	r2, r0
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4413      	add	r3, r2
 8003318:	60fb      	str	r3, [r7, #12]
      union {
        int32_t real;
        uint32_t base;
      } u_fault_code;
      u_fault_code.base = 0;
 800331a:	2300      	movs	r3, #0
 800331c:	60bb      	str	r3, [r7, #8]
      u_fault_code.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	6839      	ldr	r1, [r7, #0]
 8003324:	440a      	add	r2, r1
 8003326:	7812      	ldrb	r2, [r2, #0]
 8003328:	4313      	orrs	r3, r2
 800332a:	60bb      	str	r3, [r7, #8]
      u_fault_code.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	3301      	adds	r3, #1
 8003332:	6839      	ldr	r1, [r7, #0]
 8003334:	440b      	add	r3, r1
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	021b      	lsls	r3, r3, #8
 800333a:	4313      	orrs	r3, r2
 800333c:	60bb      	str	r3, [r7, #8]
      u_fault_code.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800333e:	68ba      	ldr	r2, [r7, #8]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	3302      	adds	r3, #2
 8003344:	6839      	ldr	r1, [r7, #0]
 8003346:	440b      	add	r3, r1
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	041b      	lsls	r3, r3, #16
 800334c:	4313      	orrs	r3, r2
 800334e:	60bb      	str	r3, [r7, #8]
      u_fault_code.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	3303      	adds	r3, #3
 8003356:	6839      	ldr	r1, [r7, #0]
 8003358:	440b      	add	r3, r1
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	061b      	lsls	r3, r3, #24
 800335e:	4313      	orrs	r3, r2
 8003360:	60bb      	str	r3, [r7, #8]
      this->fault_code = u_fault_code.real;
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	635a      	str	r2, [r3, #52]	; 0x34
      offset += sizeof(this->fault_code);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	3304      	adds	r3, #4
 800336c:	60fb      	str	r3, [r7, #12]
     return offset;
 800336e:	68fb      	ldr	r3, [r7, #12]
    }
 8003370:	4618      	mov	r0, r3
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <_ZN9vesc_msgs9VescState7getTypeEv>:

    const char * getType(){ return "vesc_msgs/VescState"; };
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	4b03      	ldr	r3, [pc, #12]	; (8003390 <_ZN9vesc_msgs9VescState7getTypeEv+0x18>)
 8003382:	4618      	mov	r0, r3
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	08014190 	.word	0x08014190

08003394 <_ZN9vesc_msgs9VescState6getMD5Ev>:
    const char * getMD5(){ return "81214bb4c1945e7c159bd76ec397ac04"; };
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	4b03      	ldr	r3, [pc, #12]	; (80033ac <_ZN9vesc_msgs9VescState6getMD5Ev+0x18>)
 800339e:	4618      	mov	r0, r3
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	080141a4 	.word	0x080141a4

080033b0 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	4a04      	ldr	r2, [pc, #16]	; (80033cc <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	601a      	str	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4618      	mov	r0, r3
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr
 80033cc:	080142d4 	.word	0x080142d4

080033d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4618      	mov	r0, r3
 80033dc:	f7ff ffe8 	bl	80033b0 <_ZN3ros15NodeHandleBase_C1Ev>
 80033e0:	4a36      	ldr	r2, [pc, #216]	; (80034bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	601a      	str	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	3304      	adds	r3, #4
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7ff f902 	bl	80025f4 <_ZN13STM32HardwareC1Ev>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003416:	f44f 7200 	mov.w	r2, #512	; 0x200
 800341a:	2100      	movs	r1, #0
 800341c:	4618      	mov	r0, r3
 800341e:	f010 fd1c 	bl	8013e5a <memset>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003428:	f44f 7200 	mov.w	r2, #512	; 0x200
 800342c:	2100      	movs	r1, #0
 800342e:	4618      	mov	r0, r3
 8003430:	f010 fd13 	bl	8013e5a <memset>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f603 0324 	addw	r3, r3, #2084	; 0x824
 800343a:	2264      	movs	r2, #100	; 0x64
 800343c:	2100      	movs	r1, #0
 800343e:	4618      	mov	r0, r3
 8003440:	f010 fd0b 	bl	8013e5a <memset>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f603 0388 	addw	r3, r3, #2184	; 0x888
 800344a:	2264      	movs	r2, #100	; 0x64
 800344c:	2100      	movs	r1, #0
 800344e:	4618      	mov	r0, r3
 8003450:	f010 fd03 	bl	8013e5a <memset>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f603 1314 	addw	r3, r3, #2324	; 0x914
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7fe fcde 	bl	8001e6c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4618      	mov	r0, r3
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	08014260 	.word	0x08014260

080034c0 <_Z13read_ble_dataPh>:


//char hello[] = "Hello world from STM32!";


HAL_StatusTypeDef read_ble_data(uint8_t* data){
 80034c0:	b480      	push	{r7}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
	static uint8_t start_index = 0;
	for(uint8_t i=start_index;i<start_index+ESC_DATA_SIZE;++i){
 80034c8:	4bac      	ldr	r3, [pc, #688]	; (800377c <_Z13read_ble_dataPh+0x2bc>)
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	73fb      	strb	r3, [r7, #15]
 80034ce:	e01e      	b.n	800350e <_Z13read_ble_dataPh+0x4e>
		if(data[i]==0xFE && data[(i+1)%ESC_DATA_SIZE]==0x01){
 80034d0:	7bfb      	ldrb	r3, [r7, #15]
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	4413      	add	r3, r2
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	2bfe      	cmp	r3, #254	; 0xfe
 80034da:	d115      	bne.n	8003508 <_Z13read_ble_dataPh+0x48>
 80034dc:	7bfb      	ldrb	r3, [r7, #15]
 80034de:	3301      	adds	r3, #1
 80034e0:	425a      	negs	r2, r3
 80034e2:	f003 031f 	and.w	r3, r3, #31
 80034e6:	f002 021f 	and.w	r2, r2, #31
 80034ea:	bf58      	it	pl
 80034ec:	4253      	negpl	r3, r2
 80034ee:	461a      	mov	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4413      	add	r3, r2
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d106      	bne.n	8003508 <_Z13read_ble_dataPh+0x48>
			start_index = i%ESC_DATA_SIZE;
 80034fa:	7bfb      	ldrb	r3, [r7, #15]
 80034fc:	f003 031f 	and.w	r3, r3, #31
 8003500:	b2da      	uxtb	r2, r3
 8003502:	4b9e      	ldr	r3, [pc, #632]	; (800377c <_Z13read_ble_dataPh+0x2bc>)
 8003504:	701a      	strb	r2, [r3, #0]
			break;
 8003506:	e009      	b.n	800351c <_Z13read_ble_dataPh+0x5c>
	for(uint8_t i=start_index;i<start_index+ESC_DATA_SIZE;++i){
 8003508:	7bfb      	ldrb	r3, [r7, #15]
 800350a:	3301      	adds	r3, #1
 800350c:	73fb      	strb	r3, [r7, #15]
 800350e:	4b9b      	ldr	r3, [pc, #620]	; (800377c <_Z13read_ble_dataPh+0x2bc>)
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	f103 021f 	add.w	r2, r3, #31
 8003516:	7bfb      	ldrb	r3, [r7, #15]
 8003518:	429a      	cmp	r2, r3
 800351a:	dad9      	bge.n	80034d0 <_Z13read_ble_dataPh+0x10>
		}
	}

	if(data[(2+start_index)%ESC_DATA_SIZE]!=0x00)return HAL_ERROR;
 800351c:	4b97      	ldr	r3, [pc, #604]	; (800377c <_Z13read_ble_dataPh+0x2bc>)
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	3302      	adds	r3, #2
 8003522:	425a      	negs	r2, r3
 8003524:	f003 031f 	and.w	r3, r3, #31
 8003528:	f002 021f 	and.w	r2, r2, #31
 800352c:	bf58      	it	pl
 800352e:	4253      	negpl	r3, r2
 8003530:	461a      	mov	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4413      	add	r3, r2
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <_Z13read_ble_dataPh+0x80>
 800353c:	2301      	movs	r3, #1
 800353e:	e116      	b.n	800376e <_Z13read_ble_dataPh+0x2ae>
	if(data[(3+start_index)%ESC_DATA_SIZE]!=0x03)return HAL_ERROR;
 8003540:	4b8e      	ldr	r3, [pc, #568]	; (800377c <_Z13read_ble_dataPh+0x2bc>)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	3303      	adds	r3, #3
 8003546:	425a      	negs	r2, r3
 8003548:	f003 031f 	and.w	r3, r3, #31
 800354c:	f002 021f 	and.w	r2, r2, #31
 8003550:	bf58      	it	pl
 8003552:	4253      	negpl	r3, r2
 8003554:	461a      	mov	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4413      	add	r3, r2
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	2b03      	cmp	r3, #3
 800355e:	d001      	beq.n	8003564 <_Z13read_ble_dataPh+0xa4>
 8003560:	2301      	movs	r3, #1
 8003562:	e104      	b.n	800376e <_Z13read_ble_dataPh+0x2ae>
	if(data[(4+start_index)%ESC_DATA_SIZE]!=0x30)return HAL_ERROR;
 8003564:	4b85      	ldr	r3, [pc, #532]	; (800377c <_Z13read_ble_dataPh+0x2bc>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	3304      	adds	r3, #4
 800356a:	425a      	negs	r2, r3
 800356c:	f003 031f 	and.w	r3, r3, #31
 8003570:	f002 021f 	and.w	r2, r2, #31
 8003574:	bf58      	it	pl
 8003576:	4253      	negpl	r3, r2
 8003578:	461a      	mov	r2, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4413      	add	r3, r2
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	2b30      	cmp	r3, #48	; 0x30
 8003582:	d001      	beq.n	8003588 <_Z13read_ble_dataPh+0xc8>
 8003584:	2301      	movs	r3, #1
 8003586:	e0f2      	b.n	800376e <_Z13read_ble_dataPh+0x2ae>
	if(data[(5+start_index)%ESC_DATA_SIZE]!=0x5c)return HAL_ERROR;
 8003588:	4b7c      	ldr	r3, [pc, #496]	; (800377c <_Z13read_ble_dataPh+0x2bc>)
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	3305      	adds	r3, #5
 800358e:	425a      	negs	r2, r3
 8003590:	f003 031f 	and.w	r3, r3, #31
 8003594:	f002 021f 	and.w	r2, r2, #31
 8003598:	bf58      	it	pl
 800359a:	4253      	negpl	r3, r2
 800359c:	461a      	mov	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4413      	add	r3, r2
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	2b5c      	cmp	r3, #92	; 0x5c
 80035a6:	d001      	beq.n	80035ac <_Z13read_ble_dataPh+0xec>
 80035a8:	2301      	movs	r3, #1
 80035aa:	e0e0      	b.n	800376e <_Z13read_ble_dataPh+0x2ae>
	if(data[(6+start_index)%ESC_DATA_SIZE]!=0x17)return HAL_ERROR;
 80035ac:	4b73      	ldr	r3, [pc, #460]	; (800377c <_Z13read_ble_dataPh+0x2bc>)
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	3306      	adds	r3, #6
 80035b2:	425a      	negs	r2, r3
 80035b4:	f003 031f 	and.w	r3, r3, #31
 80035b8:	f002 021f 	and.w	r2, r2, #31
 80035bc:	bf58      	it	pl
 80035be:	4253      	negpl	r3, r2
 80035c0:	461a      	mov	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4413      	add	r3, r2
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	2b17      	cmp	r3, #23
 80035ca:	d001      	beq.n	80035d0 <_Z13read_ble_dataPh+0x110>
 80035cc:	2301      	movs	r3, #1
 80035ce:	e0ce      	b.n	800376e <_Z13read_ble_dataPh+0x2ae>
	if(data[(7+start_index)%ESC_DATA_SIZE]!=0x06)return HAL_ERROR;
 80035d0:	4b6a      	ldr	r3, [pc, #424]	; (800377c <_Z13read_ble_dataPh+0x2bc>)
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	3307      	adds	r3, #7
 80035d6:	425a      	negs	r2, r3
 80035d8:	f003 031f 	and.w	r3, r3, #31
 80035dc:	f002 021f 	and.w	r2, r2, #31
 80035e0:	bf58      	it	pl
 80035e2:	4253      	negpl	r3, r2
 80035e4:	461a      	mov	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4413      	add	r3, r2
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	2b06      	cmp	r3, #6
 80035ee:	d001      	beq.n	80035f4 <_Z13read_ble_dataPh+0x134>
 80035f0:	2301      	movs	r3, #1
 80035f2:	e0bc      	b.n	800376e <_Z13read_ble_dataPh+0x2ae>

	esc_sensor.throttle = (int16_t)(data[(9+start_index)%ESC_DATA_SIZE]);
 80035f4:	4b61      	ldr	r3, [pc, #388]	; (800377c <_Z13read_ble_dataPh+0x2bc>)
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	3309      	adds	r3, #9
 80035fa:	425a      	negs	r2, r3
 80035fc:	f003 031f 	and.w	r3, r3, #31
 8003600:	f002 021f 	and.w	r2, r2, #31
 8003604:	bf58      	it	pl
 8003606:	4253      	negpl	r3, r2
 8003608:	461a      	mov	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4413      	add	r3, r2
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	b21a      	sxth	r2, r3
 8003612:	4b5b      	ldr	r3, [pc, #364]	; (8003780 <_Z13read_ble_dataPh+0x2c0>)
 8003614:	801a      	strh	r2, [r3, #0]
	if(data[(11+start_index)%ESC_DATA_SIZE]!=0x01)esc_sensor.throttle=-esc_sensor.throttle;
 8003616:	4b59      	ldr	r3, [pc, #356]	; (800377c <_Z13read_ble_dataPh+0x2bc>)
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	330b      	adds	r3, #11
 800361c:	425a      	negs	r2, r3
 800361e:	f003 031f 	and.w	r3, r3, #31
 8003622:	f002 021f 	and.w	r2, r2, #31
 8003626:	bf58      	it	pl
 8003628:	4253      	negpl	r3, r2
 800362a:	461a      	mov	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4413      	add	r3, r2
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	2b01      	cmp	r3, #1
 8003634:	d008      	beq.n	8003648 <_Z13read_ble_dataPh+0x188>
 8003636:	4b52      	ldr	r3, [pc, #328]	; (8003780 <_Z13read_ble_dataPh+0x2c0>)
 8003638:	f9b3 3000 	ldrsh.w	r3, [r3]
 800363c:	b29b      	uxth	r3, r3
 800363e:	425b      	negs	r3, r3
 8003640:	b29b      	uxth	r3, r3
 8003642:	b21a      	sxth	r2, r3
 8003644:	4b4e      	ldr	r3, [pc, #312]	; (8003780 <_Z13read_ble_dataPh+0x2c0>)
 8003646:	801a      	strh	r2, [r3, #0]

	esc_sensor.rpm = ((uint32_t)(data[(14+start_index)%ESC_DATA_SIZE] <<8) | (data[(13+start_index)%ESC_DATA_SIZE]))*10;
 8003648:	4b4c      	ldr	r3, [pc, #304]	; (800377c <_Z13read_ble_dataPh+0x2bc>)
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	330e      	adds	r3, #14
 800364e:	425a      	negs	r2, r3
 8003650:	f003 031f 	and.w	r3, r3, #31
 8003654:	f002 021f 	and.w	r2, r2, #31
 8003658:	bf58      	it	pl
 800365a:	4253      	negpl	r3, r2
 800365c:	461a      	mov	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4413      	add	r3, r2
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	021b      	lsls	r3, r3, #8
 8003666:	4619      	mov	r1, r3
 8003668:	4b44      	ldr	r3, [pc, #272]	; (800377c <_Z13read_ble_dataPh+0x2bc>)
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	330d      	adds	r3, #13
 800366e:	425a      	negs	r2, r3
 8003670:	f003 031f 	and.w	r3, r3, #31
 8003674:	f002 021f 	and.w	r2, r2, #31
 8003678:	bf58      	it	pl
 800367a:	4253      	negpl	r3, r2
 800367c:	461a      	mov	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4413      	add	r3, r2
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	ea41 0203 	orr.w	r2, r1, r3
 8003688:	4613      	mov	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	4413      	add	r3, r2
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	461a      	mov	r2, r3
 8003692:	4b3b      	ldr	r3, [pc, #236]	; (8003780 <_Z13read_ble_dataPh+0x2c0>)
 8003694:	605a      	str	r2, [r3, #4]
	esc_sensor.voltage = (float)(data[(15+start_index)%ESC_DATA_SIZE])/10.0f;
 8003696:	4b39      	ldr	r3, [pc, #228]	; (800377c <_Z13read_ble_dataPh+0x2bc>)
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	330f      	adds	r3, #15
 800369c:	425a      	negs	r2, r3
 800369e:	f003 031f 	and.w	r3, r3, #31
 80036a2:	f002 021f 	and.w	r2, r2, #31
 80036a6:	bf58      	it	pl
 80036a8:	4253      	negpl	r3, r2
 80036aa:	461a      	mov	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4413      	add	r3, r2
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	ee07 3a90 	vmov	s15, r3
 80036b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80036ba:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80036be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80036c2:	4b2f      	ldr	r3, [pc, #188]	; (8003780 <_Z13read_ble_dataPh+0x2c0>)
 80036c4:	edc3 7a02 	vstr	s15, [r3, #8]
	esc_sensor.current = ((uint16_t)(data[(16+start_index)%ESC_DATA_SIZE] <<8) | (data[(17+start_index)%ESC_DATA_SIZE]))/10.0;
 80036c8:	4b2c      	ldr	r3, [pc, #176]	; (800377c <_Z13read_ble_dataPh+0x2bc>)
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	3310      	adds	r3, #16
 80036ce:	425a      	negs	r2, r3
 80036d0:	f003 031f 	and.w	r3, r3, #31
 80036d4:	f002 021f 	and.w	r2, r2, #31
 80036d8:	bf58      	it	pl
 80036da:	4253      	negpl	r3, r2
 80036dc:	461a      	mov	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4413      	add	r3, r2
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	021b      	lsls	r3, r3, #8
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	4619      	mov	r1, r3
 80036ec:	4b23      	ldr	r3, [pc, #140]	; (800377c <_Z13read_ble_dataPh+0x2bc>)
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	3311      	adds	r3, #17
 80036f2:	425a      	negs	r2, r3
 80036f4:	f003 031f 	and.w	r3, r3, #31
 80036f8:	f002 021f 	and.w	r2, r2, #31
 80036fc:	bf58      	it	pl
 80036fe:	4253      	negpl	r3, r2
 8003700:	461a      	mov	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4413      	add	r3, r2
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	430b      	orrs	r3, r1
 800370a:	ee07 3a90 	vmov	s15, r3
 800370e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003712:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8003716:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800371a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800371e:	4b18      	ldr	r3, [pc, #96]	; (8003780 <_Z13read_ble_dataPh+0x2c0>)
 8003720:	edc3 7a03 	vstr	s15, [r3, #12]
	esc_sensor.temperature = (uint16_t)(data[(18+start_index)%ESC_DATA_SIZE] <<8) | (data[(19+start_index)%ESC_DATA_SIZE]);
 8003724:	4b15      	ldr	r3, [pc, #84]	; (800377c <_Z13read_ble_dataPh+0x2bc>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	3312      	adds	r3, #18
 800372a:	425a      	negs	r2, r3
 800372c:	f003 031f 	and.w	r3, r3, #31
 8003730:	f002 021f 	and.w	r2, r2, #31
 8003734:	bf58      	it	pl
 8003736:	4253      	negpl	r3, r2
 8003738:	461a      	mov	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4413      	add	r3, r2
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	b29b      	uxth	r3, r3
 8003742:	021b      	lsls	r3, r3, #8
 8003744:	b29a      	uxth	r2, r3
 8003746:	4b0d      	ldr	r3, [pc, #52]	; (800377c <_Z13read_ble_dataPh+0x2bc>)
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	3313      	adds	r3, #19
 800374c:	4259      	negs	r1, r3
 800374e:	f003 031f 	and.w	r3, r3, #31
 8003752:	f001 011f 	and.w	r1, r1, #31
 8003756:	bf58      	it	pl
 8003758:	424b      	negpl	r3, r1
 800375a:	4619      	mov	r1, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	440b      	add	r3, r1
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	b29b      	uxth	r3, r3
 8003764:	4313      	orrs	r3, r2
 8003766:	b29a      	uxth	r2, r3
 8003768:	4b05      	ldr	r3, [pc, #20]	; (8003780 <_Z13read_ble_dataPh+0x2c0>)
 800376a:	821a      	strh	r2, [r3, #16]

	return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3714      	adds	r7, #20
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	240018f1 	.word	0x240018f1
 8003780:	24001830 	.word	0x24001830

08003784 <_Z15read_speed_dataPm>:

HAL_StatusTypeDef read_speed_data(uint32_t* data){
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for(i = 0;i<SPEED_PIN_COUNT+1;++i){
 800378c:	2300      	movs	r3, #0
 800378e:	73fb      	strb	r3, [r7, #15]
 8003790:	e00a      	b.n	80037a8 <_Z15read_speed_dataPm+0x24>
		if(data[i]==acsr)break;
 8003792:	7bfb      	ldrb	r3, [r7, #15]
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	4413      	add	r3, r2
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a18      	ldr	r2, [pc, #96]	; (8003800 <_Z15read_speed_dataPm+0x7c>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d006      	beq.n	80037b0 <_Z15read_speed_dataPm+0x2c>
	for(i = 0;i<SPEED_PIN_COUNT+1;++i){
 80037a2:	7bfb      	ldrb	r3, [r7, #15]
 80037a4:	3301      	adds	r3, #1
 80037a6:	73fb      	strb	r3, [r7, #15]
 80037a8:	7bfb      	ldrb	r3, [r7, #15]
 80037aa:	2b10      	cmp	r3, #16
 80037ac:	d9f1      	bls.n	8003792 <_Z15read_speed_dataPm+0xe>
 80037ae:	e000      	b.n	80037b2 <_Z15read_speed_dataPm+0x2e>
		if(data[i]==acsr)break;
 80037b0:	bf00      	nop
	}
	if(i==SPEED_PIN_COUNT+1)return HAL_ERROR;
 80037b2:	7bfb      	ldrb	r3, [r7, #15]
 80037b4:	2b11      	cmp	r3, #17
 80037b6:	d101      	bne.n	80037bc <_Z15read_speed_dataPm+0x38>
 80037b8:	2301      	movs	r3, #1
 80037ba:	e01c      	b.n	80037f6 <_Z15read_speed_dataPm+0x72>

	memcpy(speed,&data[i+1],(SPEED_PIN_COUNT-i)*sizeof(uint32_t));
 80037bc:	7bfb      	ldrb	r3, [r7, #15]
 80037be:	3301      	adds	r3, #1
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	18d1      	adds	r1, r2, r3
 80037c6:	7bfb      	ldrb	r3, [r7, #15]
 80037c8:	f1c3 0310 	rsb	r3, r3, #16
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	461a      	mov	r2, r3
 80037d0:	480c      	ldr	r0, [pc, #48]	; (8003804 <_Z15read_speed_dataPm+0x80>)
 80037d2:	f010 fb87 	bl	8013ee4 <memcpy>
	if(i){
 80037d6:	7bfb      	ldrb	r3, [r7, #15]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00b      	beq.n	80037f4 <_Z15read_speed_dataPm+0x70>
		memcpy(&speed[SPEED_PIN_COUNT-i],data,i*sizeof(uint32_t));
 80037dc:	7bfb      	ldrb	r3, [r7, #15]
 80037de:	f1c3 0310 	rsb	r3, r3, #16
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	4a07      	ldr	r2, [pc, #28]	; (8003804 <_Z15read_speed_dataPm+0x80>)
 80037e6:	1898      	adds	r0, r3, r2
 80037e8:	7bfb      	ldrb	r3, [r7, #15]
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	461a      	mov	r2, r3
 80037ee:	6879      	ldr	r1, [r7, #4]
 80037f0:	f010 fb78 	bl	8013ee4 <memcpy>
	}
	return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	41435352 	.word	0x41435352
 8003804:	240018a8 	.word	0x240018a8

08003808 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
	if(huart==&huart4){
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a07      	ldr	r2, [pc, #28]	; (8003830 <HAL_UART_TxCpltCallback+0x28>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d106      	bne.n	8003826 <HAL_UART_TxCpltCallback+0x1e>
		nh.getHardware()->flush();
 8003818:	4806      	ldr	r0, [pc, #24]	; (8003834 <HAL_UART_TxCpltCallback+0x2c>)
 800381a:	f000 f9a4 	bl	8003b66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800381e:	4603      	mov	r3, r0
 8003820:	4618      	mov	r0, r3
 8003822:	f7fe ff41 	bl	80026a8 <_ZN13STM32Hardware5flushEv>
	}

}
 8003826:	bf00      	nop
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	240001c8 	.word	0x240001c8
 8003834:	24000e20 	.word	0x24000e20

08003838 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
	if(huart==&huart4){
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a0f      	ldr	r2, [pc, #60]	; (8003880 <HAL_UART_RxCpltCallback+0x48>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d107      	bne.n	8003858 <HAL_UART_RxCpltCallback+0x20>
		nh.getHardware()->reset_rbuf();
 8003848:	480e      	ldr	r0, [pc, #56]	; (8003884 <HAL_UART_RxCpltCallback+0x4c>)
 800384a:	f000 f98c 	bl	8003b66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800384e:	4603      	mov	r3, r0
 8003850:	4618      	mov	r0, r3
 8003852:	f7fe feeb 	bl	800262c <_ZN13STM32Hardware10reset_rbufEv>
		read_ble_data(esc_receive);
	}else if(huart==&huart_f103){
		read_speed_data(speed_receive);
	}

}
 8003856:	e00e      	b.n	8003876 <HAL_UART_RxCpltCallback+0x3e>
	}else if(huart==&huart_esc){
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a0b      	ldr	r2, [pc, #44]	; (8003888 <HAL_UART_RxCpltCallback+0x50>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d103      	bne.n	8003868 <HAL_UART_RxCpltCallback+0x30>
		read_ble_data(esc_receive);
 8003860:	480a      	ldr	r0, [pc, #40]	; (800388c <HAL_UART_RxCpltCallback+0x54>)
 8003862:	f7ff fe2d 	bl	80034c0 <_Z13read_ble_dataPh>
}
 8003866:	e006      	b.n	8003876 <HAL_UART_RxCpltCallback+0x3e>
	}else if(huart==&huart_f103){
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a09      	ldr	r2, [pc, #36]	; (8003890 <HAL_UART_RxCpltCallback+0x58>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d102      	bne.n	8003876 <HAL_UART_RxCpltCallback+0x3e>
		read_speed_data(speed_receive);
 8003870:	4808      	ldr	r0, [pc, #32]	; (8003894 <HAL_UART_RxCpltCallback+0x5c>)
 8003872:	f7ff ff87 	bl	8003784 <_Z15read_speed_dataPm>
}
 8003876:	bf00      	nop
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	240001c8 	.word	0x240001c8
 8003884:	24000e20 	.word	0x24000e20
 8003888:	24000134 	.word	0x24000134
 800388c:	24001844 	.word	0x24001844
 8003890:	2400025c 	.word	0x2400025c
 8003894:	24001864 	.word	0x24001864

08003898 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle) {
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
    if(UartHandle->Instance==LPUART1) {
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a0b      	ldr	r2, [pc, #44]	; (80038d4 <HAL_UART_ErrorCallback+0x3c>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d105      	bne.n	80038b6 <HAL_UART_ErrorCallback+0x1e>
    	HAL_UART_Receive_DMA(&huart_esc, esc_receive, ESC_DATA_SIZE);
 80038aa:	2220      	movs	r2, #32
 80038ac:	490a      	ldr	r1, [pc, #40]	; (80038d8 <HAL_UART_ErrorCallback+0x40>)
 80038ae:	480b      	ldr	r0, [pc, #44]	; (80038dc <HAL_UART_ErrorCallback+0x44>)
 80038b0:	f00d faba 	bl	8010e28 <HAL_UART_Receive_DMA>
    }else if(UartHandle->Instance==UART5) {
    	HAL_UART_Receive_DMA(&huart5, (uint8_t*)speed_receive, sizeof(uint32_t)*(SPEED_PIN_COUNT+1));
    }
}
 80038b4:	e009      	b.n	80038ca <HAL_UART_ErrorCallback+0x32>
    }else if(UartHandle->Instance==UART5) {
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a09      	ldr	r2, [pc, #36]	; (80038e0 <HAL_UART_ErrorCallback+0x48>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d104      	bne.n	80038ca <HAL_UART_ErrorCallback+0x32>
    	HAL_UART_Receive_DMA(&huart5, (uint8_t*)speed_receive, sizeof(uint32_t)*(SPEED_PIN_COUNT+1));
 80038c0:	2244      	movs	r2, #68	; 0x44
 80038c2:	4908      	ldr	r1, [pc, #32]	; (80038e4 <HAL_UART_ErrorCallback+0x4c>)
 80038c4:	4808      	ldr	r0, [pc, #32]	; (80038e8 <HAL_UART_ErrorCallback+0x50>)
 80038c6:	f00d faaf 	bl	8010e28 <HAL_UART_Receive_DMA>
}
 80038ca:	bf00      	nop
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	58000c00 	.word	0x58000c00
 80038d8:	24001844 	.word	0x24001844
 80038dc:	24000134 	.word	0x24000134
 80038e0:	40005000 	.word	0x40005000
 80038e4:	24001864 	.word	0x24001864
 80038e8:	2400025c 	.word	0x2400025c

080038ec <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]

	if(!pwm_generator_indicator)return;
 80038f4:	4b3b      	ldr	r3, [pc, #236]	; (80039e4 <HAL_TIM_IC_CaptureCallback+0xf8>)
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d06f      	beq.n	80039dc <HAL_TIM_IC_CaptureCallback+0xf0>

	int32_t temp_freq;
	if(htim->Instance==TIM5 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a39      	ldr	r2, [pc, #228]	; (80039e8 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d123      	bne.n	800394e <HAL_TIM_IC_CaptureCallback+0x62>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	7f1b      	ldrb	r3, [r3, #28]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d11f      	bne.n	800394e <HAL_TIM_IC_CaptureCallback+0x62>

		temp_freq = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800390e:	2100      	movs	r1, #0
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f00c fa8d 	bl	800fe30 <HAL_TIM_ReadCapturedValue>
 8003916:	4603      	mov	r3, r0
 8003918:	60fb      	str	r3, [r7, #12]
		servo_duty = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800391a:	2104      	movs	r1, #4
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f00c fa87 	bl	800fe30 <HAL_TIM_ReadCapturedValue>
 8003922:	4603      	mov	r3, r0
 8003924:	b29a      	uxth	r2, r3
 8003926:	4b31      	ldr	r3, [pc, #196]	; (80039ec <HAL_TIM_IC_CaptureCallback+0x100>)
 8003928:	801a      	strh	r2, [r3, #0]

		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,servo_duty);
 800392a:	4b30      	ldr	r3, [pc, #192]	; (80039ec <HAL_TIM_IC_CaptureCallback+0x100>)
 800392c:	881a      	ldrh	r2, [r3, #0]
 800392e:	4b30      	ldr	r3, [pc, #192]	; (80039f0 <HAL_TIM_IC_CaptureCallback+0x104>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCounter(htim,0);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2200      	movs	r2, #0
 800393a:	625a      	str	r2, [r3, #36]	; 0x24

		HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 800393c:	2100      	movs	r1, #0
 800393e:	482d      	ldr	r0, [pc, #180]	; (80039f4 <HAL_TIM_IC_CaptureCallback+0x108>)
 8003940:	f00b fd9a 	bl	800f478 <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);
 8003944:	2104      	movs	r1, #4
 8003946:	482b      	ldr	r0, [pc, #172]	; (80039f4 <HAL_TIM_IC_CaptureCallback+0x108>)
 8003948:	f00b fc92 	bl	800f270 <HAL_TIM_IC_Start>
 800394c:	e027      	b.n	800399e <HAL_TIM_IC_CaptureCallback+0xb2>

	}else if(htim->Instance==TIM15 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a29      	ldr	r2, [pc, #164]	; (80039f8 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d122      	bne.n	800399e <HAL_TIM_IC_CaptureCallback+0xb2>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	7f1b      	ldrb	r3, [r3, #28]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d11e      	bne.n	800399e <HAL_TIM_IC_CaptureCallback+0xb2>

		temp_freq = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8003960:	2100      	movs	r1, #0
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f00c fa64 	bl	800fe30 <HAL_TIM_ReadCapturedValue>
 8003968:	4603      	mov	r3, r0
 800396a:	60fb      	str	r3, [r7, #12]
		esc_duty = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800396c:	2104      	movs	r1, #4
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f00c fa5e 	bl	800fe30 <HAL_TIM_ReadCapturedValue>
 8003974:	4603      	mov	r3, r0
 8003976:	b29a      	uxth	r2, r3
 8003978:	4b20      	ldr	r3, [pc, #128]	; (80039fc <HAL_TIM_IC_CaptureCallback+0x110>)
 800397a:	801a      	strh	r2, [r3, #0]

		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2,esc_duty);
 800397c:	4b1f      	ldr	r3, [pc, #124]	; (80039fc <HAL_TIM_IC_CaptureCallback+0x110>)
 800397e:	881a      	ldrh	r2, [r3, #0]
 8003980:	4b1b      	ldr	r3, [pc, #108]	; (80039f0 <HAL_TIM_IC_CaptureCallback+0x104>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SetCounter(htim,0);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2200      	movs	r2, #0
 800398c:	625a      	str	r2, [r3, #36]	; 0x24

		HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 800398e:	2100      	movs	r1, #0
 8003990:	481b      	ldr	r0, [pc, #108]	; (8003a00 <HAL_TIM_IC_CaptureCallback+0x114>)
 8003992:	f00b fd71 	bl	800f478 <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_2);
 8003996:	2104      	movs	r1, #4
 8003998:	4819      	ldr	r0, [pc, #100]	; (8003a00 <HAL_TIM_IC_CaptureCallback+0x114>)
 800399a:	f00b fc69 	bl	800f270 <HAL_TIM_IC_Start>

	}
	if(freq<1000 || abs(temp_freq-freq)>50){
 800399e:	4b19      	ldr	r3, [pc, #100]	; (8003a04 <HAL_TIM_IC_CaptureCallback+0x118>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039a6:	db09      	blt.n	80039bc <HAL_TIM_IC_CaptureCallback+0xd0>
 80039a8:	4b16      	ldr	r3, [pc, #88]	; (8003a04 <HAL_TIM_IC_CaptureCallback+0x118>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7fd fd90 	bl	80014d6 <_ZSt3absl>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b32      	cmp	r3, #50	; 0x32
 80039ba:	dd01      	ble.n	80039c0 <HAL_TIM_IC_CaptureCallback+0xd4>
 80039bc:	2301      	movs	r3, #1
 80039be:	e000      	b.n	80039c2 <HAL_TIM_IC_CaptureCallback+0xd6>
 80039c0:	2300      	movs	r3, #0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00b      	beq.n	80039de <HAL_TIM_IC_CaptureCallback+0xf2>
		freq=temp_freq;
 80039c6:	4a0f      	ldr	r2, [pc, #60]	; (8003a04 <HAL_TIM_IC_CaptureCallback+0x118>)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_AUTORELOAD(&htim3,temp_freq);
 80039cc:	4b08      	ldr	r3, [pc, #32]	; (80039f0 <HAL_TIM_IC_CaptureCallback+0x104>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	62da      	str	r2, [r3, #44]	; 0x2c
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	4a06      	ldr	r2, [pc, #24]	; (80039f0 <HAL_TIM_IC_CaptureCallback+0x104>)
 80039d8:	60d3      	str	r3, [r2, #12]
 80039da:	e000      	b.n	80039de <HAL_TIM_IC_CaptureCallback+0xf2>
	if(!pwm_generator_indicator)return;
 80039dc:	bf00      	nop
	}


}
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	240018f0 	.word	0x240018f0
 80039e8:	40000c00 	.word	0x40000c00
 80039ec:	240018ec 	.word	0x240018ec
 80039f0:	24000794 	.word	0x24000794
 80039f4:	240007e0 	.word	0x240007e0
 80039f8:	40014000 	.word	0x40014000
 80039fc:	240018ee 	.word	0x240018ee
 8003a00:	240008c4 	.word	0x240008c4
 8003a04:	240018e8 	.word	0x240018e8

08003a08 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
//	if(htim->Instance==TIM3){
//		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,servo_duty);
//		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2,esc_duty);
//
//	}
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr
 8003a1c:	0000      	movs	r0, r0
	...

08003a20 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]

	if(htim->Instance==TIM6){
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a22      	ldr	r2, [pc, #136]	; (8003ab8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d138      	bne.n	8003aa4 <HAL_TIM_PeriodElapsedCallback+0x84>
		  vesc_state.duty_cycle = esc_sensor.throttle/100.0;
 8003a32:	4b22      	ldr	r3, [pc, #136]	; (8003abc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8003a34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a38:	ee07 3a90 	vmov	s15, r3
 8003a3c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003a40:	ed9f 5b1b 	vldr	d5, [pc, #108]	; 8003ab0 <HAL_TIM_PeriodElapsedCallback+0x90>
 8003a44:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003a48:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003a4c:	4b1c      	ldr	r3, [pc, #112]	; (8003ac0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003a4e:	edc3 7a06 	vstr	s15, [r3, #24]
		  vesc_state.voltage_input = esc_sensor.voltage;
 8003a52:	4b1a      	ldr	r3, [pc, #104]	; (8003abc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	4a1a      	ldr	r2, [pc, #104]	; (8003ac0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003a58:	6053      	str	r3, [r2, #4]
		  vesc_state.current_input = esc_sensor.current;
 8003a5a:	4b18      	ldr	r3, [pc, #96]	; (8003abc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	4a18      	ldr	r2, [pc, #96]	; (8003ac0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003a60:	6113      	str	r3, [r2, #16]
		  vesc_state.temperature_pcb = esc_sensor.temperature;
 8003a62:	4b16      	ldr	r3, [pc, #88]	; (8003abc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8003a64:	8a1b      	ldrh	r3, [r3, #16]
 8003a66:	ee07 3a90 	vmov	s15, r3
 8003a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a6e:	4b14      	ldr	r3, [pc, #80]	; (8003ac0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003a70:	edc3 7a02 	vstr	s15, [r3, #8]
		  vesc_state.speed = esc_sensor.rpm;
 8003a74:	4b11      	ldr	r3, [pc, #68]	; (8003abc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	ee07 3a90 	vmov	s15, r3
 8003a7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a80:	4b0f      	ldr	r3, [pc, #60]	; (8003ac0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003a82:	edc3 7a05 	vstr	s15, [r3, #20]

		  vesc_pub.publish(&vesc_state);
 8003a86:	490e      	ldr	r1, [pc, #56]	; (8003ac0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003a88:	480e      	ldr	r0, [pc, #56]	; (8003ac4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8003a8a:	f7fe fcd2 	bl	8002432 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		  wheel_speed_pub.publish(&wheel_speed);
 8003a8e:	490e      	ldr	r1, [pc, #56]	; (8003ac8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8003a90:	480e      	ldr	r0, [pc, #56]	; (8003acc <HAL_TIM_PeriodElapsedCallback+0xac>)
 8003a92:	f7fe fcce 	bl	8002432 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		  force_pub.publish(&forces);
 8003a96:	490e      	ldr	r1, [pc, #56]	; (8003ad0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8003a98:	480e      	ldr	r0, [pc, #56]	; (8003ad4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8003a9a:	f7fe fcca 	bl	8002432 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		  nh.spinOnce();
 8003a9e:	480e      	ldr	r0, [pc, #56]	; (8003ad8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8003aa0:	f000 f86d 	bl	8003b7e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
//	}
//	if(htim->Instance==TIM15){
//		HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
//		HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_2);
//	}
}
 8003aa4:	bf00      	nop
 8003aa6:	3708      	adds	r7, #8
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	f3af 8000 	nop.w
 8003ab0:	00000000 	.word	0x00000000
 8003ab4:	40590000 	.word	0x40590000
 8003ab8:	40001000 	.word	0x40001000
 8003abc:	24001830 	.word	0x24001830
 8003ac0:	2400175c 	.word	0x2400175c
 8003ac4:	240017f4 	.word	0x240017f4
 8003ac8:	240017c4 	.word	0x240017c4
 8003acc:	2400181c 	.word	0x2400181c
 8003ad0:	24001794 	.word	0x24001794
 8003ad4:	24001808 	.word	0x24001808
 8003ad8:	24000e20 	.word	0x24000e20

08003adc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	60fb      	str	r3, [r7, #12]
 8003aea:	e00c      	b.n	8003b06 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	00db      	lsls	r3, r3, #3
 8003af0:	683a      	ldr	r2, [r7, #0]
 8003af2:	fa22 f103 	lsr.w	r1, r2, r3
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4413      	add	r3, r2
 8003afc:	b2ca      	uxtb	r2, r1
 8003afe:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	3301      	adds	r3, #1
 8003b04:	60fb      	str	r3, [r7, #12]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2b03      	cmp	r3, #3
 8003b0a:	d9ef      	bls.n	8003aec <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8003b0c:	bf00      	nop
 8003b0e:	bf00      	nop
 8003b10:	3714      	adds	r7, #20
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr

08003b1a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003b1a:	b480      	push	{r7}
 8003b1c:	b085      	sub	sp, #20
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
 8003b22:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	60fb      	str	r3, [r7, #12]
 8003b2e:	e010      	b.n	8003b52 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6839      	ldr	r1, [r7, #0]
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	440a      	add	r2, r1
 8003b3a:	7812      	ldrb	r2, [r2, #0]
 8003b3c:	4611      	mov	r1, r2
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	00d2      	lsls	r2, r2, #3
 8003b42:	fa01 f202 	lsl.w	r2, r1, r2
 8003b46:	431a      	orrs	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	3301      	adds	r3, #1
 8003b50:	60fb      	str	r3, [r7, #12]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2b03      	cmp	r3, #3
 8003b56:	d9eb      	bls.n	8003b30 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8003b58:	bf00      	nop
 8003b5a:	bf00      	nop
 8003b5c:	3714      	adds	r7, #20
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 8003b66:	b480      	push	{r7}
 8003b68:	b083      	sub	sp, #12
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	3304      	adds	r3, #4
  }
 8003b72:	4618      	mov	r0, r3
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  /* This function goes in your loop() function, it handles
   *  serial input and callbacks for subscribers.
   */


  virtual int spinOnce() override
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b084      	sub	sp, #16
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  {
    /* restart if timed out */
    uint32_t c_time = hardware_.time();
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	3304      	adds	r3, #4
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7fe fe2e 	bl	80027ec <_ZN13STM32Hardware4timeEv>
 8003b90:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d903      	bls.n	8003bac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
    {
      configured_ = false;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    }

    /* reset if message has timed out */
    if (mode_ != MODE_FIRST_FF)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d009      	beq.n	8003bca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
    {
      if (c_time > last_msg_timeout_time)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d903      	bls.n	8003bca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      {
        mode_ = MODE_FIRST_FF;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec

    /* while available buffer, read data */
    while (true)
    {
      // If a timeout has been specified, check how long spinOnce has been running.
      if (spin_timeout_ > 0)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d014      	beq.n	8003bfe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
      {
        // If the maximum processing timeout has been exceeded, exit with error.
        // The next spinOnce can continue where it left off, or optionally
        // based on the application in use, the hardware buffer could be flushed
        // and start fresh.
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	3304      	adds	r3, #4
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7fe fe07 	bl	80027ec <_ZN13STM32Hardware4timeEv>
 8003bde:	4602      	mov	r2, r0
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	1ad2      	subs	r2, r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003bea:	429a      	cmp	r2, r3
 8003bec:	bf8c      	ite	hi
 8003bee:	2301      	movhi	r3, #1
 8003bf0:	2300      	movls	r3, #0
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d002      	beq.n	8003bfe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        {
          // Exit the spin, processing timeout exceeded.
          return SPIN_TIMEOUT;
 8003bf8:	f06f 0301 	mvn.w	r3, #1
 8003bfc:	e194      	b.n	8003f28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
        }
      }
      int data = hardware_.read();
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	3304      	adds	r3, #4
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7fe fd23 	bl	800264e <_ZN13STM32Hardware4readEv>
 8003c08:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f2c0 8174 	blt.w	8003efa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
        break;
      checksum_ += data;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	441a      	add	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003c28:	2b07      	cmp	r3, #7
 8003c2a:	d11e      	bne.n	8003c6a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
      {
        message_in[index_++] = data;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8003c32:	1c59      	adds	r1, r3, #1
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	b2d1      	uxtb	r1, r2
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	4413      	add	r3, r2
 8003c42:	460a      	mov	r2, r1
 8003c44:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003c4e:	1e5a      	subs	r2, r3, #1
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1b4      	bne.n	8003bca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2208      	movs	r2, #8
 8003c64:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003c68:	e7af      	b.n	8003bca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_FIRST_FF)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d128      	bne.n	8003cc6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
      {
        if (data == 0xff)
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	2bff      	cmp	r3, #255	; 0xff
 8003c78:	d10d      	bne.n	8003c96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
        {
          mode_++;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003c80:	1c5a      	adds	r2, r3, #1
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f103 0214 	add.w	r2, r3, #20
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8003c94:	e799      	b.n	8003bca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        }
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	3304      	adds	r3, #4
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7fe fda6 	bl	80027ec <_ZN13STM32Hardware4timeEv>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003caa:	4293      	cmp	r3, r2
 8003cac:	bf8c      	ite	hi
 8003cae:	2301      	movhi	r3, #1
 8003cb0:	2300      	movls	r3, #0
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d088      	beq.n	8003bca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        {
          /* We have been stuck in spinOnce too long, return error */
          configured_ = false;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8003cc0:	f06f 0301 	mvn.w	r3, #1
 8003cc4:	e130      	b.n	8003f28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
        }
      }
      else if (mode_ == MODE_PROTOCOL_VER)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d118      	bne.n	8003d02 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
      {
        if (data == PROTOCOL_VER)
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	2bfe      	cmp	r3, #254	; 0xfe
 8003cd4:	d107      	bne.n	8003ce6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
        {
          mode_++;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003cdc:	1c5a      	adds	r2, r3, #1
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003ce4:	e771      	b.n	8003bca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        }
        else
        {
          mode_ = MODE_FIRST_FF;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	f47f af68 	bne.w	8003bca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f918 	bl	8003f30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8003d00:	e763      	b.n	8003bca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        }
      }
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d113      	bne.n	8003d34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
      {
        bytes_ = data;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	68ba      	ldr	r2, [r7, #8]
 8003d10:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003d22:	1c5a      	adds	r2, r3, #1
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68ba      	ldr	r2, [r7, #8]
 8003d2e:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003d32:	e74a      	b.n	8003bca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003d3a:	2b03      	cmp	r3, #3
 8003d3c:	d110      	bne.n	8003d60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
      {
        bytes_ += data << 8;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	021b      	lsls	r3, r3, #8
 8003d48:	441a      	add	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003d56:	1c5a      	adds	r2, r3, #1
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003d5e:	e734      	b.n	8003bca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003d66:	2b04      	cmp	r3, #4
 8003d68:	d116      	bne.n	8003d98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
      {
        if ((checksum_ % 256) == 255)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8003d70:	425a      	negs	r2, r3
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	b2d2      	uxtb	r2, r2
 8003d76:	bf58      	it	pl
 8003d78:	4253      	negpl	r3, r2
 8003d7a:	2bff      	cmp	r3, #255	; 0xff
 8003d7c:	d107      	bne.n	8003d8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003d84:	1c5a      	adds	r2, r3, #1
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003d8c:	e71d      	b.n	8003bca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003d96:	e718      	b.n	8003bca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003d9e:	2b05      	cmp	r3, #5
 8003da0:	d10f      	bne.n	8003dc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
      {
        topic_ = data;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68ba      	ldr	r2, [r7, #8]
 8003da6:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003db0:	1c5a      	adds	r2, r3, #1
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68ba      	ldr	r2, [r7, #8]
 8003dbc:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003dc0:	e703      	b.n	8003bca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003dc8:	2b06      	cmp	r3, #6
 8003dca:	d117      	bne.n	8003dfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
      {
        topic_ += data << 8;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	021b      	lsls	r3, r3, #8
 8003dd6:	441a      	add	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2207      	movs	r2, #7
 8003de2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f47f aeec 	bne.w	8003bca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2208      	movs	r2, #8
 8003df6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003dfa:	e6e6      	b.n	8003bca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      }
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003e02:	2b08      	cmp	r3, #8
 8003e04:	f47f aee1 	bne.w	8003bca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      {
        mode_ = MODE_FIRST_FF;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8003e16:	425a      	negs	r2, r3
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	b2d2      	uxtb	r2, r2
 8003e1c:	bf58      	it	pl
 8003e1e:	4253      	negpl	r3, r2
 8003e20:	2bff      	cmp	r3, #255	; 0xff
 8003e22:	f47f aed2 	bne.w	8003bca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        {
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d110      	bne.n	8003e52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
          {
            requestSyncTime();
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 f87d 	bl	8003f30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f898 	bl	8003f6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8003e4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e50:	e06a      	b.n	8003f28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          }
          else if (topic_ == TopicInfo::ID_TIME)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003e58:	2b0a      	cmp	r3, #10
 8003e5a:	d107      	bne.n	8003e6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
          {
            syncTime(message_in);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003e62:	4619      	mov	r1, r3
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 f961 	bl	800412c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8003e6a:	e6ae      	b.n	8003bca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          }
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003e72:	2b06      	cmp	r3, #6
 8003e74:	d10e      	bne.n	8003e94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
          {
            req_param_resp.deserialize(message_in);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003e82:	4619      	mov	r1, r3
 8003e84:	4610      	mov	r0, r2
 8003e86:	f7fe f930 	bl	80020ea <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8003e92:	e69a      	b.n	8003bca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          }
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003e9a:	2b0b      	cmp	r3, #11
 8003e9c:	d104      	bne.n	8003ea8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
          {
            configured_ = false;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003ea6:	e690      	b.n	8003bca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          }
          else
          {
            if (subscribers[topic_ - 100])
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003eae:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f43f ae84 	beq.w	8003bca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003ec8:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003ed2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003edc:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8003ef4:	4611      	mov	r1, r2
 8003ef6:	4798      	blx	r3
    while (true)
 8003ef8:	e667      	b.n	8003bca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8003efa:	bf00      	nop
        }
      }
    }

    /* occasionally sync time */
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00f      	beq.n	8003f26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d906      	bls.n	8003f26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
    {
      requestSyncTime();
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 f809 	bl	8003f30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    }

    return SPIN_OK;
 8003f26:	2300      	movs	r3, #0
  }
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:

  /********************************************************************
   * Time functions
   */

  void requestSyncTime()
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b086      	sub	sp, #24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  {
    std_msgs::Time t;
 8003f38:	f107 030c 	add.w	r3, r7, #12
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7fd fc31 	bl	80017a4 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f107 020c 	add.w	r2, r7, #12
 8003f4c:	210a      	movs	r1, #10
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	4798      	blx	r3
    rt_time = hardware_.time();
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	3304      	adds	r3, #4
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7fe fc48 	bl	80027ec <_ZN13STM32Hardware4timeEv>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8003f64:	bf00      	nop
 8003f66:	3718      	adds	r7, #24
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8003f6c:	b590      	push	{r4, r7, lr}
 8003f6e:	b08b      	sub	sp, #44	; 0x2c
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003f74:	f107 030c 	add.w	r3, r7, #12
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7fd fd03 	bl	8001984 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003f7e:	2300      	movs	r3, #0
 8003f80:	627b      	str	r3, [r7, #36]	; 0x24
 8003f82:	e062      	b.n	800404a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f88:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	4413      	add	r3, r2
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d056      	beq.n	8004044 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	4413      	add	r3, r2
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fae:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	4413      	add	r3, r2
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	4413      	add	r3, r2
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	6859      	ldr	r1, [r3, #4]
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	4413      	add	r3, r2
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	3308      	adds	r3, #8
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4608      	mov	r0, r1
 8003fe4:	4798      	blx	r3
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	4413      	add	r3, r2
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	6859      	ldr	r1, [r3, #4]
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	4413      	add	r3, r2
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	330c      	adds	r3, #12
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4608      	mov	r0, r1
 8004012:	4798      	blx	r3
 8004014:	4603      	mov	r3, r0
 8004016:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8004018:	f44f 7300 	mov.w	r3, #512	; 0x200
 800401c:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681c      	ldr	r4, [r3, #0]
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004028:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	4413      	add	r3, r2
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	4618      	mov	r0, r3
 8004034:	f7fe fa11 	bl	800245a <_ZN3ros9Publisher15getEndpointTypeEv>
 8004038:	4601      	mov	r1, r0
 800403a:	f107 030c 	add.w	r3, r7, #12
 800403e:	461a      	mov	r2, r3
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004046:	3301      	adds	r3, #1
 8004048:	627b      	str	r3, [r7, #36]	; 0x24
 800404a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404c:	2b18      	cmp	r3, #24
 800404e:	dd99      	ble.n	8003f84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004050:	2300      	movs	r3, #0
 8004052:	627b      	str	r3, [r7, #36]	; 0x24
 8004054:	e05e      	b.n	8004114 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800405a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800405e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d053      	beq.n	800410e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800406a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800406e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	b29b      	uxth	r3, r3
 8004076:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800407c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800408c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004090:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004098:	f202 2222 	addw	r2, r2, #546	; 0x222
 800409c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	3308      	adds	r3, #8
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4608      	mov	r0, r1
 80040a8:	4798      	blx	r3
 80040aa:	4603      	mov	r3, r0
 80040ac:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040b2:	f202 2222 	addw	r2, r2, #546	; 0x222
 80040b6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040be:	f202 2222 	addw	r2, r2, #546	; 0x222
 80040c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	330c      	adds	r3, #12
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4608      	mov	r0, r1
 80040ce:	4798      	blx	r3
 80040d0:	4603      	mov	r3, r0
 80040d2:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 80040d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040d8:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681c      	ldr	r4, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040e4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80040e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040f0:	f202 2222 	addw	r2, r2, #546	; 0x222
 80040f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	3304      	adds	r3, #4
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4608      	mov	r0, r1
 8004100:	4798      	blx	r3
 8004102:	4601      	mov	r1, r0
 8004104:	f107 030c 	add.w	r3, r7, #12
 8004108:	461a      	mov	r2, r3
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800410e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004110:	3301      	adds	r3, #1
 8004112:	627b      	str	r3, [r7, #36]	; 0x24
 8004114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004116:	2b18      	cmp	r3, #24
 8004118:	dd9d      	ble.n	8004056 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8004122:	bf00      	nop
 8004124:	372c      	adds	r7, #44	; 0x2c
 8004126:	46bd      	mov	sp, r7
 8004128:	bd90      	pop	{r4, r7, pc}
	...

0800412c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 800412c:	b580      	push	{r7, lr}
 800412e:	b086      	sub	sp, #24
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8004136:	f107 0308 	add.w	r3, r7, #8
 800413a:	4618      	mov	r0, r3
 800413c:	f7fd fb32 	bl	80017a4 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	3304      	adds	r3, #4
 8004144:	4618      	mov	r0, r3
 8004146:	f7fe fb51 	bl	80027ec <_ZN13STM32Hardware4timeEv>
 800414a:	4602      	mov	r2, r0
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004156:	f107 0308 	add.w	r3, r7, #8
 800415a:	6839      	ldr	r1, [r7, #0]
 800415c:	4618      	mov	r0, r3
 800415e:	f7fd fb91 	bl	8001884 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	4915      	ldr	r1, [pc, #84]	; (80041bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8004168:	fba1 1303 	umull	r1, r3, r1, r3
 800416c:	099b      	lsrs	r3, r3, #6
 800416e:	4413      	add	r3, r2
 8004170:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004172:	6939      	ldr	r1, [r7, #16]
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	4b11      	ldr	r3, [pc, #68]	; (80041bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8004178:	fba3 0302 	umull	r0, r3, r3, r2
 800417c:	099b      	lsrs	r3, r3, #6
 800417e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004182:	fb00 f303 	mul.w	r3, r0, r3
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	4a0d      	ldr	r2, [pc, #52]	; (80041c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 800418a:	fb02 f303 	mul.w	r3, r2, r3
 800418e:	440b      	add	r3, r1
 8004190:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004192:	f107 0308 	add.w	r3, r7, #8
 8004196:	3304      	adds	r3, #4
 8004198:	4619      	mov	r1, r3
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f8a6 	bl	80042ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	3304      	adds	r3, #4
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7fe fb21 	bl	80027ec <_ZN13STM32Hardware4timeEv>
 80041aa:	4602      	mov	r2, r0
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 80041b2:	bf00      	nop
 80041b4:	3718      	adds	r7, #24
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	10624dd3 	.word	0x10624dd3
 80041c0:	000f4240 	.word	0x000f4240

080041c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b088      	sub	sp, #32
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	2b63      	cmp	r3, #99	; 0x63
 80041d4:	dd09      	ble.n	80041ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80041dc:	f083 0301 	eor.w	r3, r3, #1
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 80041e6:	2300      	movs	r3, #0
 80041e8:	e079      	b.n	80042de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	f202 6224 	addw	r2, r2, #1572	; 0x624
 80041f6:	3207      	adds	r2, #7
 80041f8:	4611      	mov	r1, r2
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	4798      	blx	r3
 80041fe:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	22ff      	movs	r2, #255	; 0xff
 8004204:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	22fe      	movs	r2, #254	; 0xfe
 800420c:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	b2da      	uxtb	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	b29b      	uxth	r3, r3
 800421e:	0a1b      	lsrs	r3, r3, #8
 8004220:	b29b      	uxth	r3, r3
 8004222:	b2da      	uxtb	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8004236:	4413      	add	r3, r2
 8004238:	b2db      	uxtb	r3, r3
 800423a:	43db      	mvns	r3, r3
 800423c:	b2da      	uxtb	r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	b2da      	uxtb	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	b21b      	sxth	r3, r3
 8004252:	121b      	asrs	r3, r3, #8
 8004254:	b21b      	sxth	r3, r3
 8004256:	b2da      	uxtb	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 800425e:	2300      	movs	r3, #0
 8004260:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004262:	2305      	movs	r3, #5
 8004264:	61bb      	str	r3, [r7, #24]
 8004266:	e00c      	b.n	8004282 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	4413      	add	r3, r2
 800426e:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	461a      	mov	r2, r3
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	4413      	add	r3, r2
 800427a:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	3301      	adds	r3, #1
 8004280:	61bb      	str	r3, [r7, #24]
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	3306      	adds	r3, #6
 8004286:	69ba      	ldr	r2, [r7, #24]
 8004288:	429a      	cmp	r2, r3
 800428a:	dded      	ble.n	8004268 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	3307      	adds	r3, #7
 8004290:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	425a      	negs	r2, r3
 8004296:	b2db      	uxtb	r3, r3
 8004298:	b2d2      	uxtb	r2, r2
 800429a:	bf58      	it	pl
 800429c:	4253      	negpl	r3, r2
 800429e:	b2da      	uxtb	r2, r3
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	1c59      	adds	r1, r3, #1
 80042a4:	6179      	str	r1, [r7, #20]
 80042a6:	43d2      	mvns	r2, r2
 80042a8:	b2d1      	uxtb	r1, r2
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	4413      	add	r3, r2
 80042ae:	460a      	mov	r2, r1
 80042b0:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042ba:	dc0a      	bgt.n	80042d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	1d18      	adds	r0, r3, #4
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	4619      	mov	r1, r3
 80042ca:	f7fe fa49 	bl	8002760 <_ZN13STM32Hardware5writeEPhi>
      return l;
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	e005      	b.n	80042de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 80042d2:	4905      	ldr	r1, [pc, #20]	; (80042e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f000 f849 	bl	800436c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 80042da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 80042de:	4618      	mov	r0, r3
 80042e0:	3720      	adds	r7, #32
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	080141ec 	.word	0x080141ec

080042ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	3304      	adds	r3, #4
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7fe fa76 	bl	80027ec <_ZN13STM32Hardware4timeEv>
 8004300:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	4915      	ldr	r1, [pc, #84]	; (8004360 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 800430a:	fba1 1303 	umull	r1, r3, r1, r3
 800430e:	099b      	lsrs	r3, r3, #6
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	1e5a      	subs	r2, r3, #1
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	6859      	ldr	r1, [r3, #4]
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	4b0f      	ldr	r3, [pc, #60]	; (8004360 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8004322:	fba3 0302 	umull	r0, r3, r3, r2
 8004326:	099b      	lsrs	r3, r3, #6
 8004328:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800432c:	fb00 f303 	mul.w	r3, r0, r3
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	4a0c      	ldr	r2, [pc, #48]	; (8004364 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8004334:	fb02 f303 	mul.w	r3, r2, r3
 8004338:	1aca      	subs	r2, r1, r3
 800433a:	4b0b      	ldr	r3, [pc, #44]	; (8004368 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 800433c:	4413      	add	r3, r2
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8004350:	4619      	mov	r1, r3
 8004352:	4610      	mov	r0, r2
 8004354:	f001 f964 	bl	8005620 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004358:	bf00      	nop
 800435a:	3710      	adds	r7, #16
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	10624dd3 	.word	0x10624dd3
 8004364:	000f4240 	.word	0x000f4240
 8004368:	3b9aca00 	.word	0x3b9aca00

0800436c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004376:	683a      	ldr	r2, [r7, #0]
 8004378:	2103      	movs	r1, #3
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 f804 	bl	8004388 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8004380:	bf00      	nop
 8004382:	3708      	adds	r7, #8
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004388:	b580      	push	{r7, lr}
 800438a:	b088      	sub	sp, #32
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	460b      	mov	r3, r1
 8004392:	607a      	str	r2, [r7, #4]
 8004394:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004396:	f107 0314 	add.w	r3, r7, #20
 800439a:	4618      	mov	r0, r3
 800439c:	f7fd fcb6 	bl	8001d0c <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 80043a0:	7afb      	ldrb	r3, [r7, #11]
 80043a2:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f107 0214 	add.w	r2, r7, #20
 80043b2:	2107      	movs	r1, #7
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	4798      	blx	r3
  }
 80043b8:	bf00      	nop
 80043ba:	3720      	adds	r7, #32
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <_Z41__static_initialization_and_destruction_0ii>:
//  duty1=0;
//  freq2=1;
//  duty2=1;

  HAL_Delay(1000);
}
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d122      	bne.n	8004416 <_Z41__static_initialization_and_destruction_0ii+0x56>
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d11d      	bne.n	8004416 <_Z41__static_initialization_and_destruction_0ii+0x56>
ros::NodeHandle nh;
 80043da:	4811      	ldr	r0, [pc, #68]	; (8004420 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80043dc:	f7fe fff8 	bl	80033d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
vesc_msgs::VescState vesc_state;
 80043e0:	4810      	ldr	r0, [pc, #64]	; (8004424 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80043e2:	f7fe fdcd 	bl	8002f80 <_ZN9vesc_msgs9VescStateC1Ev>
std_msgs::Float32MultiArray forces;
 80043e6:	4810      	ldr	r0, [pc, #64]	; (8004428 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80043e8:	f7fe fc90 	bl	8002d0c <_ZN8std_msgs17Float32MultiArrayC1Ev>
std_msgs::Float32MultiArray wheel_speed;
 80043ec:	480f      	ldr	r0, [pc, #60]	; (800442c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80043ee:	f7fe fc8d 	bl	8002d0c <_ZN8std_msgs17Float32MultiArrayC1Ev>
ros::Publisher vesc_pub("vesc_sensor", &vesc_state);
 80043f2:	2300      	movs	r3, #0
 80043f4:	4a0b      	ldr	r2, [pc, #44]	; (8004424 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80043f6:	490e      	ldr	r1, [pc, #56]	; (8004430 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80043f8:	480e      	ldr	r0, [pc, #56]	; (8004434 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80043fa:	f7fe f803 	bl	8002404 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher force_pub("forces", &forces);
 80043fe:	2300      	movs	r3, #0
 8004400:	4a09      	ldr	r2, [pc, #36]	; (8004428 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8004402:	490d      	ldr	r1, [pc, #52]	; (8004438 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8004404:	480d      	ldr	r0, [pc, #52]	; (800443c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8004406:	f7fd fffd 	bl	8002404 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher wheel_speed_pub("forces", &wheel_speed);
 800440a:	2300      	movs	r3, #0
 800440c:	4a07      	ldr	r2, [pc, #28]	; (800442c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800440e:	490a      	ldr	r1, [pc, #40]	; (8004438 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8004410:	480b      	ldr	r0, [pc, #44]	; (8004440 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8004412:	f7fd fff7 	bl	8002404 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8004416:	bf00      	nop
 8004418:	3708      	adds	r7, #8
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	24000e20 	.word	0x24000e20
 8004424:	2400175c 	.word	0x2400175c
 8004428:	24001794 	.word	0x24001794
 800442c:	240017c4 	.word	0x240017c4
 8004430:	08014228 	.word	0x08014228
 8004434:	240017f4 	.word	0x240017f4
 8004438:	08014234 	.word	0x08014234
 800443c:	24001808 	.word	0x24001808
 8004440:	2400181c 	.word	0x2400181c

08004444 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
    return configured_;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8004452:	4618      	mov	r0, r3
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr

0800445e <_GLOBAL__sub_I_nh>:
 800445e:	b580      	push	{r7, lr}
 8004460:	af00      	add	r7, sp, #0
 8004462:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004466:	2001      	movs	r0, #1
 8004468:	f7ff ffaa 	bl	80043c0 <_Z41__static_initialization_and_destruction_0ii>
 800446c:	bd80      	pop	{r7, pc}
	...

08004470 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004476:	4b0a      	ldr	r3, [pc, #40]	; (80044a0 <HAL_MspInit+0x30>)
 8004478:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800447c:	4a08      	ldr	r2, [pc, #32]	; (80044a0 <HAL_MspInit+0x30>)
 800447e:	f043 0302 	orr.w	r3, r3, #2
 8004482:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004486:	4b06      	ldr	r3, [pc, #24]	; (80044a0 <HAL_MspInit+0x30>)
 8004488:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800448c:	f003 0302 	and.w	r3, r3, #2
 8004490:	607b      	str	r3, [r7, #4]
 8004492:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr
 80044a0:	58024400 	.word	0x58024400

080044a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b08c      	sub	sp, #48	; 0x30
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044ac:	f107 031c 	add.w	r3, r7, #28
 80044b0:	2200      	movs	r2, #0
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	605a      	str	r2, [r3, #4]
 80044b6:	609a      	str	r2, [r3, #8]
 80044b8:	60da      	str	r2, [r3, #12]
 80044ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a33      	ldr	r2, [pc, #204]	; (8004590 <HAL_ADC_MspInit+0xec>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d15f      	bne.n	8004586 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80044c6:	4b33      	ldr	r3, [pc, #204]	; (8004594 <HAL_ADC_MspInit+0xf0>)
 80044c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80044cc:	4a31      	ldr	r2, [pc, #196]	; (8004594 <HAL_ADC_MspInit+0xf0>)
 80044ce:	f043 0320 	orr.w	r3, r3, #32
 80044d2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80044d6:	4b2f      	ldr	r3, [pc, #188]	; (8004594 <HAL_ADC_MspInit+0xf0>)
 80044d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80044dc:	f003 0320 	and.w	r3, r3, #32
 80044e0:	61bb      	str	r3, [r7, #24]
 80044e2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044e4:	4b2b      	ldr	r3, [pc, #172]	; (8004594 <HAL_ADC_MspInit+0xf0>)
 80044e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044ea:	4a2a      	ldr	r2, [pc, #168]	; (8004594 <HAL_ADC_MspInit+0xf0>)
 80044ec:	f043 0304 	orr.w	r3, r3, #4
 80044f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80044f4:	4b27      	ldr	r3, [pc, #156]	; (8004594 <HAL_ADC_MspInit+0xf0>)
 80044f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044fa:	f003 0304 	and.w	r3, r3, #4
 80044fe:	617b      	str	r3, [r7, #20]
 8004500:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004502:	4b24      	ldr	r3, [pc, #144]	; (8004594 <HAL_ADC_MspInit+0xf0>)
 8004504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004508:	4a22      	ldr	r2, [pc, #136]	; (8004594 <HAL_ADC_MspInit+0xf0>)
 800450a:	f043 0301 	orr.w	r3, r3, #1
 800450e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004512:	4b20      	ldr	r3, [pc, #128]	; (8004594 <HAL_ADC_MspInit+0xf0>)
 8004514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004518:	f003 0301 	and.w	r3, r3, #1
 800451c:	613b      	str	r3, [r7, #16]
 800451e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004520:	4b1c      	ldr	r3, [pc, #112]	; (8004594 <HAL_ADC_MspInit+0xf0>)
 8004522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004526:	4a1b      	ldr	r2, [pc, #108]	; (8004594 <HAL_ADC_MspInit+0xf0>)
 8004528:	f043 0302 	orr.w	r3, r3, #2
 800452c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004530:	4b18      	ldr	r3, [pc, #96]	; (8004594 <HAL_ADC_MspInit+0xf0>)
 8004532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	60fb      	str	r3, [r7, #12]
 800453c:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = F06_Pin|F07_Pin|F01_Pin|F04_Pin;
 800453e:	2333      	movs	r3, #51	; 0x33
 8004540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004542:	2303      	movs	r3, #3
 8004544:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004546:	2300      	movs	r3, #0
 8004548:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800454a:	f107 031c 	add.w	r3, r7, #28
 800454e:	4619      	mov	r1, r3
 8004550:	4811      	ldr	r0, [pc, #68]	; (8004598 <HAL_ADC_MspInit+0xf4>)
 8004552:	f005 f957 	bl	8009804 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = F03_Pin|F00_Pin;
 8004556:	2350      	movs	r3, #80	; 0x50
 8004558:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800455a:	2303      	movs	r3, #3
 800455c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800455e:	2300      	movs	r3, #0
 8004560:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004562:	f107 031c 	add.w	r3, r7, #28
 8004566:	4619      	mov	r1, r3
 8004568:	480c      	ldr	r0, [pc, #48]	; (800459c <HAL_ADC_MspInit+0xf8>)
 800456a:	f005 f94b 	bl	8009804 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = F05_Pin|F02_Pin;
 800456e:	2303      	movs	r3, #3
 8004570:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004572:	2303      	movs	r3, #3
 8004574:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004576:	2300      	movs	r3, #0
 8004578:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800457a:	f107 031c 	add.w	r3, r7, #28
 800457e:	4619      	mov	r1, r3
 8004580:	4807      	ldr	r0, [pc, #28]	; (80045a0 <HAL_ADC_MspInit+0xfc>)
 8004582:	f005 f93f 	bl	8009804 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004586:	bf00      	nop
 8004588:	3730      	adds	r7, #48	; 0x30
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	40022000 	.word	0x40022000
 8004594:	58024400 	.word	0x58024400
 8004598:	58020800 	.word	0x58020800
 800459c:	58020000 	.word	0x58020000
 80045a0:	58020400 	.word	0x58020400

080045a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b0ba      	sub	sp, #232	; 0xe8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045ac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80045b0:	2200      	movs	r2, #0
 80045b2:	601a      	str	r2, [r3, #0]
 80045b4:	605a      	str	r2, [r3, #4]
 80045b6:	609a      	str	r2, [r3, #8]
 80045b8:	60da      	str	r2, [r3, #12]
 80045ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80045bc:	f107 0310 	add.w	r3, r7, #16
 80045c0:	22c0      	movs	r2, #192	; 0xc0
 80045c2:	2100      	movs	r1, #0
 80045c4:	4618      	mov	r0, r3
 80045c6:	f00f fc48 	bl	8013e5a <memset>
  if(hi2c->Instance==I2C1)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a27      	ldr	r2, [pc, #156]	; (800466c <HAL_I2C_MspInit+0xc8>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d146      	bne.n	8004662 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80045d4:	f04f 0208 	mov.w	r2, #8
 80045d8:	f04f 0300 	mov.w	r3, #0
 80045dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80045e0:	2300      	movs	r3, #0
 80045e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80045e6:	f107 0310 	add.w	r3, r7, #16
 80045ea:	4618      	mov	r0, r3
 80045ec:	f006 fe2e 	bl	800b24c <HAL_RCCEx_PeriphCLKConfig>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80045f6:	f7fc ff69 	bl	80014cc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045fa:	4b1d      	ldr	r3, [pc, #116]	; (8004670 <HAL_I2C_MspInit+0xcc>)
 80045fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004600:	4a1b      	ldr	r2, [pc, #108]	; (8004670 <HAL_I2C_MspInit+0xcc>)
 8004602:	f043 0302 	orr.w	r3, r3, #2
 8004606:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800460a:	4b19      	ldr	r3, [pc, #100]	; (8004670 <HAL_I2C_MspInit+0xcc>)
 800460c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	60fb      	str	r3, [r7, #12]
 8004616:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004618:	f44f 7340 	mov.w	r3, #768	; 0x300
 800461c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004620:	2312      	movs	r3, #18
 8004622:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004626:	2300      	movs	r3, #0
 8004628:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800462c:	2300      	movs	r3, #0
 800462e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004632:	2304      	movs	r3, #4
 8004634:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004638:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800463c:	4619      	mov	r1, r3
 800463e:	480d      	ldr	r0, [pc, #52]	; (8004674 <HAL_I2C_MspInit+0xd0>)
 8004640:	f005 f8e0 	bl	8009804 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004644:	4b0a      	ldr	r3, [pc, #40]	; (8004670 <HAL_I2C_MspInit+0xcc>)
 8004646:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800464a:	4a09      	ldr	r2, [pc, #36]	; (8004670 <HAL_I2C_MspInit+0xcc>)
 800464c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004650:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004654:	4b06      	ldr	r3, [pc, #24]	; (8004670 <HAL_I2C_MspInit+0xcc>)
 8004656:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800465a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800465e:	60bb      	str	r3, [r7, #8]
 8004660:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004662:	bf00      	nop
 8004664:	37e8      	adds	r7, #232	; 0xe8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	40005400 	.word	0x40005400
 8004670:	58024400 	.word	0x58024400
 8004674:	58020400 	.word	0x58020400

08004678 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b0c4      	sub	sp, #272	; 0x110
 800467c:	af00      	add	r7, sp, #0
 800467e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004682:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004686:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004688:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800468c:	2200      	movs	r2, #0
 800468e:	601a      	str	r2, [r3, #0]
 8004690:	605a      	str	r2, [r3, #4]
 8004692:	609a      	str	r2, [r3, #8]
 8004694:	60da      	str	r2, [r3, #12]
 8004696:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004698:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800469c:	22c0      	movs	r2, #192	; 0xc0
 800469e:	2100      	movs	r1, #0
 80046a0:	4618      	mov	r0, r3
 80046a2:	f00f fbda 	bl	8013e5a <memset>
  if(huart->Instance==LPUART1)
 80046a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80046aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4aa6      	ldr	r2, [pc, #664]	; (800494c <HAL_UART_MspInit+0x2d4>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	f040 8084 	bne.w	80047c2 <HAL_UART_MspInit+0x14a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80046ba:	f04f 0204 	mov.w	r2, #4
 80046be:	f04f 0300 	mov.w	r3, #0
 80046c2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 80046c6:	2300      	movs	r3, #0
 80046c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80046cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80046d0:	4618      	mov	r0, r3
 80046d2:	f006 fdbb 	bl	800b24c <HAL_RCCEx_PeriphCLKConfig>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d001      	beq.n	80046e0 <HAL_UART_MspInit+0x68>
    {
      Error_Handler();
 80046dc:	f7fc fef6 	bl	80014cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80046e0:	4b9b      	ldr	r3, [pc, #620]	; (8004950 <HAL_UART_MspInit+0x2d8>)
 80046e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80046e6:	4a9a      	ldr	r2, [pc, #616]	; (8004950 <HAL_UART_MspInit+0x2d8>)
 80046e8:	f043 0308 	orr.w	r3, r3, #8
 80046ec:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80046f0:	4b97      	ldr	r3, [pc, #604]	; (8004950 <HAL_UART_MspInit+0x2d8>)
 80046f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80046f6:	f003 0308 	and.w	r3, r3, #8
 80046fa:	637b      	str	r3, [r7, #52]	; 0x34
 80046fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046fe:	4b94      	ldr	r3, [pc, #592]	; (8004950 <HAL_UART_MspInit+0x2d8>)
 8004700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004704:	4a92      	ldr	r2, [pc, #584]	; (8004950 <HAL_UART_MspInit+0x2d8>)
 8004706:	f043 0301 	orr.w	r3, r3, #1
 800470a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800470e:	4b90      	ldr	r3, [pc, #576]	; (8004950 <HAL_UART_MspInit+0x2d8>)
 8004710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	633b      	str	r3, [r7, #48]	; 0x30
 800471a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**LPUART1 GPIO Configuration
    PA9     ------> LPUART1_TX
    PA10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800471c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004720:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004724:	2302      	movs	r3, #2
 8004726:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800472a:	2300      	movs	r3, #0
 800472c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004730:	2300      	movs	r3, #0
 8004732:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 8004736:	2303      	movs	r3, #3
 8004738:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800473c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004740:	4619      	mov	r1, r3
 8004742:	4884      	ldr	r0, [pc, #528]	; (8004954 <HAL_UART_MspInit+0x2dc>)
 8004744:	f005 f85e 	bl	8009804 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = BDMA_Channel0;
 8004748:	4b83      	ldr	r3, [pc, #524]	; (8004958 <HAL_UART_MspInit+0x2e0>)
 800474a:	4a84      	ldr	r2, [pc, #528]	; (800495c <HAL_UART_MspInit+0x2e4>)
 800474c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = BDMA_REQUEST_LPUART1_RX;
 800474e:	4b82      	ldr	r3, [pc, #520]	; (8004958 <HAL_UART_MspInit+0x2e0>)
 8004750:	2209      	movs	r2, #9
 8004752:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004754:	4b80      	ldr	r3, [pc, #512]	; (8004958 <HAL_UART_MspInit+0x2e0>)
 8004756:	2200      	movs	r2, #0
 8004758:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800475a:	4b7f      	ldr	r3, [pc, #508]	; (8004958 <HAL_UART_MspInit+0x2e0>)
 800475c:	2200      	movs	r2, #0
 800475e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004760:	4b7d      	ldr	r3, [pc, #500]	; (8004958 <HAL_UART_MspInit+0x2e0>)
 8004762:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004766:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004768:	4b7b      	ldr	r3, [pc, #492]	; (8004958 <HAL_UART_MspInit+0x2e0>)
 800476a:	2200      	movs	r2, #0
 800476c:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800476e:	4b7a      	ldr	r3, [pc, #488]	; (8004958 <HAL_UART_MspInit+0x2e0>)
 8004770:	2200      	movs	r2, #0
 8004772:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8004774:	4b78      	ldr	r3, [pc, #480]	; (8004958 <HAL_UART_MspInit+0x2e0>)
 8004776:	f44f 7280 	mov.w	r2, #256	; 0x100
 800477a:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800477c:	4b76      	ldr	r3, [pc, #472]	; (8004958 <HAL_UART_MspInit+0x2e0>)
 800477e:	2200      	movs	r2, #0
 8004780:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8004782:	4875      	ldr	r0, [pc, #468]	; (8004958 <HAL_UART_MspInit+0x2e0>)
 8004784:	f002 fa02 	bl	8006b8c <HAL_DMA_Init>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <HAL_UART_MspInit+0x11a>
    {
      Error_Handler();
 800478e:	f7fc fe9d 	bl	80014cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8004792:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004796:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a6e      	ldr	r2, [pc, #440]	; (8004958 <HAL_UART_MspInit+0x2e0>)
 800479e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80047a2:	4a6d      	ldr	r2, [pc, #436]	; (8004958 <HAL_UART_MspInit+0x2e0>)
 80047a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80047a8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	6393      	str	r3, [r2, #56]	; 0x38

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80047b0:	2200      	movs	r2, #0
 80047b2:	2100      	movs	r1, #0
 80047b4:	208e      	movs	r0, #142	; 0x8e
 80047b6:	f002 f9b4 	bl	8006b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80047ba:	208e      	movs	r0, #142	; 0x8e
 80047bc:	f002 f9cb 	bl	8006b56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80047c0:	e241      	b.n	8004c46 <HAL_UART_MspInit+0x5ce>
  else if(huart->Instance==UART4)
 80047c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80047c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a64      	ldr	r2, [pc, #400]	; (8004960 <HAL_UART_MspInit+0x2e8>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	f040 80d1 	bne.w	8004978 <HAL_UART_MspInit+0x300>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80047d6:	f04f 0202 	mov.w	r2, #2
 80047da:	f04f 0300 	mov.w	r3, #0
 80047de:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80047e2:	2300      	movs	r3, #0
 80047e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80047e8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80047ec:	4618      	mov	r0, r3
 80047ee:	f006 fd2d 	bl	800b24c <HAL_RCCEx_PeriphCLKConfig>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d001      	beq.n	80047fc <HAL_UART_MspInit+0x184>
      Error_Handler();
 80047f8:	f7fc fe68 	bl	80014cc <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 80047fc:	4b54      	ldr	r3, [pc, #336]	; (8004950 <HAL_UART_MspInit+0x2d8>)
 80047fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004802:	4a53      	ldr	r2, [pc, #332]	; (8004950 <HAL_UART_MspInit+0x2d8>)
 8004804:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004808:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800480c:	4b50      	ldr	r3, [pc, #320]	; (8004950 <HAL_UART_MspInit+0x2d8>)
 800480e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004812:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004816:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800481a:	4b4d      	ldr	r3, [pc, #308]	; (8004950 <HAL_UART_MspInit+0x2d8>)
 800481c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004820:	4a4b      	ldr	r2, [pc, #300]	; (8004950 <HAL_UART_MspInit+0x2d8>)
 8004822:	f043 0308 	orr.w	r3, r3, #8
 8004826:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800482a:	4b49      	ldr	r3, [pc, #292]	; (8004950 <HAL_UART_MspInit+0x2d8>)
 800482c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004830:	f003 0308 	and.w	r3, r3, #8
 8004834:	62bb      	str	r3, [r7, #40]	; 0x28
 8004836:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004838:	2303      	movs	r3, #3
 800483a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800483e:	2302      	movs	r3, #2
 8004840:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004844:	2300      	movs	r3, #0
 8004846:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800484a:	2300      	movs	r3, #0
 800484c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004850:	2308      	movs	r3, #8
 8004852:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004856:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800485a:	4619      	mov	r1, r3
 800485c:	4841      	ldr	r0, [pc, #260]	; (8004964 <HAL_UART_MspInit+0x2ec>)
 800485e:	f004 ffd1 	bl	8009804 <HAL_GPIO_Init>
    hdma_uart4_rx.Instance = DMA1_Stream0;
 8004862:	4b41      	ldr	r3, [pc, #260]	; (8004968 <HAL_UART_MspInit+0x2f0>)
 8004864:	4a41      	ldr	r2, [pc, #260]	; (800496c <HAL_UART_MspInit+0x2f4>)
 8004866:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8004868:	4b3f      	ldr	r3, [pc, #252]	; (8004968 <HAL_UART_MspInit+0x2f0>)
 800486a:	223f      	movs	r2, #63	; 0x3f
 800486c:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800486e:	4b3e      	ldr	r3, [pc, #248]	; (8004968 <HAL_UART_MspInit+0x2f0>)
 8004870:	2200      	movs	r2, #0
 8004872:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004874:	4b3c      	ldr	r3, [pc, #240]	; (8004968 <HAL_UART_MspInit+0x2f0>)
 8004876:	2200      	movs	r2, #0
 8004878:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800487a:	4b3b      	ldr	r3, [pc, #236]	; (8004968 <HAL_UART_MspInit+0x2f0>)
 800487c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004880:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004882:	4b39      	ldr	r3, [pc, #228]	; (8004968 <HAL_UART_MspInit+0x2f0>)
 8004884:	2200      	movs	r2, #0
 8004886:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004888:	4b37      	ldr	r3, [pc, #220]	; (8004968 <HAL_UART_MspInit+0x2f0>)
 800488a:	2200      	movs	r2, #0
 800488c:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800488e:	4b36      	ldr	r3, [pc, #216]	; (8004968 <HAL_UART_MspInit+0x2f0>)
 8004890:	2200      	movs	r2, #0
 8004892:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004894:	4b34      	ldr	r3, [pc, #208]	; (8004968 <HAL_UART_MspInit+0x2f0>)
 8004896:	2200      	movs	r2, #0
 8004898:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800489a:	4b33      	ldr	r3, [pc, #204]	; (8004968 <HAL_UART_MspInit+0x2f0>)
 800489c:	2200      	movs	r2, #0
 800489e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80048a0:	4831      	ldr	r0, [pc, #196]	; (8004968 <HAL_UART_MspInit+0x2f0>)
 80048a2:	f002 f973 	bl	8006b8c <HAL_DMA_Init>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <HAL_UART_MspInit+0x238>
      Error_Handler();
 80048ac:	f7fc fe0e 	bl	80014cc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80048b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80048b4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a2b      	ldr	r2, [pc, #172]	; (8004968 <HAL_UART_MspInit+0x2f0>)
 80048bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80048c0:	4a29      	ldr	r2, [pc, #164]	; (8004968 <HAL_UART_MspInit+0x2f0>)
 80048c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80048c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart4_tx.Instance = DMA1_Stream1;
 80048ce:	4b28      	ldr	r3, [pc, #160]	; (8004970 <HAL_UART_MspInit+0x2f8>)
 80048d0:	4a28      	ldr	r2, [pc, #160]	; (8004974 <HAL_UART_MspInit+0x2fc>)
 80048d2:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 80048d4:	4b26      	ldr	r3, [pc, #152]	; (8004970 <HAL_UART_MspInit+0x2f8>)
 80048d6:	2240      	movs	r2, #64	; 0x40
 80048d8:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80048da:	4b25      	ldr	r3, [pc, #148]	; (8004970 <HAL_UART_MspInit+0x2f8>)
 80048dc:	2240      	movs	r2, #64	; 0x40
 80048de:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80048e0:	4b23      	ldr	r3, [pc, #140]	; (8004970 <HAL_UART_MspInit+0x2f8>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80048e6:	4b22      	ldr	r3, [pc, #136]	; (8004970 <HAL_UART_MspInit+0x2f8>)
 80048e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048ec:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80048ee:	4b20      	ldr	r3, [pc, #128]	; (8004970 <HAL_UART_MspInit+0x2f8>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80048f4:	4b1e      	ldr	r3, [pc, #120]	; (8004970 <HAL_UART_MspInit+0x2f8>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80048fa:	4b1d      	ldr	r3, [pc, #116]	; (8004970 <HAL_UART_MspInit+0x2f8>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004900:	4b1b      	ldr	r3, [pc, #108]	; (8004970 <HAL_UART_MspInit+0x2f8>)
 8004902:	2200      	movs	r2, #0
 8004904:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004906:	4b1a      	ldr	r3, [pc, #104]	; (8004970 <HAL_UART_MspInit+0x2f8>)
 8004908:	2200      	movs	r2, #0
 800490a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800490c:	4818      	ldr	r0, [pc, #96]	; (8004970 <HAL_UART_MspInit+0x2f8>)
 800490e:	f002 f93d 	bl	8006b8c <HAL_DMA_Init>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <HAL_UART_MspInit+0x2a4>
      Error_Handler();
 8004918:	f7fc fdd8 	bl	80014cc <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 800491c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004920:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a12      	ldr	r2, [pc, #72]	; (8004970 <HAL_UART_MspInit+0x2f8>)
 8004928:	67da      	str	r2, [r3, #124]	; 0x7c
 800492a:	4a11      	ldr	r2, [pc, #68]	; (8004970 <HAL_UART_MspInit+0x2f8>)
 800492c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004930:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8004938:	2200      	movs	r2, #0
 800493a:	2100      	movs	r1, #0
 800493c:	2034      	movs	r0, #52	; 0x34
 800493e:	f002 f8f0 	bl	8006b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004942:	2034      	movs	r0, #52	; 0x34
 8004944:	f002 f907 	bl	8006b56 <HAL_NVIC_EnableIRQ>
}
 8004948:	e17d      	b.n	8004c46 <HAL_UART_MspInit+0x5ce>
 800494a:	bf00      	nop
 800494c:	58000c00 	.word	0x58000c00
 8004950:	58024400 	.word	0x58024400
 8004954:	58020000 	.word	0x58020000
 8004958:	24000418 	.word	0x24000418
 800495c:	58025408 	.word	0x58025408
 8004960:	40004c00 	.word	0x40004c00
 8004964:	58020c00 	.word	0x58020c00
 8004968:	24000490 	.word	0x24000490
 800496c:	40020010 	.word	0x40020010
 8004970:	24000508 	.word	0x24000508
 8004974:	40020028 	.word	0x40020028
  else if(huart->Instance==UART5)
 8004978:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800497c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4ab2      	ldr	r2, [pc, #712]	; (8004c50 <HAL_UART_MspInit+0x5d8>)
 8004986:	4293      	cmp	r3, r2
 8004988:	f040 8087 	bne.w	8004a9a <HAL_UART_MspInit+0x422>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800498c:	f04f 0202 	mov.w	r2, #2
 8004990:	f04f 0300 	mov.w	r3, #0
 8004994:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004998:	2300      	movs	r3, #0
 800499a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800499e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80049a2:	4618      	mov	r0, r3
 80049a4:	f006 fc52 	bl	800b24c <HAL_RCCEx_PeriphCLKConfig>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <HAL_UART_MspInit+0x33a>
      Error_Handler();
 80049ae:	f7fc fd8d 	bl	80014cc <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80049b2:	4ba8      	ldr	r3, [pc, #672]	; (8004c54 <HAL_UART_MspInit+0x5dc>)
 80049b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80049b8:	4aa6      	ldr	r2, [pc, #664]	; (8004c54 <HAL_UART_MspInit+0x5dc>)
 80049ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049be:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80049c2:	4ba4      	ldr	r3, [pc, #656]	; (8004c54 <HAL_UART_MspInit+0x5dc>)
 80049c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80049c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049cc:	627b      	str	r3, [r7, #36]	; 0x24
 80049ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049d0:	4ba0      	ldr	r3, [pc, #640]	; (8004c54 <HAL_UART_MspInit+0x5dc>)
 80049d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80049d6:	4a9f      	ldr	r2, [pc, #636]	; (8004c54 <HAL_UART_MspInit+0x5dc>)
 80049d8:	f043 0302 	orr.w	r3, r3, #2
 80049dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80049e0:	4b9c      	ldr	r3, [pc, #624]	; (8004c54 <HAL_UART_MspInit+0x5dc>)
 80049e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	623b      	str	r3, [r7, #32]
 80049ec:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80049ee:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80049f2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049f6:	2302      	movs	r3, #2
 80049f8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049fc:	2300      	movs	r3, #0
 80049fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a02:	2300      	movs	r3, #0
 8004a04:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8004a08:	230e      	movs	r3, #14
 8004a0a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a0e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004a12:	4619      	mov	r1, r3
 8004a14:	4890      	ldr	r0, [pc, #576]	; (8004c58 <HAL_UART_MspInit+0x5e0>)
 8004a16:	f004 fef5 	bl	8009804 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream2;
 8004a1a:	4b90      	ldr	r3, [pc, #576]	; (8004c5c <HAL_UART_MspInit+0x5e4>)
 8004a1c:	4a90      	ldr	r2, [pc, #576]	; (8004c60 <HAL_UART_MspInit+0x5e8>)
 8004a1e:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8004a20:	4b8e      	ldr	r3, [pc, #568]	; (8004c5c <HAL_UART_MspInit+0x5e4>)
 8004a22:	2241      	movs	r2, #65	; 0x41
 8004a24:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a26:	4b8d      	ldr	r3, [pc, #564]	; (8004c5c <HAL_UART_MspInit+0x5e4>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a2c:	4b8b      	ldr	r3, [pc, #556]	; (8004c5c <HAL_UART_MspInit+0x5e4>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004a32:	4b8a      	ldr	r3, [pc, #552]	; (8004c5c <HAL_UART_MspInit+0x5e4>)
 8004a34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a38:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a3a:	4b88      	ldr	r3, [pc, #544]	; (8004c5c <HAL_UART_MspInit+0x5e4>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a40:	4b86      	ldr	r3, [pc, #536]	; (8004c5c <HAL_UART_MspInit+0x5e4>)
 8004a42:	2200      	movs	r2, #0
 8004a44:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8004a46:	4b85      	ldr	r3, [pc, #532]	; (8004c5c <HAL_UART_MspInit+0x5e4>)
 8004a48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a4c:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004a4e:	4b83      	ldr	r3, [pc, #524]	; (8004c5c <HAL_UART_MspInit+0x5e4>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a54:	4b81      	ldr	r3, [pc, #516]	; (8004c5c <HAL_UART_MspInit+0x5e4>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8004a5a:	4880      	ldr	r0, [pc, #512]	; (8004c5c <HAL_UART_MspInit+0x5e4>)
 8004a5c:	f002 f896 	bl	8006b8c <HAL_DMA_Init>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <HAL_UART_MspInit+0x3f2>
      Error_Handler();
 8004a66:	f7fc fd31 	bl	80014cc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8004a6a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004a6e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a79      	ldr	r2, [pc, #484]	; (8004c5c <HAL_UART_MspInit+0x5e4>)
 8004a76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004a7a:	4a78      	ldr	r2, [pc, #480]	; (8004c5c <HAL_UART_MspInit+0x5e4>)
 8004a7c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004a80:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8004a88:	2200      	movs	r2, #0
 8004a8a:	2100      	movs	r1, #0
 8004a8c:	2035      	movs	r0, #53	; 0x35
 8004a8e:	f002 f848 	bl	8006b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8004a92:	2035      	movs	r0, #53	; 0x35
 8004a94:	f002 f85f 	bl	8006b56 <HAL_NVIC_EnableIRQ>
}
 8004a98:	e0d5      	b.n	8004c46 <HAL_UART_MspInit+0x5ce>
  else if(huart->Instance==UART7)
 8004a9a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004a9e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a6f      	ldr	r2, [pc, #444]	; (8004c64 <HAL_UART_MspInit+0x5ec>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d16c      	bne.n	8004b86 <HAL_UART_MspInit+0x50e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8004aac:	f04f 0202 	mov.w	r2, #2
 8004ab0:	f04f 0300 	mov.w	r3, #0
 8004ab4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004abe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f006 fbc2 	bl	800b24c <HAL_RCCEx_PeriphCLKConfig>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d001      	beq.n	8004ad2 <HAL_UART_MspInit+0x45a>
      Error_Handler();
 8004ace:	f7fc fcfd 	bl	80014cc <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8004ad2:	4b60      	ldr	r3, [pc, #384]	; (8004c54 <HAL_UART_MspInit+0x5dc>)
 8004ad4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ad8:	4a5e      	ldr	r2, [pc, #376]	; (8004c54 <HAL_UART_MspInit+0x5dc>)
 8004ada:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ade:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004ae2:	4b5c      	ldr	r3, [pc, #368]	; (8004c54 <HAL_UART_MspInit+0x5dc>)
 8004ae4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ae8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004aec:	61fb      	str	r3, [r7, #28]
 8004aee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004af0:	4b58      	ldr	r3, [pc, #352]	; (8004c54 <HAL_UART_MspInit+0x5dc>)
 8004af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004af6:	4a57      	ldr	r2, [pc, #348]	; (8004c54 <HAL_UART_MspInit+0x5dc>)
 8004af8:	f043 0310 	orr.w	r3, r3, #16
 8004afc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004b00:	4b54      	ldr	r3, [pc, #336]	; (8004c54 <HAL_UART_MspInit+0x5dc>)
 8004b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b06:	f003 0310 	and.w	r3, r3, #16
 8004b0a:	61bb      	str	r3, [r7, #24]
 8004b0c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b0e:	4b51      	ldr	r3, [pc, #324]	; (8004c54 <HAL_UART_MspInit+0x5dc>)
 8004b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b14:	4a4f      	ldr	r2, [pc, #316]	; (8004c54 <HAL_UART_MspInit+0x5dc>)
 8004b16:	f043 0301 	orr.w	r3, r3, #1
 8004b1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004b1e:	4b4d      	ldr	r3, [pc, #308]	; (8004c54 <HAL_UART_MspInit+0x5dc>)
 8004b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b24:	f003 0301 	and.w	r3, r3, #1
 8004b28:	617b      	str	r3, [r7, #20]
 8004b2a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004b2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b30:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b34:	2302      	movs	r3, #2
 8004b36:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b40:	2300      	movs	r3, #0
 8004b42:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8004b46:	2307      	movs	r3, #7
 8004b48:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004b4c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004b50:	4619      	mov	r1, r3
 8004b52:	4845      	ldr	r0, [pc, #276]	; (8004c68 <HAL_UART_MspInit+0x5f0>)
 8004b54:	f004 fe56 	bl	8009804 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004b58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b5c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b60:	2302      	movs	r3, #2
 8004b62:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b66:	2300      	movs	r3, #0
 8004b68:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF11_UART7;
 8004b72:	230b      	movs	r3, #11
 8004b74:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b78:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	483b      	ldr	r0, [pc, #236]	; (8004c6c <HAL_UART_MspInit+0x5f4>)
 8004b80:	f004 fe40 	bl	8009804 <HAL_GPIO_Init>
}
 8004b84:	e05f      	b.n	8004c46 <HAL_UART_MspInit+0x5ce>
  else if(huart->Instance==USART3)
 8004b86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004b8a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a37      	ldr	r2, [pc, #220]	; (8004c70 <HAL_UART_MspInit+0x5f8>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d156      	bne.n	8004c46 <HAL_UART_MspInit+0x5ce>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004b98:	f04f 0202 	mov.w	r2, #2
 8004b9c:	f04f 0300 	mov.w	r3, #0
 8004ba0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004baa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f006 fb4c 	bl	800b24c <HAL_RCCEx_PeriphCLKConfig>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d001      	beq.n	8004bbe <HAL_UART_MspInit+0x546>
      Error_Handler();
 8004bba:	f7fc fc87 	bl	80014cc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004bbe:	4b25      	ldr	r3, [pc, #148]	; (8004c54 <HAL_UART_MspInit+0x5dc>)
 8004bc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004bc4:	4a23      	ldr	r2, [pc, #140]	; (8004c54 <HAL_UART_MspInit+0x5dc>)
 8004bc6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004bce:	4b21      	ldr	r3, [pc, #132]	; (8004c54 <HAL_UART_MspInit+0x5dc>)
 8004bd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004bd4:	f403 2280 	and.w	r2, r3, #262144	; 0x40000
 8004bd8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004bdc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004be0:	601a      	str	r2, [r3, #0]
 8004be2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004be6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004bea:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bec:	4b19      	ldr	r3, [pc, #100]	; (8004c54 <HAL_UART_MspInit+0x5dc>)
 8004bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004bf2:	4a18      	ldr	r2, [pc, #96]	; (8004c54 <HAL_UART_MspInit+0x5dc>)
 8004bf4:	f043 0302 	orr.w	r3, r3, #2
 8004bf8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004bfc:	4b15      	ldr	r3, [pc, #84]	; (8004c54 <HAL_UART_MspInit+0x5dc>)
 8004bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c02:	f003 0202 	and.w	r2, r3, #2
 8004c06:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004c0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c0e:	601a      	str	r2, [r3, #0]
 8004c10:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004c14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c18:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004c1a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004c1e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c22:	2302      	movs	r3, #2
 8004c24:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004c34:	2307      	movs	r3, #7
 8004c36:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c3a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004c3e:	4619      	mov	r1, r3
 8004c40:	4805      	ldr	r0, [pc, #20]	; (8004c58 <HAL_UART_MspInit+0x5e0>)
 8004c42:	f004 fddf 	bl	8009804 <HAL_GPIO_Init>
}
 8004c46:	bf00      	nop
 8004c48:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	40005000 	.word	0x40005000
 8004c54:	58024400 	.word	0x58024400
 8004c58:	58020400 	.word	0x58020400
 8004c5c:	24000580 	.word	0x24000580
 8004c60:	40020040 	.word	0x40020040
 8004c64:	40007800 	.word	0x40007800
 8004c68:	58021000 	.word	0x58021000
 8004c6c:	58020000 	.word	0x58020000
 8004c70:	40004800 	.word	0x40004800

08004c74 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b0bc      	sub	sp, #240	; 0xf0
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c7c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004c80:	2200      	movs	r2, #0
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	605a      	str	r2, [r3, #4]
 8004c86:	609a      	str	r2, [r3, #8]
 8004c88:	60da      	str	r2, [r3, #12]
 8004c8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004c8c:	f107 0318 	add.w	r3, r7, #24
 8004c90:	22c0      	movs	r2, #192	; 0xc0
 8004c92:	2100      	movs	r1, #0
 8004c94:	4618      	mov	r0, r3
 8004c96:	f00f f8e0 	bl	8013e5a <memset>
  if(hqspi->Instance==QUADSPI)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a55      	ldr	r2, [pc, #340]	; (8004df4 <HAL_QSPI_MspInit+0x180>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	f040 80a3 	bne.w	8004dec <HAL_QSPI_MspInit+0x178>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8004ca6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004caa:	f04f 0300 	mov.w	r3, #0
 8004cae:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004cb6:	f107 0318 	add.w	r3, r7, #24
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f006 fac6 	bl	800b24c <HAL_RCCEx_PeriphCLKConfig>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d001      	beq.n	8004cca <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 8004cc6:	f7fc fc01 	bl	80014cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8004cca:	4b4b      	ldr	r3, [pc, #300]	; (8004df8 <HAL_QSPI_MspInit+0x184>)
 8004ccc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004cd0:	4a49      	ldr	r2, [pc, #292]	; (8004df8 <HAL_QSPI_MspInit+0x184>)
 8004cd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004cd6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8004cda:	4b47      	ldr	r3, [pc, #284]	; (8004df8 <HAL_QSPI_MspInit+0x184>)
 8004cdc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004ce0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ce4:	617b      	str	r3, [r7, #20]
 8004ce6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004ce8:	4b43      	ldr	r3, [pc, #268]	; (8004df8 <HAL_QSPI_MspInit+0x184>)
 8004cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004cee:	4a42      	ldr	r2, [pc, #264]	; (8004df8 <HAL_QSPI_MspInit+0x184>)
 8004cf0:	f043 0310 	orr.w	r3, r3, #16
 8004cf4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004cf8:	4b3f      	ldr	r3, [pc, #252]	; (8004df8 <HAL_QSPI_MspInit+0x184>)
 8004cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004cfe:	f003 0310 	and.w	r3, r3, #16
 8004d02:	613b      	str	r3, [r7, #16]
 8004d04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d06:	4b3c      	ldr	r3, [pc, #240]	; (8004df8 <HAL_QSPI_MspInit+0x184>)
 8004d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d0c:	4a3a      	ldr	r2, [pc, #232]	; (8004df8 <HAL_QSPI_MspInit+0x184>)
 8004d0e:	f043 0302 	orr.w	r3, r3, #2
 8004d12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004d16:	4b38      	ldr	r3, [pc, #224]	; (8004df8 <HAL_QSPI_MspInit+0x184>)
 8004d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	60fb      	str	r3, [r7, #12]
 8004d22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004d24:	4b34      	ldr	r3, [pc, #208]	; (8004df8 <HAL_QSPI_MspInit+0x184>)
 8004d26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d2a:	4a33      	ldr	r2, [pc, #204]	; (8004df8 <HAL_QSPI_MspInit+0x184>)
 8004d2c:	f043 0308 	orr.w	r3, r3, #8
 8004d30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004d34:	4b30      	ldr	r3, [pc, #192]	; (8004df8 <HAL_QSPI_MspInit+0x184>)
 8004d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d3a:	f003 0308 	and.w	r3, r3, #8
 8004d3e:	60bb      	str	r3, [r7, #8]
 8004d40:	68bb      	ldr	r3, [r7, #8]
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004d42:	2304      	movs	r3, #4
 8004d44:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d48:	2302      	movs	r3, #2
 8004d4a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d54:	2300      	movs	r3, #0
 8004d56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004d5a:	2309      	movs	r3, #9
 8004d5c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004d60:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004d64:	4619      	mov	r1, r3
 8004d66:	4825      	ldr	r0, [pc, #148]	; (8004dfc <HAL_QSPI_MspInit+0x188>)
 8004d68:	f004 fd4c 	bl	8009804 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004d6c:	2304      	movs	r3, #4
 8004d6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d72:	2302      	movs	r3, #2
 8004d74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004d84:	2309      	movs	r3, #9
 8004d86:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d8a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004d8e:	4619      	mov	r1, r3
 8004d90:	481b      	ldr	r0, [pc, #108]	; (8004e00 <HAL_QSPI_MspInit+0x18c>)
 8004d92:	f004 fd37 	bl	8009804 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8004d96:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004d9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d9e:	2302      	movs	r3, #2
 8004da0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004da4:	2300      	movs	r3, #0
 8004da6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004daa:	2300      	movs	r3, #0
 8004dac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004db0:	2309      	movs	r3, #9
 8004db2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004db6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004dba:	4619      	mov	r1, r3
 8004dbc:	4811      	ldr	r0, [pc, #68]	; (8004e04 <HAL_QSPI_MspInit+0x190>)
 8004dbe:	f004 fd21 	bl	8009804 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004dc2:	2340      	movs	r3, #64	; 0x40
 8004dc4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dc8:	2302      	movs	r3, #2
 8004dca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8004dda:	230a      	movs	r3, #10
 8004ddc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004de0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004de4:	4619      	mov	r1, r3
 8004de6:	4806      	ldr	r0, [pc, #24]	; (8004e00 <HAL_QSPI_MspInit+0x18c>)
 8004de8:	f004 fd0c 	bl	8009804 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8004dec:	bf00      	nop
 8004dee:	37f0      	adds	r7, #240	; 0xf0
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	52005000 	.word	0x52005000
 8004df8:	58024400 	.word	0x58024400
 8004dfc:	58021000 	.word	0x58021000
 8004e00:	58020400 	.word	0x58020400
 8004e04:	58020c00 	.word	0x58020c00

08004e08 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b08a      	sub	sp, #40	; 0x28
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e10:	f107 0314 	add.w	r3, r7, #20
 8004e14:	2200      	movs	r2, #0
 8004e16:	601a      	str	r2, [r3, #0]
 8004e18:	605a      	str	r2, [r3, #4]
 8004e1a:	609a      	str	r2, [r3, #8]
 8004e1c:	60da      	str	r2, [r3, #12]
 8004e1e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a2a      	ldr	r2, [pc, #168]	; (8004ed0 <HAL_SD_MspInit+0xc8>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d14d      	bne.n	8004ec6 <HAL_SD_MspInit+0xbe>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8004e2a:	4b2a      	ldr	r3, [pc, #168]	; (8004ed4 <HAL_SD_MspInit+0xcc>)
 8004e2c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004e30:	4a28      	ldr	r2, [pc, #160]	; (8004ed4 <HAL_SD_MspInit+0xcc>)
 8004e32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e36:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8004e3a:	4b26      	ldr	r3, [pc, #152]	; (8004ed4 <HAL_SD_MspInit+0xcc>)
 8004e3c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e44:	613b      	str	r3, [r7, #16]
 8004e46:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e48:	4b22      	ldr	r3, [pc, #136]	; (8004ed4 <HAL_SD_MspInit+0xcc>)
 8004e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e4e:	4a21      	ldr	r2, [pc, #132]	; (8004ed4 <HAL_SD_MspInit+0xcc>)
 8004e50:	f043 0304 	orr.w	r3, r3, #4
 8004e54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004e58:	4b1e      	ldr	r3, [pc, #120]	; (8004ed4 <HAL_SD_MspInit+0xcc>)
 8004e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e5e:	f003 0304 	and.w	r3, r3, #4
 8004e62:	60fb      	str	r3, [r7, #12]
 8004e64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004e66:	4b1b      	ldr	r3, [pc, #108]	; (8004ed4 <HAL_SD_MspInit+0xcc>)
 8004e68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e6c:	4a19      	ldr	r2, [pc, #100]	; (8004ed4 <HAL_SD_MspInit+0xcc>)
 8004e6e:	f043 0308 	orr.w	r3, r3, #8
 8004e72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004e76:	4b17      	ldr	r3, [pc, #92]	; (8004ed4 <HAL_SD_MspInit+0xcc>)
 8004e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e7c:	f003 0308 	and.w	r3, r3, #8
 8004e80:	60bb      	str	r3, [r7, #8]
 8004e82:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004e84:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8004e88:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e8a:	2302      	movs	r3, #2
 8004e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e92:	2303      	movs	r3, #3
 8004e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8004e96:	230c      	movs	r3, #12
 8004e98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e9a:	f107 0314 	add.w	r3, r7, #20
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	480d      	ldr	r0, [pc, #52]	; (8004ed8 <HAL_SD_MspInit+0xd0>)
 8004ea2:	f004 fcaf 	bl	8009804 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004ea6:	2304      	movs	r3, #4
 8004ea8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eaa:	2302      	movs	r3, #2
 8004eac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8004eb6:	230c      	movs	r3, #12
 8004eb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004eba:	f107 0314 	add.w	r3, r7, #20
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	4806      	ldr	r0, [pc, #24]	; (8004edc <HAL_SD_MspInit+0xd4>)
 8004ec2:	f004 fc9f 	bl	8009804 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8004ec6:	bf00      	nop
 8004ec8:	3728      	adds	r7, #40	; 0x28
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	52007000 	.word	0x52007000
 8004ed4:	58024400 	.word	0x58024400
 8004ed8:	58020800 	.word	0x58020800
 8004edc:	58020c00 	.word	0x58020c00

08004ee0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b0bc      	sub	sp, #240	; 0xf0
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ee8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004eec:	2200      	movs	r2, #0
 8004eee:	601a      	str	r2, [r3, #0]
 8004ef0:	605a      	str	r2, [r3, #4]
 8004ef2:	609a      	str	r2, [r3, #8]
 8004ef4:	60da      	str	r2, [r3, #12]
 8004ef6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004ef8:	f107 0318 	add.w	r3, r7, #24
 8004efc:	22c0      	movs	r2, #192	; 0xc0
 8004efe:	2100      	movs	r1, #0
 8004f00:	4618      	mov	r0, r3
 8004f02:	f00e ffaa 	bl	8013e5a <memset>
  if(hspi->Instance==SPI1)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a38      	ldr	r2, [pc, #224]	; (8004fec <HAL_SPI_MspInit+0x10c>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d168      	bne.n	8004fe2 <HAL_SPI_MspInit+0x102>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8004f10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004f14:	f04f 0300 	mov.w	r3, #0
 8004f18:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004f20:	f107 0318 	add.w	r3, r7, #24
 8004f24:	4618      	mov	r0, r3
 8004f26:	f006 f991 	bl	800b24c <HAL_RCCEx_PeriphCLKConfig>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d001      	beq.n	8004f34 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8004f30:	f7fc facc 	bl	80014cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004f34:	4b2e      	ldr	r3, [pc, #184]	; (8004ff0 <HAL_SPI_MspInit+0x110>)
 8004f36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f3a:	4a2d      	ldr	r2, [pc, #180]	; (8004ff0 <HAL_SPI_MspInit+0x110>)
 8004f3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004f40:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004f44:	4b2a      	ldr	r3, [pc, #168]	; (8004ff0 <HAL_SPI_MspInit+0x110>)
 8004f46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f4e:	617b      	str	r3, [r7, #20]
 8004f50:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004f52:	4b27      	ldr	r3, [pc, #156]	; (8004ff0 <HAL_SPI_MspInit+0x110>)
 8004f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f58:	4a25      	ldr	r2, [pc, #148]	; (8004ff0 <HAL_SPI_MspInit+0x110>)
 8004f5a:	f043 0308 	orr.w	r3, r3, #8
 8004f5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004f62:	4b23      	ldr	r3, [pc, #140]	; (8004ff0 <HAL_SPI_MspInit+0x110>)
 8004f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f68:	f003 0308 	and.w	r3, r3, #8
 8004f6c:	613b      	str	r3, [r7, #16]
 8004f6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f70:	4b1f      	ldr	r3, [pc, #124]	; (8004ff0 <HAL_SPI_MspInit+0x110>)
 8004f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f76:	4a1e      	ldr	r2, [pc, #120]	; (8004ff0 <HAL_SPI_MspInit+0x110>)
 8004f78:	f043 0302 	orr.w	r3, r3, #2
 8004f7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004f80:	4b1b      	ldr	r3, [pc, #108]	; (8004ff0 <HAL_SPI_MspInit+0x110>)
 8004f82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	60fb      	str	r3, [r7, #12]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004f8e:	2380      	movs	r3, #128	; 0x80
 8004f90:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f94:	2302      	movs	r3, #2
 8004f96:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004fa6:	2305      	movs	r3, #5
 8004fa8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004fac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	4810      	ldr	r0, [pc, #64]	; (8004ff4 <HAL_SPI_MspInit+0x114>)
 8004fb4:	f004 fc26 	bl	8009804 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8004fb8:	2318      	movs	r3, #24
 8004fba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fbe:	2302      	movs	r3, #2
 8004fc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004fd0:	2305      	movs	r3, #5
 8004fd2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fd6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004fda:	4619      	mov	r1, r3
 8004fdc:	4806      	ldr	r0, [pc, #24]	; (8004ff8 <HAL_SPI_MspInit+0x118>)
 8004fde:	f004 fc11 	bl	8009804 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004fe2:	bf00      	nop
 8004fe4:	37f0      	adds	r7, #240	; 0xf0
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	40013000 	.word	0x40013000
 8004ff0:	58024400 	.word	0x58024400
 8004ff4:	58020c00 	.word	0x58020c00
 8004ff8:	58020400 	.word	0x58020400

08004ffc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800500c:	d10f      	bne.n	800502e <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800500e:	4b15      	ldr	r3, [pc, #84]	; (8005064 <HAL_TIM_PWM_MspInit+0x68>)
 8005010:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005014:	4a13      	ldr	r2, [pc, #76]	; (8005064 <HAL_TIM_PWM_MspInit+0x68>)
 8005016:	f043 0301 	orr.w	r3, r3, #1
 800501a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800501e:	4b11      	ldr	r3, [pc, #68]	; (8005064 <HAL_TIM_PWM_MspInit+0x68>)
 8005020:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005024:	f003 0301 	and.w	r3, r3, #1
 8005028:	60fb      	str	r3, [r7, #12]
 800502a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800502c:	e013      	b.n	8005056 <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM3)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a0d      	ldr	r2, [pc, #52]	; (8005068 <HAL_TIM_PWM_MspInit+0x6c>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d10e      	bne.n	8005056 <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005038:	4b0a      	ldr	r3, [pc, #40]	; (8005064 <HAL_TIM_PWM_MspInit+0x68>)
 800503a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800503e:	4a09      	ldr	r2, [pc, #36]	; (8005064 <HAL_TIM_PWM_MspInit+0x68>)
 8005040:	f043 0302 	orr.w	r3, r3, #2
 8005044:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005048:	4b06      	ldr	r3, [pc, #24]	; (8005064 <HAL_TIM_PWM_MspInit+0x68>)
 800504a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	60bb      	str	r3, [r7, #8]
 8005054:	68bb      	ldr	r3, [r7, #8]
}
 8005056:	bf00      	nop
 8005058:	3714      	adds	r7, #20
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	58024400 	.word	0x58024400
 8005068:	40000400 	.word	0x40000400

0800506c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b08c      	sub	sp, #48	; 0x30
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005074:	f107 031c 	add.w	r3, r7, #28
 8005078:	2200      	movs	r2, #0
 800507a:	601a      	str	r2, [r3, #0]
 800507c:	605a      	str	r2, [r3, #4]
 800507e:	609a      	str	r2, [r3, #8]
 8005080:	60da      	str	r2, [r3, #12]
 8005082:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM5)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a34      	ldr	r2, [pc, #208]	; (800515c <HAL_TIM_IC_MspInit+0xf0>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d12e      	bne.n	80050ec <HAL_TIM_IC_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800508e:	4b34      	ldr	r3, [pc, #208]	; (8005160 <HAL_TIM_IC_MspInit+0xf4>)
 8005090:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005094:	4a32      	ldr	r2, [pc, #200]	; (8005160 <HAL_TIM_IC_MspInit+0xf4>)
 8005096:	f043 0308 	orr.w	r3, r3, #8
 800509a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800509e:	4b30      	ldr	r3, [pc, #192]	; (8005160 <HAL_TIM_IC_MspInit+0xf4>)
 80050a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80050a4:	f003 0308 	and.w	r3, r3, #8
 80050a8:	61bb      	str	r3, [r7, #24]
 80050aa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050ac:	4b2c      	ldr	r3, [pc, #176]	; (8005160 <HAL_TIM_IC_MspInit+0xf4>)
 80050ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050b2:	4a2b      	ldr	r2, [pc, #172]	; (8005160 <HAL_TIM_IC_MspInit+0xf4>)
 80050b4:	f043 0301 	orr.w	r3, r3, #1
 80050b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80050bc:	4b28      	ldr	r3, [pc, #160]	; (8005160 <HAL_TIM_IC_MspInit+0xf4>)
 80050be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050c2:	f003 0301 	and.w	r3, r3, #1
 80050c6:	617b      	str	r3, [r7, #20]
 80050c8:	697b      	ldr	r3, [r7, #20]
    /**TIM5 GPIO Configuration
    PA0     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = Servo_Input_Pin;
 80050ca:	2301      	movs	r3, #1
 80050cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050ce:	2302      	movs	r3, #2
 80050d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050d2:	2300      	movs	r3, #0
 80050d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050d6:	2300      	movs	r3, #0
 80050d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80050da:	2302      	movs	r3, #2
 80050dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Servo_Input_GPIO_Port, &GPIO_InitStruct);
 80050de:	f107 031c 	add.w	r3, r7, #28
 80050e2:	4619      	mov	r1, r3
 80050e4:	481f      	ldr	r0, [pc, #124]	; (8005164 <HAL_TIM_IC_MspInit+0xf8>)
 80050e6:	f004 fb8d 	bl	8009804 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80050ea:	e032      	b.n	8005152 <HAL_TIM_IC_MspInit+0xe6>
  else if(htim_ic->Instance==TIM15)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a1d      	ldr	r2, [pc, #116]	; (8005168 <HAL_TIM_IC_MspInit+0xfc>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d12d      	bne.n	8005152 <HAL_TIM_IC_MspInit+0xe6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80050f6:	4b1a      	ldr	r3, [pc, #104]	; (8005160 <HAL_TIM_IC_MspInit+0xf4>)
 80050f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050fc:	4a18      	ldr	r2, [pc, #96]	; (8005160 <HAL_TIM_IC_MspInit+0xf4>)
 80050fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005102:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005106:	4b16      	ldr	r3, [pc, #88]	; (8005160 <HAL_TIM_IC_MspInit+0xf4>)
 8005108:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800510c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005110:	613b      	str	r3, [r7, #16]
 8005112:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005114:	4b12      	ldr	r3, [pc, #72]	; (8005160 <HAL_TIM_IC_MspInit+0xf4>)
 8005116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800511a:	4a11      	ldr	r2, [pc, #68]	; (8005160 <HAL_TIM_IC_MspInit+0xf4>)
 800511c:	f043 0310 	orr.w	r3, r3, #16
 8005120:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005124:	4b0e      	ldr	r3, [pc, #56]	; (8005160 <HAL_TIM_IC_MspInit+0xf4>)
 8005126:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800512a:	f003 0310 	and.w	r3, r3, #16
 800512e:	60fb      	str	r3, [r7, #12]
 8005130:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ESC_Input_Pin;
 8005132:	2320      	movs	r3, #32
 8005134:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005136:	2302      	movs	r3, #2
 8005138:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800513a:	2300      	movs	r3, #0
 800513c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800513e:	2300      	movs	r3, #0
 8005140:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8005142:	2304      	movs	r3, #4
 8005144:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ESC_Input_GPIO_Port, &GPIO_InitStruct);
 8005146:	f107 031c 	add.w	r3, r7, #28
 800514a:	4619      	mov	r1, r3
 800514c:	4807      	ldr	r0, [pc, #28]	; (800516c <HAL_TIM_IC_MspInit+0x100>)
 800514e:	f004 fb59 	bl	8009804 <HAL_GPIO_Init>
}
 8005152:	bf00      	nop
 8005154:	3730      	adds	r7, #48	; 0x30
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	40000c00 	.word	0x40000c00
 8005160:	58024400 	.word	0x58024400
 8005164:	58020000 	.word	0x58020000
 8005168:	40014000 	.word	0x40014000
 800516c:	58021000 	.word	0x58021000

08005170 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a1d      	ldr	r2, [pc, #116]	; (80051f4 <HAL_TIM_Base_MspInit+0x84>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d117      	bne.n	80051b2 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005182:	4b1d      	ldr	r3, [pc, #116]	; (80051f8 <HAL_TIM_Base_MspInit+0x88>)
 8005184:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005188:	4a1b      	ldr	r2, [pc, #108]	; (80051f8 <HAL_TIM_Base_MspInit+0x88>)
 800518a:	f043 0310 	orr.w	r3, r3, #16
 800518e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005192:	4b19      	ldr	r3, [pc, #100]	; (80051f8 <HAL_TIM_Base_MspInit+0x88>)
 8005194:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005198:	f003 0310 	and.w	r3, r3, #16
 800519c:	60fb      	str	r3, [r7, #12]
 800519e:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80051a0:	2200      	movs	r2, #0
 80051a2:	2100      	movs	r1, #0
 80051a4:	2036      	movs	r0, #54	; 0x36
 80051a6:	f001 fcbc 	bl	8006b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80051aa:	2036      	movs	r0, #54	; 0x36
 80051ac:	f001 fcd3 	bl	8006b56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80051b0:	e01b      	b.n	80051ea <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM7)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a11      	ldr	r2, [pc, #68]	; (80051fc <HAL_TIM_Base_MspInit+0x8c>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d116      	bne.n	80051ea <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80051bc:	4b0e      	ldr	r3, [pc, #56]	; (80051f8 <HAL_TIM_Base_MspInit+0x88>)
 80051be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80051c2:	4a0d      	ldr	r2, [pc, #52]	; (80051f8 <HAL_TIM_Base_MspInit+0x88>)
 80051c4:	f043 0320 	orr.w	r3, r3, #32
 80051c8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80051cc:	4b0a      	ldr	r3, [pc, #40]	; (80051f8 <HAL_TIM_Base_MspInit+0x88>)
 80051ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80051d2:	f003 0320 	and.w	r3, r3, #32
 80051d6:	60bb      	str	r3, [r7, #8]
 80051d8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80051da:	2200      	movs	r2, #0
 80051dc:	2100      	movs	r1, #0
 80051de:	2037      	movs	r0, #55	; 0x37
 80051e0:	f001 fc9f 	bl	8006b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80051e4:	2037      	movs	r0, #55	; 0x37
 80051e6:	f001 fcb6 	bl	8006b56 <HAL_NVIC_EnableIRQ>
}
 80051ea:	bf00      	nop
 80051ec:	3710      	adds	r7, #16
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	40001000 	.word	0x40001000
 80051f8:	58024400 	.word	0x58024400
 80051fc:	40001400 	.word	0x40001400

08005200 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b08a      	sub	sp, #40	; 0x28
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005208:	f107 0314 	add.w	r3, r7, #20
 800520c:	2200      	movs	r2, #0
 800520e:	601a      	str	r2, [r3, #0]
 8005210:	605a      	str	r2, [r3, #4]
 8005212:	609a      	str	r2, [r3, #8]
 8005214:	60da      	str	r2, [r3, #12]
 8005216:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005220:	d120      	bne.n	8005264 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005222:	4b24      	ldr	r3, [pc, #144]	; (80052b4 <HAL_TIM_MspPostInit+0xb4>)
 8005224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005228:	4a22      	ldr	r2, [pc, #136]	; (80052b4 <HAL_TIM_MspPostInit+0xb4>)
 800522a:	f043 0301 	orr.w	r3, r3, #1
 800522e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005232:	4b20      	ldr	r3, [pc, #128]	; (80052b4 <HAL_TIM_MspPostInit+0xb4>)
 8005234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005238:	f003 0301 	and.w	r3, r3, #1
 800523c:	613b      	str	r3, [r7, #16]
 800523e:	693b      	ldr	r3, [r7, #16]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin|PWM3_Pin|PWM0_Pin;
 8005240:	f248 030e 	movw	r3, #32782	; 0x800e
 8005244:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005246:	2302      	movs	r3, #2
 8005248:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800524a:	2300      	movs	r3, #0
 800524c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800524e:	2300      	movs	r3, #0
 8005250:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005252:	2301      	movs	r3, #1
 8005254:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005256:	f107 0314 	add.w	r3, r7, #20
 800525a:	4619      	mov	r1, r3
 800525c:	4816      	ldr	r0, [pc, #88]	; (80052b8 <HAL_TIM_MspPostInit+0xb8>)
 800525e:	f004 fad1 	bl	8009804 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005262:	e023      	b.n	80052ac <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM3)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a14      	ldr	r2, [pc, #80]	; (80052bc <HAL_TIM_MspPostInit+0xbc>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d11e      	bne.n	80052ac <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800526e:	4b11      	ldr	r3, [pc, #68]	; (80052b4 <HAL_TIM_MspPostInit+0xb4>)
 8005270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005274:	4a0f      	ldr	r2, [pc, #60]	; (80052b4 <HAL_TIM_MspPostInit+0xb4>)
 8005276:	f043 0304 	orr.w	r3, r3, #4
 800527a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800527e:	4b0d      	ldr	r3, [pc, #52]	; (80052b4 <HAL_TIM_MspPostInit+0xb4>)
 8005280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005284:	f003 0304 	and.w	r3, r3, #4
 8005288:	60fb      	str	r3, [r7, #12]
 800528a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo_Output_Pin|ESC_Output_Pin;
 800528c:	23c0      	movs	r3, #192	; 0xc0
 800528e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005290:	2302      	movs	r3, #2
 8005292:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005294:	2300      	movs	r3, #0
 8005296:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005298:	2300      	movs	r3, #0
 800529a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800529c:	2302      	movs	r3, #2
 800529e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052a0:	f107 0314 	add.w	r3, r7, #20
 80052a4:	4619      	mov	r1, r3
 80052a6:	4806      	ldr	r0, [pc, #24]	; (80052c0 <HAL_TIM_MspPostInit+0xc0>)
 80052a8:	f004 faac 	bl	8009804 <HAL_GPIO_Init>
}
 80052ac:	bf00      	nop
 80052ae:	3728      	adds	r7, #40	; 0x28
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	58024400 	.word	0x58024400
 80052b8:	58020000 	.word	0x58020000
 80052bc:	40000400 	.word	0x40000400
 80052c0:	58020800 	.word	0x58020800

080052c4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b0ba      	sub	sp, #232	; 0xe8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052cc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80052d0:	2200      	movs	r2, #0
 80052d2:	601a      	str	r2, [r3, #0]
 80052d4:	605a      	str	r2, [r3, #4]
 80052d6:	609a      	str	r2, [r3, #8]
 80052d8:	60da      	str	r2, [r3, #12]
 80052da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80052dc:	f107 0310 	add.w	r3, r7, #16
 80052e0:	22c0      	movs	r2, #192	; 0xc0
 80052e2:	2100      	movs	r1, #0
 80052e4:	4618      	mov	r0, r3
 80052e6:	f00e fdb8 	bl	8013e5a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a28      	ldr	r2, [pc, #160]	; (8005390 <HAL_PCD_MspInit+0xcc>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d149      	bne.n	8005388 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80052f4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80052f8:	f04f 0300 	mov.w	r3, #0
 80052fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8005300:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005304:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005308:	f107 0310 	add.w	r3, r7, #16
 800530c:	4618      	mov	r0, r3
 800530e:	f005 ff9d 	bl	800b24c <HAL_RCCEx_PeriphCLKConfig>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d001      	beq.n	800531c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8005318:	f7fc f8d8 	bl	80014cc <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800531c:	f004 fee6 	bl	800a0ec <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005320:	4b1c      	ldr	r3, [pc, #112]	; (8005394 <HAL_PCD_MspInit+0xd0>)
 8005322:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005326:	4a1b      	ldr	r2, [pc, #108]	; (8005394 <HAL_PCD_MspInit+0xd0>)
 8005328:	f043 0301 	orr.w	r3, r3, #1
 800532c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005330:	4b18      	ldr	r3, [pc, #96]	; (8005394 <HAL_PCD_MspInit+0xd0>)
 8005332:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	60fb      	str	r3, [r7, #12]
 800533c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800533e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005342:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005346:	2302      	movs	r3, #2
 8005348:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800534c:	2300      	movs	r3, #0
 800534e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005352:	2300      	movs	r3, #0
 8005354:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8005358:	230a      	movs	r3, #10
 800535a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800535e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005362:	4619      	mov	r1, r3
 8005364:	480c      	ldr	r0, [pc, #48]	; (8005398 <HAL_PCD_MspInit+0xd4>)
 8005366:	f004 fa4d 	bl	8009804 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800536a:	4b0a      	ldr	r3, [pc, #40]	; (8005394 <HAL_PCD_MspInit+0xd0>)
 800536c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005370:	4a08      	ldr	r2, [pc, #32]	; (8005394 <HAL_PCD_MspInit+0xd0>)
 8005372:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005376:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800537a:	4b06      	ldr	r3, [pc, #24]	; (8005394 <HAL_PCD_MspInit+0xd0>)
 800537c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005380:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005384:	60bb      	str	r3, [r7, #8]
 8005386:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8005388:	bf00      	nop
 800538a:	37e8      	adds	r7, #232	; 0xe8
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	40080000 	.word	0x40080000
 8005394:	58024400 	.word	0x58024400
 8005398:	58020000 	.word	0x58020000

0800539c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800539c:	b480      	push	{r7}
 800539e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80053a0:	e7fe      	b.n	80053a0 <NMI_Handler+0x4>

080053a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80053a2:	b480      	push	{r7}
 80053a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80053a6:	e7fe      	b.n	80053a6 <HardFault_Handler+0x4>

080053a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80053a8:	b480      	push	{r7}
 80053aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80053ac:	e7fe      	b.n	80053ac <MemManage_Handler+0x4>

080053ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80053ae:	b480      	push	{r7}
 80053b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80053b2:	e7fe      	b.n	80053b2 <BusFault_Handler+0x4>

080053b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80053b4:	b480      	push	{r7}
 80053b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80053b8:	e7fe      	b.n	80053b8 <UsageFault_Handler+0x4>

080053ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80053ba:	b480      	push	{r7}
 80053bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80053be:	bf00      	nop
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80053c8:	b480      	push	{r7}
 80053ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80053cc:	bf00      	nop
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr

080053d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80053d6:	b480      	push	{r7}
 80053d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80053da:	bf00      	nop
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80053e8:	f000 f9e2 	bl	80057b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80053ec:	bf00      	nop
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80053f4:	4802      	ldr	r0, [pc, #8]	; (8005400 <DMA1_Stream0_IRQHandler+0x10>)
 80053f6:	f002 fef3 	bl	80081e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80053fa:	bf00      	nop
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	24000490 	.word	0x24000490

08005404 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8005408:	4802      	ldr	r0, [pc, #8]	; (8005414 <DMA1_Stream1_IRQHandler+0x10>)
 800540a:	f002 fee9 	bl	80081e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800540e:	bf00      	nop
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	24000508 	.word	0x24000508

08005418 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 800541c:	4802      	ldr	r0, [pc, #8]	; (8005428 <DMA1_Stream2_IRQHandler+0x10>)
 800541e:	f002 fedf 	bl	80081e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8005422:	bf00      	nop
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	24000580 	.word	0x24000580

0800542c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8005430:	4802      	ldr	r0, [pc, #8]	; (800543c <UART4_IRQHandler+0x10>)
 8005432:	f00b fd45 	bl	8010ec0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8005436:	bf00      	nop
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	240001c8 	.word	0x240001c8

08005440 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8005444:	4802      	ldr	r0, [pc, #8]	; (8005450 <UART5_IRQHandler+0x10>)
 8005446:	f00b fd3b 	bl	8010ec0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800544a:	bf00      	nop
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	2400025c 	.word	0x2400025c

08005454 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005458:	4802      	ldr	r0, [pc, #8]	; (8005464 <TIM6_DAC_IRQHandler+0x10>)
 800545a:	f00a f95d 	bl	800f718 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800545e:	bf00      	nop
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	2400082c 	.word	0x2400082c

08005468 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800546c:	4802      	ldr	r0, [pc, #8]	; (8005478 <TIM7_IRQHandler+0x10>)
 800546e:	f00a f953 	bl	800f718 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005472:	bf00      	nop
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	24000878 	.word	0x24000878

0800547c <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8005480:	4802      	ldr	r0, [pc, #8]	; (800548c <BDMA_Channel0_IRQHandler+0x10>)
 8005482:	f002 fead 	bl	80081e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 8005486:	bf00      	nop
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	24000418 	.word	0x24000418

08005490 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8005494:	4802      	ldr	r0, [pc, #8]	; (80054a0 <LPUART1_IRQHandler+0x10>)
 8005496:	f00b fd13 	bl	8010ec0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800549a:	bf00      	nop
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	24000134 	.word	0x24000134

080054a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b086      	sub	sp, #24
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80054ac:	4a14      	ldr	r2, [pc, #80]	; (8005500 <_sbrk+0x5c>)
 80054ae:	4b15      	ldr	r3, [pc, #84]	; (8005504 <_sbrk+0x60>)
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80054b8:	4b13      	ldr	r3, [pc, #76]	; (8005508 <_sbrk+0x64>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d102      	bne.n	80054c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80054c0:	4b11      	ldr	r3, [pc, #68]	; (8005508 <_sbrk+0x64>)
 80054c2:	4a12      	ldr	r2, [pc, #72]	; (800550c <_sbrk+0x68>)
 80054c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80054c6:	4b10      	ldr	r3, [pc, #64]	; (8005508 <_sbrk+0x64>)
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4413      	add	r3, r2
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d207      	bcs.n	80054e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80054d4:	f00e fcda 	bl	8013e8c <__errno>
 80054d8:	4603      	mov	r3, r0
 80054da:	220c      	movs	r2, #12
 80054dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80054de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054e2:	e009      	b.n	80054f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80054e4:	4b08      	ldr	r3, [pc, #32]	; (8005508 <_sbrk+0x64>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80054ea:	4b07      	ldr	r3, [pc, #28]	; (8005508 <_sbrk+0x64>)
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4413      	add	r3, r2
 80054f2:	4a05      	ldr	r2, [pc, #20]	; (8005508 <_sbrk+0x64>)
 80054f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80054f6:	68fb      	ldr	r3, [r7, #12]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3718      	adds	r7, #24
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	24080000 	.word	0x24080000
 8005504:	00000400 	.word	0x00000400
 8005508:	240018f4 	.word	0x240018f4
 800550c:	24001a48 	.word	0x24001a48

08005510 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005510:	b480      	push	{r7}
 8005512:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005514:	4b37      	ldr	r3, [pc, #220]	; (80055f4 <SystemInit+0xe4>)
 8005516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800551a:	4a36      	ldr	r2, [pc, #216]	; (80055f4 <SystemInit+0xe4>)
 800551c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005520:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005524:	4b34      	ldr	r3, [pc, #208]	; (80055f8 <SystemInit+0xe8>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 030f 	and.w	r3, r3, #15
 800552c:	2b06      	cmp	r3, #6
 800552e:	d807      	bhi.n	8005540 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005530:	4b31      	ldr	r3, [pc, #196]	; (80055f8 <SystemInit+0xe8>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f023 030f 	bic.w	r3, r3, #15
 8005538:	4a2f      	ldr	r2, [pc, #188]	; (80055f8 <SystemInit+0xe8>)
 800553a:	f043 0307 	orr.w	r3, r3, #7
 800553e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005540:	4b2e      	ldr	r3, [pc, #184]	; (80055fc <SystemInit+0xec>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a2d      	ldr	r2, [pc, #180]	; (80055fc <SystemInit+0xec>)
 8005546:	f043 0301 	orr.w	r3, r3, #1
 800554a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800554c:	4b2b      	ldr	r3, [pc, #172]	; (80055fc <SystemInit+0xec>)
 800554e:	2200      	movs	r2, #0
 8005550:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8005552:	4b2a      	ldr	r3, [pc, #168]	; (80055fc <SystemInit+0xec>)
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	4929      	ldr	r1, [pc, #164]	; (80055fc <SystemInit+0xec>)
 8005558:	4b29      	ldr	r3, [pc, #164]	; (8005600 <SystemInit+0xf0>)
 800555a:	4013      	ands	r3, r2
 800555c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800555e:	4b26      	ldr	r3, [pc, #152]	; (80055f8 <SystemInit+0xe8>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0308 	and.w	r3, r3, #8
 8005566:	2b00      	cmp	r3, #0
 8005568:	d007      	beq.n	800557a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800556a:	4b23      	ldr	r3, [pc, #140]	; (80055f8 <SystemInit+0xe8>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f023 030f 	bic.w	r3, r3, #15
 8005572:	4a21      	ldr	r2, [pc, #132]	; (80055f8 <SystemInit+0xe8>)
 8005574:	f043 0307 	orr.w	r3, r3, #7
 8005578:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800557a:	4b20      	ldr	r3, [pc, #128]	; (80055fc <SystemInit+0xec>)
 800557c:	2200      	movs	r2, #0
 800557e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8005580:	4b1e      	ldr	r3, [pc, #120]	; (80055fc <SystemInit+0xec>)
 8005582:	2200      	movs	r2, #0
 8005584:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8005586:	4b1d      	ldr	r3, [pc, #116]	; (80055fc <SystemInit+0xec>)
 8005588:	2200      	movs	r2, #0
 800558a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800558c:	4b1b      	ldr	r3, [pc, #108]	; (80055fc <SystemInit+0xec>)
 800558e:	4a1d      	ldr	r2, [pc, #116]	; (8005604 <SystemInit+0xf4>)
 8005590:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8005592:	4b1a      	ldr	r3, [pc, #104]	; (80055fc <SystemInit+0xec>)
 8005594:	4a1c      	ldr	r2, [pc, #112]	; (8005608 <SystemInit+0xf8>)
 8005596:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8005598:	4b18      	ldr	r3, [pc, #96]	; (80055fc <SystemInit+0xec>)
 800559a:	4a1c      	ldr	r2, [pc, #112]	; (800560c <SystemInit+0xfc>)
 800559c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800559e:	4b17      	ldr	r3, [pc, #92]	; (80055fc <SystemInit+0xec>)
 80055a0:	2200      	movs	r2, #0
 80055a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80055a4:	4b15      	ldr	r3, [pc, #84]	; (80055fc <SystemInit+0xec>)
 80055a6:	4a19      	ldr	r2, [pc, #100]	; (800560c <SystemInit+0xfc>)
 80055a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80055aa:	4b14      	ldr	r3, [pc, #80]	; (80055fc <SystemInit+0xec>)
 80055ac:	2200      	movs	r2, #0
 80055ae:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80055b0:	4b12      	ldr	r3, [pc, #72]	; (80055fc <SystemInit+0xec>)
 80055b2:	4a16      	ldr	r2, [pc, #88]	; (800560c <SystemInit+0xfc>)
 80055b4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80055b6:	4b11      	ldr	r3, [pc, #68]	; (80055fc <SystemInit+0xec>)
 80055b8:	2200      	movs	r2, #0
 80055ba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80055bc:	4b0f      	ldr	r3, [pc, #60]	; (80055fc <SystemInit+0xec>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a0e      	ldr	r2, [pc, #56]	; (80055fc <SystemInit+0xec>)
 80055c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80055c8:	4b0c      	ldr	r3, [pc, #48]	; (80055fc <SystemInit+0xec>)
 80055ca:	2200      	movs	r2, #0
 80055cc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80055ce:	4b10      	ldr	r3, [pc, #64]	; (8005610 <SystemInit+0x100>)
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	4b10      	ldr	r3, [pc, #64]	; (8005614 <SystemInit+0x104>)
 80055d4:	4013      	ands	r3, r2
 80055d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055da:	d202      	bcs.n	80055e2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80055dc:	4b0e      	ldr	r3, [pc, #56]	; (8005618 <SystemInit+0x108>)
 80055de:	2201      	movs	r2, #1
 80055e0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80055e2:	4b0e      	ldr	r3, [pc, #56]	; (800561c <SystemInit+0x10c>)
 80055e4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80055e8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80055ea:	bf00      	nop
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr
 80055f4:	e000ed00 	.word	0xe000ed00
 80055f8:	52002000 	.word	0x52002000
 80055fc:	58024400 	.word	0x58024400
 8005600:	eaf6ed7f 	.word	0xeaf6ed7f
 8005604:	02020200 	.word	0x02020200
 8005608:	01ff0000 	.word	0x01ff0000
 800560c:	01010280 	.word	0x01010280
 8005610:	5c001000 	.word	0x5c001000
 8005614:	ffff0000 	.word	0xffff0000
 8005618:	51008108 	.word	0x51008108
 800561c:	52004000 	.word	0x52004000

08005620 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	0a5a      	lsrs	r2, r3, #9
 8005630:	490f      	ldr	r1, [pc, #60]	; (8005670 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8005632:	fba1 1202 	umull	r1, r2, r1, r2
 8005636:	09d2      	lsrs	r2, r2, #7
 8005638:	490e      	ldr	r1, [pc, #56]	; (8005674 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800563a:	fb01 f202 	mul.w	r2, r1, r2
 800563e:	1a9b      	subs	r3, r3, r2
 8005640:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	0a5b      	lsrs	r3, r3, #9
 8005648:	4a09      	ldr	r2, [pc, #36]	; (8005670 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800564a:	fba2 2303 	umull	r2, r3, r2, r3
 800564e:	09db      	lsrs	r3, r3, #7
 8005650:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	441a      	add	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	601a      	str	r2, [r3, #0]
}
 8005664:	bf00      	nop
 8005666:	3714      	adds	r7, #20
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr
 8005670:	00044b83 	.word	0x00044b83
 8005674:	3b9aca00 	.word	0x3b9aca00

08005678 <Reset_Handler>:
 8005678:	f8df d034 	ldr.w	sp, [pc, #52]	; 80056b0 <LoopFillZerobss+0xe>
 800567c:	f7ff ff48 	bl	8005510 <SystemInit>
 8005680:	480c      	ldr	r0, [pc, #48]	; (80056b4 <LoopFillZerobss+0x12>)
 8005682:	490d      	ldr	r1, [pc, #52]	; (80056b8 <LoopFillZerobss+0x16>)
 8005684:	4a0d      	ldr	r2, [pc, #52]	; (80056bc <LoopFillZerobss+0x1a>)
 8005686:	2300      	movs	r3, #0
 8005688:	e002      	b.n	8005690 <LoopCopyDataInit>

0800568a <CopyDataInit>:
 800568a:	58d4      	ldr	r4, [r2, r3]
 800568c:	50c4      	str	r4, [r0, r3]
 800568e:	3304      	adds	r3, #4

08005690 <LoopCopyDataInit>:
 8005690:	18c4      	adds	r4, r0, r3
 8005692:	428c      	cmp	r4, r1
 8005694:	d3f9      	bcc.n	800568a <CopyDataInit>
 8005696:	4a0a      	ldr	r2, [pc, #40]	; (80056c0 <LoopFillZerobss+0x1e>)
 8005698:	4c0a      	ldr	r4, [pc, #40]	; (80056c4 <LoopFillZerobss+0x22>)
 800569a:	2300      	movs	r3, #0
 800569c:	e001      	b.n	80056a2 <LoopFillZerobss>

0800569e <FillZerobss>:
 800569e:	6013      	str	r3, [r2, #0]
 80056a0:	3204      	adds	r2, #4

080056a2 <LoopFillZerobss>:
 80056a2:	42a2      	cmp	r2, r4
 80056a4:	d3fb      	bcc.n	800569e <FillZerobss>
 80056a6:	f00e fbf7 	bl	8013e98 <__libc_init_array>
 80056aa:	f7fa ff9b 	bl	80005e4 <main>
 80056ae:	4770      	bx	lr
 80056b0:	24080000 	.word	0x24080000
 80056b4:	24000000 	.word	0x24000000
 80056b8:	24000060 	.word	0x24000060
 80056bc:	080143ac 	.word	0x080143ac
 80056c0:	24000060 	.word	0x24000060
 80056c4:	24001a44 	.word	0x24001a44

080056c8 <ADC3_IRQHandler>:
 80056c8:	e7fe      	b.n	80056c8 <ADC3_IRQHandler>
	...

080056cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80056d2:	2003      	movs	r0, #3
 80056d4:	f001 fa1a 	bl	8006b0c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80056d8:	f005 fbe2 	bl	800aea0 <HAL_RCC_GetSysClockFreq>
 80056dc:	4602      	mov	r2, r0
 80056de:	4b15      	ldr	r3, [pc, #84]	; (8005734 <HAL_Init+0x68>)
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	0a1b      	lsrs	r3, r3, #8
 80056e4:	f003 030f 	and.w	r3, r3, #15
 80056e8:	4913      	ldr	r1, [pc, #76]	; (8005738 <HAL_Init+0x6c>)
 80056ea:	5ccb      	ldrb	r3, [r1, r3]
 80056ec:	f003 031f 	and.w	r3, r3, #31
 80056f0:	fa22 f303 	lsr.w	r3, r2, r3
 80056f4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80056f6:	4b0f      	ldr	r3, [pc, #60]	; (8005734 <HAL_Init+0x68>)
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	f003 030f 	and.w	r3, r3, #15
 80056fe:	4a0e      	ldr	r2, [pc, #56]	; (8005738 <HAL_Init+0x6c>)
 8005700:	5cd3      	ldrb	r3, [r2, r3]
 8005702:	f003 031f 	and.w	r3, r3, #31
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	fa22 f303 	lsr.w	r3, r2, r3
 800570c:	4a0b      	ldr	r2, [pc, #44]	; (800573c <HAL_Init+0x70>)
 800570e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005710:	4a0b      	ldr	r2, [pc, #44]	; (8005740 <HAL_Init+0x74>)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005716:	200f      	movs	r0, #15
 8005718:	f000 f814 	bl	8005744 <HAL_InitTick>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d001      	beq.n	8005726 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e002      	b.n	800572c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005726:	f7fe fea3 	bl	8004470 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3708      	adds	r7, #8
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	58024400 	.word	0x58024400
 8005738:	08014358 	.word	0x08014358
 800573c:	24000004 	.word	0x24000004
 8005740:	24000000 	.word	0x24000000

08005744 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800574c:	4b15      	ldr	r3, [pc, #84]	; (80057a4 <HAL_InitTick+0x60>)
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d101      	bne.n	8005758 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e021      	b.n	800579c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005758:	4b13      	ldr	r3, [pc, #76]	; (80057a8 <HAL_InitTick+0x64>)
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	4b11      	ldr	r3, [pc, #68]	; (80057a4 <HAL_InitTick+0x60>)
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	4619      	mov	r1, r3
 8005762:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005766:	fbb3 f3f1 	udiv	r3, r3, r1
 800576a:	fbb2 f3f3 	udiv	r3, r2, r3
 800576e:	4618      	mov	r0, r3
 8005770:	f001 f9ff 	bl	8006b72 <HAL_SYSTICK_Config>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d001      	beq.n	800577e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e00e      	b.n	800579c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2b0f      	cmp	r3, #15
 8005782:	d80a      	bhi.n	800579a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005784:	2200      	movs	r2, #0
 8005786:	6879      	ldr	r1, [r7, #4]
 8005788:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800578c:	f001 f9c9 	bl	8006b22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005790:	4a06      	ldr	r2, [pc, #24]	; (80057ac <HAL_InitTick+0x68>)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005796:	2300      	movs	r3, #0
 8005798:	e000      	b.n	800579c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
}
 800579c:	4618      	mov	r0, r3
 800579e:	3708      	adds	r7, #8
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	2400000c 	.word	0x2400000c
 80057a8:	24000000 	.word	0x24000000
 80057ac:	24000008 	.word	0x24000008

080057b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80057b0:	b480      	push	{r7}
 80057b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80057b4:	4b06      	ldr	r3, [pc, #24]	; (80057d0 <HAL_IncTick+0x20>)
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	461a      	mov	r2, r3
 80057ba:	4b06      	ldr	r3, [pc, #24]	; (80057d4 <HAL_IncTick+0x24>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4413      	add	r3, r2
 80057c0:	4a04      	ldr	r2, [pc, #16]	; (80057d4 <HAL_IncTick+0x24>)
 80057c2:	6013      	str	r3, [r2, #0]
}
 80057c4:	bf00      	nop
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	2400000c 	.word	0x2400000c
 80057d4:	240018f8 	.word	0x240018f8

080057d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80057d8:	b480      	push	{r7}
 80057da:	af00      	add	r7, sp, #0
  return uwTick;
 80057dc:	4b03      	ldr	r3, [pc, #12]	; (80057ec <HAL_GetTick+0x14>)
 80057de:	681b      	ldr	r3, [r3, #0]
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	240018f8 	.word	0x240018f8

080057f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80057f8:	f7ff ffee 	bl	80057d8 <HAL_GetTick>
 80057fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005808:	d005      	beq.n	8005816 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800580a:	4b0a      	ldr	r3, [pc, #40]	; (8005834 <HAL_Delay+0x44>)
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	461a      	mov	r2, r3
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	4413      	add	r3, r2
 8005814:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005816:	bf00      	nop
 8005818:	f7ff ffde 	bl	80057d8 <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	68fa      	ldr	r2, [r7, #12]
 8005824:	429a      	cmp	r2, r3
 8005826:	d8f7      	bhi.n	8005818 <HAL_Delay+0x28>
  {
  }
}
 8005828:	bf00      	nop
 800582a:	bf00      	nop
 800582c:	3710      	adds	r7, #16
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	2400000c 	.word	0x2400000c

08005838 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005838:	b480      	push	{r7}
 800583a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800583c:	4b03      	ldr	r3, [pc, #12]	; (800584c <HAL_GetREVID+0x14>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	0c1b      	lsrs	r3, r3, #16
}
 8005842:	4618      	mov	r0, r3
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr
 800584c:	5c001000 	.word	0x5c001000

08005850 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	431a      	orrs	r2, r3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	609a      	str	r2, [r3, #8]
}
 800586a:	bf00      	nop
 800586c:	370c      	adds	r7, #12
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr

08005876 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005876:	b480      	push	{r7}
 8005878:	b083      	sub	sp, #12
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
 800587e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	431a      	orrs	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	609a      	str	r2, [r3, #8]
}
 8005890:	bf00      	nop
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b087      	sub	sp, #28
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	607a      	str	r2, [r7, #4]
 80058c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	3360      	adds	r3, #96	; 0x60
 80058ca:	461a      	mov	r2, r3
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	4413      	add	r3, r2
 80058d2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	430b      	orrs	r3, r1
 80058e6:	431a      	orrs	r2, r3
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80058ec:	bf00      	nop
 80058ee:	371c      	adds	r7, #28
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	f003 031f 	and.w	r3, r3, #31
 8005912:	6879      	ldr	r1, [r7, #4]
 8005914:	fa01 f303 	lsl.w	r3, r1, r3
 8005918:	431a      	orrs	r2, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	611a      	str	r2, [r3, #16]
}
 800591e:	bf00      	nop
 8005920:	3714      	adds	r7, #20
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr

0800592a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800592a:	b480      	push	{r7}
 800592c:	b087      	sub	sp, #28
 800592e:	af00      	add	r7, sp, #0
 8005930:	60f8      	str	r0, [r7, #12]
 8005932:	60b9      	str	r1, [r7, #8]
 8005934:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	3360      	adds	r3, #96	; 0x60
 800593a:	461a      	mov	r2, r3
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	4413      	add	r3, r2
 8005942:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	431a      	orrs	r2, r3
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	601a      	str	r2, [r3, #0]
  }
}
 8005954:	bf00      	nop
 8005956:	371c      	adds	r7, #28
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005960:	b480      	push	{r7}
 8005962:	b087      	sub	sp, #28
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	3330      	adds	r3, #48	; 0x30
 8005970:	461a      	mov	r2, r3
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	0a1b      	lsrs	r3, r3, #8
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	f003 030c 	and.w	r3, r3, #12
 800597c:	4413      	add	r3, r2
 800597e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	f003 031f 	and.w	r3, r3, #31
 800598a:	211f      	movs	r1, #31
 800598c:	fa01 f303 	lsl.w	r3, r1, r3
 8005990:	43db      	mvns	r3, r3
 8005992:	401a      	ands	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	0e9b      	lsrs	r3, r3, #26
 8005998:	f003 011f 	and.w	r1, r3, #31
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	f003 031f 	and.w	r3, r3, #31
 80059a2:	fa01 f303 	lsl.w	r3, r1, r3
 80059a6:	431a      	orrs	r2, r3
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80059ac:	bf00      	nop
 80059ae:	371c      	adds	r7, #28
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b087      	sub	sp, #28
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	3314      	adds	r3, #20
 80059c8:	461a      	mov	r2, r3
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	0e5b      	lsrs	r3, r3, #25
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	f003 0304 	and.w	r3, r3, #4
 80059d4:	4413      	add	r3, r2
 80059d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	0d1b      	lsrs	r3, r3, #20
 80059e0:	f003 031f 	and.w	r3, r3, #31
 80059e4:	2107      	movs	r1, #7
 80059e6:	fa01 f303 	lsl.w	r3, r1, r3
 80059ea:	43db      	mvns	r3, r3
 80059ec:	401a      	ands	r2, r3
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	0d1b      	lsrs	r3, r3, #20
 80059f2:	f003 031f 	and.w	r3, r3, #31
 80059f6:	6879      	ldr	r1, [r7, #4]
 80059f8:	fa01 f303 	lsl.w	r3, r1, r3
 80059fc:	431a      	orrs	r2, r3
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005a02:	bf00      	nop
 8005a04:	371c      	adds	r7, #28
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
	...

08005a10 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a28:	43db      	mvns	r3, r3
 8005a2a:	401a      	ands	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f003 0318 	and.w	r3, r3, #24
 8005a32:	4908      	ldr	r1, [pc, #32]	; (8005a54 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005a34:	40d9      	lsrs	r1, r3
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	400b      	ands	r3, r1
 8005a3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a3e:	431a      	orrs	r2, r3
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8005a46:	bf00      	nop
 8005a48:	3714      	adds	r7, #20
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	000fffff 	.word	0x000fffff

08005a58 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	689a      	ldr	r2, [r3, #8]
 8005a64:	4b04      	ldr	r3, [pc, #16]	; (8005a78 <LL_ADC_DisableDeepPowerDown+0x20>)
 8005a66:	4013      	ands	r3, r2
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	6093      	str	r3, [r2, #8]
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr
 8005a78:	5fffffc0 	.word	0x5fffffc0

08005a7c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a90:	d101      	bne.n	8005a96 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005a92:	2301      	movs	r3, #1
 8005a94:	e000      	b.n	8005a98 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	689a      	ldr	r2, [r3, #8]
 8005ab0:	4b05      	ldr	r3, [pc, #20]	; (8005ac8 <LL_ADC_EnableInternalRegulator+0x24>)
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr
 8005ac8:	6fffffc0 	.word	0x6fffffc0

08005acc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005adc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ae0:	d101      	bne.n	8005ae6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e000      	b.n	8005ae8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f003 0301 	and.w	r3, r3, #1
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d101      	bne.n	8005b0c <LL_ADC_IsEnabled+0x18>
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e000      	b.n	8005b0e <LL_ADC_IsEnabled+0x1a>
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	370c      	adds	r7, #12
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr

08005b1a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005b1a:	b480      	push	{r7}
 8005b1c:	b083      	sub	sp, #12
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f003 0304 	and.w	r3, r3, #4
 8005b2a:	2b04      	cmp	r3, #4
 8005b2c:	d101      	bne.n	8005b32 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e000      	b.n	8005b34 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f003 0308 	and.w	r3, r3, #8
 8005b50:	2b08      	cmp	r3, #8
 8005b52:	d101      	bne.n	8005b58 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005b54:	2301      	movs	r3, #1
 8005b56:	e000      	b.n	8005b5a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	370c      	adds	r7, #12
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
	...

08005b68 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005b68:	b590      	push	{r4, r7, lr}
 8005b6a:	b089      	sub	sp, #36	; 0x24
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b70:	2300      	movs	r3, #0
 8005b72:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005b74:	2300      	movs	r3, #0
 8005b76:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d101      	bne.n	8005b82 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e18f      	b.n	8005ea2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d109      	bne.n	8005ba4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f7fe fc87 	bl	80044a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7ff ff67 	bl	8005a7c <LL_ADC_IsDeepPowerDownEnabled>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d004      	beq.n	8005bbe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f7ff ff4d 	bl	8005a58 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f7ff ff82 	bl	8005acc <LL_ADC_IsInternalRegulatorEnabled>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d114      	bne.n	8005bf8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f7ff ff66 	bl	8005aa4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005bd8:	4b87      	ldr	r3, [pc, #540]	; (8005df8 <HAL_ADC_Init+0x290>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	099b      	lsrs	r3, r3, #6
 8005bde:	4a87      	ldr	r2, [pc, #540]	; (8005dfc <HAL_ADC_Init+0x294>)
 8005be0:	fba2 2303 	umull	r2, r3, r2, r3
 8005be4:	099b      	lsrs	r3, r3, #6
 8005be6:	3301      	adds	r3, #1
 8005be8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005bea:	e002      	b.n	8005bf2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d1f9      	bne.n	8005bec <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f7ff ff65 	bl	8005acc <LL_ADC_IsInternalRegulatorEnabled>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d10d      	bne.n	8005c24 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c0c:	f043 0210 	orr.w	r2, r3, #16
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c18:	f043 0201 	orr.w	r2, r3, #1
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f7ff ff76 	bl	8005b1a <LL_ADC_REG_IsConversionOngoing>
 8005c2e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c34:	f003 0310 	and.w	r3, r3, #16
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	f040 8129 	bne.w	8005e90 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	f040 8125 	bne.w	8005e90 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c4a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005c4e:	f043 0202 	orr.w	r2, r3, #2
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7ff ff4a 	bl	8005af4 <LL_ADC_IsEnabled>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d136      	bne.n	8005cd4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a65      	ldr	r2, [pc, #404]	; (8005e00 <HAL_ADC_Init+0x298>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d004      	beq.n	8005c7a <HAL_ADC_Init+0x112>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a63      	ldr	r2, [pc, #396]	; (8005e04 <HAL_ADC_Init+0x29c>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d10e      	bne.n	8005c98 <HAL_ADC_Init+0x130>
 8005c7a:	4861      	ldr	r0, [pc, #388]	; (8005e00 <HAL_ADC_Init+0x298>)
 8005c7c:	f7ff ff3a 	bl	8005af4 <LL_ADC_IsEnabled>
 8005c80:	4604      	mov	r4, r0
 8005c82:	4860      	ldr	r0, [pc, #384]	; (8005e04 <HAL_ADC_Init+0x29c>)
 8005c84:	f7ff ff36 	bl	8005af4 <LL_ADC_IsEnabled>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	4323      	orrs	r3, r4
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	bf0c      	ite	eq
 8005c90:	2301      	moveq	r3, #1
 8005c92:	2300      	movne	r3, #0
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	e008      	b.n	8005caa <HAL_ADC_Init+0x142>
 8005c98:	485b      	ldr	r0, [pc, #364]	; (8005e08 <HAL_ADC_Init+0x2a0>)
 8005c9a:	f7ff ff2b 	bl	8005af4 <LL_ADC_IsEnabled>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	bf0c      	ite	eq
 8005ca4:	2301      	moveq	r3, #1
 8005ca6:	2300      	movne	r3, #0
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d012      	beq.n	8005cd4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a53      	ldr	r2, [pc, #332]	; (8005e00 <HAL_ADC_Init+0x298>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d004      	beq.n	8005cc2 <HAL_ADC_Init+0x15a>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a51      	ldr	r2, [pc, #324]	; (8005e04 <HAL_ADC_Init+0x29c>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d101      	bne.n	8005cc6 <HAL_ADC_Init+0x15e>
 8005cc2:	4a52      	ldr	r2, [pc, #328]	; (8005e0c <HAL_ADC_Init+0x2a4>)
 8005cc4:	e000      	b.n	8005cc8 <HAL_ADC_Init+0x160>
 8005cc6:	4a52      	ldr	r2, [pc, #328]	; (8005e10 <HAL_ADC_Init+0x2a8>)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	4619      	mov	r1, r3
 8005cce:	4610      	mov	r0, r2
 8005cd0:	f7ff fdbe 	bl	8005850 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8005cd4:	f7ff fdb0 	bl	8005838 <HAL_GetREVID>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	f241 0203 	movw	r2, #4099	; 0x1003
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d914      	bls.n	8005d0c <HAL_ADC_Init+0x1a4>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	2b10      	cmp	r3, #16
 8005ce8:	d110      	bne.n	8005d0c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	7d5b      	ldrb	r3, [r3, #21]
 8005cee:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005cf4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8005cfa:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	7f1b      	ldrb	r3, [r3, #28]
 8005d00:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8005d02:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005d04:	f043 030c 	orr.w	r3, r3, #12
 8005d08:	61bb      	str	r3, [r7, #24]
 8005d0a:	e00d      	b.n	8005d28 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	7d5b      	ldrb	r3, [r3, #21]
 8005d10:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005d16:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8005d1c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	7f1b      	ldrb	r3, [r3, #28]
 8005d22:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8005d24:	4313      	orrs	r3, r2
 8005d26:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	7f1b      	ldrb	r3, [r3, #28]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d106      	bne.n	8005d3e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a1b      	ldr	r3, [r3, #32]
 8005d34:	3b01      	subs	r3, #1
 8005d36:	045b      	lsls	r3, r3, #17
 8005d38:	69ba      	ldr	r2, [r7, #24]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d009      	beq.n	8005d5a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d52:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005d54:	69ba      	ldr	r2, [r7, #24]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68da      	ldr	r2, [r3, #12]
 8005d60:	4b2c      	ldr	r3, [pc, #176]	; (8005e14 <HAL_ADC_Init+0x2ac>)
 8005d62:	4013      	ands	r3, r2
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	6812      	ldr	r2, [r2, #0]
 8005d68:	69b9      	ldr	r1, [r7, #24]
 8005d6a:	430b      	orrs	r3, r1
 8005d6c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7ff fed1 	bl	8005b1a <LL_ADC_REG_IsConversionOngoing>
 8005d78:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f7ff fede 	bl	8005b40 <LL_ADC_INJ_IsConversionOngoing>
 8005d84:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d15f      	bne.n	8005e4c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d15c      	bne.n	8005e4c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	7d1b      	ldrb	r3, [r3, #20]
 8005d96:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68da      	ldr	r2, [r3, #12]
 8005da6:	4b1c      	ldr	r3, [pc, #112]	; (8005e18 <HAL_ADC_Init+0x2b0>)
 8005da8:	4013      	ands	r3, r2
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	6812      	ldr	r2, [r2, #0]
 8005dae:	69b9      	ldr	r1, [r7, #24]
 8005db0:	430b      	orrs	r3, r1
 8005db2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d130      	bne.n	8005e20 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	691a      	ldr	r2, [r3, #16]
 8005dca:	4b14      	ldr	r3, [pc, #80]	; (8005e1c <HAL_ADC_Init+0x2b4>)
 8005dcc:	4013      	ands	r3, r2
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005dd2:	3a01      	subs	r2, #1
 8005dd4:	0411      	lsls	r1, r2, #16
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005dda:	4311      	orrs	r1, r2
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005de0:	4311      	orrs	r1, r2
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005de6:	430a      	orrs	r2, r1
 8005de8:	431a      	orrs	r2, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f042 0201 	orr.w	r2, r2, #1
 8005df2:	611a      	str	r2, [r3, #16]
 8005df4:	e01c      	b.n	8005e30 <HAL_ADC_Init+0x2c8>
 8005df6:	bf00      	nop
 8005df8:	24000000 	.word	0x24000000
 8005dfc:	053e2d63 	.word	0x053e2d63
 8005e00:	40022000 	.word	0x40022000
 8005e04:	40022100 	.word	0x40022100
 8005e08:	58026000 	.word	0x58026000
 8005e0c:	40022300 	.word	0x40022300
 8005e10:	58026300 	.word	0x58026300
 8005e14:	fff0c003 	.word	0xfff0c003
 8005e18:	ffffbffc 	.word	0xffffbffc
 8005e1c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	691a      	ldr	r2, [r3, #16]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f022 0201 	bic.w	r2, r2, #1
 8005e2e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	430a      	orrs	r2, r1
 8005e44:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 fb80 	bl	800654c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d10c      	bne.n	8005e6e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e5a:	f023 010f 	bic.w	r1, r3, #15
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	699b      	ldr	r3, [r3, #24]
 8005e62:	1e5a      	subs	r2, r3, #1
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	430a      	orrs	r2, r1
 8005e6a:	631a      	str	r2, [r3, #48]	; 0x30
 8005e6c:	e007      	b.n	8005e7e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f022 020f 	bic.w	r2, r2, #15
 8005e7c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e82:	f023 0303 	bic.w	r3, r3, #3
 8005e86:	f043 0201 	orr.w	r2, r3, #1
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	655a      	str	r2, [r3, #84]	; 0x54
 8005e8e:	e007      	b.n	8005ea0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e94:	f043 0210 	orr.w	r2, r3, #16
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005ea0:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3724      	adds	r7, #36	; 0x24
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd90      	pop	{r4, r7, pc}
 8005eaa:	bf00      	nop

08005eac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005eac:	b590      	push	{r4, r7, lr}
 8005eae:	b0a1      	sub	sp, #132	; 0x84
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	4a9d      	ldr	r2, [pc, #628]	; (800613c <HAL_ADC_ConfigChannel+0x290>)
 8005ec6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d101      	bne.n	8005ed6 <HAL_ADC_ConfigChannel+0x2a>
 8005ed2:	2302      	movs	r3, #2
 8005ed4:	e321      	b.n	800651a <HAL_ADC_ConfigChannel+0x66e>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7ff fe19 	bl	8005b1a <LL_ADC_REG_IsConversionOngoing>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	f040 8306 	bne.w	80064fc <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d108      	bne.n	8005f0e <HAL_ADC_ConfigChannel+0x62>
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	0e9b      	lsrs	r3, r3, #26
 8005f02:	f003 031f 	and.w	r3, r3, #31
 8005f06:	2201      	movs	r2, #1
 8005f08:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0c:	e016      	b.n	8005f3c <HAL_ADC_ConfigChannel+0x90>
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f16:	fa93 f3a3 	rbit	r3, r3
 8005f1a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005f1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f1e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005f20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d101      	bne.n	8005f2a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8005f26:	2320      	movs	r3, #32
 8005f28:	e003      	b.n	8005f32 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8005f2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f2c:	fab3 f383 	clz	r3, r3
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	f003 031f 	and.w	r3, r3, #31
 8005f36:	2201      	movs	r2, #1
 8005f38:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	6812      	ldr	r2, [r2, #0]
 8005f40:	69d1      	ldr	r1, [r2, #28]
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	6812      	ldr	r2, [r2, #0]
 8005f46:	430b      	orrs	r3, r1
 8005f48:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6818      	ldr	r0, [r3, #0]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	6859      	ldr	r1, [r3, #4]
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	461a      	mov	r2, r3
 8005f58:	f7ff fd02 	bl	8005960 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7ff fdda 	bl	8005b1a <LL_ADC_REG_IsConversionOngoing>
 8005f66:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f7ff fde7 	bl	8005b40 <LL_ADC_INJ_IsConversionOngoing>
 8005f72:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005f74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	f040 80b3 	bne.w	80060e2 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005f7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	f040 80af 	bne.w	80060e2 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6818      	ldr	r0, [r3, #0]
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	6819      	ldr	r1, [r3, #0]
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	461a      	mov	r2, r3
 8005f92:	f7ff fd11 	bl	80059b8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005f96:	4b6a      	ldr	r3, [pc, #424]	; (8006140 <HAL_ADC_ConfigChannel+0x294>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005f9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fa2:	d10b      	bne.n	8005fbc <HAL_ADC_ConfigChannel+0x110>
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	695a      	ldr	r2, [r3, #20]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	089b      	lsrs	r3, r3, #2
 8005fb0:	f003 0307 	and.w	r3, r3, #7
 8005fb4:	005b      	lsls	r3, r3, #1
 8005fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fba:	e01d      	b.n	8005ff8 <HAL_ADC_ConfigChannel+0x14c>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	f003 0310 	and.w	r3, r3, #16
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d10b      	bne.n	8005fe2 <HAL_ADC_ConfigChannel+0x136>
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	695a      	ldr	r2, [r3, #20]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	089b      	lsrs	r3, r3, #2
 8005fd6:	f003 0307 	and.w	r3, r3, #7
 8005fda:	005b      	lsls	r3, r3, #1
 8005fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe0:	e00a      	b.n	8005ff8 <HAL_ADC_ConfigChannel+0x14c>
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	695a      	ldr	r2, [r3, #20]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	089b      	lsrs	r3, r3, #2
 8005fee:	f003 0304 	and.w	r3, r3, #4
 8005ff2:	005b      	lsls	r3, r3, #1
 8005ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff8:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	2b04      	cmp	r3, #4
 8006000:	d027      	beq.n	8006052 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6818      	ldr	r0, [r3, #0]
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	6919      	ldr	r1, [r3, #16]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006010:	f7ff fc52 	bl	80058b8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6818      	ldr	r0, [r3, #0]
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	6919      	ldr	r1, [r3, #16]
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	7e5b      	ldrb	r3, [r3, #25]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d102      	bne.n	800602a <HAL_ADC_ConfigChannel+0x17e>
 8006024:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006028:	e000      	b.n	800602c <HAL_ADC_ConfigChannel+0x180>
 800602a:	2300      	movs	r3, #0
 800602c:	461a      	mov	r2, r3
 800602e:	f7ff fc7c 	bl	800592a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6818      	ldr	r0, [r3, #0]
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	6919      	ldr	r1, [r3, #16]
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	7e1b      	ldrb	r3, [r3, #24]
 800603e:	2b01      	cmp	r3, #1
 8006040:	d102      	bne.n	8006048 <HAL_ADC_ConfigChannel+0x19c>
 8006042:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006046:	e000      	b.n	800604a <HAL_ADC_ConfigChannel+0x19e>
 8006048:	2300      	movs	r3, #0
 800604a:	461a      	mov	r2, r3
 800604c:	f7ff fc54 	bl	80058f8 <LL_ADC_SetDataRightShift>
 8006050:	e047      	b.n	80060e2 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006058:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	069b      	lsls	r3, r3, #26
 8006062:	429a      	cmp	r2, r3
 8006064:	d107      	bne.n	8006076 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006074:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800607c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	069b      	lsls	r3, r3, #26
 8006086:	429a      	cmp	r2, r3
 8006088:	d107      	bne.n	800609a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006098:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	069b      	lsls	r3, r3, #26
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d107      	bne.n	80060be <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80060bc:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	069b      	lsls	r3, r3, #26
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d107      	bne.n	80060e2 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80060e0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4618      	mov	r0, r3
 80060e8:	f7ff fd04 	bl	8005af4 <LL_ADC_IsEnabled>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	f040 820d 	bne.w	800650e <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6818      	ldr	r0, [r3, #0]
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	6819      	ldr	r1, [r3, #0]
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	461a      	mov	r2, r3
 8006102:	f7ff fc85 	bl	8005a10 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	4a0c      	ldr	r2, [pc, #48]	; (800613c <HAL_ADC_ConfigChannel+0x290>)
 800610c:	4293      	cmp	r3, r2
 800610e:	f040 8133 	bne.w	8006378 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800611e:	2b00      	cmp	r3, #0
 8006120:	d110      	bne.n	8006144 <HAL_ADC_ConfigChannel+0x298>
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	0e9b      	lsrs	r3, r3, #26
 8006128:	3301      	adds	r3, #1
 800612a:	f003 031f 	and.w	r3, r3, #31
 800612e:	2b09      	cmp	r3, #9
 8006130:	bf94      	ite	ls
 8006132:	2301      	movls	r3, #1
 8006134:	2300      	movhi	r3, #0
 8006136:	b2db      	uxtb	r3, r3
 8006138:	e01e      	b.n	8006178 <HAL_ADC_ConfigChannel+0x2cc>
 800613a:	bf00      	nop
 800613c:	47ff0000 	.word	0x47ff0000
 8006140:	5c001000 	.word	0x5c001000
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800614a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800614c:	fa93 f3a3 	rbit	r3, r3
 8006150:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8006152:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006154:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8006156:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006158:	2b00      	cmp	r3, #0
 800615a:	d101      	bne.n	8006160 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 800615c:	2320      	movs	r3, #32
 800615e:	e003      	b.n	8006168 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8006160:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006162:	fab3 f383 	clz	r3, r3
 8006166:	b2db      	uxtb	r3, r3
 8006168:	3301      	adds	r3, #1
 800616a:	f003 031f 	and.w	r3, r3, #31
 800616e:	2b09      	cmp	r3, #9
 8006170:	bf94      	ite	ls
 8006172:	2301      	movls	r3, #1
 8006174:	2300      	movhi	r3, #0
 8006176:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006178:	2b00      	cmp	r3, #0
 800617a:	d079      	beq.n	8006270 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006184:	2b00      	cmp	r3, #0
 8006186:	d107      	bne.n	8006198 <HAL_ADC_ConfigChannel+0x2ec>
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	0e9b      	lsrs	r3, r3, #26
 800618e:	3301      	adds	r3, #1
 8006190:	069b      	lsls	r3, r3, #26
 8006192:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006196:	e015      	b.n	80061c4 <HAL_ADC_ConfigChannel+0x318>
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800619e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061a0:	fa93 f3a3 	rbit	r3, r3
 80061a4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80061a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061a8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80061aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d101      	bne.n	80061b4 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80061b0:	2320      	movs	r3, #32
 80061b2:	e003      	b.n	80061bc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80061b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061b6:	fab3 f383 	clz	r3, r3
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	3301      	adds	r3, #1
 80061be:	069b      	lsls	r3, r3, #26
 80061c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d109      	bne.n	80061e4 <HAL_ADC_ConfigChannel+0x338>
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	0e9b      	lsrs	r3, r3, #26
 80061d6:	3301      	adds	r3, #1
 80061d8:	f003 031f 	and.w	r3, r3, #31
 80061dc:	2101      	movs	r1, #1
 80061de:	fa01 f303 	lsl.w	r3, r1, r3
 80061e2:	e017      	b.n	8006214 <HAL_ADC_ConfigChannel+0x368>
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061ec:	fa93 f3a3 	rbit	r3, r3
 80061f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80061f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061f4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80061f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d101      	bne.n	8006200 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80061fc:	2320      	movs	r3, #32
 80061fe:	e003      	b.n	8006208 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8006200:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006202:	fab3 f383 	clz	r3, r3
 8006206:	b2db      	uxtb	r3, r3
 8006208:	3301      	adds	r3, #1
 800620a:	f003 031f 	and.w	r3, r3, #31
 800620e:	2101      	movs	r1, #1
 8006210:	fa01 f303 	lsl.w	r3, r1, r3
 8006214:	ea42 0103 	orr.w	r1, r2, r3
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006220:	2b00      	cmp	r3, #0
 8006222:	d10a      	bne.n	800623a <HAL_ADC_ConfigChannel+0x38e>
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	0e9b      	lsrs	r3, r3, #26
 800622a:	3301      	adds	r3, #1
 800622c:	f003 021f 	and.w	r2, r3, #31
 8006230:	4613      	mov	r3, r2
 8006232:	005b      	lsls	r3, r3, #1
 8006234:	4413      	add	r3, r2
 8006236:	051b      	lsls	r3, r3, #20
 8006238:	e018      	b.n	800626c <HAL_ADC_ConfigChannel+0x3c0>
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006242:	fa93 f3a3 	rbit	r3, r3
 8006246:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8006248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800624c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800624e:	2b00      	cmp	r3, #0
 8006250:	d101      	bne.n	8006256 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8006252:	2320      	movs	r3, #32
 8006254:	e003      	b.n	800625e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8006256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006258:	fab3 f383 	clz	r3, r3
 800625c:	b2db      	uxtb	r3, r3
 800625e:	3301      	adds	r3, #1
 8006260:	f003 021f 	and.w	r2, r3, #31
 8006264:	4613      	mov	r3, r2
 8006266:	005b      	lsls	r3, r3, #1
 8006268:	4413      	add	r3, r2
 800626a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800626c:	430b      	orrs	r3, r1
 800626e:	e07e      	b.n	800636e <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006278:	2b00      	cmp	r3, #0
 800627a:	d107      	bne.n	800628c <HAL_ADC_ConfigChannel+0x3e0>
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	0e9b      	lsrs	r3, r3, #26
 8006282:	3301      	adds	r3, #1
 8006284:	069b      	lsls	r3, r3, #26
 8006286:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800628a:	e015      	b.n	80062b8 <HAL_ADC_ConfigChannel+0x40c>
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006294:	fa93 f3a3 	rbit	r3, r3
 8006298:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800629a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800629e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d101      	bne.n	80062a8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80062a4:	2320      	movs	r3, #32
 80062a6:	e003      	b.n	80062b0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80062a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062aa:	fab3 f383 	clz	r3, r3
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	3301      	adds	r3, #1
 80062b2:	069b      	lsls	r3, r3, #26
 80062b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d109      	bne.n	80062d8 <HAL_ADC_ConfigChannel+0x42c>
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	0e9b      	lsrs	r3, r3, #26
 80062ca:	3301      	adds	r3, #1
 80062cc:	f003 031f 	and.w	r3, r3, #31
 80062d0:	2101      	movs	r1, #1
 80062d2:	fa01 f303 	lsl.w	r3, r1, r3
 80062d6:	e017      	b.n	8006308 <HAL_ADC_ConfigChannel+0x45c>
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	fa93 f3a3 	rbit	r3, r3
 80062e4:	61bb      	str	r3, [r7, #24]
  return result;
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80062ea:	6a3b      	ldr	r3, [r7, #32]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d101      	bne.n	80062f4 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80062f0:	2320      	movs	r3, #32
 80062f2:	e003      	b.n	80062fc <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80062f4:	6a3b      	ldr	r3, [r7, #32]
 80062f6:	fab3 f383 	clz	r3, r3
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	3301      	adds	r3, #1
 80062fe:	f003 031f 	and.w	r3, r3, #31
 8006302:	2101      	movs	r1, #1
 8006304:	fa01 f303 	lsl.w	r3, r1, r3
 8006308:	ea42 0103 	orr.w	r1, r2, r3
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006314:	2b00      	cmp	r3, #0
 8006316:	d10d      	bne.n	8006334 <HAL_ADC_ConfigChannel+0x488>
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	0e9b      	lsrs	r3, r3, #26
 800631e:	3301      	adds	r3, #1
 8006320:	f003 021f 	and.w	r2, r3, #31
 8006324:	4613      	mov	r3, r2
 8006326:	005b      	lsls	r3, r3, #1
 8006328:	4413      	add	r3, r2
 800632a:	3b1e      	subs	r3, #30
 800632c:	051b      	lsls	r3, r3, #20
 800632e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006332:	e01b      	b.n	800636c <HAL_ADC_ConfigChannel+0x4c0>
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	fa93 f3a3 	rbit	r3, r3
 8006340:	60fb      	str	r3, [r7, #12]
  return result;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d101      	bne.n	8006350 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 800634c:	2320      	movs	r3, #32
 800634e:	e003      	b.n	8006358 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	fab3 f383 	clz	r3, r3
 8006356:	b2db      	uxtb	r3, r3
 8006358:	3301      	adds	r3, #1
 800635a:	f003 021f 	and.w	r2, r3, #31
 800635e:	4613      	mov	r3, r2
 8006360:	005b      	lsls	r3, r3, #1
 8006362:	4413      	add	r3, r2
 8006364:	3b1e      	subs	r3, #30
 8006366:	051b      	lsls	r3, r3, #20
 8006368:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800636c:	430b      	orrs	r3, r1
 800636e:	683a      	ldr	r2, [r7, #0]
 8006370:	6892      	ldr	r2, [r2, #8]
 8006372:	4619      	mov	r1, r3
 8006374:	f7ff fb20 	bl	80059b8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2b00      	cmp	r3, #0
 800637e:	f280 80c6 	bge.w	800650e <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a67      	ldr	r2, [pc, #412]	; (8006524 <HAL_ADC_ConfigChannel+0x678>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d004      	beq.n	8006396 <HAL_ADC_ConfigChannel+0x4ea>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a65      	ldr	r2, [pc, #404]	; (8006528 <HAL_ADC_ConfigChannel+0x67c>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d101      	bne.n	800639a <HAL_ADC_ConfigChannel+0x4ee>
 8006396:	4b65      	ldr	r3, [pc, #404]	; (800652c <HAL_ADC_ConfigChannel+0x680>)
 8006398:	e000      	b.n	800639c <HAL_ADC_ConfigChannel+0x4f0>
 800639a:	4b65      	ldr	r3, [pc, #404]	; (8006530 <HAL_ADC_ConfigChannel+0x684>)
 800639c:	4618      	mov	r0, r3
 800639e:	f7ff fa7d 	bl	800589c <LL_ADC_GetCommonPathInternalCh>
 80063a2:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a5e      	ldr	r2, [pc, #376]	; (8006524 <HAL_ADC_ConfigChannel+0x678>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d004      	beq.n	80063b8 <HAL_ADC_ConfigChannel+0x50c>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a5d      	ldr	r2, [pc, #372]	; (8006528 <HAL_ADC_ConfigChannel+0x67c>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d10e      	bne.n	80063d6 <HAL_ADC_ConfigChannel+0x52a>
 80063b8:	485a      	ldr	r0, [pc, #360]	; (8006524 <HAL_ADC_ConfigChannel+0x678>)
 80063ba:	f7ff fb9b 	bl	8005af4 <LL_ADC_IsEnabled>
 80063be:	4604      	mov	r4, r0
 80063c0:	4859      	ldr	r0, [pc, #356]	; (8006528 <HAL_ADC_ConfigChannel+0x67c>)
 80063c2:	f7ff fb97 	bl	8005af4 <LL_ADC_IsEnabled>
 80063c6:	4603      	mov	r3, r0
 80063c8:	4323      	orrs	r3, r4
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	bf0c      	ite	eq
 80063ce:	2301      	moveq	r3, #1
 80063d0:	2300      	movne	r3, #0
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	e008      	b.n	80063e8 <HAL_ADC_ConfigChannel+0x53c>
 80063d6:	4857      	ldr	r0, [pc, #348]	; (8006534 <HAL_ADC_ConfigChannel+0x688>)
 80063d8:	f7ff fb8c 	bl	8005af4 <LL_ADC_IsEnabled>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	bf0c      	ite	eq
 80063e2:	2301      	moveq	r3, #1
 80063e4:	2300      	movne	r3, #0
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d07d      	beq.n	80064e8 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a51      	ldr	r2, [pc, #324]	; (8006538 <HAL_ADC_ConfigChannel+0x68c>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d130      	bne.n	8006458 <HAL_ADC_ConfigChannel+0x5ac>
 80063f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d12b      	bne.n	8006458 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a4b      	ldr	r2, [pc, #300]	; (8006534 <HAL_ADC_ConfigChannel+0x688>)
 8006406:	4293      	cmp	r3, r2
 8006408:	f040 8081 	bne.w	800650e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a44      	ldr	r2, [pc, #272]	; (8006524 <HAL_ADC_ConfigChannel+0x678>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d004      	beq.n	8006420 <HAL_ADC_ConfigChannel+0x574>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a43      	ldr	r2, [pc, #268]	; (8006528 <HAL_ADC_ConfigChannel+0x67c>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d101      	bne.n	8006424 <HAL_ADC_ConfigChannel+0x578>
 8006420:	4a42      	ldr	r2, [pc, #264]	; (800652c <HAL_ADC_ConfigChannel+0x680>)
 8006422:	e000      	b.n	8006426 <HAL_ADC_ConfigChannel+0x57a>
 8006424:	4a42      	ldr	r2, [pc, #264]	; (8006530 <HAL_ADC_ConfigChannel+0x684>)
 8006426:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006428:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800642c:	4619      	mov	r1, r3
 800642e:	4610      	mov	r0, r2
 8006430:	f7ff fa21 	bl	8005876 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006434:	4b41      	ldr	r3, [pc, #260]	; (800653c <HAL_ADC_ConfigChannel+0x690>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	099b      	lsrs	r3, r3, #6
 800643a:	4a41      	ldr	r2, [pc, #260]	; (8006540 <HAL_ADC_ConfigChannel+0x694>)
 800643c:	fba2 2303 	umull	r2, r3, r2, r3
 8006440:	099b      	lsrs	r3, r3, #6
 8006442:	3301      	adds	r3, #1
 8006444:	005b      	lsls	r3, r3, #1
 8006446:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006448:	e002      	b.n	8006450 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	3b01      	subs	r3, #1
 800644e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d1f9      	bne.n	800644a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006456:	e05a      	b.n	800650e <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a39      	ldr	r2, [pc, #228]	; (8006544 <HAL_ADC_ConfigChannel+0x698>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d11e      	bne.n	80064a0 <HAL_ADC_ConfigChannel+0x5f4>
 8006462:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006464:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006468:	2b00      	cmp	r3, #0
 800646a:	d119      	bne.n	80064a0 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a30      	ldr	r2, [pc, #192]	; (8006534 <HAL_ADC_ConfigChannel+0x688>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d14b      	bne.n	800650e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a2a      	ldr	r2, [pc, #168]	; (8006524 <HAL_ADC_ConfigChannel+0x678>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d004      	beq.n	800648a <HAL_ADC_ConfigChannel+0x5de>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a28      	ldr	r2, [pc, #160]	; (8006528 <HAL_ADC_ConfigChannel+0x67c>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d101      	bne.n	800648e <HAL_ADC_ConfigChannel+0x5e2>
 800648a:	4a28      	ldr	r2, [pc, #160]	; (800652c <HAL_ADC_ConfigChannel+0x680>)
 800648c:	e000      	b.n	8006490 <HAL_ADC_ConfigChannel+0x5e4>
 800648e:	4a28      	ldr	r2, [pc, #160]	; (8006530 <HAL_ADC_ConfigChannel+0x684>)
 8006490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006492:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006496:	4619      	mov	r1, r3
 8006498:	4610      	mov	r0, r2
 800649a:	f7ff f9ec 	bl	8005876 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800649e:	e036      	b.n	800650e <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a28      	ldr	r2, [pc, #160]	; (8006548 <HAL_ADC_ConfigChannel+0x69c>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d131      	bne.n	800650e <HAL_ADC_ConfigChannel+0x662>
 80064aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d12c      	bne.n	800650e <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a1e      	ldr	r2, [pc, #120]	; (8006534 <HAL_ADC_ConfigChannel+0x688>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d127      	bne.n	800650e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a18      	ldr	r2, [pc, #96]	; (8006524 <HAL_ADC_ConfigChannel+0x678>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d004      	beq.n	80064d2 <HAL_ADC_ConfigChannel+0x626>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a16      	ldr	r2, [pc, #88]	; (8006528 <HAL_ADC_ConfigChannel+0x67c>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d101      	bne.n	80064d6 <HAL_ADC_ConfigChannel+0x62a>
 80064d2:	4a16      	ldr	r2, [pc, #88]	; (800652c <HAL_ADC_ConfigChannel+0x680>)
 80064d4:	e000      	b.n	80064d8 <HAL_ADC_ConfigChannel+0x62c>
 80064d6:	4a16      	ldr	r2, [pc, #88]	; (8006530 <HAL_ADC_ConfigChannel+0x684>)
 80064d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80064de:	4619      	mov	r1, r3
 80064e0:	4610      	mov	r0, r2
 80064e2:	f7ff f9c8 	bl	8005876 <LL_ADC_SetCommonPathInternalCh>
 80064e6:	e012      	b.n	800650e <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ec:	f043 0220 	orr.w	r2, r3, #32
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80064fa:	e008      	b.n	800650e <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006500:	f043 0220 	orr.w	r2, r3, #32
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006516:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800651a:	4618      	mov	r0, r3
 800651c:	3784      	adds	r7, #132	; 0x84
 800651e:	46bd      	mov	sp, r7
 8006520:	bd90      	pop	{r4, r7, pc}
 8006522:	bf00      	nop
 8006524:	40022000 	.word	0x40022000
 8006528:	40022100 	.word	0x40022100
 800652c:	40022300 	.word	0x40022300
 8006530:	58026300 	.word	0x58026300
 8006534:	58026000 	.word	0x58026000
 8006538:	cb840000 	.word	0xcb840000
 800653c:	24000000 	.word	0x24000000
 8006540:	053e2d63 	.word	0x053e2d63
 8006544:	c7520000 	.word	0xc7520000
 8006548:	cfb80000 	.word	0xcfb80000

0800654c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a7a      	ldr	r2, [pc, #488]	; (8006744 <ADC_ConfigureBoostMode+0x1f8>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d004      	beq.n	8006568 <ADC_ConfigureBoostMode+0x1c>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a79      	ldr	r2, [pc, #484]	; (8006748 <ADC_ConfigureBoostMode+0x1fc>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d109      	bne.n	800657c <ADC_ConfigureBoostMode+0x30>
 8006568:	4b78      	ldr	r3, [pc, #480]	; (800674c <ADC_ConfigureBoostMode+0x200>)
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006570:	2b00      	cmp	r3, #0
 8006572:	bf14      	ite	ne
 8006574:	2301      	movne	r3, #1
 8006576:	2300      	moveq	r3, #0
 8006578:	b2db      	uxtb	r3, r3
 800657a:	e008      	b.n	800658e <ADC_ConfigureBoostMode+0x42>
 800657c:	4b74      	ldr	r3, [pc, #464]	; (8006750 <ADC_ConfigureBoostMode+0x204>)
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006584:	2b00      	cmp	r3, #0
 8006586:	bf14      	ite	ne
 8006588:	2301      	movne	r3, #1
 800658a:	2300      	moveq	r3, #0
 800658c:	b2db      	uxtb	r3, r3
 800658e:	2b00      	cmp	r3, #0
 8006590:	d01c      	beq.n	80065cc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8006592:	f004 fdff 	bl	800b194 <HAL_RCC_GetHCLKFreq>
 8006596:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80065a0:	d010      	beq.n	80065c4 <ADC_ConfigureBoostMode+0x78>
 80065a2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80065a6:	d873      	bhi.n	8006690 <ADC_ConfigureBoostMode+0x144>
 80065a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065ac:	d002      	beq.n	80065b4 <ADC_ConfigureBoostMode+0x68>
 80065ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065b2:	d16d      	bne.n	8006690 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	0c1b      	lsrs	r3, r3, #16
 80065ba:	68fa      	ldr	r2, [r7, #12]
 80065bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80065c0:	60fb      	str	r3, [r7, #12]
        break;
 80065c2:	e068      	b.n	8006696 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	089b      	lsrs	r3, r3, #2
 80065c8:	60fb      	str	r3, [r7, #12]
        break;
 80065ca:	e064      	b.n	8006696 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80065cc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80065d0:	f04f 0100 	mov.w	r1, #0
 80065d4:	f006 f844 	bl	800c660 <HAL_RCCEx_GetPeriphCLKFreq>
 80065d8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80065e2:	d051      	beq.n	8006688 <ADC_ConfigureBoostMode+0x13c>
 80065e4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80065e8:	d854      	bhi.n	8006694 <ADC_ConfigureBoostMode+0x148>
 80065ea:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80065ee:	d047      	beq.n	8006680 <ADC_ConfigureBoostMode+0x134>
 80065f0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80065f4:	d84e      	bhi.n	8006694 <ADC_ConfigureBoostMode+0x148>
 80065f6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80065fa:	d03d      	beq.n	8006678 <ADC_ConfigureBoostMode+0x12c>
 80065fc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006600:	d848      	bhi.n	8006694 <ADC_ConfigureBoostMode+0x148>
 8006602:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006606:	d033      	beq.n	8006670 <ADC_ConfigureBoostMode+0x124>
 8006608:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800660c:	d842      	bhi.n	8006694 <ADC_ConfigureBoostMode+0x148>
 800660e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006612:	d029      	beq.n	8006668 <ADC_ConfigureBoostMode+0x11c>
 8006614:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006618:	d83c      	bhi.n	8006694 <ADC_ConfigureBoostMode+0x148>
 800661a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800661e:	d01a      	beq.n	8006656 <ADC_ConfigureBoostMode+0x10a>
 8006620:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006624:	d836      	bhi.n	8006694 <ADC_ConfigureBoostMode+0x148>
 8006626:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800662a:	d014      	beq.n	8006656 <ADC_ConfigureBoostMode+0x10a>
 800662c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006630:	d830      	bhi.n	8006694 <ADC_ConfigureBoostMode+0x148>
 8006632:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006636:	d00e      	beq.n	8006656 <ADC_ConfigureBoostMode+0x10a>
 8006638:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800663c:	d82a      	bhi.n	8006694 <ADC_ConfigureBoostMode+0x148>
 800663e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006642:	d008      	beq.n	8006656 <ADC_ConfigureBoostMode+0x10a>
 8006644:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006648:	d824      	bhi.n	8006694 <ADC_ConfigureBoostMode+0x148>
 800664a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800664e:	d002      	beq.n	8006656 <ADC_ConfigureBoostMode+0x10a>
 8006650:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006654:	d11e      	bne.n	8006694 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	0c9b      	lsrs	r3, r3, #18
 800665c:	005b      	lsls	r3, r3, #1
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	fbb2 f3f3 	udiv	r3, r2, r3
 8006664:	60fb      	str	r3, [r7, #12]
        break;
 8006666:	e016      	b.n	8006696 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	091b      	lsrs	r3, r3, #4
 800666c:	60fb      	str	r3, [r7, #12]
        break;
 800666e:	e012      	b.n	8006696 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	095b      	lsrs	r3, r3, #5
 8006674:	60fb      	str	r3, [r7, #12]
        break;
 8006676:	e00e      	b.n	8006696 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	099b      	lsrs	r3, r3, #6
 800667c:	60fb      	str	r3, [r7, #12]
        break;
 800667e:	e00a      	b.n	8006696 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	09db      	lsrs	r3, r3, #7
 8006684:	60fb      	str	r3, [r7, #12]
        break;
 8006686:	e006      	b.n	8006696 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	0a1b      	lsrs	r3, r3, #8
 800668c:	60fb      	str	r3, [r7, #12]
        break;
 800668e:	e002      	b.n	8006696 <ADC_ConfigureBoostMode+0x14a>
        break;
 8006690:	bf00      	nop
 8006692:	e000      	b.n	8006696 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8006694:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006696:	f7ff f8cf 	bl	8005838 <HAL_GetREVID>
 800669a:	4603      	mov	r3, r0
 800669c:	f241 0203 	movw	r2, #4099	; 0x1003
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d815      	bhi.n	80066d0 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	4a2b      	ldr	r2, [pc, #172]	; (8006754 <ADC_ConfigureBoostMode+0x208>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d908      	bls.n	80066be <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	689a      	ldr	r2, [r3, #8]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066ba:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80066bc:	e03e      	b.n	800673c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	689a      	ldr	r2, [r3, #8]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066cc:	609a      	str	r2, [r3, #8]
}
 80066ce:	e035      	b.n	800673c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	085b      	lsrs	r3, r3, #1
 80066d4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	4a1f      	ldr	r2, [pc, #124]	; (8006758 <ADC_ConfigureBoostMode+0x20c>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d808      	bhi.n	80066f0 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	689a      	ldr	r2, [r3, #8]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80066ec:	609a      	str	r2, [r3, #8]
}
 80066ee:	e025      	b.n	800673c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	4a1a      	ldr	r2, [pc, #104]	; (800675c <ADC_ConfigureBoostMode+0x210>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d80a      	bhi.n	800670e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800670a:	609a      	str	r2, [r3, #8]
}
 800670c:	e016      	b.n	800673c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	4a13      	ldr	r2, [pc, #76]	; (8006760 <ADC_ConfigureBoostMode+0x214>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d80a      	bhi.n	800672c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006728:	609a      	str	r2, [r3, #8]
}
 800672a:	e007      	b.n	800673c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	689a      	ldr	r2, [r3, #8]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800673a:	609a      	str	r2, [r3, #8]
}
 800673c:	bf00      	nop
 800673e:	3710      	adds	r7, #16
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	40022000 	.word	0x40022000
 8006748:	40022100 	.word	0x40022100
 800674c:	40022300 	.word	0x40022300
 8006750:	58026300 	.word	0x58026300
 8006754:	01312d00 	.word	0x01312d00
 8006758:	005f5e10 	.word	0x005f5e10
 800675c:	00bebc20 	.word	0x00bebc20
 8006760:	017d7840 	.word	0x017d7840

08006764 <LL_ADC_IsEnabled>:
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	f003 0301 	and.w	r3, r3, #1
 8006774:	2b01      	cmp	r3, #1
 8006776:	d101      	bne.n	800677c <LL_ADC_IsEnabled+0x18>
 8006778:	2301      	movs	r3, #1
 800677a:	e000      	b.n	800677e <LL_ADC_IsEnabled+0x1a>
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	370c      	adds	r7, #12
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr

0800678a <LL_ADC_REG_IsConversionOngoing>:
{
 800678a:	b480      	push	{r7}
 800678c:	b083      	sub	sp, #12
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	f003 0304 	and.w	r3, r3, #4
 800679a:	2b04      	cmp	r3, #4
 800679c:	d101      	bne.n	80067a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800679e:	2301      	movs	r3, #1
 80067a0:	e000      	b.n	80067a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80067b0:	b590      	push	{r4, r7, lr}
 80067b2:	b09f      	sub	sp, #124	; 0x7c
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80067ba:	2300      	movs	r3, #0
 80067bc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d101      	bne.n	80067ce <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80067ca:	2302      	movs	r3, #2
 80067cc:	e0be      	b.n	800694c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2201      	movs	r2, #1
 80067d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80067d6:	2300      	movs	r3, #0
 80067d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80067da:	2300      	movs	r3, #0
 80067dc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a5c      	ldr	r2, [pc, #368]	; (8006954 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d102      	bne.n	80067ee <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80067e8:	4b5b      	ldr	r3, [pc, #364]	; (8006958 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80067ea:	60bb      	str	r3, [r7, #8]
 80067ec:	e001      	b.n	80067f2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80067ee:	2300      	movs	r3, #0
 80067f0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d10b      	bne.n	8006810 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067fc:	f043 0220 	orr.w	r2, r3, #32
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e09d      	b.n	800694c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	4618      	mov	r0, r3
 8006814:	f7ff ffb9 	bl	800678a <LL_ADC_REG_IsConversionOngoing>
 8006818:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4618      	mov	r0, r3
 8006820:	f7ff ffb3 	bl	800678a <LL_ADC_REG_IsConversionOngoing>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d17f      	bne.n	800692a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800682a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800682c:	2b00      	cmp	r3, #0
 800682e:	d17c      	bne.n	800692a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a47      	ldr	r2, [pc, #284]	; (8006954 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d004      	beq.n	8006844 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a46      	ldr	r2, [pc, #280]	; (8006958 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d101      	bne.n	8006848 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8006844:	4b45      	ldr	r3, [pc, #276]	; (800695c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006846:	e000      	b.n	800684a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8006848:	4b45      	ldr	r3, [pc, #276]	; (8006960 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800684a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d039      	beq.n	80068c8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8006854:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	431a      	orrs	r2, r3
 8006862:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006864:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a3a      	ldr	r2, [pc, #232]	; (8006954 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d004      	beq.n	800687a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a38      	ldr	r2, [pc, #224]	; (8006958 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d10e      	bne.n	8006898 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800687a:	4836      	ldr	r0, [pc, #216]	; (8006954 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800687c:	f7ff ff72 	bl	8006764 <LL_ADC_IsEnabled>
 8006880:	4604      	mov	r4, r0
 8006882:	4835      	ldr	r0, [pc, #212]	; (8006958 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8006884:	f7ff ff6e 	bl	8006764 <LL_ADC_IsEnabled>
 8006888:	4603      	mov	r3, r0
 800688a:	4323      	orrs	r3, r4
 800688c:	2b00      	cmp	r3, #0
 800688e:	bf0c      	ite	eq
 8006890:	2301      	moveq	r3, #1
 8006892:	2300      	movne	r3, #0
 8006894:	b2db      	uxtb	r3, r3
 8006896:	e008      	b.n	80068aa <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8006898:	4832      	ldr	r0, [pc, #200]	; (8006964 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800689a:	f7ff ff63 	bl	8006764 <LL_ADC_IsEnabled>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	bf0c      	ite	eq
 80068a4:	2301      	moveq	r3, #1
 80068a6:	2300      	movne	r3, #0
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d047      	beq.n	800693e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80068ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068b0:	689a      	ldr	r2, [r3, #8]
 80068b2:	4b2d      	ldr	r3, [pc, #180]	; (8006968 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80068b4:	4013      	ands	r3, r2
 80068b6:	683a      	ldr	r2, [r7, #0]
 80068b8:	6811      	ldr	r1, [r2, #0]
 80068ba:	683a      	ldr	r2, [r7, #0]
 80068bc:	6892      	ldr	r2, [r2, #8]
 80068be:	430a      	orrs	r2, r1
 80068c0:	431a      	orrs	r2, r3
 80068c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068c4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80068c6:	e03a      	b.n	800693e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80068c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80068d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068d2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a1e      	ldr	r2, [pc, #120]	; (8006954 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d004      	beq.n	80068e8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a1d      	ldr	r2, [pc, #116]	; (8006958 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d10e      	bne.n	8006906 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80068e8:	481a      	ldr	r0, [pc, #104]	; (8006954 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80068ea:	f7ff ff3b 	bl	8006764 <LL_ADC_IsEnabled>
 80068ee:	4604      	mov	r4, r0
 80068f0:	4819      	ldr	r0, [pc, #100]	; (8006958 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80068f2:	f7ff ff37 	bl	8006764 <LL_ADC_IsEnabled>
 80068f6:	4603      	mov	r3, r0
 80068f8:	4323      	orrs	r3, r4
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	bf0c      	ite	eq
 80068fe:	2301      	moveq	r3, #1
 8006900:	2300      	movne	r3, #0
 8006902:	b2db      	uxtb	r3, r3
 8006904:	e008      	b.n	8006918 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8006906:	4817      	ldr	r0, [pc, #92]	; (8006964 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006908:	f7ff ff2c 	bl	8006764 <LL_ADC_IsEnabled>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	bf0c      	ite	eq
 8006912:	2301      	moveq	r3, #1
 8006914:	2300      	movne	r3, #0
 8006916:	b2db      	uxtb	r3, r3
 8006918:	2b00      	cmp	r3, #0
 800691a:	d010      	beq.n	800693e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800691c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800691e:	689a      	ldr	r2, [r3, #8]
 8006920:	4b11      	ldr	r3, [pc, #68]	; (8006968 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006922:	4013      	ands	r3, r2
 8006924:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006926:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006928:	e009      	b.n	800693e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800692e:	f043 0220 	orr.w	r2, r3, #32
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800693c:	e000      	b.n	8006940 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800693e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006948:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800694c:	4618      	mov	r0, r3
 800694e:	377c      	adds	r7, #124	; 0x7c
 8006950:	46bd      	mov	sp, r7
 8006952:	bd90      	pop	{r4, r7, pc}
 8006954:	40022000 	.word	0x40022000
 8006958:	40022100 	.word	0x40022100
 800695c:	40022300 	.word	0x40022300
 8006960:	58026300 	.word	0x58026300
 8006964:	58026000 	.word	0x58026000
 8006968:	fffff0e0 	.word	0xfffff0e0

0800696c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800696c:	b480      	push	{r7}
 800696e:	b085      	sub	sp, #20
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f003 0307 	and.w	r3, r3, #7
 800697a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800697c:	4b0b      	ldr	r3, [pc, #44]	; (80069ac <__NVIC_SetPriorityGrouping+0x40>)
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006982:	68ba      	ldr	r2, [r7, #8]
 8006984:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006988:	4013      	ands	r3, r2
 800698a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006994:	4b06      	ldr	r3, [pc, #24]	; (80069b0 <__NVIC_SetPriorityGrouping+0x44>)
 8006996:	4313      	orrs	r3, r2
 8006998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800699a:	4a04      	ldr	r2, [pc, #16]	; (80069ac <__NVIC_SetPriorityGrouping+0x40>)
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	60d3      	str	r3, [r2, #12]
}
 80069a0:	bf00      	nop
 80069a2:	3714      	adds	r7, #20
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr
 80069ac:	e000ed00 	.word	0xe000ed00
 80069b0:	05fa0000 	.word	0x05fa0000

080069b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80069b4:	b480      	push	{r7}
 80069b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80069b8:	4b04      	ldr	r3, [pc, #16]	; (80069cc <__NVIC_GetPriorityGrouping+0x18>)
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	0a1b      	lsrs	r3, r3, #8
 80069be:	f003 0307 	and.w	r3, r3, #7
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr
 80069cc:	e000ed00 	.word	0xe000ed00

080069d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	4603      	mov	r3, r0
 80069d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80069da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	db0b      	blt.n	80069fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80069e2:	88fb      	ldrh	r3, [r7, #6]
 80069e4:	f003 021f 	and.w	r2, r3, #31
 80069e8:	4907      	ldr	r1, [pc, #28]	; (8006a08 <__NVIC_EnableIRQ+0x38>)
 80069ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80069ee:	095b      	lsrs	r3, r3, #5
 80069f0:	2001      	movs	r0, #1
 80069f2:	fa00 f202 	lsl.w	r2, r0, r2
 80069f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80069fa:	bf00      	nop
 80069fc:	370c      	adds	r7, #12
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	e000e100 	.word	0xe000e100

08006a0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	4603      	mov	r3, r0
 8006a14:	6039      	str	r1, [r7, #0]
 8006a16:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006a18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	db0a      	blt.n	8006a36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	b2da      	uxtb	r2, r3
 8006a24:	490c      	ldr	r1, [pc, #48]	; (8006a58 <__NVIC_SetPriority+0x4c>)
 8006a26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a2a:	0112      	lsls	r2, r2, #4
 8006a2c:	b2d2      	uxtb	r2, r2
 8006a2e:	440b      	add	r3, r1
 8006a30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006a34:	e00a      	b.n	8006a4c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	b2da      	uxtb	r2, r3
 8006a3a:	4908      	ldr	r1, [pc, #32]	; (8006a5c <__NVIC_SetPriority+0x50>)
 8006a3c:	88fb      	ldrh	r3, [r7, #6]
 8006a3e:	f003 030f 	and.w	r3, r3, #15
 8006a42:	3b04      	subs	r3, #4
 8006a44:	0112      	lsls	r2, r2, #4
 8006a46:	b2d2      	uxtb	r2, r2
 8006a48:	440b      	add	r3, r1
 8006a4a:	761a      	strb	r2, [r3, #24]
}
 8006a4c:	bf00      	nop
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr
 8006a58:	e000e100 	.word	0xe000e100
 8006a5c:	e000ed00 	.word	0xe000ed00

08006a60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b089      	sub	sp, #36	; 0x24
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f003 0307 	and.w	r3, r3, #7
 8006a72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	f1c3 0307 	rsb	r3, r3, #7
 8006a7a:	2b04      	cmp	r3, #4
 8006a7c:	bf28      	it	cs
 8006a7e:	2304      	movcs	r3, #4
 8006a80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	3304      	adds	r3, #4
 8006a86:	2b06      	cmp	r3, #6
 8006a88:	d902      	bls.n	8006a90 <NVIC_EncodePriority+0x30>
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	3b03      	subs	r3, #3
 8006a8e:	e000      	b.n	8006a92 <NVIC_EncodePriority+0x32>
 8006a90:	2300      	movs	r3, #0
 8006a92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a9e:	43da      	mvns	r2, r3
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	401a      	ands	r2, r3
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006aa8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	fa01 f303 	lsl.w	r3, r1, r3
 8006ab2:	43d9      	mvns	r1, r3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ab8:	4313      	orrs	r3, r2
         );
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3724      	adds	r7, #36	; 0x24
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr
	...

08006ac8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	3b01      	subs	r3, #1
 8006ad4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ad8:	d301      	bcc.n	8006ade <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006ada:	2301      	movs	r3, #1
 8006adc:	e00f      	b.n	8006afe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006ade:	4a0a      	ldr	r2, [pc, #40]	; (8006b08 <SysTick_Config+0x40>)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	3b01      	subs	r3, #1
 8006ae4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006ae6:	210f      	movs	r1, #15
 8006ae8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006aec:	f7ff ff8e 	bl	8006a0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006af0:	4b05      	ldr	r3, [pc, #20]	; (8006b08 <SysTick_Config+0x40>)
 8006af2:	2200      	movs	r2, #0
 8006af4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006af6:	4b04      	ldr	r3, [pc, #16]	; (8006b08 <SysTick_Config+0x40>)
 8006af8:	2207      	movs	r2, #7
 8006afa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3708      	adds	r7, #8
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	e000e010 	.word	0xe000e010

08006b0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f7ff ff29 	bl	800696c <__NVIC_SetPriorityGrouping>
}
 8006b1a:	bf00      	nop
 8006b1c:	3708      	adds	r7, #8
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b086      	sub	sp, #24
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	4603      	mov	r3, r0
 8006b2a:	60b9      	str	r1, [r7, #8]
 8006b2c:	607a      	str	r2, [r7, #4]
 8006b2e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006b30:	f7ff ff40 	bl	80069b4 <__NVIC_GetPriorityGrouping>
 8006b34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	68b9      	ldr	r1, [r7, #8]
 8006b3a:	6978      	ldr	r0, [r7, #20]
 8006b3c:	f7ff ff90 	bl	8006a60 <NVIC_EncodePriority>
 8006b40:	4602      	mov	r2, r0
 8006b42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006b46:	4611      	mov	r1, r2
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f7ff ff5f 	bl	8006a0c <__NVIC_SetPriority>
}
 8006b4e:	bf00      	nop
 8006b50:	3718      	adds	r7, #24
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}

08006b56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b56:	b580      	push	{r7, lr}
 8006b58:	b082      	sub	sp, #8
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006b60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006b64:	4618      	mov	r0, r3
 8006b66:	f7ff ff33 	bl	80069d0 <__NVIC_EnableIRQ>
}
 8006b6a:	bf00      	nop
 8006b6c:	3708      	adds	r7, #8
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b082      	sub	sp, #8
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f7ff ffa4 	bl	8006ac8 <SysTick_Config>
 8006b80:	4603      	mov	r3, r0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3708      	adds	r7, #8
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
	...

08006b8c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b086      	sub	sp, #24
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006b94:	f7fe fe20 	bl	80057d8 <HAL_GetTick>
 8006b98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d101      	bne.n	8006ba4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e316      	b.n	80071d2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a66      	ldr	r2, [pc, #408]	; (8006d44 <HAL_DMA_Init+0x1b8>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d04a      	beq.n	8006c44 <HAL_DMA_Init+0xb8>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a65      	ldr	r2, [pc, #404]	; (8006d48 <HAL_DMA_Init+0x1bc>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d045      	beq.n	8006c44 <HAL_DMA_Init+0xb8>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a63      	ldr	r2, [pc, #396]	; (8006d4c <HAL_DMA_Init+0x1c0>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d040      	beq.n	8006c44 <HAL_DMA_Init+0xb8>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a62      	ldr	r2, [pc, #392]	; (8006d50 <HAL_DMA_Init+0x1c4>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d03b      	beq.n	8006c44 <HAL_DMA_Init+0xb8>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a60      	ldr	r2, [pc, #384]	; (8006d54 <HAL_DMA_Init+0x1c8>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d036      	beq.n	8006c44 <HAL_DMA_Init+0xb8>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a5f      	ldr	r2, [pc, #380]	; (8006d58 <HAL_DMA_Init+0x1cc>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d031      	beq.n	8006c44 <HAL_DMA_Init+0xb8>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a5d      	ldr	r2, [pc, #372]	; (8006d5c <HAL_DMA_Init+0x1d0>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d02c      	beq.n	8006c44 <HAL_DMA_Init+0xb8>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a5c      	ldr	r2, [pc, #368]	; (8006d60 <HAL_DMA_Init+0x1d4>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d027      	beq.n	8006c44 <HAL_DMA_Init+0xb8>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a5a      	ldr	r2, [pc, #360]	; (8006d64 <HAL_DMA_Init+0x1d8>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d022      	beq.n	8006c44 <HAL_DMA_Init+0xb8>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a59      	ldr	r2, [pc, #356]	; (8006d68 <HAL_DMA_Init+0x1dc>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d01d      	beq.n	8006c44 <HAL_DMA_Init+0xb8>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a57      	ldr	r2, [pc, #348]	; (8006d6c <HAL_DMA_Init+0x1e0>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d018      	beq.n	8006c44 <HAL_DMA_Init+0xb8>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a56      	ldr	r2, [pc, #344]	; (8006d70 <HAL_DMA_Init+0x1e4>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d013      	beq.n	8006c44 <HAL_DMA_Init+0xb8>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a54      	ldr	r2, [pc, #336]	; (8006d74 <HAL_DMA_Init+0x1e8>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d00e      	beq.n	8006c44 <HAL_DMA_Init+0xb8>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a53      	ldr	r2, [pc, #332]	; (8006d78 <HAL_DMA_Init+0x1ec>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d009      	beq.n	8006c44 <HAL_DMA_Init+0xb8>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a51      	ldr	r2, [pc, #324]	; (8006d7c <HAL_DMA_Init+0x1f0>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d004      	beq.n	8006c44 <HAL_DMA_Init+0xb8>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a50      	ldr	r2, [pc, #320]	; (8006d80 <HAL_DMA_Init+0x1f4>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d101      	bne.n	8006c48 <HAL_DMA_Init+0xbc>
 8006c44:	2301      	movs	r3, #1
 8006c46:	e000      	b.n	8006c4a <HAL_DMA_Init+0xbe>
 8006c48:	2300      	movs	r3, #0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	f000 813b 	beq.w	8006ec6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2202      	movs	r2, #2
 8006c54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a37      	ldr	r2, [pc, #220]	; (8006d44 <HAL_DMA_Init+0x1b8>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d04a      	beq.n	8006d00 <HAL_DMA_Init+0x174>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a36      	ldr	r2, [pc, #216]	; (8006d48 <HAL_DMA_Init+0x1bc>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d045      	beq.n	8006d00 <HAL_DMA_Init+0x174>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a34      	ldr	r2, [pc, #208]	; (8006d4c <HAL_DMA_Init+0x1c0>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d040      	beq.n	8006d00 <HAL_DMA_Init+0x174>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a33      	ldr	r2, [pc, #204]	; (8006d50 <HAL_DMA_Init+0x1c4>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d03b      	beq.n	8006d00 <HAL_DMA_Init+0x174>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a31      	ldr	r2, [pc, #196]	; (8006d54 <HAL_DMA_Init+0x1c8>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d036      	beq.n	8006d00 <HAL_DMA_Init+0x174>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a30      	ldr	r2, [pc, #192]	; (8006d58 <HAL_DMA_Init+0x1cc>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d031      	beq.n	8006d00 <HAL_DMA_Init+0x174>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a2e      	ldr	r2, [pc, #184]	; (8006d5c <HAL_DMA_Init+0x1d0>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d02c      	beq.n	8006d00 <HAL_DMA_Init+0x174>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a2d      	ldr	r2, [pc, #180]	; (8006d60 <HAL_DMA_Init+0x1d4>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d027      	beq.n	8006d00 <HAL_DMA_Init+0x174>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a2b      	ldr	r2, [pc, #172]	; (8006d64 <HAL_DMA_Init+0x1d8>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d022      	beq.n	8006d00 <HAL_DMA_Init+0x174>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a2a      	ldr	r2, [pc, #168]	; (8006d68 <HAL_DMA_Init+0x1dc>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d01d      	beq.n	8006d00 <HAL_DMA_Init+0x174>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a28      	ldr	r2, [pc, #160]	; (8006d6c <HAL_DMA_Init+0x1e0>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d018      	beq.n	8006d00 <HAL_DMA_Init+0x174>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a27      	ldr	r2, [pc, #156]	; (8006d70 <HAL_DMA_Init+0x1e4>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d013      	beq.n	8006d00 <HAL_DMA_Init+0x174>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a25      	ldr	r2, [pc, #148]	; (8006d74 <HAL_DMA_Init+0x1e8>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d00e      	beq.n	8006d00 <HAL_DMA_Init+0x174>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a24      	ldr	r2, [pc, #144]	; (8006d78 <HAL_DMA_Init+0x1ec>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d009      	beq.n	8006d00 <HAL_DMA_Init+0x174>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a22      	ldr	r2, [pc, #136]	; (8006d7c <HAL_DMA_Init+0x1f0>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d004      	beq.n	8006d00 <HAL_DMA_Init+0x174>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a21      	ldr	r2, [pc, #132]	; (8006d80 <HAL_DMA_Init+0x1f4>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d108      	bne.n	8006d12 <HAL_DMA_Init+0x186>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f022 0201 	bic.w	r2, r2, #1
 8006d0e:	601a      	str	r2, [r3, #0]
 8006d10:	e007      	b.n	8006d22 <HAL_DMA_Init+0x196>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f022 0201 	bic.w	r2, r2, #1
 8006d20:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006d22:	e02f      	b.n	8006d84 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006d24:	f7fe fd58 	bl	80057d8 <HAL_GetTick>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	1ad3      	subs	r3, r2, r3
 8006d2e:	2b05      	cmp	r3, #5
 8006d30:	d928      	bls.n	8006d84 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2220      	movs	r2, #32
 8006d36:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2203      	movs	r2, #3
 8006d3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e246      	b.n	80071d2 <HAL_DMA_Init+0x646>
 8006d44:	40020010 	.word	0x40020010
 8006d48:	40020028 	.word	0x40020028
 8006d4c:	40020040 	.word	0x40020040
 8006d50:	40020058 	.word	0x40020058
 8006d54:	40020070 	.word	0x40020070
 8006d58:	40020088 	.word	0x40020088
 8006d5c:	400200a0 	.word	0x400200a0
 8006d60:	400200b8 	.word	0x400200b8
 8006d64:	40020410 	.word	0x40020410
 8006d68:	40020428 	.word	0x40020428
 8006d6c:	40020440 	.word	0x40020440
 8006d70:	40020458 	.word	0x40020458
 8006d74:	40020470 	.word	0x40020470
 8006d78:	40020488 	.word	0x40020488
 8006d7c:	400204a0 	.word	0x400204a0
 8006d80:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 0301 	and.w	r3, r3, #1
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d1c8      	bne.n	8006d24 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006d9a:	697a      	ldr	r2, [r7, #20]
 8006d9c:	4b83      	ldr	r3, [pc, #524]	; (8006fac <HAL_DMA_Init+0x420>)
 8006d9e:	4013      	ands	r3, r2
 8006da0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8006daa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	691b      	ldr	r3, [r3, #16]
 8006db0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006db6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	699b      	ldr	r3, [r3, #24]
 8006dbc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006dc2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6a1b      	ldr	r3, [r3, #32]
 8006dc8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006dca:	697a      	ldr	r2, [r7, #20]
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd4:	2b04      	cmp	r3, #4
 8006dd6:	d107      	bne.n	8006de8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006de0:	4313      	orrs	r3, r2
 8006de2:	697a      	ldr	r2, [r7, #20]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8006de8:	4b71      	ldr	r3, [pc, #452]	; (8006fb0 <HAL_DMA_Init+0x424>)
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	4b71      	ldr	r3, [pc, #452]	; (8006fb4 <HAL_DMA_Init+0x428>)
 8006dee:	4013      	ands	r3, r2
 8006df0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006df4:	d328      	bcc.n	8006e48 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	2b28      	cmp	r3, #40	; 0x28
 8006dfc:	d903      	bls.n	8006e06 <HAL_DMA_Init+0x27a>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	2b2e      	cmp	r3, #46	; 0x2e
 8006e04:	d917      	bls.n	8006e36 <HAL_DMA_Init+0x2aa>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	2b3e      	cmp	r3, #62	; 0x3e
 8006e0c:	d903      	bls.n	8006e16 <HAL_DMA_Init+0x28a>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	2b42      	cmp	r3, #66	; 0x42
 8006e14:	d90f      	bls.n	8006e36 <HAL_DMA_Init+0x2aa>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	2b46      	cmp	r3, #70	; 0x46
 8006e1c:	d903      	bls.n	8006e26 <HAL_DMA_Init+0x29a>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	2b48      	cmp	r3, #72	; 0x48
 8006e24:	d907      	bls.n	8006e36 <HAL_DMA_Init+0x2aa>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	2b4e      	cmp	r3, #78	; 0x4e
 8006e2c:	d905      	bls.n	8006e3a <HAL_DMA_Init+0x2ae>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	2b52      	cmp	r3, #82	; 0x52
 8006e34:	d801      	bhi.n	8006e3a <HAL_DMA_Init+0x2ae>
 8006e36:	2301      	movs	r3, #1
 8006e38:	e000      	b.n	8006e3c <HAL_DMA_Init+0x2b0>
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d003      	beq.n	8006e48 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e46:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	697a      	ldr	r2, [r7, #20]
 8006e4e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	695b      	ldr	r3, [r3, #20]
 8006e56:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	f023 0307 	bic.w	r3, r3, #7
 8006e5e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e64:	697a      	ldr	r2, [r7, #20]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6e:	2b04      	cmp	r3, #4
 8006e70:	d117      	bne.n	8006ea2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e76:	697a      	ldr	r2, [r7, #20]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d00e      	beq.n	8006ea2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f002 fb33 	bl	80094f0 <DMA_CheckFifoParam>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d008      	beq.n	8006ea2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2240      	movs	r2, #64	; 0x40
 8006e94:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e197      	b.n	80071d2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	697a      	ldr	r2, [r7, #20]
 8006ea8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f002 fa6e 	bl	800938c <DMA_CalcBaseAndBitshift>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eb8:	f003 031f 	and.w	r3, r3, #31
 8006ebc:	223f      	movs	r2, #63	; 0x3f
 8006ebe:	409a      	lsls	r2, r3
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	609a      	str	r2, [r3, #8]
 8006ec4:	e0cd      	b.n	8007062 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a3b      	ldr	r2, [pc, #236]	; (8006fb8 <HAL_DMA_Init+0x42c>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d022      	beq.n	8006f16 <HAL_DMA_Init+0x38a>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a39      	ldr	r2, [pc, #228]	; (8006fbc <HAL_DMA_Init+0x430>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d01d      	beq.n	8006f16 <HAL_DMA_Init+0x38a>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a38      	ldr	r2, [pc, #224]	; (8006fc0 <HAL_DMA_Init+0x434>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d018      	beq.n	8006f16 <HAL_DMA_Init+0x38a>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a36      	ldr	r2, [pc, #216]	; (8006fc4 <HAL_DMA_Init+0x438>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d013      	beq.n	8006f16 <HAL_DMA_Init+0x38a>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a35      	ldr	r2, [pc, #212]	; (8006fc8 <HAL_DMA_Init+0x43c>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d00e      	beq.n	8006f16 <HAL_DMA_Init+0x38a>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a33      	ldr	r2, [pc, #204]	; (8006fcc <HAL_DMA_Init+0x440>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d009      	beq.n	8006f16 <HAL_DMA_Init+0x38a>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a32      	ldr	r2, [pc, #200]	; (8006fd0 <HAL_DMA_Init+0x444>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d004      	beq.n	8006f16 <HAL_DMA_Init+0x38a>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a30      	ldr	r2, [pc, #192]	; (8006fd4 <HAL_DMA_Init+0x448>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d101      	bne.n	8006f1a <HAL_DMA_Init+0x38e>
 8006f16:	2301      	movs	r3, #1
 8006f18:	e000      	b.n	8006f1c <HAL_DMA_Init+0x390>
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f000 8097 	beq.w	8007050 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a24      	ldr	r2, [pc, #144]	; (8006fb8 <HAL_DMA_Init+0x42c>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d021      	beq.n	8006f70 <HAL_DMA_Init+0x3e4>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a22      	ldr	r2, [pc, #136]	; (8006fbc <HAL_DMA_Init+0x430>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d01c      	beq.n	8006f70 <HAL_DMA_Init+0x3e4>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a21      	ldr	r2, [pc, #132]	; (8006fc0 <HAL_DMA_Init+0x434>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d017      	beq.n	8006f70 <HAL_DMA_Init+0x3e4>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a1f      	ldr	r2, [pc, #124]	; (8006fc4 <HAL_DMA_Init+0x438>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d012      	beq.n	8006f70 <HAL_DMA_Init+0x3e4>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a1e      	ldr	r2, [pc, #120]	; (8006fc8 <HAL_DMA_Init+0x43c>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d00d      	beq.n	8006f70 <HAL_DMA_Init+0x3e4>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a1c      	ldr	r2, [pc, #112]	; (8006fcc <HAL_DMA_Init+0x440>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d008      	beq.n	8006f70 <HAL_DMA_Init+0x3e4>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a1b      	ldr	r2, [pc, #108]	; (8006fd0 <HAL_DMA_Init+0x444>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d003      	beq.n	8006f70 <HAL_DMA_Init+0x3e4>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a19      	ldr	r2, [pc, #100]	; (8006fd4 <HAL_DMA_Init+0x448>)
 8006f6e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2202      	movs	r2, #2
 8006f74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006f88:	697a      	ldr	r2, [r7, #20]
 8006f8a:	4b13      	ldr	r3, [pc, #76]	; (8006fd8 <HAL_DMA_Init+0x44c>)
 8006f8c:	4013      	ands	r3, r2
 8006f8e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	2b40      	cmp	r3, #64	; 0x40
 8006f96:	d021      	beq.n	8006fdc <HAL_DMA_Init+0x450>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	2b80      	cmp	r3, #128	; 0x80
 8006f9e:	d102      	bne.n	8006fa6 <HAL_DMA_Init+0x41a>
 8006fa0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006fa4:	e01b      	b.n	8006fde <HAL_DMA_Init+0x452>
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	e019      	b.n	8006fde <HAL_DMA_Init+0x452>
 8006faa:	bf00      	nop
 8006fac:	fe10803f 	.word	0xfe10803f
 8006fb0:	5c001000 	.word	0x5c001000
 8006fb4:	ffff0000 	.word	0xffff0000
 8006fb8:	58025408 	.word	0x58025408
 8006fbc:	5802541c 	.word	0x5802541c
 8006fc0:	58025430 	.word	0x58025430
 8006fc4:	58025444 	.word	0x58025444
 8006fc8:	58025458 	.word	0x58025458
 8006fcc:	5802546c 	.word	0x5802546c
 8006fd0:	58025480 	.word	0x58025480
 8006fd4:	58025494 	.word	0x58025494
 8006fd8:	fffe000f 	.word	0xfffe000f
 8006fdc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	68d2      	ldr	r2, [r2, #12]
 8006fe2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006fe4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006fec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	695b      	ldr	r3, [r3, #20]
 8006ff2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006ff4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	699b      	ldr	r3, [r3, #24]
 8006ffa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006ffc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	69db      	ldr	r3, [r3, #28]
 8007002:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007004:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6a1b      	ldr	r3, [r3, #32]
 800700a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800700c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800700e:	697a      	ldr	r2, [r7, #20]
 8007010:	4313      	orrs	r3, r2
 8007012:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	697a      	ldr	r2, [r7, #20]
 800701a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	461a      	mov	r2, r3
 8007022:	4b6e      	ldr	r3, [pc, #440]	; (80071dc <HAL_DMA_Init+0x650>)
 8007024:	4413      	add	r3, r2
 8007026:	4a6e      	ldr	r2, [pc, #440]	; (80071e0 <HAL_DMA_Init+0x654>)
 8007028:	fba2 2303 	umull	r2, r3, r2, r3
 800702c:	091b      	lsrs	r3, r3, #4
 800702e:	009a      	lsls	r2, r3, #2
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f002 f9a9 	bl	800938c <DMA_CalcBaseAndBitshift>
 800703a:	4603      	mov	r3, r0
 800703c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007042:	f003 031f 	and.w	r3, r3, #31
 8007046:	2201      	movs	r2, #1
 8007048:	409a      	lsls	r2, r3
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	605a      	str	r2, [r3, #4]
 800704e:	e008      	b.n	8007062 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2240      	movs	r2, #64	; 0x40
 8007054:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2203      	movs	r2, #3
 800705a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	e0b7      	b.n	80071d2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a5f      	ldr	r2, [pc, #380]	; (80071e4 <HAL_DMA_Init+0x658>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d072      	beq.n	8007152 <HAL_DMA_Init+0x5c6>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a5d      	ldr	r2, [pc, #372]	; (80071e8 <HAL_DMA_Init+0x65c>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d06d      	beq.n	8007152 <HAL_DMA_Init+0x5c6>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a5c      	ldr	r2, [pc, #368]	; (80071ec <HAL_DMA_Init+0x660>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d068      	beq.n	8007152 <HAL_DMA_Init+0x5c6>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a5a      	ldr	r2, [pc, #360]	; (80071f0 <HAL_DMA_Init+0x664>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d063      	beq.n	8007152 <HAL_DMA_Init+0x5c6>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a59      	ldr	r2, [pc, #356]	; (80071f4 <HAL_DMA_Init+0x668>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d05e      	beq.n	8007152 <HAL_DMA_Init+0x5c6>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a57      	ldr	r2, [pc, #348]	; (80071f8 <HAL_DMA_Init+0x66c>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d059      	beq.n	8007152 <HAL_DMA_Init+0x5c6>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a56      	ldr	r2, [pc, #344]	; (80071fc <HAL_DMA_Init+0x670>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d054      	beq.n	8007152 <HAL_DMA_Init+0x5c6>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a54      	ldr	r2, [pc, #336]	; (8007200 <HAL_DMA_Init+0x674>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d04f      	beq.n	8007152 <HAL_DMA_Init+0x5c6>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a53      	ldr	r2, [pc, #332]	; (8007204 <HAL_DMA_Init+0x678>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d04a      	beq.n	8007152 <HAL_DMA_Init+0x5c6>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a51      	ldr	r2, [pc, #324]	; (8007208 <HAL_DMA_Init+0x67c>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d045      	beq.n	8007152 <HAL_DMA_Init+0x5c6>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a50      	ldr	r2, [pc, #320]	; (800720c <HAL_DMA_Init+0x680>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d040      	beq.n	8007152 <HAL_DMA_Init+0x5c6>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a4e      	ldr	r2, [pc, #312]	; (8007210 <HAL_DMA_Init+0x684>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d03b      	beq.n	8007152 <HAL_DMA_Init+0x5c6>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a4d      	ldr	r2, [pc, #308]	; (8007214 <HAL_DMA_Init+0x688>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d036      	beq.n	8007152 <HAL_DMA_Init+0x5c6>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a4b      	ldr	r2, [pc, #300]	; (8007218 <HAL_DMA_Init+0x68c>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d031      	beq.n	8007152 <HAL_DMA_Init+0x5c6>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a4a      	ldr	r2, [pc, #296]	; (800721c <HAL_DMA_Init+0x690>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d02c      	beq.n	8007152 <HAL_DMA_Init+0x5c6>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a48      	ldr	r2, [pc, #288]	; (8007220 <HAL_DMA_Init+0x694>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d027      	beq.n	8007152 <HAL_DMA_Init+0x5c6>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a47      	ldr	r2, [pc, #284]	; (8007224 <HAL_DMA_Init+0x698>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d022      	beq.n	8007152 <HAL_DMA_Init+0x5c6>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a45      	ldr	r2, [pc, #276]	; (8007228 <HAL_DMA_Init+0x69c>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d01d      	beq.n	8007152 <HAL_DMA_Init+0x5c6>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a44      	ldr	r2, [pc, #272]	; (800722c <HAL_DMA_Init+0x6a0>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d018      	beq.n	8007152 <HAL_DMA_Init+0x5c6>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a42      	ldr	r2, [pc, #264]	; (8007230 <HAL_DMA_Init+0x6a4>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d013      	beq.n	8007152 <HAL_DMA_Init+0x5c6>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a41      	ldr	r2, [pc, #260]	; (8007234 <HAL_DMA_Init+0x6a8>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d00e      	beq.n	8007152 <HAL_DMA_Init+0x5c6>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a3f      	ldr	r2, [pc, #252]	; (8007238 <HAL_DMA_Init+0x6ac>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d009      	beq.n	8007152 <HAL_DMA_Init+0x5c6>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a3e      	ldr	r2, [pc, #248]	; (800723c <HAL_DMA_Init+0x6b0>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d004      	beq.n	8007152 <HAL_DMA_Init+0x5c6>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a3c      	ldr	r2, [pc, #240]	; (8007240 <HAL_DMA_Init+0x6b4>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d101      	bne.n	8007156 <HAL_DMA_Init+0x5ca>
 8007152:	2301      	movs	r3, #1
 8007154:	e000      	b.n	8007158 <HAL_DMA_Init+0x5cc>
 8007156:	2300      	movs	r3, #0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d032      	beq.n	80071c2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f002 fa43 	bl	80095e8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	2b80      	cmp	r3, #128	; 0x80
 8007168:	d102      	bne.n	8007170 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	685a      	ldr	r2, [r3, #4]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007178:	b2d2      	uxtb	r2, r2
 800717a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007184:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d010      	beq.n	80071b0 <HAL_DMA_Init+0x624>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	2b08      	cmp	r3, #8
 8007194:	d80c      	bhi.n	80071b0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f002 fac0 	bl	800971c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071a0:	2200      	movs	r2, #0
 80071a2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80071ac:	605a      	str	r2, [r3, #4]
 80071ae:	e008      	b.n	80071c2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2201      	movs	r2, #1
 80071cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3718      	adds	r7, #24
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	a7fdabf8 	.word	0xa7fdabf8
 80071e0:	cccccccd 	.word	0xcccccccd
 80071e4:	40020010 	.word	0x40020010
 80071e8:	40020028 	.word	0x40020028
 80071ec:	40020040 	.word	0x40020040
 80071f0:	40020058 	.word	0x40020058
 80071f4:	40020070 	.word	0x40020070
 80071f8:	40020088 	.word	0x40020088
 80071fc:	400200a0 	.word	0x400200a0
 8007200:	400200b8 	.word	0x400200b8
 8007204:	40020410 	.word	0x40020410
 8007208:	40020428 	.word	0x40020428
 800720c:	40020440 	.word	0x40020440
 8007210:	40020458 	.word	0x40020458
 8007214:	40020470 	.word	0x40020470
 8007218:	40020488 	.word	0x40020488
 800721c:	400204a0 	.word	0x400204a0
 8007220:	400204b8 	.word	0x400204b8
 8007224:	58025408 	.word	0x58025408
 8007228:	5802541c 	.word	0x5802541c
 800722c:	58025430 	.word	0x58025430
 8007230:	58025444 	.word	0x58025444
 8007234:	58025458 	.word	0x58025458
 8007238:	5802546c 	.word	0x5802546c
 800723c:	58025480 	.word	0x58025480
 8007240:	58025494 	.word	0x58025494

08007244 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b086      	sub	sp, #24
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	607a      	str	r2, [r7, #4]
 8007250:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007252:	2300      	movs	r3, #0
 8007254:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d101      	bne.n	8007260 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	e226      	b.n	80076ae <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007266:	2b01      	cmp	r3, #1
 8007268:	d101      	bne.n	800726e <HAL_DMA_Start_IT+0x2a>
 800726a:	2302      	movs	r3, #2
 800726c:	e21f      	b.n	80076ae <HAL_DMA_Start_IT+0x46a>
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2201      	movs	r2, #1
 8007272:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800727c:	b2db      	uxtb	r3, r3
 800727e:	2b01      	cmp	r3, #1
 8007280:	f040 820a 	bne.w	8007698 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2202      	movs	r2, #2
 8007288:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2200      	movs	r2, #0
 8007290:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a68      	ldr	r2, [pc, #416]	; (8007438 <HAL_DMA_Start_IT+0x1f4>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d04a      	beq.n	8007332 <HAL_DMA_Start_IT+0xee>
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a66      	ldr	r2, [pc, #408]	; (800743c <HAL_DMA_Start_IT+0x1f8>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d045      	beq.n	8007332 <HAL_DMA_Start_IT+0xee>
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a65      	ldr	r2, [pc, #404]	; (8007440 <HAL_DMA_Start_IT+0x1fc>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d040      	beq.n	8007332 <HAL_DMA_Start_IT+0xee>
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a63      	ldr	r2, [pc, #396]	; (8007444 <HAL_DMA_Start_IT+0x200>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d03b      	beq.n	8007332 <HAL_DMA_Start_IT+0xee>
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a62      	ldr	r2, [pc, #392]	; (8007448 <HAL_DMA_Start_IT+0x204>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d036      	beq.n	8007332 <HAL_DMA_Start_IT+0xee>
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a60      	ldr	r2, [pc, #384]	; (800744c <HAL_DMA_Start_IT+0x208>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d031      	beq.n	8007332 <HAL_DMA_Start_IT+0xee>
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a5f      	ldr	r2, [pc, #380]	; (8007450 <HAL_DMA_Start_IT+0x20c>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d02c      	beq.n	8007332 <HAL_DMA_Start_IT+0xee>
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a5d      	ldr	r2, [pc, #372]	; (8007454 <HAL_DMA_Start_IT+0x210>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d027      	beq.n	8007332 <HAL_DMA_Start_IT+0xee>
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a5c      	ldr	r2, [pc, #368]	; (8007458 <HAL_DMA_Start_IT+0x214>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d022      	beq.n	8007332 <HAL_DMA_Start_IT+0xee>
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a5a      	ldr	r2, [pc, #360]	; (800745c <HAL_DMA_Start_IT+0x218>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d01d      	beq.n	8007332 <HAL_DMA_Start_IT+0xee>
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a59      	ldr	r2, [pc, #356]	; (8007460 <HAL_DMA_Start_IT+0x21c>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d018      	beq.n	8007332 <HAL_DMA_Start_IT+0xee>
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a57      	ldr	r2, [pc, #348]	; (8007464 <HAL_DMA_Start_IT+0x220>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d013      	beq.n	8007332 <HAL_DMA_Start_IT+0xee>
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a56      	ldr	r2, [pc, #344]	; (8007468 <HAL_DMA_Start_IT+0x224>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d00e      	beq.n	8007332 <HAL_DMA_Start_IT+0xee>
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a54      	ldr	r2, [pc, #336]	; (800746c <HAL_DMA_Start_IT+0x228>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d009      	beq.n	8007332 <HAL_DMA_Start_IT+0xee>
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a53      	ldr	r2, [pc, #332]	; (8007470 <HAL_DMA_Start_IT+0x22c>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d004      	beq.n	8007332 <HAL_DMA_Start_IT+0xee>
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a51      	ldr	r2, [pc, #324]	; (8007474 <HAL_DMA_Start_IT+0x230>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d108      	bne.n	8007344 <HAL_DMA_Start_IT+0x100>
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f022 0201 	bic.w	r2, r2, #1
 8007340:	601a      	str	r2, [r3, #0]
 8007342:	e007      	b.n	8007354 <HAL_DMA_Start_IT+0x110>
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f022 0201 	bic.w	r2, r2, #1
 8007352:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	68b9      	ldr	r1, [r7, #8]
 800735a:	68f8      	ldr	r0, [r7, #12]
 800735c:	f001 fe6a 	bl	8009034 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a34      	ldr	r2, [pc, #208]	; (8007438 <HAL_DMA_Start_IT+0x1f4>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d04a      	beq.n	8007400 <HAL_DMA_Start_IT+0x1bc>
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a33      	ldr	r2, [pc, #204]	; (800743c <HAL_DMA_Start_IT+0x1f8>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d045      	beq.n	8007400 <HAL_DMA_Start_IT+0x1bc>
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a31      	ldr	r2, [pc, #196]	; (8007440 <HAL_DMA_Start_IT+0x1fc>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d040      	beq.n	8007400 <HAL_DMA_Start_IT+0x1bc>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a30      	ldr	r2, [pc, #192]	; (8007444 <HAL_DMA_Start_IT+0x200>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d03b      	beq.n	8007400 <HAL_DMA_Start_IT+0x1bc>
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a2e      	ldr	r2, [pc, #184]	; (8007448 <HAL_DMA_Start_IT+0x204>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d036      	beq.n	8007400 <HAL_DMA_Start_IT+0x1bc>
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a2d      	ldr	r2, [pc, #180]	; (800744c <HAL_DMA_Start_IT+0x208>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d031      	beq.n	8007400 <HAL_DMA_Start_IT+0x1bc>
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a2b      	ldr	r2, [pc, #172]	; (8007450 <HAL_DMA_Start_IT+0x20c>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d02c      	beq.n	8007400 <HAL_DMA_Start_IT+0x1bc>
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a2a      	ldr	r2, [pc, #168]	; (8007454 <HAL_DMA_Start_IT+0x210>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d027      	beq.n	8007400 <HAL_DMA_Start_IT+0x1bc>
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a28      	ldr	r2, [pc, #160]	; (8007458 <HAL_DMA_Start_IT+0x214>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d022      	beq.n	8007400 <HAL_DMA_Start_IT+0x1bc>
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a27      	ldr	r2, [pc, #156]	; (800745c <HAL_DMA_Start_IT+0x218>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d01d      	beq.n	8007400 <HAL_DMA_Start_IT+0x1bc>
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a25      	ldr	r2, [pc, #148]	; (8007460 <HAL_DMA_Start_IT+0x21c>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d018      	beq.n	8007400 <HAL_DMA_Start_IT+0x1bc>
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a24      	ldr	r2, [pc, #144]	; (8007464 <HAL_DMA_Start_IT+0x220>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d013      	beq.n	8007400 <HAL_DMA_Start_IT+0x1bc>
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a22      	ldr	r2, [pc, #136]	; (8007468 <HAL_DMA_Start_IT+0x224>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d00e      	beq.n	8007400 <HAL_DMA_Start_IT+0x1bc>
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a21      	ldr	r2, [pc, #132]	; (800746c <HAL_DMA_Start_IT+0x228>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d009      	beq.n	8007400 <HAL_DMA_Start_IT+0x1bc>
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a1f      	ldr	r2, [pc, #124]	; (8007470 <HAL_DMA_Start_IT+0x22c>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d004      	beq.n	8007400 <HAL_DMA_Start_IT+0x1bc>
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a1e      	ldr	r2, [pc, #120]	; (8007474 <HAL_DMA_Start_IT+0x230>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d101      	bne.n	8007404 <HAL_DMA_Start_IT+0x1c0>
 8007400:	2301      	movs	r3, #1
 8007402:	e000      	b.n	8007406 <HAL_DMA_Start_IT+0x1c2>
 8007404:	2300      	movs	r3, #0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d036      	beq.n	8007478 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f023 021e 	bic.w	r2, r3, #30
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f042 0216 	orr.w	r2, r2, #22
 800741c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007422:	2b00      	cmp	r3, #0
 8007424:	d03e      	beq.n	80074a4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f042 0208 	orr.w	r2, r2, #8
 8007434:	601a      	str	r2, [r3, #0]
 8007436:	e035      	b.n	80074a4 <HAL_DMA_Start_IT+0x260>
 8007438:	40020010 	.word	0x40020010
 800743c:	40020028 	.word	0x40020028
 8007440:	40020040 	.word	0x40020040
 8007444:	40020058 	.word	0x40020058
 8007448:	40020070 	.word	0x40020070
 800744c:	40020088 	.word	0x40020088
 8007450:	400200a0 	.word	0x400200a0
 8007454:	400200b8 	.word	0x400200b8
 8007458:	40020410 	.word	0x40020410
 800745c:	40020428 	.word	0x40020428
 8007460:	40020440 	.word	0x40020440
 8007464:	40020458 	.word	0x40020458
 8007468:	40020470 	.word	0x40020470
 800746c:	40020488 	.word	0x40020488
 8007470:	400204a0 	.word	0x400204a0
 8007474:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f023 020e 	bic.w	r2, r3, #14
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f042 020a 	orr.w	r2, r2, #10
 800748a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007490:	2b00      	cmp	r3, #0
 8007492:	d007      	beq.n	80074a4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f042 0204 	orr.w	r2, r2, #4
 80074a2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a83      	ldr	r2, [pc, #524]	; (80076b8 <HAL_DMA_Start_IT+0x474>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d072      	beq.n	8007594 <HAL_DMA_Start_IT+0x350>
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a82      	ldr	r2, [pc, #520]	; (80076bc <HAL_DMA_Start_IT+0x478>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d06d      	beq.n	8007594 <HAL_DMA_Start_IT+0x350>
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a80      	ldr	r2, [pc, #512]	; (80076c0 <HAL_DMA_Start_IT+0x47c>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d068      	beq.n	8007594 <HAL_DMA_Start_IT+0x350>
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a7f      	ldr	r2, [pc, #508]	; (80076c4 <HAL_DMA_Start_IT+0x480>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d063      	beq.n	8007594 <HAL_DMA_Start_IT+0x350>
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a7d      	ldr	r2, [pc, #500]	; (80076c8 <HAL_DMA_Start_IT+0x484>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d05e      	beq.n	8007594 <HAL_DMA_Start_IT+0x350>
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a7c      	ldr	r2, [pc, #496]	; (80076cc <HAL_DMA_Start_IT+0x488>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d059      	beq.n	8007594 <HAL_DMA_Start_IT+0x350>
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a7a      	ldr	r2, [pc, #488]	; (80076d0 <HAL_DMA_Start_IT+0x48c>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d054      	beq.n	8007594 <HAL_DMA_Start_IT+0x350>
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a79      	ldr	r2, [pc, #484]	; (80076d4 <HAL_DMA_Start_IT+0x490>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d04f      	beq.n	8007594 <HAL_DMA_Start_IT+0x350>
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a77      	ldr	r2, [pc, #476]	; (80076d8 <HAL_DMA_Start_IT+0x494>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d04a      	beq.n	8007594 <HAL_DMA_Start_IT+0x350>
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a76      	ldr	r2, [pc, #472]	; (80076dc <HAL_DMA_Start_IT+0x498>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d045      	beq.n	8007594 <HAL_DMA_Start_IT+0x350>
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a74      	ldr	r2, [pc, #464]	; (80076e0 <HAL_DMA_Start_IT+0x49c>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d040      	beq.n	8007594 <HAL_DMA_Start_IT+0x350>
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a73      	ldr	r2, [pc, #460]	; (80076e4 <HAL_DMA_Start_IT+0x4a0>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d03b      	beq.n	8007594 <HAL_DMA_Start_IT+0x350>
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a71      	ldr	r2, [pc, #452]	; (80076e8 <HAL_DMA_Start_IT+0x4a4>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d036      	beq.n	8007594 <HAL_DMA_Start_IT+0x350>
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a70      	ldr	r2, [pc, #448]	; (80076ec <HAL_DMA_Start_IT+0x4a8>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d031      	beq.n	8007594 <HAL_DMA_Start_IT+0x350>
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a6e      	ldr	r2, [pc, #440]	; (80076f0 <HAL_DMA_Start_IT+0x4ac>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d02c      	beq.n	8007594 <HAL_DMA_Start_IT+0x350>
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a6d      	ldr	r2, [pc, #436]	; (80076f4 <HAL_DMA_Start_IT+0x4b0>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d027      	beq.n	8007594 <HAL_DMA_Start_IT+0x350>
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a6b      	ldr	r2, [pc, #428]	; (80076f8 <HAL_DMA_Start_IT+0x4b4>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d022      	beq.n	8007594 <HAL_DMA_Start_IT+0x350>
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a6a      	ldr	r2, [pc, #424]	; (80076fc <HAL_DMA_Start_IT+0x4b8>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d01d      	beq.n	8007594 <HAL_DMA_Start_IT+0x350>
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a68      	ldr	r2, [pc, #416]	; (8007700 <HAL_DMA_Start_IT+0x4bc>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d018      	beq.n	8007594 <HAL_DMA_Start_IT+0x350>
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a67      	ldr	r2, [pc, #412]	; (8007704 <HAL_DMA_Start_IT+0x4c0>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d013      	beq.n	8007594 <HAL_DMA_Start_IT+0x350>
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a65      	ldr	r2, [pc, #404]	; (8007708 <HAL_DMA_Start_IT+0x4c4>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d00e      	beq.n	8007594 <HAL_DMA_Start_IT+0x350>
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a64      	ldr	r2, [pc, #400]	; (800770c <HAL_DMA_Start_IT+0x4c8>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d009      	beq.n	8007594 <HAL_DMA_Start_IT+0x350>
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a62      	ldr	r2, [pc, #392]	; (8007710 <HAL_DMA_Start_IT+0x4cc>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d004      	beq.n	8007594 <HAL_DMA_Start_IT+0x350>
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a61      	ldr	r2, [pc, #388]	; (8007714 <HAL_DMA_Start_IT+0x4d0>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d101      	bne.n	8007598 <HAL_DMA_Start_IT+0x354>
 8007594:	2301      	movs	r3, #1
 8007596:	e000      	b.n	800759a <HAL_DMA_Start_IT+0x356>
 8007598:	2300      	movs	r3, #0
 800759a:	2b00      	cmp	r3, #0
 800759c:	d01a      	beq.n	80075d4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d007      	beq.n	80075bc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80075ba:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d007      	beq.n	80075d4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80075d2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a37      	ldr	r2, [pc, #220]	; (80076b8 <HAL_DMA_Start_IT+0x474>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d04a      	beq.n	8007674 <HAL_DMA_Start_IT+0x430>
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a36      	ldr	r2, [pc, #216]	; (80076bc <HAL_DMA_Start_IT+0x478>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d045      	beq.n	8007674 <HAL_DMA_Start_IT+0x430>
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a34      	ldr	r2, [pc, #208]	; (80076c0 <HAL_DMA_Start_IT+0x47c>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d040      	beq.n	8007674 <HAL_DMA_Start_IT+0x430>
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a33      	ldr	r2, [pc, #204]	; (80076c4 <HAL_DMA_Start_IT+0x480>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d03b      	beq.n	8007674 <HAL_DMA_Start_IT+0x430>
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a31      	ldr	r2, [pc, #196]	; (80076c8 <HAL_DMA_Start_IT+0x484>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d036      	beq.n	8007674 <HAL_DMA_Start_IT+0x430>
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a30      	ldr	r2, [pc, #192]	; (80076cc <HAL_DMA_Start_IT+0x488>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d031      	beq.n	8007674 <HAL_DMA_Start_IT+0x430>
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a2e      	ldr	r2, [pc, #184]	; (80076d0 <HAL_DMA_Start_IT+0x48c>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d02c      	beq.n	8007674 <HAL_DMA_Start_IT+0x430>
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a2d      	ldr	r2, [pc, #180]	; (80076d4 <HAL_DMA_Start_IT+0x490>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d027      	beq.n	8007674 <HAL_DMA_Start_IT+0x430>
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a2b      	ldr	r2, [pc, #172]	; (80076d8 <HAL_DMA_Start_IT+0x494>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d022      	beq.n	8007674 <HAL_DMA_Start_IT+0x430>
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a2a      	ldr	r2, [pc, #168]	; (80076dc <HAL_DMA_Start_IT+0x498>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d01d      	beq.n	8007674 <HAL_DMA_Start_IT+0x430>
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a28      	ldr	r2, [pc, #160]	; (80076e0 <HAL_DMA_Start_IT+0x49c>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d018      	beq.n	8007674 <HAL_DMA_Start_IT+0x430>
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a27      	ldr	r2, [pc, #156]	; (80076e4 <HAL_DMA_Start_IT+0x4a0>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d013      	beq.n	8007674 <HAL_DMA_Start_IT+0x430>
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a25      	ldr	r2, [pc, #148]	; (80076e8 <HAL_DMA_Start_IT+0x4a4>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d00e      	beq.n	8007674 <HAL_DMA_Start_IT+0x430>
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a24      	ldr	r2, [pc, #144]	; (80076ec <HAL_DMA_Start_IT+0x4a8>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d009      	beq.n	8007674 <HAL_DMA_Start_IT+0x430>
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a22      	ldr	r2, [pc, #136]	; (80076f0 <HAL_DMA_Start_IT+0x4ac>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d004      	beq.n	8007674 <HAL_DMA_Start_IT+0x430>
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a21      	ldr	r2, [pc, #132]	; (80076f4 <HAL_DMA_Start_IT+0x4b0>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d108      	bne.n	8007686 <HAL_DMA_Start_IT+0x442>
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f042 0201 	orr.w	r2, r2, #1
 8007682:	601a      	str	r2, [r3, #0]
 8007684:	e012      	b.n	80076ac <HAL_DMA_Start_IT+0x468>
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f042 0201 	orr.w	r2, r2, #1
 8007694:	601a      	str	r2, [r3, #0]
 8007696:	e009      	b.n	80076ac <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800769e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2200      	movs	r2, #0
 80076a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80076a8:	2301      	movs	r3, #1
 80076aa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80076ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3718      	adds	r7, #24
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	40020010 	.word	0x40020010
 80076bc:	40020028 	.word	0x40020028
 80076c0:	40020040 	.word	0x40020040
 80076c4:	40020058 	.word	0x40020058
 80076c8:	40020070 	.word	0x40020070
 80076cc:	40020088 	.word	0x40020088
 80076d0:	400200a0 	.word	0x400200a0
 80076d4:	400200b8 	.word	0x400200b8
 80076d8:	40020410 	.word	0x40020410
 80076dc:	40020428 	.word	0x40020428
 80076e0:	40020440 	.word	0x40020440
 80076e4:	40020458 	.word	0x40020458
 80076e8:	40020470 	.word	0x40020470
 80076ec:	40020488 	.word	0x40020488
 80076f0:	400204a0 	.word	0x400204a0
 80076f4:	400204b8 	.word	0x400204b8
 80076f8:	58025408 	.word	0x58025408
 80076fc:	5802541c 	.word	0x5802541c
 8007700:	58025430 	.word	0x58025430
 8007704:	58025444 	.word	0x58025444
 8007708:	58025458 	.word	0x58025458
 800770c:	5802546c 	.word	0x5802546c
 8007710:	58025480 	.word	0x58025480
 8007714:	58025494 	.word	0x58025494

08007718 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b086      	sub	sp, #24
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8007720:	f7fe f85a 	bl	80057d8 <HAL_GetTick>
 8007724:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d101      	bne.n	8007730 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800772c:	2301      	movs	r3, #1
 800772e:	e2dc      	b.n	8007cea <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007736:	b2db      	uxtb	r3, r3
 8007738:	2b02      	cmp	r3, #2
 800773a:	d008      	beq.n	800774e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2280      	movs	r2, #128	; 0x80
 8007740:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	e2cd      	b.n	8007cea <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a76      	ldr	r2, [pc, #472]	; (800792c <HAL_DMA_Abort+0x214>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d04a      	beq.n	80077ee <HAL_DMA_Abort+0xd6>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a74      	ldr	r2, [pc, #464]	; (8007930 <HAL_DMA_Abort+0x218>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d045      	beq.n	80077ee <HAL_DMA_Abort+0xd6>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a73      	ldr	r2, [pc, #460]	; (8007934 <HAL_DMA_Abort+0x21c>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d040      	beq.n	80077ee <HAL_DMA_Abort+0xd6>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a71      	ldr	r2, [pc, #452]	; (8007938 <HAL_DMA_Abort+0x220>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d03b      	beq.n	80077ee <HAL_DMA_Abort+0xd6>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a70      	ldr	r2, [pc, #448]	; (800793c <HAL_DMA_Abort+0x224>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d036      	beq.n	80077ee <HAL_DMA_Abort+0xd6>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a6e      	ldr	r2, [pc, #440]	; (8007940 <HAL_DMA_Abort+0x228>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d031      	beq.n	80077ee <HAL_DMA_Abort+0xd6>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a6d      	ldr	r2, [pc, #436]	; (8007944 <HAL_DMA_Abort+0x22c>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d02c      	beq.n	80077ee <HAL_DMA_Abort+0xd6>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a6b      	ldr	r2, [pc, #428]	; (8007948 <HAL_DMA_Abort+0x230>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d027      	beq.n	80077ee <HAL_DMA_Abort+0xd6>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a6a      	ldr	r2, [pc, #424]	; (800794c <HAL_DMA_Abort+0x234>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d022      	beq.n	80077ee <HAL_DMA_Abort+0xd6>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a68      	ldr	r2, [pc, #416]	; (8007950 <HAL_DMA_Abort+0x238>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d01d      	beq.n	80077ee <HAL_DMA_Abort+0xd6>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a67      	ldr	r2, [pc, #412]	; (8007954 <HAL_DMA_Abort+0x23c>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d018      	beq.n	80077ee <HAL_DMA_Abort+0xd6>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a65      	ldr	r2, [pc, #404]	; (8007958 <HAL_DMA_Abort+0x240>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d013      	beq.n	80077ee <HAL_DMA_Abort+0xd6>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a64      	ldr	r2, [pc, #400]	; (800795c <HAL_DMA_Abort+0x244>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d00e      	beq.n	80077ee <HAL_DMA_Abort+0xd6>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a62      	ldr	r2, [pc, #392]	; (8007960 <HAL_DMA_Abort+0x248>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d009      	beq.n	80077ee <HAL_DMA_Abort+0xd6>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a61      	ldr	r2, [pc, #388]	; (8007964 <HAL_DMA_Abort+0x24c>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d004      	beq.n	80077ee <HAL_DMA_Abort+0xd6>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a5f      	ldr	r2, [pc, #380]	; (8007968 <HAL_DMA_Abort+0x250>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d101      	bne.n	80077f2 <HAL_DMA_Abort+0xda>
 80077ee:	2301      	movs	r3, #1
 80077f0:	e000      	b.n	80077f4 <HAL_DMA_Abort+0xdc>
 80077f2:	2300      	movs	r3, #0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d013      	beq.n	8007820 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f022 021e 	bic.w	r2, r2, #30
 8007806:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	695a      	ldr	r2, [r3, #20]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007816:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	617b      	str	r3, [r7, #20]
 800781e:	e00a      	b.n	8007836 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f022 020e 	bic.w	r2, r2, #14
 800782e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a3c      	ldr	r2, [pc, #240]	; (800792c <HAL_DMA_Abort+0x214>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d072      	beq.n	8007926 <HAL_DMA_Abort+0x20e>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a3a      	ldr	r2, [pc, #232]	; (8007930 <HAL_DMA_Abort+0x218>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d06d      	beq.n	8007926 <HAL_DMA_Abort+0x20e>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a39      	ldr	r2, [pc, #228]	; (8007934 <HAL_DMA_Abort+0x21c>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d068      	beq.n	8007926 <HAL_DMA_Abort+0x20e>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a37      	ldr	r2, [pc, #220]	; (8007938 <HAL_DMA_Abort+0x220>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d063      	beq.n	8007926 <HAL_DMA_Abort+0x20e>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a36      	ldr	r2, [pc, #216]	; (800793c <HAL_DMA_Abort+0x224>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d05e      	beq.n	8007926 <HAL_DMA_Abort+0x20e>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a34      	ldr	r2, [pc, #208]	; (8007940 <HAL_DMA_Abort+0x228>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d059      	beq.n	8007926 <HAL_DMA_Abort+0x20e>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a33      	ldr	r2, [pc, #204]	; (8007944 <HAL_DMA_Abort+0x22c>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d054      	beq.n	8007926 <HAL_DMA_Abort+0x20e>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a31      	ldr	r2, [pc, #196]	; (8007948 <HAL_DMA_Abort+0x230>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d04f      	beq.n	8007926 <HAL_DMA_Abort+0x20e>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a30      	ldr	r2, [pc, #192]	; (800794c <HAL_DMA_Abort+0x234>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d04a      	beq.n	8007926 <HAL_DMA_Abort+0x20e>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a2e      	ldr	r2, [pc, #184]	; (8007950 <HAL_DMA_Abort+0x238>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d045      	beq.n	8007926 <HAL_DMA_Abort+0x20e>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a2d      	ldr	r2, [pc, #180]	; (8007954 <HAL_DMA_Abort+0x23c>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d040      	beq.n	8007926 <HAL_DMA_Abort+0x20e>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a2b      	ldr	r2, [pc, #172]	; (8007958 <HAL_DMA_Abort+0x240>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d03b      	beq.n	8007926 <HAL_DMA_Abort+0x20e>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a2a      	ldr	r2, [pc, #168]	; (800795c <HAL_DMA_Abort+0x244>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d036      	beq.n	8007926 <HAL_DMA_Abort+0x20e>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a28      	ldr	r2, [pc, #160]	; (8007960 <HAL_DMA_Abort+0x248>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d031      	beq.n	8007926 <HAL_DMA_Abort+0x20e>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a27      	ldr	r2, [pc, #156]	; (8007964 <HAL_DMA_Abort+0x24c>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d02c      	beq.n	8007926 <HAL_DMA_Abort+0x20e>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a25      	ldr	r2, [pc, #148]	; (8007968 <HAL_DMA_Abort+0x250>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d027      	beq.n	8007926 <HAL_DMA_Abort+0x20e>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a24      	ldr	r2, [pc, #144]	; (800796c <HAL_DMA_Abort+0x254>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d022      	beq.n	8007926 <HAL_DMA_Abort+0x20e>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a22      	ldr	r2, [pc, #136]	; (8007970 <HAL_DMA_Abort+0x258>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d01d      	beq.n	8007926 <HAL_DMA_Abort+0x20e>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a21      	ldr	r2, [pc, #132]	; (8007974 <HAL_DMA_Abort+0x25c>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d018      	beq.n	8007926 <HAL_DMA_Abort+0x20e>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a1f      	ldr	r2, [pc, #124]	; (8007978 <HAL_DMA_Abort+0x260>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d013      	beq.n	8007926 <HAL_DMA_Abort+0x20e>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a1e      	ldr	r2, [pc, #120]	; (800797c <HAL_DMA_Abort+0x264>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d00e      	beq.n	8007926 <HAL_DMA_Abort+0x20e>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a1c      	ldr	r2, [pc, #112]	; (8007980 <HAL_DMA_Abort+0x268>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d009      	beq.n	8007926 <HAL_DMA_Abort+0x20e>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a1b      	ldr	r2, [pc, #108]	; (8007984 <HAL_DMA_Abort+0x26c>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d004      	beq.n	8007926 <HAL_DMA_Abort+0x20e>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a19      	ldr	r2, [pc, #100]	; (8007988 <HAL_DMA_Abort+0x270>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d132      	bne.n	800798c <HAL_DMA_Abort+0x274>
 8007926:	2301      	movs	r3, #1
 8007928:	e031      	b.n	800798e <HAL_DMA_Abort+0x276>
 800792a:	bf00      	nop
 800792c:	40020010 	.word	0x40020010
 8007930:	40020028 	.word	0x40020028
 8007934:	40020040 	.word	0x40020040
 8007938:	40020058 	.word	0x40020058
 800793c:	40020070 	.word	0x40020070
 8007940:	40020088 	.word	0x40020088
 8007944:	400200a0 	.word	0x400200a0
 8007948:	400200b8 	.word	0x400200b8
 800794c:	40020410 	.word	0x40020410
 8007950:	40020428 	.word	0x40020428
 8007954:	40020440 	.word	0x40020440
 8007958:	40020458 	.word	0x40020458
 800795c:	40020470 	.word	0x40020470
 8007960:	40020488 	.word	0x40020488
 8007964:	400204a0 	.word	0x400204a0
 8007968:	400204b8 	.word	0x400204b8
 800796c:	58025408 	.word	0x58025408
 8007970:	5802541c 	.word	0x5802541c
 8007974:	58025430 	.word	0x58025430
 8007978:	58025444 	.word	0x58025444
 800797c:	58025458 	.word	0x58025458
 8007980:	5802546c 	.word	0x5802546c
 8007984:	58025480 	.word	0x58025480
 8007988:	58025494 	.word	0x58025494
 800798c:	2300      	movs	r3, #0
 800798e:	2b00      	cmp	r3, #0
 8007990:	d007      	beq.n	80079a2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800799c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80079a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a6d      	ldr	r2, [pc, #436]	; (8007b5c <HAL_DMA_Abort+0x444>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d04a      	beq.n	8007a42 <HAL_DMA_Abort+0x32a>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a6b      	ldr	r2, [pc, #428]	; (8007b60 <HAL_DMA_Abort+0x448>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d045      	beq.n	8007a42 <HAL_DMA_Abort+0x32a>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a6a      	ldr	r2, [pc, #424]	; (8007b64 <HAL_DMA_Abort+0x44c>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d040      	beq.n	8007a42 <HAL_DMA_Abort+0x32a>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a68      	ldr	r2, [pc, #416]	; (8007b68 <HAL_DMA_Abort+0x450>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d03b      	beq.n	8007a42 <HAL_DMA_Abort+0x32a>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a67      	ldr	r2, [pc, #412]	; (8007b6c <HAL_DMA_Abort+0x454>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d036      	beq.n	8007a42 <HAL_DMA_Abort+0x32a>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a65      	ldr	r2, [pc, #404]	; (8007b70 <HAL_DMA_Abort+0x458>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d031      	beq.n	8007a42 <HAL_DMA_Abort+0x32a>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a64      	ldr	r2, [pc, #400]	; (8007b74 <HAL_DMA_Abort+0x45c>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d02c      	beq.n	8007a42 <HAL_DMA_Abort+0x32a>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a62      	ldr	r2, [pc, #392]	; (8007b78 <HAL_DMA_Abort+0x460>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d027      	beq.n	8007a42 <HAL_DMA_Abort+0x32a>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a61      	ldr	r2, [pc, #388]	; (8007b7c <HAL_DMA_Abort+0x464>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d022      	beq.n	8007a42 <HAL_DMA_Abort+0x32a>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a5f      	ldr	r2, [pc, #380]	; (8007b80 <HAL_DMA_Abort+0x468>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d01d      	beq.n	8007a42 <HAL_DMA_Abort+0x32a>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a5e      	ldr	r2, [pc, #376]	; (8007b84 <HAL_DMA_Abort+0x46c>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d018      	beq.n	8007a42 <HAL_DMA_Abort+0x32a>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a5c      	ldr	r2, [pc, #368]	; (8007b88 <HAL_DMA_Abort+0x470>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d013      	beq.n	8007a42 <HAL_DMA_Abort+0x32a>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a5b      	ldr	r2, [pc, #364]	; (8007b8c <HAL_DMA_Abort+0x474>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d00e      	beq.n	8007a42 <HAL_DMA_Abort+0x32a>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a59      	ldr	r2, [pc, #356]	; (8007b90 <HAL_DMA_Abort+0x478>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d009      	beq.n	8007a42 <HAL_DMA_Abort+0x32a>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a58      	ldr	r2, [pc, #352]	; (8007b94 <HAL_DMA_Abort+0x47c>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d004      	beq.n	8007a42 <HAL_DMA_Abort+0x32a>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a56      	ldr	r2, [pc, #344]	; (8007b98 <HAL_DMA_Abort+0x480>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d108      	bne.n	8007a54 <HAL_DMA_Abort+0x33c>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f022 0201 	bic.w	r2, r2, #1
 8007a50:	601a      	str	r2, [r3, #0]
 8007a52:	e007      	b.n	8007a64 <HAL_DMA_Abort+0x34c>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f022 0201 	bic.w	r2, r2, #1
 8007a62:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007a64:	e013      	b.n	8007a8e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007a66:	f7fd feb7 	bl	80057d8 <HAL_GetTick>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	1ad3      	subs	r3, r2, r3
 8007a70:	2b05      	cmp	r3, #5
 8007a72:	d90c      	bls.n	8007a8e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2220      	movs	r2, #32
 8007a78:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2203      	movs	r2, #3
 8007a7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e12d      	b.n	8007cea <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f003 0301 	and.w	r3, r3, #1
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d1e5      	bne.n	8007a66 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a2f      	ldr	r2, [pc, #188]	; (8007b5c <HAL_DMA_Abort+0x444>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d04a      	beq.n	8007b3a <HAL_DMA_Abort+0x422>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a2d      	ldr	r2, [pc, #180]	; (8007b60 <HAL_DMA_Abort+0x448>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d045      	beq.n	8007b3a <HAL_DMA_Abort+0x422>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a2c      	ldr	r2, [pc, #176]	; (8007b64 <HAL_DMA_Abort+0x44c>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d040      	beq.n	8007b3a <HAL_DMA_Abort+0x422>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a2a      	ldr	r2, [pc, #168]	; (8007b68 <HAL_DMA_Abort+0x450>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d03b      	beq.n	8007b3a <HAL_DMA_Abort+0x422>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a29      	ldr	r2, [pc, #164]	; (8007b6c <HAL_DMA_Abort+0x454>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d036      	beq.n	8007b3a <HAL_DMA_Abort+0x422>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a27      	ldr	r2, [pc, #156]	; (8007b70 <HAL_DMA_Abort+0x458>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d031      	beq.n	8007b3a <HAL_DMA_Abort+0x422>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a26      	ldr	r2, [pc, #152]	; (8007b74 <HAL_DMA_Abort+0x45c>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d02c      	beq.n	8007b3a <HAL_DMA_Abort+0x422>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a24      	ldr	r2, [pc, #144]	; (8007b78 <HAL_DMA_Abort+0x460>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d027      	beq.n	8007b3a <HAL_DMA_Abort+0x422>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a23      	ldr	r2, [pc, #140]	; (8007b7c <HAL_DMA_Abort+0x464>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d022      	beq.n	8007b3a <HAL_DMA_Abort+0x422>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a21      	ldr	r2, [pc, #132]	; (8007b80 <HAL_DMA_Abort+0x468>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d01d      	beq.n	8007b3a <HAL_DMA_Abort+0x422>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a20      	ldr	r2, [pc, #128]	; (8007b84 <HAL_DMA_Abort+0x46c>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d018      	beq.n	8007b3a <HAL_DMA_Abort+0x422>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a1e      	ldr	r2, [pc, #120]	; (8007b88 <HAL_DMA_Abort+0x470>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d013      	beq.n	8007b3a <HAL_DMA_Abort+0x422>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a1d      	ldr	r2, [pc, #116]	; (8007b8c <HAL_DMA_Abort+0x474>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d00e      	beq.n	8007b3a <HAL_DMA_Abort+0x422>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a1b      	ldr	r2, [pc, #108]	; (8007b90 <HAL_DMA_Abort+0x478>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d009      	beq.n	8007b3a <HAL_DMA_Abort+0x422>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a1a      	ldr	r2, [pc, #104]	; (8007b94 <HAL_DMA_Abort+0x47c>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d004      	beq.n	8007b3a <HAL_DMA_Abort+0x422>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a18      	ldr	r2, [pc, #96]	; (8007b98 <HAL_DMA_Abort+0x480>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d101      	bne.n	8007b3e <HAL_DMA_Abort+0x426>
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	e000      	b.n	8007b40 <HAL_DMA_Abort+0x428>
 8007b3e:	2300      	movs	r3, #0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d02b      	beq.n	8007b9c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b48:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b4e:	f003 031f 	and.w	r3, r3, #31
 8007b52:	223f      	movs	r2, #63	; 0x3f
 8007b54:	409a      	lsls	r2, r3
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	609a      	str	r2, [r3, #8]
 8007b5a:	e02a      	b.n	8007bb2 <HAL_DMA_Abort+0x49a>
 8007b5c:	40020010 	.word	0x40020010
 8007b60:	40020028 	.word	0x40020028
 8007b64:	40020040 	.word	0x40020040
 8007b68:	40020058 	.word	0x40020058
 8007b6c:	40020070 	.word	0x40020070
 8007b70:	40020088 	.word	0x40020088
 8007b74:	400200a0 	.word	0x400200a0
 8007b78:	400200b8 	.word	0x400200b8
 8007b7c:	40020410 	.word	0x40020410
 8007b80:	40020428 	.word	0x40020428
 8007b84:	40020440 	.word	0x40020440
 8007b88:	40020458 	.word	0x40020458
 8007b8c:	40020470 	.word	0x40020470
 8007b90:	40020488 	.word	0x40020488
 8007b94:	400204a0 	.word	0x400204a0
 8007b98:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ba0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ba6:	f003 031f 	and.w	r3, r3, #31
 8007baa:	2201      	movs	r2, #1
 8007bac:	409a      	lsls	r2, r3
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a4f      	ldr	r2, [pc, #316]	; (8007cf4 <HAL_DMA_Abort+0x5dc>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d072      	beq.n	8007ca2 <HAL_DMA_Abort+0x58a>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a4d      	ldr	r2, [pc, #308]	; (8007cf8 <HAL_DMA_Abort+0x5e0>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d06d      	beq.n	8007ca2 <HAL_DMA_Abort+0x58a>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a4c      	ldr	r2, [pc, #304]	; (8007cfc <HAL_DMA_Abort+0x5e4>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d068      	beq.n	8007ca2 <HAL_DMA_Abort+0x58a>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a4a      	ldr	r2, [pc, #296]	; (8007d00 <HAL_DMA_Abort+0x5e8>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d063      	beq.n	8007ca2 <HAL_DMA_Abort+0x58a>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a49      	ldr	r2, [pc, #292]	; (8007d04 <HAL_DMA_Abort+0x5ec>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d05e      	beq.n	8007ca2 <HAL_DMA_Abort+0x58a>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a47      	ldr	r2, [pc, #284]	; (8007d08 <HAL_DMA_Abort+0x5f0>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d059      	beq.n	8007ca2 <HAL_DMA_Abort+0x58a>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a46      	ldr	r2, [pc, #280]	; (8007d0c <HAL_DMA_Abort+0x5f4>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d054      	beq.n	8007ca2 <HAL_DMA_Abort+0x58a>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a44      	ldr	r2, [pc, #272]	; (8007d10 <HAL_DMA_Abort+0x5f8>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d04f      	beq.n	8007ca2 <HAL_DMA_Abort+0x58a>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a43      	ldr	r2, [pc, #268]	; (8007d14 <HAL_DMA_Abort+0x5fc>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d04a      	beq.n	8007ca2 <HAL_DMA_Abort+0x58a>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a41      	ldr	r2, [pc, #260]	; (8007d18 <HAL_DMA_Abort+0x600>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d045      	beq.n	8007ca2 <HAL_DMA_Abort+0x58a>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a40      	ldr	r2, [pc, #256]	; (8007d1c <HAL_DMA_Abort+0x604>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d040      	beq.n	8007ca2 <HAL_DMA_Abort+0x58a>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a3e      	ldr	r2, [pc, #248]	; (8007d20 <HAL_DMA_Abort+0x608>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d03b      	beq.n	8007ca2 <HAL_DMA_Abort+0x58a>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a3d      	ldr	r2, [pc, #244]	; (8007d24 <HAL_DMA_Abort+0x60c>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d036      	beq.n	8007ca2 <HAL_DMA_Abort+0x58a>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a3b      	ldr	r2, [pc, #236]	; (8007d28 <HAL_DMA_Abort+0x610>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d031      	beq.n	8007ca2 <HAL_DMA_Abort+0x58a>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a3a      	ldr	r2, [pc, #232]	; (8007d2c <HAL_DMA_Abort+0x614>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d02c      	beq.n	8007ca2 <HAL_DMA_Abort+0x58a>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a38      	ldr	r2, [pc, #224]	; (8007d30 <HAL_DMA_Abort+0x618>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d027      	beq.n	8007ca2 <HAL_DMA_Abort+0x58a>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a37      	ldr	r2, [pc, #220]	; (8007d34 <HAL_DMA_Abort+0x61c>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d022      	beq.n	8007ca2 <HAL_DMA_Abort+0x58a>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a35      	ldr	r2, [pc, #212]	; (8007d38 <HAL_DMA_Abort+0x620>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d01d      	beq.n	8007ca2 <HAL_DMA_Abort+0x58a>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a34      	ldr	r2, [pc, #208]	; (8007d3c <HAL_DMA_Abort+0x624>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d018      	beq.n	8007ca2 <HAL_DMA_Abort+0x58a>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a32      	ldr	r2, [pc, #200]	; (8007d40 <HAL_DMA_Abort+0x628>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d013      	beq.n	8007ca2 <HAL_DMA_Abort+0x58a>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a31      	ldr	r2, [pc, #196]	; (8007d44 <HAL_DMA_Abort+0x62c>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d00e      	beq.n	8007ca2 <HAL_DMA_Abort+0x58a>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a2f      	ldr	r2, [pc, #188]	; (8007d48 <HAL_DMA_Abort+0x630>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d009      	beq.n	8007ca2 <HAL_DMA_Abort+0x58a>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a2e      	ldr	r2, [pc, #184]	; (8007d4c <HAL_DMA_Abort+0x634>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d004      	beq.n	8007ca2 <HAL_DMA_Abort+0x58a>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a2c      	ldr	r2, [pc, #176]	; (8007d50 <HAL_DMA_Abort+0x638>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d101      	bne.n	8007ca6 <HAL_DMA_Abort+0x58e>
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e000      	b.n	8007ca8 <HAL_DMA_Abort+0x590>
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d015      	beq.n	8007cd8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007cb4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d00c      	beq.n	8007cd8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ccc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007cd6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8007ce8:	2300      	movs	r3, #0
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3718      	adds	r7, #24
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	bf00      	nop
 8007cf4:	40020010 	.word	0x40020010
 8007cf8:	40020028 	.word	0x40020028
 8007cfc:	40020040 	.word	0x40020040
 8007d00:	40020058 	.word	0x40020058
 8007d04:	40020070 	.word	0x40020070
 8007d08:	40020088 	.word	0x40020088
 8007d0c:	400200a0 	.word	0x400200a0
 8007d10:	400200b8 	.word	0x400200b8
 8007d14:	40020410 	.word	0x40020410
 8007d18:	40020428 	.word	0x40020428
 8007d1c:	40020440 	.word	0x40020440
 8007d20:	40020458 	.word	0x40020458
 8007d24:	40020470 	.word	0x40020470
 8007d28:	40020488 	.word	0x40020488
 8007d2c:	400204a0 	.word	0x400204a0
 8007d30:	400204b8 	.word	0x400204b8
 8007d34:	58025408 	.word	0x58025408
 8007d38:	5802541c 	.word	0x5802541c
 8007d3c:	58025430 	.word	0x58025430
 8007d40:	58025444 	.word	0x58025444
 8007d44:	58025458 	.word	0x58025458
 8007d48:	5802546c 	.word	0x5802546c
 8007d4c:	58025480 	.word	0x58025480
 8007d50:	58025494 	.word	0x58025494

08007d54 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d101      	bne.n	8007d66 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8007d62:	2301      	movs	r3, #1
 8007d64:	e237      	b.n	80081d6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	2b02      	cmp	r3, #2
 8007d70:	d004      	beq.n	8007d7c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2280      	movs	r2, #128	; 0x80
 8007d76:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e22c      	b.n	80081d6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a5c      	ldr	r2, [pc, #368]	; (8007ef4 <HAL_DMA_Abort_IT+0x1a0>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d04a      	beq.n	8007e1c <HAL_DMA_Abort_IT+0xc8>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a5b      	ldr	r2, [pc, #364]	; (8007ef8 <HAL_DMA_Abort_IT+0x1a4>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d045      	beq.n	8007e1c <HAL_DMA_Abort_IT+0xc8>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a59      	ldr	r2, [pc, #356]	; (8007efc <HAL_DMA_Abort_IT+0x1a8>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d040      	beq.n	8007e1c <HAL_DMA_Abort_IT+0xc8>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a58      	ldr	r2, [pc, #352]	; (8007f00 <HAL_DMA_Abort_IT+0x1ac>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d03b      	beq.n	8007e1c <HAL_DMA_Abort_IT+0xc8>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a56      	ldr	r2, [pc, #344]	; (8007f04 <HAL_DMA_Abort_IT+0x1b0>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d036      	beq.n	8007e1c <HAL_DMA_Abort_IT+0xc8>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a55      	ldr	r2, [pc, #340]	; (8007f08 <HAL_DMA_Abort_IT+0x1b4>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d031      	beq.n	8007e1c <HAL_DMA_Abort_IT+0xc8>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a53      	ldr	r2, [pc, #332]	; (8007f0c <HAL_DMA_Abort_IT+0x1b8>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d02c      	beq.n	8007e1c <HAL_DMA_Abort_IT+0xc8>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a52      	ldr	r2, [pc, #328]	; (8007f10 <HAL_DMA_Abort_IT+0x1bc>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d027      	beq.n	8007e1c <HAL_DMA_Abort_IT+0xc8>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a50      	ldr	r2, [pc, #320]	; (8007f14 <HAL_DMA_Abort_IT+0x1c0>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d022      	beq.n	8007e1c <HAL_DMA_Abort_IT+0xc8>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a4f      	ldr	r2, [pc, #316]	; (8007f18 <HAL_DMA_Abort_IT+0x1c4>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d01d      	beq.n	8007e1c <HAL_DMA_Abort_IT+0xc8>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a4d      	ldr	r2, [pc, #308]	; (8007f1c <HAL_DMA_Abort_IT+0x1c8>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d018      	beq.n	8007e1c <HAL_DMA_Abort_IT+0xc8>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a4c      	ldr	r2, [pc, #304]	; (8007f20 <HAL_DMA_Abort_IT+0x1cc>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d013      	beq.n	8007e1c <HAL_DMA_Abort_IT+0xc8>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a4a      	ldr	r2, [pc, #296]	; (8007f24 <HAL_DMA_Abort_IT+0x1d0>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d00e      	beq.n	8007e1c <HAL_DMA_Abort_IT+0xc8>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a49      	ldr	r2, [pc, #292]	; (8007f28 <HAL_DMA_Abort_IT+0x1d4>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d009      	beq.n	8007e1c <HAL_DMA_Abort_IT+0xc8>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a47      	ldr	r2, [pc, #284]	; (8007f2c <HAL_DMA_Abort_IT+0x1d8>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d004      	beq.n	8007e1c <HAL_DMA_Abort_IT+0xc8>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a46      	ldr	r2, [pc, #280]	; (8007f30 <HAL_DMA_Abort_IT+0x1dc>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d101      	bne.n	8007e20 <HAL_DMA_Abort_IT+0xcc>
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e000      	b.n	8007e22 <HAL_DMA_Abort_IT+0xce>
 8007e20:	2300      	movs	r3, #0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	f000 8086 	beq.w	8007f34 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2204      	movs	r2, #4
 8007e2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a2f      	ldr	r2, [pc, #188]	; (8007ef4 <HAL_DMA_Abort_IT+0x1a0>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d04a      	beq.n	8007ed0 <HAL_DMA_Abort_IT+0x17c>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a2e      	ldr	r2, [pc, #184]	; (8007ef8 <HAL_DMA_Abort_IT+0x1a4>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d045      	beq.n	8007ed0 <HAL_DMA_Abort_IT+0x17c>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a2c      	ldr	r2, [pc, #176]	; (8007efc <HAL_DMA_Abort_IT+0x1a8>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d040      	beq.n	8007ed0 <HAL_DMA_Abort_IT+0x17c>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a2b      	ldr	r2, [pc, #172]	; (8007f00 <HAL_DMA_Abort_IT+0x1ac>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d03b      	beq.n	8007ed0 <HAL_DMA_Abort_IT+0x17c>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a29      	ldr	r2, [pc, #164]	; (8007f04 <HAL_DMA_Abort_IT+0x1b0>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d036      	beq.n	8007ed0 <HAL_DMA_Abort_IT+0x17c>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a28      	ldr	r2, [pc, #160]	; (8007f08 <HAL_DMA_Abort_IT+0x1b4>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d031      	beq.n	8007ed0 <HAL_DMA_Abort_IT+0x17c>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a26      	ldr	r2, [pc, #152]	; (8007f0c <HAL_DMA_Abort_IT+0x1b8>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d02c      	beq.n	8007ed0 <HAL_DMA_Abort_IT+0x17c>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a25      	ldr	r2, [pc, #148]	; (8007f10 <HAL_DMA_Abort_IT+0x1bc>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d027      	beq.n	8007ed0 <HAL_DMA_Abort_IT+0x17c>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a23      	ldr	r2, [pc, #140]	; (8007f14 <HAL_DMA_Abort_IT+0x1c0>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d022      	beq.n	8007ed0 <HAL_DMA_Abort_IT+0x17c>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a22      	ldr	r2, [pc, #136]	; (8007f18 <HAL_DMA_Abort_IT+0x1c4>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d01d      	beq.n	8007ed0 <HAL_DMA_Abort_IT+0x17c>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a20      	ldr	r2, [pc, #128]	; (8007f1c <HAL_DMA_Abort_IT+0x1c8>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d018      	beq.n	8007ed0 <HAL_DMA_Abort_IT+0x17c>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a1f      	ldr	r2, [pc, #124]	; (8007f20 <HAL_DMA_Abort_IT+0x1cc>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d013      	beq.n	8007ed0 <HAL_DMA_Abort_IT+0x17c>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a1d      	ldr	r2, [pc, #116]	; (8007f24 <HAL_DMA_Abort_IT+0x1d0>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d00e      	beq.n	8007ed0 <HAL_DMA_Abort_IT+0x17c>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a1c      	ldr	r2, [pc, #112]	; (8007f28 <HAL_DMA_Abort_IT+0x1d4>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d009      	beq.n	8007ed0 <HAL_DMA_Abort_IT+0x17c>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a1a      	ldr	r2, [pc, #104]	; (8007f2c <HAL_DMA_Abort_IT+0x1d8>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d004      	beq.n	8007ed0 <HAL_DMA_Abort_IT+0x17c>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a19      	ldr	r2, [pc, #100]	; (8007f30 <HAL_DMA_Abort_IT+0x1dc>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d108      	bne.n	8007ee2 <HAL_DMA_Abort_IT+0x18e>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	681a      	ldr	r2, [r3, #0]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f022 0201 	bic.w	r2, r2, #1
 8007ede:	601a      	str	r2, [r3, #0]
 8007ee0:	e178      	b.n	80081d4 <HAL_DMA_Abort_IT+0x480>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f022 0201 	bic.w	r2, r2, #1
 8007ef0:	601a      	str	r2, [r3, #0]
 8007ef2:	e16f      	b.n	80081d4 <HAL_DMA_Abort_IT+0x480>
 8007ef4:	40020010 	.word	0x40020010
 8007ef8:	40020028 	.word	0x40020028
 8007efc:	40020040 	.word	0x40020040
 8007f00:	40020058 	.word	0x40020058
 8007f04:	40020070 	.word	0x40020070
 8007f08:	40020088 	.word	0x40020088
 8007f0c:	400200a0 	.word	0x400200a0
 8007f10:	400200b8 	.word	0x400200b8
 8007f14:	40020410 	.word	0x40020410
 8007f18:	40020428 	.word	0x40020428
 8007f1c:	40020440 	.word	0x40020440
 8007f20:	40020458 	.word	0x40020458
 8007f24:	40020470 	.word	0x40020470
 8007f28:	40020488 	.word	0x40020488
 8007f2c:	400204a0 	.word	0x400204a0
 8007f30:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f022 020e 	bic.w	r2, r2, #14
 8007f42:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a6c      	ldr	r2, [pc, #432]	; (80080fc <HAL_DMA_Abort_IT+0x3a8>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d04a      	beq.n	8007fe4 <HAL_DMA_Abort_IT+0x290>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a6b      	ldr	r2, [pc, #428]	; (8008100 <HAL_DMA_Abort_IT+0x3ac>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d045      	beq.n	8007fe4 <HAL_DMA_Abort_IT+0x290>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a69      	ldr	r2, [pc, #420]	; (8008104 <HAL_DMA_Abort_IT+0x3b0>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d040      	beq.n	8007fe4 <HAL_DMA_Abort_IT+0x290>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a68      	ldr	r2, [pc, #416]	; (8008108 <HAL_DMA_Abort_IT+0x3b4>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d03b      	beq.n	8007fe4 <HAL_DMA_Abort_IT+0x290>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a66      	ldr	r2, [pc, #408]	; (800810c <HAL_DMA_Abort_IT+0x3b8>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d036      	beq.n	8007fe4 <HAL_DMA_Abort_IT+0x290>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a65      	ldr	r2, [pc, #404]	; (8008110 <HAL_DMA_Abort_IT+0x3bc>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d031      	beq.n	8007fe4 <HAL_DMA_Abort_IT+0x290>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a63      	ldr	r2, [pc, #396]	; (8008114 <HAL_DMA_Abort_IT+0x3c0>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d02c      	beq.n	8007fe4 <HAL_DMA_Abort_IT+0x290>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a62      	ldr	r2, [pc, #392]	; (8008118 <HAL_DMA_Abort_IT+0x3c4>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d027      	beq.n	8007fe4 <HAL_DMA_Abort_IT+0x290>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a60      	ldr	r2, [pc, #384]	; (800811c <HAL_DMA_Abort_IT+0x3c8>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d022      	beq.n	8007fe4 <HAL_DMA_Abort_IT+0x290>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a5f      	ldr	r2, [pc, #380]	; (8008120 <HAL_DMA_Abort_IT+0x3cc>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d01d      	beq.n	8007fe4 <HAL_DMA_Abort_IT+0x290>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a5d      	ldr	r2, [pc, #372]	; (8008124 <HAL_DMA_Abort_IT+0x3d0>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d018      	beq.n	8007fe4 <HAL_DMA_Abort_IT+0x290>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a5c      	ldr	r2, [pc, #368]	; (8008128 <HAL_DMA_Abort_IT+0x3d4>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d013      	beq.n	8007fe4 <HAL_DMA_Abort_IT+0x290>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a5a      	ldr	r2, [pc, #360]	; (800812c <HAL_DMA_Abort_IT+0x3d8>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d00e      	beq.n	8007fe4 <HAL_DMA_Abort_IT+0x290>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a59      	ldr	r2, [pc, #356]	; (8008130 <HAL_DMA_Abort_IT+0x3dc>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d009      	beq.n	8007fe4 <HAL_DMA_Abort_IT+0x290>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a57      	ldr	r2, [pc, #348]	; (8008134 <HAL_DMA_Abort_IT+0x3e0>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d004      	beq.n	8007fe4 <HAL_DMA_Abort_IT+0x290>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a56      	ldr	r2, [pc, #344]	; (8008138 <HAL_DMA_Abort_IT+0x3e4>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d108      	bne.n	8007ff6 <HAL_DMA_Abort_IT+0x2a2>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f022 0201 	bic.w	r2, r2, #1
 8007ff2:	601a      	str	r2, [r3, #0]
 8007ff4:	e007      	b.n	8008006 <HAL_DMA_Abort_IT+0x2b2>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f022 0201 	bic.w	r2, r2, #1
 8008004:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a3c      	ldr	r2, [pc, #240]	; (80080fc <HAL_DMA_Abort_IT+0x3a8>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d072      	beq.n	80080f6 <HAL_DMA_Abort_IT+0x3a2>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a3a      	ldr	r2, [pc, #232]	; (8008100 <HAL_DMA_Abort_IT+0x3ac>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d06d      	beq.n	80080f6 <HAL_DMA_Abort_IT+0x3a2>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a39      	ldr	r2, [pc, #228]	; (8008104 <HAL_DMA_Abort_IT+0x3b0>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d068      	beq.n	80080f6 <HAL_DMA_Abort_IT+0x3a2>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a37      	ldr	r2, [pc, #220]	; (8008108 <HAL_DMA_Abort_IT+0x3b4>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d063      	beq.n	80080f6 <HAL_DMA_Abort_IT+0x3a2>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a36      	ldr	r2, [pc, #216]	; (800810c <HAL_DMA_Abort_IT+0x3b8>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d05e      	beq.n	80080f6 <HAL_DMA_Abort_IT+0x3a2>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a34      	ldr	r2, [pc, #208]	; (8008110 <HAL_DMA_Abort_IT+0x3bc>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d059      	beq.n	80080f6 <HAL_DMA_Abort_IT+0x3a2>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a33      	ldr	r2, [pc, #204]	; (8008114 <HAL_DMA_Abort_IT+0x3c0>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d054      	beq.n	80080f6 <HAL_DMA_Abort_IT+0x3a2>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a31      	ldr	r2, [pc, #196]	; (8008118 <HAL_DMA_Abort_IT+0x3c4>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d04f      	beq.n	80080f6 <HAL_DMA_Abort_IT+0x3a2>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a30      	ldr	r2, [pc, #192]	; (800811c <HAL_DMA_Abort_IT+0x3c8>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d04a      	beq.n	80080f6 <HAL_DMA_Abort_IT+0x3a2>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a2e      	ldr	r2, [pc, #184]	; (8008120 <HAL_DMA_Abort_IT+0x3cc>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d045      	beq.n	80080f6 <HAL_DMA_Abort_IT+0x3a2>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a2d      	ldr	r2, [pc, #180]	; (8008124 <HAL_DMA_Abort_IT+0x3d0>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d040      	beq.n	80080f6 <HAL_DMA_Abort_IT+0x3a2>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a2b      	ldr	r2, [pc, #172]	; (8008128 <HAL_DMA_Abort_IT+0x3d4>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d03b      	beq.n	80080f6 <HAL_DMA_Abort_IT+0x3a2>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a2a      	ldr	r2, [pc, #168]	; (800812c <HAL_DMA_Abort_IT+0x3d8>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d036      	beq.n	80080f6 <HAL_DMA_Abort_IT+0x3a2>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a28      	ldr	r2, [pc, #160]	; (8008130 <HAL_DMA_Abort_IT+0x3dc>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d031      	beq.n	80080f6 <HAL_DMA_Abort_IT+0x3a2>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a27      	ldr	r2, [pc, #156]	; (8008134 <HAL_DMA_Abort_IT+0x3e0>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d02c      	beq.n	80080f6 <HAL_DMA_Abort_IT+0x3a2>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a25      	ldr	r2, [pc, #148]	; (8008138 <HAL_DMA_Abort_IT+0x3e4>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d027      	beq.n	80080f6 <HAL_DMA_Abort_IT+0x3a2>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a24      	ldr	r2, [pc, #144]	; (800813c <HAL_DMA_Abort_IT+0x3e8>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d022      	beq.n	80080f6 <HAL_DMA_Abort_IT+0x3a2>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a22      	ldr	r2, [pc, #136]	; (8008140 <HAL_DMA_Abort_IT+0x3ec>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d01d      	beq.n	80080f6 <HAL_DMA_Abort_IT+0x3a2>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a21      	ldr	r2, [pc, #132]	; (8008144 <HAL_DMA_Abort_IT+0x3f0>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d018      	beq.n	80080f6 <HAL_DMA_Abort_IT+0x3a2>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a1f      	ldr	r2, [pc, #124]	; (8008148 <HAL_DMA_Abort_IT+0x3f4>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d013      	beq.n	80080f6 <HAL_DMA_Abort_IT+0x3a2>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a1e      	ldr	r2, [pc, #120]	; (800814c <HAL_DMA_Abort_IT+0x3f8>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d00e      	beq.n	80080f6 <HAL_DMA_Abort_IT+0x3a2>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a1c      	ldr	r2, [pc, #112]	; (8008150 <HAL_DMA_Abort_IT+0x3fc>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d009      	beq.n	80080f6 <HAL_DMA_Abort_IT+0x3a2>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a1b      	ldr	r2, [pc, #108]	; (8008154 <HAL_DMA_Abort_IT+0x400>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d004      	beq.n	80080f6 <HAL_DMA_Abort_IT+0x3a2>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a19      	ldr	r2, [pc, #100]	; (8008158 <HAL_DMA_Abort_IT+0x404>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d132      	bne.n	800815c <HAL_DMA_Abort_IT+0x408>
 80080f6:	2301      	movs	r3, #1
 80080f8:	e031      	b.n	800815e <HAL_DMA_Abort_IT+0x40a>
 80080fa:	bf00      	nop
 80080fc:	40020010 	.word	0x40020010
 8008100:	40020028 	.word	0x40020028
 8008104:	40020040 	.word	0x40020040
 8008108:	40020058 	.word	0x40020058
 800810c:	40020070 	.word	0x40020070
 8008110:	40020088 	.word	0x40020088
 8008114:	400200a0 	.word	0x400200a0
 8008118:	400200b8 	.word	0x400200b8
 800811c:	40020410 	.word	0x40020410
 8008120:	40020428 	.word	0x40020428
 8008124:	40020440 	.word	0x40020440
 8008128:	40020458 	.word	0x40020458
 800812c:	40020470 	.word	0x40020470
 8008130:	40020488 	.word	0x40020488
 8008134:	400204a0 	.word	0x400204a0
 8008138:	400204b8 	.word	0x400204b8
 800813c:	58025408 	.word	0x58025408
 8008140:	5802541c 	.word	0x5802541c
 8008144:	58025430 	.word	0x58025430
 8008148:	58025444 	.word	0x58025444
 800814c:	58025458 	.word	0x58025458
 8008150:	5802546c 	.word	0x5802546c
 8008154:	58025480 	.word	0x58025480
 8008158:	58025494 	.word	0x58025494
 800815c:	2300      	movs	r3, #0
 800815e:	2b00      	cmp	r3, #0
 8008160:	d028      	beq.n	80081b4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800816c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008170:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008176:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800817c:	f003 031f 	and.w	r3, r3, #31
 8008180:	2201      	movs	r2, #1
 8008182:	409a      	lsls	r2, r3
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008190:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008196:	2b00      	cmp	r3, #0
 8008198:	d00c      	beq.n	80081b4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80081a8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80081b2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d003      	beq.n	80081d4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80081d4:	2300      	movs	r3, #0
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3710      	adds	r7, #16
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
 80081de:	bf00      	nop

080081e0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b08a      	sub	sp, #40	; 0x28
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80081e8:	2300      	movs	r3, #0
 80081ea:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80081ec:	4b67      	ldr	r3, [pc, #412]	; (800838c <HAL_DMA_IRQHandler+0x1ac>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a67      	ldr	r2, [pc, #412]	; (8008390 <HAL_DMA_IRQHandler+0x1b0>)
 80081f2:	fba2 2303 	umull	r2, r3, r2, r3
 80081f6:	0a9b      	lsrs	r3, r3, #10
 80081f8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081fe:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008204:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8008206:	6a3b      	ldr	r3, [r7, #32]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800820c:	69fb      	ldr	r3, [r7, #28]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a5f      	ldr	r2, [pc, #380]	; (8008394 <HAL_DMA_IRQHandler+0x1b4>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d04a      	beq.n	80082b2 <HAL_DMA_IRQHandler+0xd2>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a5d      	ldr	r2, [pc, #372]	; (8008398 <HAL_DMA_IRQHandler+0x1b8>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d045      	beq.n	80082b2 <HAL_DMA_IRQHandler+0xd2>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a5c      	ldr	r2, [pc, #368]	; (800839c <HAL_DMA_IRQHandler+0x1bc>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d040      	beq.n	80082b2 <HAL_DMA_IRQHandler+0xd2>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a5a      	ldr	r2, [pc, #360]	; (80083a0 <HAL_DMA_IRQHandler+0x1c0>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d03b      	beq.n	80082b2 <HAL_DMA_IRQHandler+0xd2>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a59      	ldr	r2, [pc, #356]	; (80083a4 <HAL_DMA_IRQHandler+0x1c4>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d036      	beq.n	80082b2 <HAL_DMA_IRQHandler+0xd2>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a57      	ldr	r2, [pc, #348]	; (80083a8 <HAL_DMA_IRQHandler+0x1c8>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d031      	beq.n	80082b2 <HAL_DMA_IRQHandler+0xd2>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a56      	ldr	r2, [pc, #344]	; (80083ac <HAL_DMA_IRQHandler+0x1cc>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d02c      	beq.n	80082b2 <HAL_DMA_IRQHandler+0xd2>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a54      	ldr	r2, [pc, #336]	; (80083b0 <HAL_DMA_IRQHandler+0x1d0>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d027      	beq.n	80082b2 <HAL_DMA_IRQHandler+0xd2>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a53      	ldr	r2, [pc, #332]	; (80083b4 <HAL_DMA_IRQHandler+0x1d4>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d022      	beq.n	80082b2 <HAL_DMA_IRQHandler+0xd2>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a51      	ldr	r2, [pc, #324]	; (80083b8 <HAL_DMA_IRQHandler+0x1d8>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d01d      	beq.n	80082b2 <HAL_DMA_IRQHandler+0xd2>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a50      	ldr	r2, [pc, #320]	; (80083bc <HAL_DMA_IRQHandler+0x1dc>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d018      	beq.n	80082b2 <HAL_DMA_IRQHandler+0xd2>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a4e      	ldr	r2, [pc, #312]	; (80083c0 <HAL_DMA_IRQHandler+0x1e0>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d013      	beq.n	80082b2 <HAL_DMA_IRQHandler+0xd2>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a4d      	ldr	r2, [pc, #308]	; (80083c4 <HAL_DMA_IRQHandler+0x1e4>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d00e      	beq.n	80082b2 <HAL_DMA_IRQHandler+0xd2>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a4b      	ldr	r2, [pc, #300]	; (80083c8 <HAL_DMA_IRQHandler+0x1e8>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d009      	beq.n	80082b2 <HAL_DMA_IRQHandler+0xd2>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a4a      	ldr	r2, [pc, #296]	; (80083cc <HAL_DMA_IRQHandler+0x1ec>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d004      	beq.n	80082b2 <HAL_DMA_IRQHandler+0xd2>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a48      	ldr	r2, [pc, #288]	; (80083d0 <HAL_DMA_IRQHandler+0x1f0>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d101      	bne.n	80082b6 <HAL_DMA_IRQHandler+0xd6>
 80082b2:	2301      	movs	r3, #1
 80082b4:	e000      	b.n	80082b8 <HAL_DMA_IRQHandler+0xd8>
 80082b6:	2300      	movs	r3, #0
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	f000 842b 	beq.w	8008b14 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082c2:	f003 031f 	and.w	r3, r3, #31
 80082c6:	2208      	movs	r2, #8
 80082c8:	409a      	lsls	r2, r3
 80082ca:	69bb      	ldr	r3, [r7, #24]
 80082cc:	4013      	ands	r3, r2
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	f000 80a2 	beq.w	8008418 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a2e      	ldr	r2, [pc, #184]	; (8008394 <HAL_DMA_IRQHandler+0x1b4>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d04a      	beq.n	8008374 <HAL_DMA_IRQHandler+0x194>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a2d      	ldr	r2, [pc, #180]	; (8008398 <HAL_DMA_IRQHandler+0x1b8>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d045      	beq.n	8008374 <HAL_DMA_IRQHandler+0x194>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a2b      	ldr	r2, [pc, #172]	; (800839c <HAL_DMA_IRQHandler+0x1bc>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d040      	beq.n	8008374 <HAL_DMA_IRQHandler+0x194>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a2a      	ldr	r2, [pc, #168]	; (80083a0 <HAL_DMA_IRQHandler+0x1c0>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d03b      	beq.n	8008374 <HAL_DMA_IRQHandler+0x194>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a28      	ldr	r2, [pc, #160]	; (80083a4 <HAL_DMA_IRQHandler+0x1c4>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d036      	beq.n	8008374 <HAL_DMA_IRQHandler+0x194>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a27      	ldr	r2, [pc, #156]	; (80083a8 <HAL_DMA_IRQHandler+0x1c8>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d031      	beq.n	8008374 <HAL_DMA_IRQHandler+0x194>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a25      	ldr	r2, [pc, #148]	; (80083ac <HAL_DMA_IRQHandler+0x1cc>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d02c      	beq.n	8008374 <HAL_DMA_IRQHandler+0x194>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a24      	ldr	r2, [pc, #144]	; (80083b0 <HAL_DMA_IRQHandler+0x1d0>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d027      	beq.n	8008374 <HAL_DMA_IRQHandler+0x194>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a22      	ldr	r2, [pc, #136]	; (80083b4 <HAL_DMA_IRQHandler+0x1d4>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d022      	beq.n	8008374 <HAL_DMA_IRQHandler+0x194>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a21      	ldr	r2, [pc, #132]	; (80083b8 <HAL_DMA_IRQHandler+0x1d8>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d01d      	beq.n	8008374 <HAL_DMA_IRQHandler+0x194>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a1f      	ldr	r2, [pc, #124]	; (80083bc <HAL_DMA_IRQHandler+0x1dc>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d018      	beq.n	8008374 <HAL_DMA_IRQHandler+0x194>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a1e      	ldr	r2, [pc, #120]	; (80083c0 <HAL_DMA_IRQHandler+0x1e0>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d013      	beq.n	8008374 <HAL_DMA_IRQHandler+0x194>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a1c      	ldr	r2, [pc, #112]	; (80083c4 <HAL_DMA_IRQHandler+0x1e4>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d00e      	beq.n	8008374 <HAL_DMA_IRQHandler+0x194>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a1b      	ldr	r2, [pc, #108]	; (80083c8 <HAL_DMA_IRQHandler+0x1e8>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d009      	beq.n	8008374 <HAL_DMA_IRQHandler+0x194>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a19      	ldr	r2, [pc, #100]	; (80083cc <HAL_DMA_IRQHandler+0x1ec>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d004      	beq.n	8008374 <HAL_DMA_IRQHandler+0x194>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a18      	ldr	r2, [pc, #96]	; (80083d0 <HAL_DMA_IRQHandler+0x1f0>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d12f      	bne.n	80083d4 <HAL_DMA_IRQHandler+0x1f4>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f003 0304 	and.w	r3, r3, #4
 800837e:	2b00      	cmp	r3, #0
 8008380:	bf14      	ite	ne
 8008382:	2301      	movne	r3, #1
 8008384:	2300      	moveq	r3, #0
 8008386:	b2db      	uxtb	r3, r3
 8008388:	e02e      	b.n	80083e8 <HAL_DMA_IRQHandler+0x208>
 800838a:	bf00      	nop
 800838c:	24000000 	.word	0x24000000
 8008390:	1b4e81b5 	.word	0x1b4e81b5
 8008394:	40020010 	.word	0x40020010
 8008398:	40020028 	.word	0x40020028
 800839c:	40020040 	.word	0x40020040
 80083a0:	40020058 	.word	0x40020058
 80083a4:	40020070 	.word	0x40020070
 80083a8:	40020088 	.word	0x40020088
 80083ac:	400200a0 	.word	0x400200a0
 80083b0:	400200b8 	.word	0x400200b8
 80083b4:	40020410 	.word	0x40020410
 80083b8:	40020428 	.word	0x40020428
 80083bc:	40020440 	.word	0x40020440
 80083c0:	40020458 	.word	0x40020458
 80083c4:	40020470 	.word	0x40020470
 80083c8:	40020488 	.word	0x40020488
 80083cc:	400204a0 	.word	0x400204a0
 80083d0:	400204b8 	.word	0x400204b8
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f003 0308 	and.w	r3, r3, #8
 80083de:	2b00      	cmp	r3, #0
 80083e0:	bf14      	ite	ne
 80083e2:	2301      	movne	r3, #1
 80083e4:	2300      	moveq	r3, #0
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d015      	beq.n	8008418 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f022 0204 	bic.w	r2, r2, #4
 80083fa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008400:	f003 031f 	and.w	r3, r3, #31
 8008404:	2208      	movs	r2, #8
 8008406:	409a      	lsls	r2, r3
 8008408:	6a3b      	ldr	r3, [r7, #32]
 800840a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008410:	f043 0201 	orr.w	r2, r3, #1
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800841c:	f003 031f 	and.w	r3, r3, #31
 8008420:	69ba      	ldr	r2, [r7, #24]
 8008422:	fa22 f303 	lsr.w	r3, r2, r3
 8008426:	f003 0301 	and.w	r3, r3, #1
 800842a:	2b00      	cmp	r3, #0
 800842c:	d06e      	beq.n	800850c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a69      	ldr	r2, [pc, #420]	; (80085d8 <HAL_DMA_IRQHandler+0x3f8>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d04a      	beq.n	80084ce <HAL_DMA_IRQHandler+0x2ee>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a67      	ldr	r2, [pc, #412]	; (80085dc <HAL_DMA_IRQHandler+0x3fc>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d045      	beq.n	80084ce <HAL_DMA_IRQHandler+0x2ee>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4a66      	ldr	r2, [pc, #408]	; (80085e0 <HAL_DMA_IRQHandler+0x400>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d040      	beq.n	80084ce <HAL_DMA_IRQHandler+0x2ee>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a64      	ldr	r2, [pc, #400]	; (80085e4 <HAL_DMA_IRQHandler+0x404>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d03b      	beq.n	80084ce <HAL_DMA_IRQHandler+0x2ee>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a63      	ldr	r2, [pc, #396]	; (80085e8 <HAL_DMA_IRQHandler+0x408>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d036      	beq.n	80084ce <HAL_DMA_IRQHandler+0x2ee>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a61      	ldr	r2, [pc, #388]	; (80085ec <HAL_DMA_IRQHandler+0x40c>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d031      	beq.n	80084ce <HAL_DMA_IRQHandler+0x2ee>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a60      	ldr	r2, [pc, #384]	; (80085f0 <HAL_DMA_IRQHandler+0x410>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d02c      	beq.n	80084ce <HAL_DMA_IRQHandler+0x2ee>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a5e      	ldr	r2, [pc, #376]	; (80085f4 <HAL_DMA_IRQHandler+0x414>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d027      	beq.n	80084ce <HAL_DMA_IRQHandler+0x2ee>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a5d      	ldr	r2, [pc, #372]	; (80085f8 <HAL_DMA_IRQHandler+0x418>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d022      	beq.n	80084ce <HAL_DMA_IRQHandler+0x2ee>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a5b      	ldr	r2, [pc, #364]	; (80085fc <HAL_DMA_IRQHandler+0x41c>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d01d      	beq.n	80084ce <HAL_DMA_IRQHandler+0x2ee>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a5a      	ldr	r2, [pc, #360]	; (8008600 <HAL_DMA_IRQHandler+0x420>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d018      	beq.n	80084ce <HAL_DMA_IRQHandler+0x2ee>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a58      	ldr	r2, [pc, #352]	; (8008604 <HAL_DMA_IRQHandler+0x424>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d013      	beq.n	80084ce <HAL_DMA_IRQHandler+0x2ee>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a57      	ldr	r2, [pc, #348]	; (8008608 <HAL_DMA_IRQHandler+0x428>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d00e      	beq.n	80084ce <HAL_DMA_IRQHandler+0x2ee>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a55      	ldr	r2, [pc, #340]	; (800860c <HAL_DMA_IRQHandler+0x42c>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d009      	beq.n	80084ce <HAL_DMA_IRQHandler+0x2ee>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a54      	ldr	r2, [pc, #336]	; (8008610 <HAL_DMA_IRQHandler+0x430>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d004      	beq.n	80084ce <HAL_DMA_IRQHandler+0x2ee>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a52      	ldr	r2, [pc, #328]	; (8008614 <HAL_DMA_IRQHandler+0x434>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d10a      	bne.n	80084e4 <HAL_DMA_IRQHandler+0x304>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	695b      	ldr	r3, [r3, #20]
 80084d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084d8:	2b00      	cmp	r3, #0
 80084da:	bf14      	ite	ne
 80084dc:	2301      	movne	r3, #1
 80084de:	2300      	moveq	r3, #0
 80084e0:	b2db      	uxtb	r3, r3
 80084e2:	e003      	b.n	80084ec <HAL_DMA_IRQHandler+0x30c>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	2300      	movs	r3, #0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d00d      	beq.n	800850c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084f4:	f003 031f 	and.w	r3, r3, #31
 80084f8:	2201      	movs	r2, #1
 80084fa:	409a      	lsls	r2, r3
 80084fc:	6a3b      	ldr	r3, [r7, #32]
 80084fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008504:	f043 0202 	orr.w	r2, r3, #2
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008510:	f003 031f 	and.w	r3, r3, #31
 8008514:	2204      	movs	r2, #4
 8008516:	409a      	lsls	r2, r3
 8008518:	69bb      	ldr	r3, [r7, #24]
 800851a:	4013      	ands	r3, r2
 800851c:	2b00      	cmp	r3, #0
 800851e:	f000 808f 	beq.w	8008640 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a2c      	ldr	r2, [pc, #176]	; (80085d8 <HAL_DMA_IRQHandler+0x3f8>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d04a      	beq.n	80085c2 <HAL_DMA_IRQHandler+0x3e2>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a2a      	ldr	r2, [pc, #168]	; (80085dc <HAL_DMA_IRQHandler+0x3fc>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d045      	beq.n	80085c2 <HAL_DMA_IRQHandler+0x3e2>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a29      	ldr	r2, [pc, #164]	; (80085e0 <HAL_DMA_IRQHandler+0x400>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d040      	beq.n	80085c2 <HAL_DMA_IRQHandler+0x3e2>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a27      	ldr	r2, [pc, #156]	; (80085e4 <HAL_DMA_IRQHandler+0x404>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d03b      	beq.n	80085c2 <HAL_DMA_IRQHandler+0x3e2>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a26      	ldr	r2, [pc, #152]	; (80085e8 <HAL_DMA_IRQHandler+0x408>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d036      	beq.n	80085c2 <HAL_DMA_IRQHandler+0x3e2>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a24      	ldr	r2, [pc, #144]	; (80085ec <HAL_DMA_IRQHandler+0x40c>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d031      	beq.n	80085c2 <HAL_DMA_IRQHandler+0x3e2>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a23      	ldr	r2, [pc, #140]	; (80085f0 <HAL_DMA_IRQHandler+0x410>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d02c      	beq.n	80085c2 <HAL_DMA_IRQHandler+0x3e2>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a21      	ldr	r2, [pc, #132]	; (80085f4 <HAL_DMA_IRQHandler+0x414>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d027      	beq.n	80085c2 <HAL_DMA_IRQHandler+0x3e2>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a20      	ldr	r2, [pc, #128]	; (80085f8 <HAL_DMA_IRQHandler+0x418>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d022      	beq.n	80085c2 <HAL_DMA_IRQHandler+0x3e2>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a1e      	ldr	r2, [pc, #120]	; (80085fc <HAL_DMA_IRQHandler+0x41c>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d01d      	beq.n	80085c2 <HAL_DMA_IRQHandler+0x3e2>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a1d      	ldr	r2, [pc, #116]	; (8008600 <HAL_DMA_IRQHandler+0x420>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d018      	beq.n	80085c2 <HAL_DMA_IRQHandler+0x3e2>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a1b      	ldr	r2, [pc, #108]	; (8008604 <HAL_DMA_IRQHandler+0x424>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d013      	beq.n	80085c2 <HAL_DMA_IRQHandler+0x3e2>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a1a      	ldr	r2, [pc, #104]	; (8008608 <HAL_DMA_IRQHandler+0x428>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d00e      	beq.n	80085c2 <HAL_DMA_IRQHandler+0x3e2>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a18      	ldr	r2, [pc, #96]	; (800860c <HAL_DMA_IRQHandler+0x42c>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d009      	beq.n	80085c2 <HAL_DMA_IRQHandler+0x3e2>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a17      	ldr	r2, [pc, #92]	; (8008610 <HAL_DMA_IRQHandler+0x430>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d004      	beq.n	80085c2 <HAL_DMA_IRQHandler+0x3e2>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a15      	ldr	r2, [pc, #84]	; (8008614 <HAL_DMA_IRQHandler+0x434>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d12a      	bne.n	8008618 <HAL_DMA_IRQHandler+0x438>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f003 0302 	and.w	r3, r3, #2
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	bf14      	ite	ne
 80085d0:	2301      	movne	r3, #1
 80085d2:	2300      	moveq	r3, #0
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	e023      	b.n	8008620 <HAL_DMA_IRQHandler+0x440>
 80085d8:	40020010 	.word	0x40020010
 80085dc:	40020028 	.word	0x40020028
 80085e0:	40020040 	.word	0x40020040
 80085e4:	40020058 	.word	0x40020058
 80085e8:	40020070 	.word	0x40020070
 80085ec:	40020088 	.word	0x40020088
 80085f0:	400200a0 	.word	0x400200a0
 80085f4:	400200b8 	.word	0x400200b8
 80085f8:	40020410 	.word	0x40020410
 80085fc:	40020428 	.word	0x40020428
 8008600:	40020440 	.word	0x40020440
 8008604:	40020458 	.word	0x40020458
 8008608:	40020470 	.word	0x40020470
 800860c:	40020488 	.word	0x40020488
 8008610:	400204a0 	.word	0x400204a0
 8008614:	400204b8 	.word	0x400204b8
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	2300      	movs	r3, #0
 8008620:	2b00      	cmp	r3, #0
 8008622:	d00d      	beq.n	8008640 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008628:	f003 031f 	and.w	r3, r3, #31
 800862c:	2204      	movs	r2, #4
 800862e:	409a      	lsls	r2, r3
 8008630:	6a3b      	ldr	r3, [r7, #32]
 8008632:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008638:	f043 0204 	orr.w	r2, r3, #4
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008644:	f003 031f 	and.w	r3, r3, #31
 8008648:	2210      	movs	r2, #16
 800864a:	409a      	lsls	r2, r3
 800864c:	69bb      	ldr	r3, [r7, #24]
 800864e:	4013      	ands	r3, r2
 8008650:	2b00      	cmp	r3, #0
 8008652:	f000 80a6 	beq.w	80087a2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a85      	ldr	r2, [pc, #532]	; (8008870 <HAL_DMA_IRQHandler+0x690>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d04a      	beq.n	80086f6 <HAL_DMA_IRQHandler+0x516>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a83      	ldr	r2, [pc, #524]	; (8008874 <HAL_DMA_IRQHandler+0x694>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d045      	beq.n	80086f6 <HAL_DMA_IRQHandler+0x516>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a82      	ldr	r2, [pc, #520]	; (8008878 <HAL_DMA_IRQHandler+0x698>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d040      	beq.n	80086f6 <HAL_DMA_IRQHandler+0x516>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a80      	ldr	r2, [pc, #512]	; (800887c <HAL_DMA_IRQHandler+0x69c>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d03b      	beq.n	80086f6 <HAL_DMA_IRQHandler+0x516>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a7f      	ldr	r2, [pc, #508]	; (8008880 <HAL_DMA_IRQHandler+0x6a0>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d036      	beq.n	80086f6 <HAL_DMA_IRQHandler+0x516>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a7d      	ldr	r2, [pc, #500]	; (8008884 <HAL_DMA_IRQHandler+0x6a4>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d031      	beq.n	80086f6 <HAL_DMA_IRQHandler+0x516>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a7c      	ldr	r2, [pc, #496]	; (8008888 <HAL_DMA_IRQHandler+0x6a8>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d02c      	beq.n	80086f6 <HAL_DMA_IRQHandler+0x516>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a7a      	ldr	r2, [pc, #488]	; (800888c <HAL_DMA_IRQHandler+0x6ac>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d027      	beq.n	80086f6 <HAL_DMA_IRQHandler+0x516>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a79      	ldr	r2, [pc, #484]	; (8008890 <HAL_DMA_IRQHandler+0x6b0>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d022      	beq.n	80086f6 <HAL_DMA_IRQHandler+0x516>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a77      	ldr	r2, [pc, #476]	; (8008894 <HAL_DMA_IRQHandler+0x6b4>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d01d      	beq.n	80086f6 <HAL_DMA_IRQHandler+0x516>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a76      	ldr	r2, [pc, #472]	; (8008898 <HAL_DMA_IRQHandler+0x6b8>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d018      	beq.n	80086f6 <HAL_DMA_IRQHandler+0x516>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a74      	ldr	r2, [pc, #464]	; (800889c <HAL_DMA_IRQHandler+0x6bc>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d013      	beq.n	80086f6 <HAL_DMA_IRQHandler+0x516>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a73      	ldr	r2, [pc, #460]	; (80088a0 <HAL_DMA_IRQHandler+0x6c0>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d00e      	beq.n	80086f6 <HAL_DMA_IRQHandler+0x516>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a71      	ldr	r2, [pc, #452]	; (80088a4 <HAL_DMA_IRQHandler+0x6c4>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d009      	beq.n	80086f6 <HAL_DMA_IRQHandler+0x516>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a70      	ldr	r2, [pc, #448]	; (80088a8 <HAL_DMA_IRQHandler+0x6c8>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d004      	beq.n	80086f6 <HAL_DMA_IRQHandler+0x516>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a6e      	ldr	r2, [pc, #440]	; (80088ac <HAL_DMA_IRQHandler+0x6cc>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d10a      	bne.n	800870c <HAL_DMA_IRQHandler+0x52c>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f003 0308 	and.w	r3, r3, #8
 8008700:	2b00      	cmp	r3, #0
 8008702:	bf14      	ite	ne
 8008704:	2301      	movne	r3, #1
 8008706:	2300      	moveq	r3, #0
 8008708:	b2db      	uxtb	r3, r3
 800870a:	e009      	b.n	8008720 <HAL_DMA_IRQHandler+0x540>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f003 0304 	and.w	r3, r3, #4
 8008716:	2b00      	cmp	r3, #0
 8008718:	bf14      	ite	ne
 800871a:	2301      	movne	r3, #1
 800871c:	2300      	moveq	r3, #0
 800871e:	b2db      	uxtb	r3, r3
 8008720:	2b00      	cmp	r3, #0
 8008722:	d03e      	beq.n	80087a2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008728:	f003 031f 	and.w	r3, r3, #31
 800872c:	2210      	movs	r2, #16
 800872e:	409a      	lsls	r2, r3
 8008730:	6a3b      	ldr	r3, [r7, #32]
 8008732:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800873e:	2b00      	cmp	r3, #0
 8008740:	d018      	beq.n	8008774 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800874c:	2b00      	cmp	r3, #0
 800874e:	d108      	bne.n	8008762 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008754:	2b00      	cmp	r3, #0
 8008756:	d024      	beq.n	80087a2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	4798      	blx	r3
 8008760:	e01f      	b.n	80087a2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008766:	2b00      	cmp	r3, #0
 8008768:	d01b      	beq.n	80087a2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	4798      	blx	r3
 8008772:	e016      	b.n	80087a2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800877e:	2b00      	cmp	r3, #0
 8008780:	d107      	bne.n	8008792 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	681a      	ldr	r2, [r3, #0]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f022 0208 	bic.w	r2, r2, #8
 8008790:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008796:	2b00      	cmp	r3, #0
 8008798:	d003      	beq.n	80087a2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087a6:	f003 031f 	and.w	r3, r3, #31
 80087aa:	2220      	movs	r2, #32
 80087ac:	409a      	lsls	r2, r3
 80087ae:	69bb      	ldr	r3, [r7, #24]
 80087b0:	4013      	ands	r3, r2
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	f000 8110 	beq.w	80089d8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a2c      	ldr	r2, [pc, #176]	; (8008870 <HAL_DMA_IRQHandler+0x690>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d04a      	beq.n	8008858 <HAL_DMA_IRQHandler+0x678>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a2b      	ldr	r2, [pc, #172]	; (8008874 <HAL_DMA_IRQHandler+0x694>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d045      	beq.n	8008858 <HAL_DMA_IRQHandler+0x678>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a29      	ldr	r2, [pc, #164]	; (8008878 <HAL_DMA_IRQHandler+0x698>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d040      	beq.n	8008858 <HAL_DMA_IRQHandler+0x678>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a28      	ldr	r2, [pc, #160]	; (800887c <HAL_DMA_IRQHandler+0x69c>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d03b      	beq.n	8008858 <HAL_DMA_IRQHandler+0x678>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a26      	ldr	r2, [pc, #152]	; (8008880 <HAL_DMA_IRQHandler+0x6a0>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d036      	beq.n	8008858 <HAL_DMA_IRQHandler+0x678>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a25      	ldr	r2, [pc, #148]	; (8008884 <HAL_DMA_IRQHandler+0x6a4>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d031      	beq.n	8008858 <HAL_DMA_IRQHandler+0x678>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a23      	ldr	r2, [pc, #140]	; (8008888 <HAL_DMA_IRQHandler+0x6a8>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d02c      	beq.n	8008858 <HAL_DMA_IRQHandler+0x678>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a22      	ldr	r2, [pc, #136]	; (800888c <HAL_DMA_IRQHandler+0x6ac>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d027      	beq.n	8008858 <HAL_DMA_IRQHandler+0x678>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a20      	ldr	r2, [pc, #128]	; (8008890 <HAL_DMA_IRQHandler+0x6b0>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d022      	beq.n	8008858 <HAL_DMA_IRQHandler+0x678>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a1f      	ldr	r2, [pc, #124]	; (8008894 <HAL_DMA_IRQHandler+0x6b4>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d01d      	beq.n	8008858 <HAL_DMA_IRQHandler+0x678>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a1d      	ldr	r2, [pc, #116]	; (8008898 <HAL_DMA_IRQHandler+0x6b8>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d018      	beq.n	8008858 <HAL_DMA_IRQHandler+0x678>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a1c      	ldr	r2, [pc, #112]	; (800889c <HAL_DMA_IRQHandler+0x6bc>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d013      	beq.n	8008858 <HAL_DMA_IRQHandler+0x678>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a1a      	ldr	r2, [pc, #104]	; (80088a0 <HAL_DMA_IRQHandler+0x6c0>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d00e      	beq.n	8008858 <HAL_DMA_IRQHandler+0x678>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a19      	ldr	r2, [pc, #100]	; (80088a4 <HAL_DMA_IRQHandler+0x6c4>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d009      	beq.n	8008858 <HAL_DMA_IRQHandler+0x678>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a17      	ldr	r2, [pc, #92]	; (80088a8 <HAL_DMA_IRQHandler+0x6c8>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d004      	beq.n	8008858 <HAL_DMA_IRQHandler+0x678>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a16      	ldr	r2, [pc, #88]	; (80088ac <HAL_DMA_IRQHandler+0x6cc>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d12b      	bne.n	80088b0 <HAL_DMA_IRQHandler+0x6d0>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f003 0310 	and.w	r3, r3, #16
 8008862:	2b00      	cmp	r3, #0
 8008864:	bf14      	ite	ne
 8008866:	2301      	movne	r3, #1
 8008868:	2300      	moveq	r3, #0
 800886a:	b2db      	uxtb	r3, r3
 800886c:	e02a      	b.n	80088c4 <HAL_DMA_IRQHandler+0x6e4>
 800886e:	bf00      	nop
 8008870:	40020010 	.word	0x40020010
 8008874:	40020028 	.word	0x40020028
 8008878:	40020040 	.word	0x40020040
 800887c:	40020058 	.word	0x40020058
 8008880:	40020070 	.word	0x40020070
 8008884:	40020088 	.word	0x40020088
 8008888:	400200a0 	.word	0x400200a0
 800888c:	400200b8 	.word	0x400200b8
 8008890:	40020410 	.word	0x40020410
 8008894:	40020428 	.word	0x40020428
 8008898:	40020440 	.word	0x40020440
 800889c:	40020458 	.word	0x40020458
 80088a0:	40020470 	.word	0x40020470
 80088a4:	40020488 	.word	0x40020488
 80088a8:	400204a0 	.word	0x400204a0
 80088ac:	400204b8 	.word	0x400204b8
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f003 0302 	and.w	r3, r3, #2
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	bf14      	ite	ne
 80088be:	2301      	movne	r3, #1
 80088c0:	2300      	moveq	r3, #0
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	f000 8087 	beq.w	80089d8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088ce:	f003 031f 	and.w	r3, r3, #31
 80088d2:	2220      	movs	r2, #32
 80088d4:	409a      	lsls	r2, r3
 80088d6:	6a3b      	ldr	r3, [r7, #32]
 80088d8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	2b04      	cmp	r3, #4
 80088e4:	d139      	bne.n	800895a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	681a      	ldr	r2, [r3, #0]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f022 0216 	bic.w	r2, r2, #22
 80088f4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	695a      	ldr	r2, [r3, #20]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008904:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800890a:	2b00      	cmp	r3, #0
 800890c:	d103      	bne.n	8008916 <HAL_DMA_IRQHandler+0x736>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008912:	2b00      	cmp	r3, #0
 8008914:	d007      	beq.n	8008926 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f022 0208 	bic.w	r2, r2, #8
 8008924:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800892a:	f003 031f 	and.w	r3, r3, #31
 800892e:	223f      	movs	r2, #63	; 0x3f
 8008930:	409a      	lsls	r2, r3
 8008932:	6a3b      	ldr	r3, [r7, #32]
 8008934:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2201      	movs	r2, #1
 800893a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800894a:	2b00      	cmp	r3, #0
 800894c:	f000 834a 	beq.w	8008fe4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	4798      	blx	r3
          }
          return;
 8008958:	e344      	b.n	8008fe4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008964:	2b00      	cmp	r3, #0
 8008966:	d018      	beq.n	800899a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008972:	2b00      	cmp	r3, #0
 8008974:	d108      	bne.n	8008988 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800897a:	2b00      	cmp	r3, #0
 800897c:	d02c      	beq.n	80089d8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	4798      	blx	r3
 8008986:	e027      	b.n	80089d8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800898c:	2b00      	cmp	r3, #0
 800898e:	d023      	beq.n	80089d8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	4798      	blx	r3
 8008998:	e01e      	b.n	80089d8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d10f      	bne.n	80089c8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f022 0210 	bic.w	r2, r2, #16
 80089b6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2201      	movs	r2, #1
 80089bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2200      	movs	r2, #0
 80089c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d003      	beq.n	80089d8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089dc:	2b00      	cmp	r3, #0
 80089de:	f000 8306 	beq.w	8008fee <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089e6:	f003 0301 	and.w	r3, r3, #1
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	f000 8088 	beq.w	8008b00 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2204      	movs	r2, #4
 80089f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a7a      	ldr	r2, [pc, #488]	; (8008be8 <HAL_DMA_IRQHandler+0xa08>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d04a      	beq.n	8008a98 <HAL_DMA_IRQHandler+0x8b8>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4a79      	ldr	r2, [pc, #484]	; (8008bec <HAL_DMA_IRQHandler+0xa0c>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d045      	beq.n	8008a98 <HAL_DMA_IRQHandler+0x8b8>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a77      	ldr	r2, [pc, #476]	; (8008bf0 <HAL_DMA_IRQHandler+0xa10>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d040      	beq.n	8008a98 <HAL_DMA_IRQHandler+0x8b8>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a76      	ldr	r2, [pc, #472]	; (8008bf4 <HAL_DMA_IRQHandler+0xa14>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d03b      	beq.n	8008a98 <HAL_DMA_IRQHandler+0x8b8>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4a74      	ldr	r2, [pc, #464]	; (8008bf8 <HAL_DMA_IRQHandler+0xa18>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d036      	beq.n	8008a98 <HAL_DMA_IRQHandler+0x8b8>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4a73      	ldr	r2, [pc, #460]	; (8008bfc <HAL_DMA_IRQHandler+0xa1c>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d031      	beq.n	8008a98 <HAL_DMA_IRQHandler+0x8b8>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4a71      	ldr	r2, [pc, #452]	; (8008c00 <HAL_DMA_IRQHandler+0xa20>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d02c      	beq.n	8008a98 <HAL_DMA_IRQHandler+0x8b8>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4a70      	ldr	r2, [pc, #448]	; (8008c04 <HAL_DMA_IRQHandler+0xa24>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d027      	beq.n	8008a98 <HAL_DMA_IRQHandler+0x8b8>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a6e      	ldr	r2, [pc, #440]	; (8008c08 <HAL_DMA_IRQHandler+0xa28>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d022      	beq.n	8008a98 <HAL_DMA_IRQHandler+0x8b8>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4a6d      	ldr	r2, [pc, #436]	; (8008c0c <HAL_DMA_IRQHandler+0xa2c>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d01d      	beq.n	8008a98 <HAL_DMA_IRQHandler+0x8b8>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a6b      	ldr	r2, [pc, #428]	; (8008c10 <HAL_DMA_IRQHandler+0xa30>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d018      	beq.n	8008a98 <HAL_DMA_IRQHandler+0x8b8>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a6a      	ldr	r2, [pc, #424]	; (8008c14 <HAL_DMA_IRQHandler+0xa34>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d013      	beq.n	8008a98 <HAL_DMA_IRQHandler+0x8b8>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a68      	ldr	r2, [pc, #416]	; (8008c18 <HAL_DMA_IRQHandler+0xa38>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d00e      	beq.n	8008a98 <HAL_DMA_IRQHandler+0x8b8>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a67      	ldr	r2, [pc, #412]	; (8008c1c <HAL_DMA_IRQHandler+0xa3c>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d009      	beq.n	8008a98 <HAL_DMA_IRQHandler+0x8b8>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4a65      	ldr	r2, [pc, #404]	; (8008c20 <HAL_DMA_IRQHandler+0xa40>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d004      	beq.n	8008a98 <HAL_DMA_IRQHandler+0x8b8>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4a64      	ldr	r2, [pc, #400]	; (8008c24 <HAL_DMA_IRQHandler+0xa44>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d108      	bne.n	8008aaa <HAL_DMA_IRQHandler+0x8ca>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f022 0201 	bic.w	r2, r2, #1
 8008aa6:	601a      	str	r2, [r3, #0]
 8008aa8:	e007      	b.n	8008aba <HAL_DMA_IRQHandler+0x8da>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	681a      	ldr	r2, [r3, #0]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f022 0201 	bic.w	r2, r2, #1
 8008ab8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	3301      	adds	r3, #1
 8008abe:	60fb      	str	r3, [r7, #12]
 8008ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d307      	bcc.n	8008ad6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f003 0301 	and.w	r3, r3, #1
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d1f2      	bne.n	8008aba <HAL_DMA_IRQHandler+0x8da>
 8008ad4:	e000      	b.n	8008ad8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8008ad6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f003 0301 	and.w	r3, r3, #1
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d004      	beq.n	8008af0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2203      	movs	r2, #3
 8008aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8008aee:	e003      	b.n	8008af8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2201      	movs	r2, #1
 8008af4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2200      	movs	r2, #0
 8008afc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	f000 8272 	beq.w	8008fee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	4798      	blx	r3
 8008b12:	e26c      	b.n	8008fee <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a43      	ldr	r2, [pc, #268]	; (8008c28 <HAL_DMA_IRQHandler+0xa48>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d022      	beq.n	8008b64 <HAL_DMA_IRQHandler+0x984>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4a42      	ldr	r2, [pc, #264]	; (8008c2c <HAL_DMA_IRQHandler+0xa4c>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d01d      	beq.n	8008b64 <HAL_DMA_IRQHandler+0x984>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a40      	ldr	r2, [pc, #256]	; (8008c30 <HAL_DMA_IRQHandler+0xa50>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d018      	beq.n	8008b64 <HAL_DMA_IRQHandler+0x984>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4a3f      	ldr	r2, [pc, #252]	; (8008c34 <HAL_DMA_IRQHandler+0xa54>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d013      	beq.n	8008b64 <HAL_DMA_IRQHandler+0x984>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a3d      	ldr	r2, [pc, #244]	; (8008c38 <HAL_DMA_IRQHandler+0xa58>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d00e      	beq.n	8008b64 <HAL_DMA_IRQHandler+0x984>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a3c      	ldr	r2, [pc, #240]	; (8008c3c <HAL_DMA_IRQHandler+0xa5c>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d009      	beq.n	8008b64 <HAL_DMA_IRQHandler+0x984>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4a3a      	ldr	r2, [pc, #232]	; (8008c40 <HAL_DMA_IRQHandler+0xa60>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d004      	beq.n	8008b64 <HAL_DMA_IRQHandler+0x984>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4a39      	ldr	r2, [pc, #228]	; (8008c44 <HAL_DMA_IRQHandler+0xa64>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d101      	bne.n	8008b68 <HAL_DMA_IRQHandler+0x988>
 8008b64:	2301      	movs	r3, #1
 8008b66:	e000      	b.n	8008b6a <HAL_DMA_IRQHandler+0x98a>
 8008b68:	2300      	movs	r3, #0
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	f000 823f 	beq.w	8008fee <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b7c:	f003 031f 	and.w	r3, r3, #31
 8008b80:	2204      	movs	r2, #4
 8008b82:	409a      	lsls	r2, r3
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	4013      	ands	r3, r2
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	f000 80cd 	beq.w	8008d28 <HAL_DMA_IRQHandler+0xb48>
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	f003 0304 	and.w	r3, r3, #4
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	f000 80c7 	beq.w	8008d28 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b9e:	f003 031f 	and.w	r3, r3, #31
 8008ba2:	2204      	movs	r2, #4
 8008ba4:	409a      	lsls	r2, r3
 8008ba6:	69fb      	ldr	r3, [r7, #28]
 8008ba8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d049      	beq.n	8008c48 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d109      	bne.n	8008bd2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	f000 8210 	beq.w	8008fe8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008bd0:	e20a      	b.n	8008fe8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	f000 8206 	beq.w	8008fe8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008be4:	e200      	b.n	8008fe8 <HAL_DMA_IRQHandler+0xe08>
 8008be6:	bf00      	nop
 8008be8:	40020010 	.word	0x40020010
 8008bec:	40020028 	.word	0x40020028
 8008bf0:	40020040 	.word	0x40020040
 8008bf4:	40020058 	.word	0x40020058
 8008bf8:	40020070 	.word	0x40020070
 8008bfc:	40020088 	.word	0x40020088
 8008c00:	400200a0 	.word	0x400200a0
 8008c04:	400200b8 	.word	0x400200b8
 8008c08:	40020410 	.word	0x40020410
 8008c0c:	40020428 	.word	0x40020428
 8008c10:	40020440 	.word	0x40020440
 8008c14:	40020458 	.word	0x40020458
 8008c18:	40020470 	.word	0x40020470
 8008c1c:	40020488 	.word	0x40020488
 8008c20:	400204a0 	.word	0x400204a0
 8008c24:	400204b8 	.word	0x400204b8
 8008c28:	58025408 	.word	0x58025408
 8008c2c:	5802541c 	.word	0x5802541c
 8008c30:	58025430 	.word	0x58025430
 8008c34:	58025444 	.word	0x58025444
 8008c38:	58025458 	.word	0x58025458
 8008c3c:	5802546c 	.word	0x5802546c
 8008c40:	58025480 	.word	0x58025480
 8008c44:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	f003 0320 	and.w	r3, r3, #32
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d160      	bne.n	8008d14 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4a7f      	ldr	r2, [pc, #508]	; (8008e54 <HAL_DMA_IRQHandler+0xc74>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d04a      	beq.n	8008cf2 <HAL_DMA_IRQHandler+0xb12>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a7d      	ldr	r2, [pc, #500]	; (8008e58 <HAL_DMA_IRQHandler+0xc78>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d045      	beq.n	8008cf2 <HAL_DMA_IRQHandler+0xb12>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a7c      	ldr	r2, [pc, #496]	; (8008e5c <HAL_DMA_IRQHandler+0xc7c>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d040      	beq.n	8008cf2 <HAL_DMA_IRQHandler+0xb12>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a7a      	ldr	r2, [pc, #488]	; (8008e60 <HAL_DMA_IRQHandler+0xc80>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d03b      	beq.n	8008cf2 <HAL_DMA_IRQHandler+0xb12>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a79      	ldr	r2, [pc, #484]	; (8008e64 <HAL_DMA_IRQHandler+0xc84>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d036      	beq.n	8008cf2 <HAL_DMA_IRQHandler+0xb12>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a77      	ldr	r2, [pc, #476]	; (8008e68 <HAL_DMA_IRQHandler+0xc88>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d031      	beq.n	8008cf2 <HAL_DMA_IRQHandler+0xb12>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a76      	ldr	r2, [pc, #472]	; (8008e6c <HAL_DMA_IRQHandler+0xc8c>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d02c      	beq.n	8008cf2 <HAL_DMA_IRQHandler+0xb12>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a74      	ldr	r2, [pc, #464]	; (8008e70 <HAL_DMA_IRQHandler+0xc90>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d027      	beq.n	8008cf2 <HAL_DMA_IRQHandler+0xb12>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a73      	ldr	r2, [pc, #460]	; (8008e74 <HAL_DMA_IRQHandler+0xc94>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d022      	beq.n	8008cf2 <HAL_DMA_IRQHandler+0xb12>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a71      	ldr	r2, [pc, #452]	; (8008e78 <HAL_DMA_IRQHandler+0xc98>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d01d      	beq.n	8008cf2 <HAL_DMA_IRQHandler+0xb12>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a70      	ldr	r2, [pc, #448]	; (8008e7c <HAL_DMA_IRQHandler+0xc9c>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d018      	beq.n	8008cf2 <HAL_DMA_IRQHandler+0xb12>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a6e      	ldr	r2, [pc, #440]	; (8008e80 <HAL_DMA_IRQHandler+0xca0>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d013      	beq.n	8008cf2 <HAL_DMA_IRQHandler+0xb12>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4a6d      	ldr	r2, [pc, #436]	; (8008e84 <HAL_DMA_IRQHandler+0xca4>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d00e      	beq.n	8008cf2 <HAL_DMA_IRQHandler+0xb12>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4a6b      	ldr	r2, [pc, #428]	; (8008e88 <HAL_DMA_IRQHandler+0xca8>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d009      	beq.n	8008cf2 <HAL_DMA_IRQHandler+0xb12>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4a6a      	ldr	r2, [pc, #424]	; (8008e8c <HAL_DMA_IRQHandler+0xcac>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d004      	beq.n	8008cf2 <HAL_DMA_IRQHandler+0xb12>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a68      	ldr	r2, [pc, #416]	; (8008e90 <HAL_DMA_IRQHandler+0xcb0>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d108      	bne.n	8008d04 <HAL_DMA_IRQHandler+0xb24>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f022 0208 	bic.w	r2, r2, #8
 8008d00:	601a      	str	r2, [r3, #0]
 8008d02:	e007      	b.n	8008d14 <HAL_DMA_IRQHandler+0xb34>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f022 0204 	bic.w	r2, r2, #4
 8008d12:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	f000 8165 	beq.w	8008fe8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008d26:	e15f      	b.n	8008fe8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d2c:	f003 031f 	and.w	r3, r3, #31
 8008d30:	2202      	movs	r2, #2
 8008d32:	409a      	lsls	r2, r3
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	4013      	ands	r3, r2
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	f000 80c5 	beq.w	8008ec8 <HAL_DMA_IRQHandler+0xce8>
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	f003 0302 	and.w	r3, r3, #2
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	f000 80bf 	beq.w	8008ec8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d4e:	f003 031f 	and.w	r3, r3, #31
 8008d52:	2202      	movs	r2, #2
 8008d54:	409a      	lsls	r2, r3
 8008d56:	69fb      	ldr	r3, [r7, #28]
 8008d58:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d018      	beq.n	8008d96 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d109      	bne.n	8008d82 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	f000 813a 	beq.w	8008fec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008d80:	e134      	b.n	8008fec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	f000 8130 	beq.w	8008fec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008d94:	e12a      	b.n	8008fec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	f003 0320 	and.w	r3, r3, #32
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	f040 8089 	bne.w	8008eb4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a2b      	ldr	r2, [pc, #172]	; (8008e54 <HAL_DMA_IRQHandler+0xc74>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d04a      	beq.n	8008e42 <HAL_DMA_IRQHandler+0xc62>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a29      	ldr	r2, [pc, #164]	; (8008e58 <HAL_DMA_IRQHandler+0xc78>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d045      	beq.n	8008e42 <HAL_DMA_IRQHandler+0xc62>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a28      	ldr	r2, [pc, #160]	; (8008e5c <HAL_DMA_IRQHandler+0xc7c>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d040      	beq.n	8008e42 <HAL_DMA_IRQHandler+0xc62>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a26      	ldr	r2, [pc, #152]	; (8008e60 <HAL_DMA_IRQHandler+0xc80>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d03b      	beq.n	8008e42 <HAL_DMA_IRQHandler+0xc62>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a25      	ldr	r2, [pc, #148]	; (8008e64 <HAL_DMA_IRQHandler+0xc84>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d036      	beq.n	8008e42 <HAL_DMA_IRQHandler+0xc62>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a23      	ldr	r2, [pc, #140]	; (8008e68 <HAL_DMA_IRQHandler+0xc88>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d031      	beq.n	8008e42 <HAL_DMA_IRQHandler+0xc62>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a22      	ldr	r2, [pc, #136]	; (8008e6c <HAL_DMA_IRQHandler+0xc8c>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d02c      	beq.n	8008e42 <HAL_DMA_IRQHandler+0xc62>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a20      	ldr	r2, [pc, #128]	; (8008e70 <HAL_DMA_IRQHandler+0xc90>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d027      	beq.n	8008e42 <HAL_DMA_IRQHandler+0xc62>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a1f      	ldr	r2, [pc, #124]	; (8008e74 <HAL_DMA_IRQHandler+0xc94>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d022      	beq.n	8008e42 <HAL_DMA_IRQHandler+0xc62>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a1d      	ldr	r2, [pc, #116]	; (8008e78 <HAL_DMA_IRQHandler+0xc98>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d01d      	beq.n	8008e42 <HAL_DMA_IRQHandler+0xc62>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a1c      	ldr	r2, [pc, #112]	; (8008e7c <HAL_DMA_IRQHandler+0xc9c>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d018      	beq.n	8008e42 <HAL_DMA_IRQHandler+0xc62>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a1a      	ldr	r2, [pc, #104]	; (8008e80 <HAL_DMA_IRQHandler+0xca0>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d013      	beq.n	8008e42 <HAL_DMA_IRQHandler+0xc62>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a19      	ldr	r2, [pc, #100]	; (8008e84 <HAL_DMA_IRQHandler+0xca4>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d00e      	beq.n	8008e42 <HAL_DMA_IRQHandler+0xc62>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a17      	ldr	r2, [pc, #92]	; (8008e88 <HAL_DMA_IRQHandler+0xca8>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d009      	beq.n	8008e42 <HAL_DMA_IRQHandler+0xc62>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a16      	ldr	r2, [pc, #88]	; (8008e8c <HAL_DMA_IRQHandler+0xcac>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d004      	beq.n	8008e42 <HAL_DMA_IRQHandler+0xc62>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a14      	ldr	r2, [pc, #80]	; (8008e90 <HAL_DMA_IRQHandler+0xcb0>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d128      	bne.n	8008e94 <HAL_DMA_IRQHandler+0xcb4>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	681a      	ldr	r2, [r3, #0]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f022 0214 	bic.w	r2, r2, #20
 8008e50:	601a      	str	r2, [r3, #0]
 8008e52:	e027      	b.n	8008ea4 <HAL_DMA_IRQHandler+0xcc4>
 8008e54:	40020010 	.word	0x40020010
 8008e58:	40020028 	.word	0x40020028
 8008e5c:	40020040 	.word	0x40020040
 8008e60:	40020058 	.word	0x40020058
 8008e64:	40020070 	.word	0x40020070
 8008e68:	40020088 	.word	0x40020088
 8008e6c:	400200a0 	.word	0x400200a0
 8008e70:	400200b8 	.word	0x400200b8
 8008e74:	40020410 	.word	0x40020410
 8008e78:	40020428 	.word	0x40020428
 8008e7c:	40020440 	.word	0x40020440
 8008e80:	40020458 	.word	0x40020458
 8008e84:	40020470 	.word	0x40020470
 8008e88:	40020488 	.word	0x40020488
 8008e8c:	400204a0 	.word	0x400204a0
 8008e90:	400204b8 	.word	0x400204b8
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	681a      	ldr	r2, [r3, #0]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f022 020a 	bic.w	r2, r2, #10
 8008ea2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	f000 8097 	beq.w	8008fec <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008ec6:	e091      	b.n	8008fec <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ecc:	f003 031f 	and.w	r3, r3, #31
 8008ed0:	2208      	movs	r2, #8
 8008ed2:	409a      	lsls	r2, r3
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	4013      	ands	r3, r2
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	f000 8088 	beq.w	8008fee <HAL_DMA_IRQHandler+0xe0e>
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	f003 0308 	and.w	r3, r3, #8
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	f000 8082 	beq.w	8008fee <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a41      	ldr	r2, [pc, #260]	; (8008ff4 <HAL_DMA_IRQHandler+0xe14>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d04a      	beq.n	8008f8a <HAL_DMA_IRQHandler+0xdaa>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a3f      	ldr	r2, [pc, #252]	; (8008ff8 <HAL_DMA_IRQHandler+0xe18>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d045      	beq.n	8008f8a <HAL_DMA_IRQHandler+0xdaa>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a3e      	ldr	r2, [pc, #248]	; (8008ffc <HAL_DMA_IRQHandler+0xe1c>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d040      	beq.n	8008f8a <HAL_DMA_IRQHandler+0xdaa>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a3c      	ldr	r2, [pc, #240]	; (8009000 <HAL_DMA_IRQHandler+0xe20>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d03b      	beq.n	8008f8a <HAL_DMA_IRQHandler+0xdaa>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a3b      	ldr	r2, [pc, #236]	; (8009004 <HAL_DMA_IRQHandler+0xe24>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d036      	beq.n	8008f8a <HAL_DMA_IRQHandler+0xdaa>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a39      	ldr	r2, [pc, #228]	; (8009008 <HAL_DMA_IRQHandler+0xe28>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d031      	beq.n	8008f8a <HAL_DMA_IRQHandler+0xdaa>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a38      	ldr	r2, [pc, #224]	; (800900c <HAL_DMA_IRQHandler+0xe2c>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d02c      	beq.n	8008f8a <HAL_DMA_IRQHandler+0xdaa>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a36      	ldr	r2, [pc, #216]	; (8009010 <HAL_DMA_IRQHandler+0xe30>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d027      	beq.n	8008f8a <HAL_DMA_IRQHandler+0xdaa>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a35      	ldr	r2, [pc, #212]	; (8009014 <HAL_DMA_IRQHandler+0xe34>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d022      	beq.n	8008f8a <HAL_DMA_IRQHandler+0xdaa>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a33      	ldr	r2, [pc, #204]	; (8009018 <HAL_DMA_IRQHandler+0xe38>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d01d      	beq.n	8008f8a <HAL_DMA_IRQHandler+0xdaa>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a32      	ldr	r2, [pc, #200]	; (800901c <HAL_DMA_IRQHandler+0xe3c>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d018      	beq.n	8008f8a <HAL_DMA_IRQHandler+0xdaa>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a30      	ldr	r2, [pc, #192]	; (8009020 <HAL_DMA_IRQHandler+0xe40>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d013      	beq.n	8008f8a <HAL_DMA_IRQHandler+0xdaa>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a2f      	ldr	r2, [pc, #188]	; (8009024 <HAL_DMA_IRQHandler+0xe44>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d00e      	beq.n	8008f8a <HAL_DMA_IRQHandler+0xdaa>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a2d      	ldr	r2, [pc, #180]	; (8009028 <HAL_DMA_IRQHandler+0xe48>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d009      	beq.n	8008f8a <HAL_DMA_IRQHandler+0xdaa>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a2c      	ldr	r2, [pc, #176]	; (800902c <HAL_DMA_IRQHandler+0xe4c>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d004      	beq.n	8008f8a <HAL_DMA_IRQHandler+0xdaa>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a2a      	ldr	r2, [pc, #168]	; (8009030 <HAL_DMA_IRQHandler+0xe50>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d108      	bne.n	8008f9c <HAL_DMA_IRQHandler+0xdbc>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	681a      	ldr	r2, [r3, #0]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f022 021c 	bic.w	r2, r2, #28
 8008f98:	601a      	str	r2, [r3, #0]
 8008f9a:	e007      	b.n	8008fac <HAL_DMA_IRQHandler+0xdcc>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	681a      	ldr	r2, [r3, #0]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f022 020e 	bic.w	r2, r2, #14
 8008faa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fb0:	f003 031f 	and.w	r3, r3, #31
 8008fb4:	2201      	movs	r2, #1
 8008fb6:	409a      	lsls	r2, r3
 8008fb8:	69fb      	ldr	r3, [r7, #28]
 8008fba:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d009      	beq.n	8008fee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	4798      	blx	r3
 8008fe2:	e004      	b.n	8008fee <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008fe4:	bf00      	nop
 8008fe6:	e002      	b.n	8008fee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008fe8:	bf00      	nop
 8008fea:	e000      	b.n	8008fee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008fec:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008fee:	3728      	adds	r7, #40	; 0x28
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}
 8008ff4:	40020010 	.word	0x40020010
 8008ff8:	40020028 	.word	0x40020028
 8008ffc:	40020040 	.word	0x40020040
 8009000:	40020058 	.word	0x40020058
 8009004:	40020070 	.word	0x40020070
 8009008:	40020088 	.word	0x40020088
 800900c:	400200a0 	.word	0x400200a0
 8009010:	400200b8 	.word	0x400200b8
 8009014:	40020410 	.word	0x40020410
 8009018:	40020428 	.word	0x40020428
 800901c:	40020440 	.word	0x40020440
 8009020:	40020458 	.word	0x40020458
 8009024:	40020470 	.word	0x40020470
 8009028:	40020488 	.word	0x40020488
 800902c:	400204a0 	.word	0x400204a0
 8009030:	400204b8 	.word	0x400204b8

08009034 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009034:	b480      	push	{r7}
 8009036:	b087      	sub	sp, #28
 8009038:	af00      	add	r7, sp, #0
 800903a:	60f8      	str	r0, [r7, #12]
 800903c:	60b9      	str	r1, [r7, #8]
 800903e:	607a      	str	r2, [r7, #4]
 8009040:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009046:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800904c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4a7f      	ldr	r2, [pc, #508]	; (8009250 <DMA_SetConfig+0x21c>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d072      	beq.n	800913e <DMA_SetConfig+0x10a>
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4a7d      	ldr	r2, [pc, #500]	; (8009254 <DMA_SetConfig+0x220>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d06d      	beq.n	800913e <DMA_SetConfig+0x10a>
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4a7c      	ldr	r2, [pc, #496]	; (8009258 <DMA_SetConfig+0x224>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d068      	beq.n	800913e <DMA_SetConfig+0x10a>
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a7a      	ldr	r2, [pc, #488]	; (800925c <DMA_SetConfig+0x228>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d063      	beq.n	800913e <DMA_SetConfig+0x10a>
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4a79      	ldr	r2, [pc, #484]	; (8009260 <DMA_SetConfig+0x22c>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d05e      	beq.n	800913e <DMA_SetConfig+0x10a>
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a77      	ldr	r2, [pc, #476]	; (8009264 <DMA_SetConfig+0x230>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d059      	beq.n	800913e <DMA_SetConfig+0x10a>
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a76      	ldr	r2, [pc, #472]	; (8009268 <DMA_SetConfig+0x234>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d054      	beq.n	800913e <DMA_SetConfig+0x10a>
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a74      	ldr	r2, [pc, #464]	; (800926c <DMA_SetConfig+0x238>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d04f      	beq.n	800913e <DMA_SetConfig+0x10a>
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4a73      	ldr	r2, [pc, #460]	; (8009270 <DMA_SetConfig+0x23c>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d04a      	beq.n	800913e <DMA_SetConfig+0x10a>
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4a71      	ldr	r2, [pc, #452]	; (8009274 <DMA_SetConfig+0x240>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d045      	beq.n	800913e <DMA_SetConfig+0x10a>
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4a70      	ldr	r2, [pc, #448]	; (8009278 <DMA_SetConfig+0x244>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d040      	beq.n	800913e <DMA_SetConfig+0x10a>
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	4a6e      	ldr	r2, [pc, #440]	; (800927c <DMA_SetConfig+0x248>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d03b      	beq.n	800913e <DMA_SetConfig+0x10a>
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4a6d      	ldr	r2, [pc, #436]	; (8009280 <DMA_SetConfig+0x24c>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d036      	beq.n	800913e <DMA_SetConfig+0x10a>
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a6b      	ldr	r2, [pc, #428]	; (8009284 <DMA_SetConfig+0x250>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d031      	beq.n	800913e <DMA_SetConfig+0x10a>
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4a6a      	ldr	r2, [pc, #424]	; (8009288 <DMA_SetConfig+0x254>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d02c      	beq.n	800913e <DMA_SetConfig+0x10a>
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4a68      	ldr	r2, [pc, #416]	; (800928c <DMA_SetConfig+0x258>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d027      	beq.n	800913e <DMA_SetConfig+0x10a>
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4a67      	ldr	r2, [pc, #412]	; (8009290 <DMA_SetConfig+0x25c>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d022      	beq.n	800913e <DMA_SetConfig+0x10a>
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a65      	ldr	r2, [pc, #404]	; (8009294 <DMA_SetConfig+0x260>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d01d      	beq.n	800913e <DMA_SetConfig+0x10a>
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4a64      	ldr	r2, [pc, #400]	; (8009298 <DMA_SetConfig+0x264>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d018      	beq.n	800913e <DMA_SetConfig+0x10a>
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a62      	ldr	r2, [pc, #392]	; (800929c <DMA_SetConfig+0x268>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d013      	beq.n	800913e <DMA_SetConfig+0x10a>
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4a61      	ldr	r2, [pc, #388]	; (80092a0 <DMA_SetConfig+0x26c>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d00e      	beq.n	800913e <DMA_SetConfig+0x10a>
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4a5f      	ldr	r2, [pc, #380]	; (80092a4 <DMA_SetConfig+0x270>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d009      	beq.n	800913e <DMA_SetConfig+0x10a>
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4a5e      	ldr	r2, [pc, #376]	; (80092a8 <DMA_SetConfig+0x274>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d004      	beq.n	800913e <DMA_SetConfig+0x10a>
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a5c      	ldr	r2, [pc, #368]	; (80092ac <DMA_SetConfig+0x278>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d101      	bne.n	8009142 <DMA_SetConfig+0x10e>
 800913e:	2301      	movs	r3, #1
 8009140:	e000      	b.n	8009144 <DMA_SetConfig+0x110>
 8009142:	2300      	movs	r3, #0
 8009144:	2b00      	cmp	r3, #0
 8009146:	d00d      	beq.n	8009164 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800914c:	68fa      	ldr	r2, [r7, #12]
 800914e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009150:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009156:	2b00      	cmp	r3, #0
 8009158:	d004      	beq.n	8009164 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800915e:	68fa      	ldr	r2, [r7, #12]
 8009160:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009162:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a39      	ldr	r2, [pc, #228]	; (8009250 <DMA_SetConfig+0x21c>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d04a      	beq.n	8009204 <DMA_SetConfig+0x1d0>
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4a38      	ldr	r2, [pc, #224]	; (8009254 <DMA_SetConfig+0x220>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d045      	beq.n	8009204 <DMA_SetConfig+0x1d0>
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4a36      	ldr	r2, [pc, #216]	; (8009258 <DMA_SetConfig+0x224>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d040      	beq.n	8009204 <DMA_SetConfig+0x1d0>
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4a35      	ldr	r2, [pc, #212]	; (800925c <DMA_SetConfig+0x228>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d03b      	beq.n	8009204 <DMA_SetConfig+0x1d0>
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a33      	ldr	r2, [pc, #204]	; (8009260 <DMA_SetConfig+0x22c>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d036      	beq.n	8009204 <DMA_SetConfig+0x1d0>
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a32      	ldr	r2, [pc, #200]	; (8009264 <DMA_SetConfig+0x230>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d031      	beq.n	8009204 <DMA_SetConfig+0x1d0>
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4a30      	ldr	r2, [pc, #192]	; (8009268 <DMA_SetConfig+0x234>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d02c      	beq.n	8009204 <DMA_SetConfig+0x1d0>
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a2f      	ldr	r2, [pc, #188]	; (800926c <DMA_SetConfig+0x238>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d027      	beq.n	8009204 <DMA_SetConfig+0x1d0>
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4a2d      	ldr	r2, [pc, #180]	; (8009270 <DMA_SetConfig+0x23c>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d022      	beq.n	8009204 <DMA_SetConfig+0x1d0>
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4a2c      	ldr	r2, [pc, #176]	; (8009274 <DMA_SetConfig+0x240>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d01d      	beq.n	8009204 <DMA_SetConfig+0x1d0>
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a2a      	ldr	r2, [pc, #168]	; (8009278 <DMA_SetConfig+0x244>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d018      	beq.n	8009204 <DMA_SetConfig+0x1d0>
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a29      	ldr	r2, [pc, #164]	; (800927c <DMA_SetConfig+0x248>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d013      	beq.n	8009204 <DMA_SetConfig+0x1d0>
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a27      	ldr	r2, [pc, #156]	; (8009280 <DMA_SetConfig+0x24c>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d00e      	beq.n	8009204 <DMA_SetConfig+0x1d0>
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a26      	ldr	r2, [pc, #152]	; (8009284 <DMA_SetConfig+0x250>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d009      	beq.n	8009204 <DMA_SetConfig+0x1d0>
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a24      	ldr	r2, [pc, #144]	; (8009288 <DMA_SetConfig+0x254>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d004      	beq.n	8009204 <DMA_SetConfig+0x1d0>
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4a23      	ldr	r2, [pc, #140]	; (800928c <DMA_SetConfig+0x258>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d101      	bne.n	8009208 <DMA_SetConfig+0x1d4>
 8009204:	2301      	movs	r3, #1
 8009206:	e000      	b.n	800920a <DMA_SetConfig+0x1d6>
 8009208:	2300      	movs	r3, #0
 800920a:	2b00      	cmp	r3, #0
 800920c:	d059      	beq.n	80092c2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009212:	f003 031f 	and.w	r3, r3, #31
 8009216:	223f      	movs	r2, #63	; 0x3f
 8009218:	409a      	lsls	r2, r3
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	681a      	ldr	r2, [r3, #0]
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800922c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	683a      	ldr	r2, [r7, #0]
 8009234:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	689b      	ldr	r3, [r3, #8]
 800923a:	2b40      	cmp	r3, #64	; 0x40
 800923c:	d138      	bne.n	80092b0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	68ba      	ldr	r2, [r7, #8]
 800924c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800924e:	e086      	b.n	800935e <DMA_SetConfig+0x32a>
 8009250:	40020010 	.word	0x40020010
 8009254:	40020028 	.word	0x40020028
 8009258:	40020040 	.word	0x40020040
 800925c:	40020058 	.word	0x40020058
 8009260:	40020070 	.word	0x40020070
 8009264:	40020088 	.word	0x40020088
 8009268:	400200a0 	.word	0x400200a0
 800926c:	400200b8 	.word	0x400200b8
 8009270:	40020410 	.word	0x40020410
 8009274:	40020428 	.word	0x40020428
 8009278:	40020440 	.word	0x40020440
 800927c:	40020458 	.word	0x40020458
 8009280:	40020470 	.word	0x40020470
 8009284:	40020488 	.word	0x40020488
 8009288:	400204a0 	.word	0x400204a0
 800928c:	400204b8 	.word	0x400204b8
 8009290:	58025408 	.word	0x58025408
 8009294:	5802541c 	.word	0x5802541c
 8009298:	58025430 	.word	0x58025430
 800929c:	58025444 	.word	0x58025444
 80092a0:	58025458 	.word	0x58025458
 80092a4:	5802546c 	.word	0x5802546c
 80092a8:	58025480 	.word	0x58025480
 80092ac:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	68ba      	ldr	r2, [r7, #8]
 80092b6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	687a      	ldr	r2, [r7, #4]
 80092be:	60da      	str	r2, [r3, #12]
}
 80092c0:	e04d      	b.n	800935e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4a29      	ldr	r2, [pc, #164]	; (800936c <DMA_SetConfig+0x338>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d022      	beq.n	8009312 <DMA_SetConfig+0x2de>
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4a27      	ldr	r2, [pc, #156]	; (8009370 <DMA_SetConfig+0x33c>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d01d      	beq.n	8009312 <DMA_SetConfig+0x2de>
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4a26      	ldr	r2, [pc, #152]	; (8009374 <DMA_SetConfig+0x340>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d018      	beq.n	8009312 <DMA_SetConfig+0x2de>
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4a24      	ldr	r2, [pc, #144]	; (8009378 <DMA_SetConfig+0x344>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d013      	beq.n	8009312 <DMA_SetConfig+0x2de>
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4a23      	ldr	r2, [pc, #140]	; (800937c <DMA_SetConfig+0x348>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d00e      	beq.n	8009312 <DMA_SetConfig+0x2de>
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a21      	ldr	r2, [pc, #132]	; (8009380 <DMA_SetConfig+0x34c>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d009      	beq.n	8009312 <DMA_SetConfig+0x2de>
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4a20      	ldr	r2, [pc, #128]	; (8009384 <DMA_SetConfig+0x350>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d004      	beq.n	8009312 <DMA_SetConfig+0x2de>
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a1e      	ldr	r2, [pc, #120]	; (8009388 <DMA_SetConfig+0x354>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d101      	bne.n	8009316 <DMA_SetConfig+0x2e2>
 8009312:	2301      	movs	r3, #1
 8009314:	e000      	b.n	8009318 <DMA_SetConfig+0x2e4>
 8009316:	2300      	movs	r3, #0
 8009318:	2b00      	cmp	r3, #0
 800931a:	d020      	beq.n	800935e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009320:	f003 031f 	and.w	r3, r3, #31
 8009324:	2201      	movs	r2, #1
 8009326:	409a      	lsls	r2, r3
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	683a      	ldr	r2, [r7, #0]
 8009332:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	689b      	ldr	r3, [r3, #8]
 8009338:	2b40      	cmp	r3, #64	; 0x40
 800933a:	d108      	bne.n	800934e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	68ba      	ldr	r2, [r7, #8]
 800934a:	60da      	str	r2, [r3, #12]
}
 800934c:	e007      	b.n	800935e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	68ba      	ldr	r2, [r7, #8]
 8009354:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	687a      	ldr	r2, [r7, #4]
 800935c:	60da      	str	r2, [r3, #12]
}
 800935e:	bf00      	nop
 8009360:	371c      	adds	r7, #28
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr
 800936a:	bf00      	nop
 800936c:	58025408 	.word	0x58025408
 8009370:	5802541c 	.word	0x5802541c
 8009374:	58025430 	.word	0x58025430
 8009378:	58025444 	.word	0x58025444
 800937c:	58025458 	.word	0x58025458
 8009380:	5802546c 	.word	0x5802546c
 8009384:	58025480 	.word	0x58025480
 8009388:	58025494 	.word	0x58025494

0800938c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800938c:	b480      	push	{r7}
 800938e:	b085      	sub	sp, #20
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4a42      	ldr	r2, [pc, #264]	; (80094a4 <DMA_CalcBaseAndBitshift+0x118>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d04a      	beq.n	8009434 <DMA_CalcBaseAndBitshift+0xa8>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4a41      	ldr	r2, [pc, #260]	; (80094a8 <DMA_CalcBaseAndBitshift+0x11c>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d045      	beq.n	8009434 <DMA_CalcBaseAndBitshift+0xa8>
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4a3f      	ldr	r2, [pc, #252]	; (80094ac <DMA_CalcBaseAndBitshift+0x120>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d040      	beq.n	8009434 <DMA_CalcBaseAndBitshift+0xa8>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4a3e      	ldr	r2, [pc, #248]	; (80094b0 <DMA_CalcBaseAndBitshift+0x124>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d03b      	beq.n	8009434 <DMA_CalcBaseAndBitshift+0xa8>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4a3c      	ldr	r2, [pc, #240]	; (80094b4 <DMA_CalcBaseAndBitshift+0x128>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d036      	beq.n	8009434 <DMA_CalcBaseAndBitshift+0xa8>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a3b      	ldr	r2, [pc, #236]	; (80094b8 <DMA_CalcBaseAndBitshift+0x12c>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d031      	beq.n	8009434 <DMA_CalcBaseAndBitshift+0xa8>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4a39      	ldr	r2, [pc, #228]	; (80094bc <DMA_CalcBaseAndBitshift+0x130>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d02c      	beq.n	8009434 <DMA_CalcBaseAndBitshift+0xa8>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4a38      	ldr	r2, [pc, #224]	; (80094c0 <DMA_CalcBaseAndBitshift+0x134>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d027      	beq.n	8009434 <DMA_CalcBaseAndBitshift+0xa8>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4a36      	ldr	r2, [pc, #216]	; (80094c4 <DMA_CalcBaseAndBitshift+0x138>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d022      	beq.n	8009434 <DMA_CalcBaseAndBitshift+0xa8>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	4a35      	ldr	r2, [pc, #212]	; (80094c8 <DMA_CalcBaseAndBitshift+0x13c>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d01d      	beq.n	8009434 <DMA_CalcBaseAndBitshift+0xa8>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4a33      	ldr	r2, [pc, #204]	; (80094cc <DMA_CalcBaseAndBitshift+0x140>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d018      	beq.n	8009434 <DMA_CalcBaseAndBitshift+0xa8>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4a32      	ldr	r2, [pc, #200]	; (80094d0 <DMA_CalcBaseAndBitshift+0x144>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d013      	beq.n	8009434 <DMA_CalcBaseAndBitshift+0xa8>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4a30      	ldr	r2, [pc, #192]	; (80094d4 <DMA_CalcBaseAndBitshift+0x148>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d00e      	beq.n	8009434 <DMA_CalcBaseAndBitshift+0xa8>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4a2f      	ldr	r2, [pc, #188]	; (80094d8 <DMA_CalcBaseAndBitshift+0x14c>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d009      	beq.n	8009434 <DMA_CalcBaseAndBitshift+0xa8>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4a2d      	ldr	r2, [pc, #180]	; (80094dc <DMA_CalcBaseAndBitshift+0x150>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d004      	beq.n	8009434 <DMA_CalcBaseAndBitshift+0xa8>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4a2c      	ldr	r2, [pc, #176]	; (80094e0 <DMA_CalcBaseAndBitshift+0x154>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d101      	bne.n	8009438 <DMA_CalcBaseAndBitshift+0xac>
 8009434:	2301      	movs	r3, #1
 8009436:	e000      	b.n	800943a <DMA_CalcBaseAndBitshift+0xae>
 8009438:	2300      	movs	r3, #0
 800943a:	2b00      	cmp	r3, #0
 800943c:	d024      	beq.n	8009488 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	b2db      	uxtb	r3, r3
 8009444:	3b10      	subs	r3, #16
 8009446:	4a27      	ldr	r2, [pc, #156]	; (80094e4 <DMA_CalcBaseAndBitshift+0x158>)
 8009448:	fba2 2303 	umull	r2, r3, r2, r3
 800944c:	091b      	lsrs	r3, r3, #4
 800944e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f003 0307 	and.w	r3, r3, #7
 8009456:	4a24      	ldr	r2, [pc, #144]	; (80094e8 <DMA_CalcBaseAndBitshift+0x15c>)
 8009458:	5cd3      	ldrb	r3, [r2, r3]
 800945a:	461a      	mov	r2, r3
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	2b03      	cmp	r3, #3
 8009464:	d908      	bls.n	8009478 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	461a      	mov	r2, r3
 800946c:	4b1f      	ldr	r3, [pc, #124]	; (80094ec <DMA_CalcBaseAndBitshift+0x160>)
 800946e:	4013      	ands	r3, r2
 8009470:	1d1a      	adds	r2, r3, #4
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	659a      	str	r2, [r3, #88]	; 0x58
 8009476:	e00d      	b.n	8009494 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	461a      	mov	r2, r3
 800947e:	4b1b      	ldr	r3, [pc, #108]	; (80094ec <DMA_CalcBaseAndBitshift+0x160>)
 8009480:	4013      	ands	r3, r2
 8009482:	687a      	ldr	r2, [r7, #4]
 8009484:	6593      	str	r3, [r2, #88]	; 0x58
 8009486:	e005      	b.n	8009494 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009498:	4618      	mov	r0, r3
 800949a:	3714      	adds	r7, #20
 800949c:	46bd      	mov	sp, r7
 800949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a2:	4770      	bx	lr
 80094a4:	40020010 	.word	0x40020010
 80094a8:	40020028 	.word	0x40020028
 80094ac:	40020040 	.word	0x40020040
 80094b0:	40020058 	.word	0x40020058
 80094b4:	40020070 	.word	0x40020070
 80094b8:	40020088 	.word	0x40020088
 80094bc:	400200a0 	.word	0x400200a0
 80094c0:	400200b8 	.word	0x400200b8
 80094c4:	40020410 	.word	0x40020410
 80094c8:	40020428 	.word	0x40020428
 80094cc:	40020440 	.word	0x40020440
 80094d0:	40020458 	.word	0x40020458
 80094d4:	40020470 	.word	0x40020470
 80094d8:	40020488 	.word	0x40020488
 80094dc:	400204a0 	.word	0x400204a0
 80094e0:	400204b8 	.word	0x400204b8
 80094e4:	aaaaaaab 	.word	0xaaaaaaab
 80094e8:	08014368 	.word	0x08014368
 80094ec:	fffffc00 	.word	0xfffffc00

080094f0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b085      	sub	sp, #20
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80094f8:	2300      	movs	r3, #0
 80094fa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	699b      	ldr	r3, [r3, #24]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d120      	bne.n	8009546 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009508:	2b03      	cmp	r3, #3
 800950a:	d858      	bhi.n	80095be <DMA_CheckFifoParam+0xce>
 800950c:	a201      	add	r2, pc, #4	; (adr r2, 8009514 <DMA_CheckFifoParam+0x24>)
 800950e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009512:	bf00      	nop
 8009514:	08009525 	.word	0x08009525
 8009518:	08009537 	.word	0x08009537
 800951c:	08009525 	.word	0x08009525
 8009520:	080095bf 	.word	0x080095bf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009528:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800952c:	2b00      	cmp	r3, #0
 800952e:	d048      	beq.n	80095c2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8009530:	2301      	movs	r3, #1
 8009532:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009534:	e045      	b.n	80095c2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800953a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800953e:	d142      	bne.n	80095c6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8009540:	2301      	movs	r3, #1
 8009542:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009544:	e03f      	b.n	80095c6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	699b      	ldr	r3, [r3, #24]
 800954a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800954e:	d123      	bne.n	8009598 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009554:	2b03      	cmp	r3, #3
 8009556:	d838      	bhi.n	80095ca <DMA_CheckFifoParam+0xda>
 8009558:	a201      	add	r2, pc, #4	; (adr r2, 8009560 <DMA_CheckFifoParam+0x70>)
 800955a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800955e:	bf00      	nop
 8009560:	08009571 	.word	0x08009571
 8009564:	08009577 	.word	0x08009577
 8009568:	08009571 	.word	0x08009571
 800956c:	08009589 	.word	0x08009589
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8009570:	2301      	movs	r3, #1
 8009572:	73fb      	strb	r3, [r7, #15]
        break;
 8009574:	e030      	b.n	80095d8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800957a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800957e:	2b00      	cmp	r3, #0
 8009580:	d025      	beq.n	80095ce <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8009582:	2301      	movs	r3, #1
 8009584:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009586:	e022      	b.n	80095ce <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800958c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009590:	d11f      	bne.n	80095d2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8009592:	2301      	movs	r3, #1
 8009594:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009596:	e01c      	b.n	80095d2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800959c:	2b02      	cmp	r3, #2
 800959e:	d902      	bls.n	80095a6 <DMA_CheckFifoParam+0xb6>
 80095a0:	2b03      	cmp	r3, #3
 80095a2:	d003      	beq.n	80095ac <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80095a4:	e018      	b.n	80095d8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80095a6:	2301      	movs	r3, #1
 80095a8:	73fb      	strb	r3, [r7, #15]
        break;
 80095aa:	e015      	b.n	80095d8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d00e      	beq.n	80095d6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80095b8:	2301      	movs	r3, #1
 80095ba:	73fb      	strb	r3, [r7, #15]
    break;
 80095bc:	e00b      	b.n	80095d6 <DMA_CheckFifoParam+0xe6>
        break;
 80095be:	bf00      	nop
 80095c0:	e00a      	b.n	80095d8 <DMA_CheckFifoParam+0xe8>
        break;
 80095c2:	bf00      	nop
 80095c4:	e008      	b.n	80095d8 <DMA_CheckFifoParam+0xe8>
        break;
 80095c6:	bf00      	nop
 80095c8:	e006      	b.n	80095d8 <DMA_CheckFifoParam+0xe8>
        break;
 80095ca:	bf00      	nop
 80095cc:	e004      	b.n	80095d8 <DMA_CheckFifoParam+0xe8>
        break;
 80095ce:	bf00      	nop
 80095d0:	e002      	b.n	80095d8 <DMA_CheckFifoParam+0xe8>
        break;
 80095d2:	bf00      	nop
 80095d4:	e000      	b.n	80095d8 <DMA_CheckFifoParam+0xe8>
    break;
 80095d6:	bf00      	nop
    }
  }

  return status;
 80095d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3714      	adds	r7, #20
 80095de:	46bd      	mov	sp, r7
 80095e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e4:	4770      	bx	lr
 80095e6:	bf00      	nop

080095e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b085      	sub	sp, #20
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4a38      	ldr	r2, [pc, #224]	; (80096dc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d022      	beq.n	8009646 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a36      	ldr	r2, [pc, #216]	; (80096e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d01d      	beq.n	8009646 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4a35      	ldr	r2, [pc, #212]	; (80096e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d018      	beq.n	8009646 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4a33      	ldr	r2, [pc, #204]	; (80096e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d013      	beq.n	8009646 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	4a32      	ldr	r2, [pc, #200]	; (80096ec <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d00e      	beq.n	8009646 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4a30      	ldr	r2, [pc, #192]	; (80096f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d009      	beq.n	8009646 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4a2f      	ldr	r2, [pc, #188]	; (80096f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d004      	beq.n	8009646 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4a2d      	ldr	r2, [pc, #180]	; (80096f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d101      	bne.n	800964a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8009646:	2301      	movs	r3, #1
 8009648:	e000      	b.n	800964c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800964a:	2300      	movs	r3, #0
 800964c:	2b00      	cmp	r3, #0
 800964e:	d01a      	beq.n	8009686 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	b2db      	uxtb	r3, r3
 8009656:	3b08      	subs	r3, #8
 8009658:	4a28      	ldr	r2, [pc, #160]	; (80096fc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800965a:	fba2 2303 	umull	r2, r3, r2, r3
 800965e:	091b      	lsrs	r3, r3, #4
 8009660:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8009662:	68fa      	ldr	r2, [r7, #12]
 8009664:	4b26      	ldr	r3, [pc, #152]	; (8009700 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8009666:	4413      	add	r3, r2
 8009668:	009b      	lsls	r3, r3, #2
 800966a:	461a      	mov	r2, r3
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	4a24      	ldr	r2, [pc, #144]	; (8009704 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009674:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f003 031f 	and.w	r3, r3, #31
 800967c:	2201      	movs	r2, #1
 800967e:	409a      	lsls	r2, r3
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009684:	e024      	b.n	80096d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	b2db      	uxtb	r3, r3
 800968c:	3b10      	subs	r3, #16
 800968e:	4a1e      	ldr	r2, [pc, #120]	; (8009708 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009690:	fba2 2303 	umull	r2, r3, r2, r3
 8009694:	091b      	lsrs	r3, r3, #4
 8009696:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	4a1c      	ldr	r2, [pc, #112]	; (800970c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d806      	bhi.n	80096ae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	4a1b      	ldr	r2, [pc, #108]	; (8009710 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d902      	bls.n	80096ae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	3308      	adds	r3, #8
 80096ac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80096ae:	68fa      	ldr	r2, [r7, #12]
 80096b0:	4b18      	ldr	r3, [pc, #96]	; (8009714 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80096b2:	4413      	add	r3, r2
 80096b4:	009b      	lsls	r3, r3, #2
 80096b6:	461a      	mov	r2, r3
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	4a16      	ldr	r2, [pc, #88]	; (8009718 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80096c0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	f003 031f 	and.w	r3, r3, #31
 80096c8:	2201      	movs	r2, #1
 80096ca:	409a      	lsls	r2, r3
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	669a      	str	r2, [r3, #104]	; 0x68
}
 80096d0:	bf00      	nop
 80096d2:	3714      	adds	r7, #20
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr
 80096dc:	58025408 	.word	0x58025408
 80096e0:	5802541c 	.word	0x5802541c
 80096e4:	58025430 	.word	0x58025430
 80096e8:	58025444 	.word	0x58025444
 80096ec:	58025458 	.word	0x58025458
 80096f0:	5802546c 	.word	0x5802546c
 80096f4:	58025480 	.word	0x58025480
 80096f8:	58025494 	.word	0x58025494
 80096fc:	cccccccd 	.word	0xcccccccd
 8009700:	16009600 	.word	0x16009600
 8009704:	58025880 	.word	0x58025880
 8009708:	aaaaaaab 	.word	0xaaaaaaab
 800970c:	400204b8 	.word	0x400204b8
 8009710:	4002040f 	.word	0x4002040f
 8009714:	10008200 	.word	0x10008200
 8009718:	40020880 	.word	0x40020880

0800971c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800971c:	b480      	push	{r7}
 800971e:	b085      	sub	sp, #20
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	b2db      	uxtb	r3, r3
 800972a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d04a      	beq.n	80097c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2b08      	cmp	r3, #8
 8009736:	d847      	bhi.n	80097c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4a25      	ldr	r2, [pc, #148]	; (80097d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d022      	beq.n	8009788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	4a24      	ldr	r2, [pc, #144]	; (80097d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d01d      	beq.n	8009788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4a22      	ldr	r2, [pc, #136]	; (80097dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d018      	beq.n	8009788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4a21      	ldr	r2, [pc, #132]	; (80097e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d013      	beq.n	8009788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4a1f      	ldr	r2, [pc, #124]	; (80097e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d00e      	beq.n	8009788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	4a1e      	ldr	r2, [pc, #120]	; (80097e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d009      	beq.n	8009788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a1c      	ldr	r2, [pc, #112]	; (80097ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d004      	beq.n	8009788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4a1b      	ldr	r2, [pc, #108]	; (80097f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d101      	bne.n	800978c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009788:	2301      	movs	r3, #1
 800978a:	e000      	b.n	800978e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800978c:	2300      	movs	r3, #0
 800978e:	2b00      	cmp	r3, #0
 8009790:	d00a      	beq.n	80097a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009792:	68fa      	ldr	r2, [r7, #12]
 8009794:	4b17      	ldr	r3, [pc, #92]	; (80097f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8009796:	4413      	add	r3, r2
 8009798:	009b      	lsls	r3, r3, #2
 800979a:	461a      	mov	r2, r3
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	4a15      	ldr	r2, [pc, #84]	; (80097f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80097a4:	671a      	str	r2, [r3, #112]	; 0x70
 80097a6:	e009      	b.n	80097bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80097a8:	68fa      	ldr	r2, [r7, #12]
 80097aa:	4b14      	ldr	r3, [pc, #80]	; (80097fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80097ac:	4413      	add	r3, r2
 80097ae:	009b      	lsls	r3, r3, #2
 80097b0:	461a      	mov	r2, r3
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	4a11      	ldr	r2, [pc, #68]	; (8009800 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80097ba:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	3b01      	subs	r3, #1
 80097c0:	2201      	movs	r2, #1
 80097c2:	409a      	lsls	r2, r3
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80097c8:	bf00      	nop
 80097ca:	3714      	adds	r7, #20
 80097cc:	46bd      	mov	sp, r7
 80097ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d2:	4770      	bx	lr
 80097d4:	58025408 	.word	0x58025408
 80097d8:	5802541c 	.word	0x5802541c
 80097dc:	58025430 	.word	0x58025430
 80097e0:	58025444 	.word	0x58025444
 80097e4:	58025458 	.word	0x58025458
 80097e8:	5802546c 	.word	0x5802546c
 80097ec:	58025480 	.word	0x58025480
 80097f0:	58025494 	.word	0x58025494
 80097f4:	1600963f 	.word	0x1600963f
 80097f8:	58025940 	.word	0x58025940
 80097fc:	1000823f 	.word	0x1000823f
 8009800:	40020940 	.word	0x40020940

08009804 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009804:	b480      	push	{r7}
 8009806:	b089      	sub	sp, #36	; 0x24
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800980e:	2300      	movs	r3, #0
 8009810:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8009812:	4b89      	ldr	r3, [pc, #548]	; (8009a38 <HAL_GPIO_Init+0x234>)
 8009814:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009816:	e194      	b.n	8009b42 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	681a      	ldr	r2, [r3, #0]
 800981c:	2101      	movs	r1, #1
 800981e:	69fb      	ldr	r3, [r7, #28]
 8009820:	fa01 f303 	lsl.w	r3, r1, r3
 8009824:	4013      	ands	r3, r2
 8009826:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	2b00      	cmp	r3, #0
 800982c:	f000 8186 	beq.w	8009b3c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	f003 0303 	and.w	r3, r3, #3
 8009838:	2b01      	cmp	r3, #1
 800983a:	d005      	beq.n	8009848 <HAL_GPIO_Init+0x44>
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	f003 0303 	and.w	r3, r3, #3
 8009844:	2b02      	cmp	r3, #2
 8009846:	d130      	bne.n	80098aa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	689b      	ldr	r3, [r3, #8]
 800984c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800984e:	69fb      	ldr	r3, [r7, #28]
 8009850:	005b      	lsls	r3, r3, #1
 8009852:	2203      	movs	r2, #3
 8009854:	fa02 f303 	lsl.w	r3, r2, r3
 8009858:	43db      	mvns	r3, r3
 800985a:	69ba      	ldr	r2, [r7, #24]
 800985c:	4013      	ands	r3, r2
 800985e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	68da      	ldr	r2, [r3, #12]
 8009864:	69fb      	ldr	r3, [r7, #28]
 8009866:	005b      	lsls	r3, r3, #1
 8009868:	fa02 f303 	lsl.w	r3, r2, r3
 800986c:	69ba      	ldr	r2, [r7, #24]
 800986e:	4313      	orrs	r3, r2
 8009870:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	69ba      	ldr	r2, [r7, #24]
 8009876:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800987e:	2201      	movs	r2, #1
 8009880:	69fb      	ldr	r3, [r7, #28]
 8009882:	fa02 f303 	lsl.w	r3, r2, r3
 8009886:	43db      	mvns	r3, r3
 8009888:	69ba      	ldr	r2, [r7, #24]
 800988a:	4013      	ands	r3, r2
 800988c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	091b      	lsrs	r3, r3, #4
 8009894:	f003 0201 	and.w	r2, r3, #1
 8009898:	69fb      	ldr	r3, [r7, #28]
 800989a:	fa02 f303 	lsl.w	r3, r2, r3
 800989e:	69ba      	ldr	r2, [r7, #24]
 80098a0:	4313      	orrs	r3, r2
 80098a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	69ba      	ldr	r2, [r7, #24]
 80098a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	f003 0303 	and.w	r3, r3, #3
 80098b2:	2b03      	cmp	r3, #3
 80098b4:	d017      	beq.n	80098e6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	68db      	ldr	r3, [r3, #12]
 80098ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80098bc:	69fb      	ldr	r3, [r7, #28]
 80098be:	005b      	lsls	r3, r3, #1
 80098c0:	2203      	movs	r2, #3
 80098c2:	fa02 f303 	lsl.w	r3, r2, r3
 80098c6:	43db      	mvns	r3, r3
 80098c8:	69ba      	ldr	r2, [r7, #24]
 80098ca:	4013      	ands	r3, r2
 80098cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	689a      	ldr	r2, [r3, #8]
 80098d2:	69fb      	ldr	r3, [r7, #28]
 80098d4:	005b      	lsls	r3, r3, #1
 80098d6:	fa02 f303 	lsl.w	r3, r2, r3
 80098da:	69ba      	ldr	r2, [r7, #24]
 80098dc:	4313      	orrs	r3, r2
 80098de:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	69ba      	ldr	r2, [r7, #24]
 80098e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	685b      	ldr	r3, [r3, #4]
 80098ea:	f003 0303 	and.w	r3, r3, #3
 80098ee:	2b02      	cmp	r3, #2
 80098f0:	d123      	bne.n	800993a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80098f2:	69fb      	ldr	r3, [r7, #28]
 80098f4:	08da      	lsrs	r2, r3, #3
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	3208      	adds	r2, #8
 80098fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009900:	69fb      	ldr	r3, [r7, #28]
 8009902:	f003 0307 	and.w	r3, r3, #7
 8009906:	009b      	lsls	r3, r3, #2
 8009908:	220f      	movs	r2, #15
 800990a:	fa02 f303 	lsl.w	r3, r2, r3
 800990e:	43db      	mvns	r3, r3
 8009910:	69ba      	ldr	r2, [r7, #24]
 8009912:	4013      	ands	r3, r2
 8009914:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	691a      	ldr	r2, [r3, #16]
 800991a:	69fb      	ldr	r3, [r7, #28]
 800991c:	f003 0307 	and.w	r3, r3, #7
 8009920:	009b      	lsls	r3, r3, #2
 8009922:	fa02 f303 	lsl.w	r3, r2, r3
 8009926:	69ba      	ldr	r2, [r7, #24]
 8009928:	4313      	orrs	r3, r2
 800992a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800992c:	69fb      	ldr	r3, [r7, #28]
 800992e:	08da      	lsrs	r2, r3, #3
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	3208      	adds	r2, #8
 8009934:	69b9      	ldr	r1, [r7, #24]
 8009936:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009940:	69fb      	ldr	r3, [r7, #28]
 8009942:	005b      	lsls	r3, r3, #1
 8009944:	2203      	movs	r2, #3
 8009946:	fa02 f303 	lsl.w	r3, r2, r3
 800994a:	43db      	mvns	r3, r3
 800994c:	69ba      	ldr	r2, [r7, #24]
 800994e:	4013      	ands	r3, r2
 8009950:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	685b      	ldr	r3, [r3, #4]
 8009956:	f003 0203 	and.w	r2, r3, #3
 800995a:	69fb      	ldr	r3, [r7, #28]
 800995c:	005b      	lsls	r3, r3, #1
 800995e:	fa02 f303 	lsl.w	r3, r2, r3
 8009962:	69ba      	ldr	r2, [r7, #24]
 8009964:	4313      	orrs	r3, r2
 8009966:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	69ba      	ldr	r2, [r7, #24]
 800996c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	685b      	ldr	r3, [r3, #4]
 8009972:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009976:	2b00      	cmp	r3, #0
 8009978:	f000 80e0 	beq.w	8009b3c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800997c:	4b2f      	ldr	r3, [pc, #188]	; (8009a3c <HAL_GPIO_Init+0x238>)
 800997e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009982:	4a2e      	ldr	r2, [pc, #184]	; (8009a3c <HAL_GPIO_Init+0x238>)
 8009984:	f043 0302 	orr.w	r3, r3, #2
 8009988:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800998c:	4b2b      	ldr	r3, [pc, #172]	; (8009a3c <HAL_GPIO_Init+0x238>)
 800998e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009992:	f003 0302 	and.w	r3, r3, #2
 8009996:	60fb      	str	r3, [r7, #12]
 8009998:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800999a:	4a29      	ldr	r2, [pc, #164]	; (8009a40 <HAL_GPIO_Init+0x23c>)
 800999c:	69fb      	ldr	r3, [r7, #28]
 800999e:	089b      	lsrs	r3, r3, #2
 80099a0:	3302      	adds	r3, #2
 80099a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80099a8:	69fb      	ldr	r3, [r7, #28]
 80099aa:	f003 0303 	and.w	r3, r3, #3
 80099ae:	009b      	lsls	r3, r3, #2
 80099b0:	220f      	movs	r2, #15
 80099b2:	fa02 f303 	lsl.w	r3, r2, r3
 80099b6:	43db      	mvns	r3, r3
 80099b8:	69ba      	ldr	r2, [r7, #24]
 80099ba:	4013      	ands	r3, r2
 80099bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	4a20      	ldr	r2, [pc, #128]	; (8009a44 <HAL_GPIO_Init+0x240>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d052      	beq.n	8009a6c <HAL_GPIO_Init+0x268>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	4a1f      	ldr	r2, [pc, #124]	; (8009a48 <HAL_GPIO_Init+0x244>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d031      	beq.n	8009a32 <HAL_GPIO_Init+0x22e>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	4a1e      	ldr	r2, [pc, #120]	; (8009a4c <HAL_GPIO_Init+0x248>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d02b      	beq.n	8009a2e <HAL_GPIO_Init+0x22a>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	4a1d      	ldr	r2, [pc, #116]	; (8009a50 <HAL_GPIO_Init+0x24c>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d025      	beq.n	8009a2a <HAL_GPIO_Init+0x226>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	4a1c      	ldr	r2, [pc, #112]	; (8009a54 <HAL_GPIO_Init+0x250>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d01f      	beq.n	8009a26 <HAL_GPIO_Init+0x222>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	4a1b      	ldr	r2, [pc, #108]	; (8009a58 <HAL_GPIO_Init+0x254>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d019      	beq.n	8009a22 <HAL_GPIO_Init+0x21e>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	4a1a      	ldr	r2, [pc, #104]	; (8009a5c <HAL_GPIO_Init+0x258>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d013      	beq.n	8009a1e <HAL_GPIO_Init+0x21a>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	4a19      	ldr	r2, [pc, #100]	; (8009a60 <HAL_GPIO_Init+0x25c>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d00d      	beq.n	8009a1a <HAL_GPIO_Init+0x216>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	4a18      	ldr	r2, [pc, #96]	; (8009a64 <HAL_GPIO_Init+0x260>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d007      	beq.n	8009a16 <HAL_GPIO_Init+0x212>
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	4a17      	ldr	r2, [pc, #92]	; (8009a68 <HAL_GPIO_Init+0x264>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d101      	bne.n	8009a12 <HAL_GPIO_Init+0x20e>
 8009a0e:	2309      	movs	r3, #9
 8009a10:	e02d      	b.n	8009a6e <HAL_GPIO_Init+0x26a>
 8009a12:	230a      	movs	r3, #10
 8009a14:	e02b      	b.n	8009a6e <HAL_GPIO_Init+0x26a>
 8009a16:	2308      	movs	r3, #8
 8009a18:	e029      	b.n	8009a6e <HAL_GPIO_Init+0x26a>
 8009a1a:	2307      	movs	r3, #7
 8009a1c:	e027      	b.n	8009a6e <HAL_GPIO_Init+0x26a>
 8009a1e:	2306      	movs	r3, #6
 8009a20:	e025      	b.n	8009a6e <HAL_GPIO_Init+0x26a>
 8009a22:	2305      	movs	r3, #5
 8009a24:	e023      	b.n	8009a6e <HAL_GPIO_Init+0x26a>
 8009a26:	2304      	movs	r3, #4
 8009a28:	e021      	b.n	8009a6e <HAL_GPIO_Init+0x26a>
 8009a2a:	2303      	movs	r3, #3
 8009a2c:	e01f      	b.n	8009a6e <HAL_GPIO_Init+0x26a>
 8009a2e:	2302      	movs	r3, #2
 8009a30:	e01d      	b.n	8009a6e <HAL_GPIO_Init+0x26a>
 8009a32:	2301      	movs	r3, #1
 8009a34:	e01b      	b.n	8009a6e <HAL_GPIO_Init+0x26a>
 8009a36:	bf00      	nop
 8009a38:	58000080 	.word	0x58000080
 8009a3c:	58024400 	.word	0x58024400
 8009a40:	58000400 	.word	0x58000400
 8009a44:	58020000 	.word	0x58020000
 8009a48:	58020400 	.word	0x58020400
 8009a4c:	58020800 	.word	0x58020800
 8009a50:	58020c00 	.word	0x58020c00
 8009a54:	58021000 	.word	0x58021000
 8009a58:	58021400 	.word	0x58021400
 8009a5c:	58021800 	.word	0x58021800
 8009a60:	58021c00 	.word	0x58021c00
 8009a64:	58022000 	.word	0x58022000
 8009a68:	58022400 	.word	0x58022400
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	69fa      	ldr	r2, [r7, #28]
 8009a70:	f002 0203 	and.w	r2, r2, #3
 8009a74:	0092      	lsls	r2, r2, #2
 8009a76:	4093      	lsls	r3, r2
 8009a78:	69ba      	ldr	r2, [r7, #24]
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009a7e:	4938      	ldr	r1, [pc, #224]	; (8009b60 <HAL_GPIO_Init+0x35c>)
 8009a80:	69fb      	ldr	r3, [r7, #28]
 8009a82:	089b      	lsrs	r3, r3, #2
 8009a84:	3302      	adds	r3, #2
 8009a86:	69ba      	ldr	r2, [r7, #24]
 8009a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	43db      	mvns	r3, r3
 8009a98:	69ba      	ldr	r2, [r7, #24]
 8009a9a:	4013      	ands	r3, r2
 8009a9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	685b      	ldr	r3, [r3, #4]
 8009aa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d003      	beq.n	8009ab2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8009aaa:	69ba      	ldr	r2, [r7, #24]
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	4313      	orrs	r3, r2
 8009ab0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8009ab2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009ab6:	69bb      	ldr	r3, [r7, #24]
 8009ab8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009aba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	43db      	mvns	r3, r3
 8009ac6:	69ba      	ldr	r2, [r7, #24]
 8009ac8:	4013      	ands	r3, r2
 8009aca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d003      	beq.n	8009ae0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8009ad8:	69ba      	ldr	r2, [r7, #24]
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	4313      	orrs	r3, r2
 8009ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009ae0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009ae4:	69bb      	ldr	r3, [r7, #24]
 8009ae6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	685b      	ldr	r3, [r3, #4]
 8009aec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	43db      	mvns	r3, r3
 8009af2:	69ba      	ldr	r2, [r7, #24]
 8009af4:	4013      	ands	r3, r2
 8009af6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	685b      	ldr	r3, [r3, #4]
 8009afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d003      	beq.n	8009b0c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8009b04:	69ba      	ldr	r2, [r7, #24]
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	4313      	orrs	r3, r2
 8009b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	69ba      	ldr	r2, [r7, #24]
 8009b10:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	43db      	mvns	r3, r3
 8009b1c:	69ba      	ldr	r2, [r7, #24]
 8009b1e:	4013      	ands	r3, r2
 8009b20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d003      	beq.n	8009b36 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8009b2e:	69ba      	ldr	r2, [r7, #24]
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	4313      	orrs	r3, r2
 8009b34:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	69ba      	ldr	r2, [r7, #24]
 8009b3a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009b3c:	69fb      	ldr	r3, [r7, #28]
 8009b3e:	3301      	adds	r3, #1
 8009b40:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	681a      	ldr	r2, [r3, #0]
 8009b46:	69fb      	ldr	r3, [r7, #28]
 8009b48:	fa22 f303 	lsr.w	r3, r2, r3
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	f47f ae63 	bne.w	8009818 <HAL_GPIO_Init+0x14>
  }
}
 8009b52:	bf00      	nop
 8009b54:	bf00      	nop
 8009b56:	3724      	adds	r7, #36	; 0x24
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr
 8009b60:	58000400 	.word	0x58000400

08009b64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b083      	sub	sp, #12
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	460b      	mov	r3, r1
 8009b6e:	807b      	strh	r3, [r7, #2]
 8009b70:	4613      	mov	r3, r2
 8009b72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009b74:	787b      	ldrb	r3, [r7, #1]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d003      	beq.n	8009b82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009b7a:	887a      	ldrh	r2, [r7, #2]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009b80:	e003      	b.n	8009b8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009b82:	887b      	ldrh	r3, [r7, #2]
 8009b84:	041a      	lsls	r2, r3, #16
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	619a      	str	r2, [r3, #24]
}
 8009b8a:	bf00      	nop
 8009b8c:	370c      	adds	r7, #12
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b94:	4770      	bx	lr
	...

08009b98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b082      	sub	sp, #8
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d101      	bne.n	8009baa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	e07f      	b.n	8009caa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009bb0:	b2db      	uxtb	r3, r3
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d106      	bne.n	8009bc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f7fa fcf0 	bl	80045a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2224      	movs	r2, #36	; 0x24
 8009bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	681a      	ldr	r2, [r3, #0]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f022 0201 	bic.w	r2, r2, #1
 8009bda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	685a      	ldr	r2, [r3, #4]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009be8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	689a      	ldr	r2, [r3, #8]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009bf8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	68db      	ldr	r3, [r3, #12]
 8009bfe:	2b01      	cmp	r3, #1
 8009c00:	d107      	bne.n	8009c12 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	689a      	ldr	r2, [r3, #8]
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009c0e:	609a      	str	r2, [r3, #8]
 8009c10:	e006      	b.n	8009c20 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	689a      	ldr	r2, [r3, #8]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009c1e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	68db      	ldr	r3, [r3, #12]
 8009c24:	2b02      	cmp	r3, #2
 8009c26:	d104      	bne.n	8009c32 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009c30:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	6859      	ldr	r1, [r3, #4]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681a      	ldr	r2, [r3, #0]
 8009c3c:	4b1d      	ldr	r3, [pc, #116]	; (8009cb4 <HAL_I2C_Init+0x11c>)
 8009c3e:	430b      	orrs	r3, r1
 8009c40:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	68da      	ldr	r2, [r3, #12]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009c50:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	691a      	ldr	r2, [r3, #16]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	695b      	ldr	r3, [r3, #20]
 8009c5a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	699b      	ldr	r3, [r3, #24]
 8009c62:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	430a      	orrs	r2, r1
 8009c6a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	69d9      	ldr	r1, [r3, #28]
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6a1a      	ldr	r2, [r3, #32]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	430a      	orrs	r2, r1
 8009c7a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	681a      	ldr	r2, [r3, #0]
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f042 0201 	orr.w	r2, r2, #1
 8009c8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2220      	movs	r2, #32
 8009c96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009ca8:	2300      	movs	r3, #0
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3708      	adds	r7, #8
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
 8009cb2:	bf00      	nop
 8009cb4:	02008000 	.word	0x02008000

08009cb8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b083      	sub	sp, #12
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009cc8:	b2db      	uxtb	r3, r3
 8009cca:	2b20      	cmp	r3, #32
 8009ccc:	d138      	bne.n	8009d40 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	d101      	bne.n	8009cdc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009cd8:	2302      	movs	r3, #2
 8009cda:	e032      	b.n	8009d42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2201      	movs	r2, #1
 8009ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2224      	movs	r2, #36	; 0x24
 8009ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	681a      	ldr	r2, [r3, #0]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f022 0201 	bic.w	r2, r2, #1
 8009cfa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	681a      	ldr	r2, [r3, #0]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009d0a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	6819      	ldr	r1, [r3, #0]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	683a      	ldr	r2, [r7, #0]
 8009d18:	430a      	orrs	r2, r1
 8009d1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	681a      	ldr	r2, [r3, #0]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f042 0201 	orr.w	r2, r2, #1
 8009d2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2220      	movs	r2, #32
 8009d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2200      	movs	r2, #0
 8009d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	e000      	b.n	8009d42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009d40:	2302      	movs	r3, #2
  }
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	370c      	adds	r7, #12
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr

08009d4e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009d4e:	b480      	push	{r7}
 8009d50:	b085      	sub	sp, #20
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	6078      	str	r0, [r7, #4]
 8009d56:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d5e:	b2db      	uxtb	r3, r3
 8009d60:	2b20      	cmp	r3, #32
 8009d62:	d139      	bne.n	8009dd8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d6a:	2b01      	cmp	r3, #1
 8009d6c:	d101      	bne.n	8009d72 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009d6e:	2302      	movs	r3, #2
 8009d70:	e033      	b.n	8009dda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2201      	movs	r2, #1
 8009d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2224      	movs	r2, #36	; 0x24
 8009d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	681a      	ldr	r2, [r3, #0]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f022 0201 	bic.w	r2, r2, #1
 8009d90:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009da0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	021b      	lsls	r3, r3, #8
 8009da6:	68fa      	ldr	r2, [r7, #12]
 8009da8:	4313      	orrs	r3, r2
 8009daa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	68fa      	ldr	r2, [r7, #12]
 8009db2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	681a      	ldr	r2, [r3, #0]
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f042 0201 	orr.w	r2, r2, #1
 8009dc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2220      	movs	r2, #32
 8009dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	e000      	b.n	8009dda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009dd8:	2302      	movs	r3, #2
  }
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3714      	adds	r7, #20
 8009dde:	46bd      	mov	sp, r7
 8009de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de4:	4770      	bx	lr

08009de6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009de6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009de8:	b08f      	sub	sp, #60	; 0x3c
 8009dea:	af0a      	add	r7, sp, #40	; 0x28
 8009dec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d101      	bne.n	8009df8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009df4:	2301      	movs	r3, #1
 8009df6:	e116      	b.n	800a026 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d106      	bne.n	8009e18 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f7fb fa56 	bl	80052c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2203      	movs	r2, #3
 8009e1c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d102      	bne.n	8009e32 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4618      	mov	r0, r3
 8009e38:	f009 fc90 	bl	801375c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	603b      	str	r3, [r7, #0]
 8009e42:	687e      	ldr	r6, [r7, #4]
 8009e44:	466d      	mov	r5, sp
 8009e46:	f106 0410 	add.w	r4, r6, #16
 8009e4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009e4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009e4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009e50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009e52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009e56:	e885 0003 	stmia.w	r5, {r0, r1}
 8009e5a:	1d33      	adds	r3, r6, #4
 8009e5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009e5e:	6838      	ldr	r0, [r7, #0]
 8009e60:	f009 fc0e 	bl	8013680 <USB_CoreInit>
 8009e64:	4603      	mov	r3, r0
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d005      	beq.n	8009e76 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2202      	movs	r2, #2
 8009e6e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8009e72:	2301      	movs	r3, #1
 8009e74:	e0d7      	b.n	800a026 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	2100      	movs	r1, #0
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f009 fc7e 	bl	801377e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009e82:	2300      	movs	r3, #0
 8009e84:	73fb      	strb	r3, [r7, #15]
 8009e86:	e04a      	b.n	8009f1e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009e88:	7bfa      	ldrb	r2, [r7, #15]
 8009e8a:	6879      	ldr	r1, [r7, #4]
 8009e8c:	4613      	mov	r3, r2
 8009e8e:	00db      	lsls	r3, r3, #3
 8009e90:	4413      	add	r3, r2
 8009e92:	009b      	lsls	r3, r3, #2
 8009e94:	440b      	add	r3, r1
 8009e96:	333d      	adds	r3, #61	; 0x3d
 8009e98:	2201      	movs	r2, #1
 8009e9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009e9c:	7bfa      	ldrb	r2, [r7, #15]
 8009e9e:	6879      	ldr	r1, [r7, #4]
 8009ea0:	4613      	mov	r3, r2
 8009ea2:	00db      	lsls	r3, r3, #3
 8009ea4:	4413      	add	r3, r2
 8009ea6:	009b      	lsls	r3, r3, #2
 8009ea8:	440b      	add	r3, r1
 8009eaa:	333c      	adds	r3, #60	; 0x3c
 8009eac:	7bfa      	ldrb	r2, [r7, #15]
 8009eae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009eb0:	7bfa      	ldrb	r2, [r7, #15]
 8009eb2:	7bfb      	ldrb	r3, [r7, #15]
 8009eb4:	b298      	uxth	r0, r3
 8009eb6:	6879      	ldr	r1, [r7, #4]
 8009eb8:	4613      	mov	r3, r2
 8009eba:	00db      	lsls	r3, r3, #3
 8009ebc:	4413      	add	r3, r2
 8009ebe:	009b      	lsls	r3, r3, #2
 8009ec0:	440b      	add	r3, r1
 8009ec2:	3356      	adds	r3, #86	; 0x56
 8009ec4:	4602      	mov	r2, r0
 8009ec6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009ec8:	7bfa      	ldrb	r2, [r7, #15]
 8009eca:	6879      	ldr	r1, [r7, #4]
 8009ecc:	4613      	mov	r3, r2
 8009ece:	00db      	lsls	r3, r3, #3
 8009ed0:	4413      	add	r3, r2
 8009ed2:	009b      	lsls	r3, r3, #2
 8009ed4:	440b      	add	r3, r1
 8009ed6:	3340      	adds	r3, #64	; 0x40
 8009ed8:	2200      	movs	r2, #0
 8009eda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009edc:	7bfa      	ldrb	r2, [r7, #15]
 8009ede:	6879      	ldr	r1, [r7, #4]
 8009ee0:	4613      	mov	r3, r2
 8009ee2:	00db      	lsls	r3, r3, #3
 8009ee4:	4413      	add	r3, r2
 8009ee6:	009b      	lsls	r3, r3, #2
 8009ee8:	440b      	add	r3, r1
 8009eea:	3344      	adds	r3, #68	; 0x44
 8009eec:	2200      	movs	r2, #0
 8009eee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009ef0:	7bfa      	ldrb	r2, [r7, #15]
 8009ef2:	6879      	ldr	r1, [r7, #4]
 8009ef4:	4613      	mov	r3, r2
 8009ef6:	00db      	lsls	r3, r3, #3
 8009ef8:	4413      	add	r3, r2
 8009efa:	009b      	lsls	r3, r3, #2
 8009efc:	440b      	add	r3, r1
 8009efe:	3348      	adds	r3, #72	; 0x48
 8009f00:	2200      	movs	r2, #0
 8009f02:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009f04:	7bfa      	ldrb	r2, [r7, #15]
 8009f06:	6879      	ldr	r1, [r7, #4]
 8009f08:	4613      	mov	r3, r2
 8009f0a:	00db      	lsls	r3, r3, #3
 8009f0c:	4413      	add	r3, r2
 8009f0e:	009b      	lsls	r3, r3, #2
 8009f10:	440b      	add	r3, r1
 8009f12:	334c      	adds	r3, #76	; 0x4c
 8009f14:	2200      	movs	r2, #0
 8009f16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009f18:	7bfb      	ldrb	r3, [r7, #15]
 8009f1a:	3301      	adds	r3, #1
 8009f1c:	73fb      	strb	r3, [r7, #15]
 8009f1e:	7bfa      	ldrb	r2, [r7, #15]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d3af      	bcc.n	8009e88 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009f28:	2300      	movs	r3, #0
 8009f2a:	73fb      	strb	r3, [r7, #15]
 8009f2c:	e044      	b.n	8009fb8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009f2e:	7bfa      	ldrb	r2, [r7, #15]
 8009f30:	6879      	ldr	r1, [r7, #4]
 8009f32:	4613      	mov	r3, r2
 8009f34:	00db      	lsls	r3, r3, #3
 8009f36:	4413      	add	r3, r2
 8009f38:	009b      	lsls	r3, r3, #2
 8009f3a:	440b      	add	r3, r1
 8009f3c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8009f40:	2200      	movs	r2, #0
 8009f42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009f44:	7bfa      	ldrb	r2, [r7, #15]
 8009f46:	6879      	ldr	r1, [r7, #4]
 8009f48:	4613      	mov	r3, r2
 8009f4a:	00db      	lsls	r3, r3, #3
 8009f4c:	4413      	add	r3, r2
 8009f4e:	009b      	lsls	r3, r3, #2
 8009f50:	440b      	add	r3, r1
 8009f52:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8009f56:	7bfa      	ldrb	r2, [r7, #15]
 8009f58:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009f5a:	7bfa      	ldrb	r2, [r7, #15]
 8009f5c:	6879      	ldr	r1, [r7, #4]
 8009f5e:	4613      	mov	r3, r2
 8009f60:	00db      	lsls	r3, r3, #3
 8009f62:	4413      	add	r3, r2
 8009f64:	009b      	lsls	r3, r3, #2
 8009f66:	440b      	add	r3, r1
 8009f68:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009f70:	7bfa      	ldrb	r2, [r7, #15]
 8009f72:	6879      	ldr	r1, [r7, #4]
 8009f74:	4613      	mov	r3, r2
 8009f76:	00db      	lsls	r3, r3, #3
 8009f78:	4413      	add	r3, r2
 8009f7a:	009b      	lsls	r3, r3, #2
 8009f7c:	440b      	add	r3, r1
 8009f7e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8009f82:	2200      	movs	r2, #0
 8009f84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009f86:	7bfa      	ldrb	r2, [r7, #15]
 8009f88:	6879      	ldr	r1, [r7, #4]
 8009f8a:	4613      	mov	r3, r2
 8009f8c:	00db      	lsls	r3, r3, #3
 8009f8e:	4413      	add	r3, r2
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	440b      	add	r3, r1
 8009f94:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8009f98:	2200      	movs	r2, #0
 8009f9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009f9c:	7bfa      	ldrb	r2, [r7, #15]
 8009f9e:	6879      	ldr	r1, [r7, #4]
 8009fa0:	4613      	mov	r3, r2
 8009fa2:	00db      	lsls	r3, r3, #3
 8009fa4:	4413      	add	r3, r2
 8009fa6:	009b      	lsls	r3, r3, #2
 8009fa8:	440b      	add	r3, r1
 8009faa:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009fae:	2200      	movs	r2, #0
 8009fb0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009fb2:	7bfb      	ldrb	r3, [r7, #15]
 8009fb4:	3301      	adds	r3, #1
 8009fb6:	73fb      	strb	r3, [r7, #15]
 8009fb8:	7bfa      	ldrb	r2, [r7, #15]
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	429a      	cmp	r2, r3
 8009fc0:	d3b5      	bcc.n	8009f2e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	603b      	str	r3, [r7, #0]
 8009fc8:	687e      	ldr	r6, [r7, #4]
 8009fca:	466d      	mov	r5, sp
 8009fcc:	f106 0410 	add.w	r4, r6, #16
 8009fd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009fd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009fd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009fd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009fd8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009fdc:	e885 0003 	stmia.w	r5, {r0, r1}
 8009fe0:	1d33      	adds	r3, r6, #4
 8009fe2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009fe4:	6838      	ldr	r0, [r7, #0]
 8009fe6:	f009 fc17 	bl	8013818 <USB_DevInit>
 8009fea:	4603      	mov	r3, r0
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d005      	beq.n	8009ffc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2202      	movs	r2, #2
 8009ff4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	e014      	b.n	800a026 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2200      	movs	r2, #0
 800a000:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2201      	movs	r2, #1
 800a008:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a010:	2b01      	cmp	r3, #1
 800a012:	d102      	bne.n	800a01a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f000 f80b 	bl	800a030 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	4618      	mov	r0, r3
 800a020:	f009 fdd5 	bl	8013bce <USB_DevDisconnect>

  return HAL_OK;
 800a024:	2300      	movs	r3, #0
}
 800a026:	4618      	mov	r0, r3
 800a028:	3714      	adds	r7, #20
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800a030 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a030:	b480      	push	{r7}
 800a032:	b085      	sub	sp, #20
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2201      	movs	r2, #1
 800a042:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2200      	movs	r2, #0
 800a04a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	699b      	ldr	r3, [r3, #24]
 800a052:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a05e:	4b05      	ldr	r3, [pc, #20]	; (800a074 <HAL_PCDEx_ActivateLPM+0x44>)
 800a060:	4313      	orrs	r3, r2
 800a062:	68fa      	ldr	r2, [r7, #12]
 800a064:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800a066:	2300      	movs	r3, #0
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3714      	adds	r7, #20
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr
 800a074:	10000003 	.word	0x10000003

0800a078 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b084      	sub	sp, #16
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a080:	4b19      	ldr	r3, [pc, #100]	; (800a0e8 <HAL_PWREx_ConfigSupply+0x70>)
 800a082:	68db      	ldr	r3, [r3, #12]
 800a084:	f003 0304 	and.w	r3, r3, #4
 800a088:	2b04      	cmp	r3, #4
 800a08a:	d00a      	beq.n	800a0a2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a08c:	4b16      	ldr	r3, [pc, #88]	; (800a0e8 <HAL_PWREx_ConfigSupply+0x70>)
 800a08e:	68db      	ldr	r3, [r3, #12]
 800a090:	f003 0307 	and.w	r3, r3, #7
 800a094:	687a      	ldr	r2, [r7, #4]
 800a096:	429a      	cmp	r2, r3
 800a098:	d001      	beq.n	800a09e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a09a:	2301      	movs	r3, #1
 800a09c:	e01f      	b.n	800a0de <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	e01d      	b.n	800a0de <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a0a2:	4b11      	ldr	r3, [pc, #68]	; (800a0e8 <HAL_PWREx_ConfigSupply+0x70>)
 800a0a4:	68db      	ldr	r3, [r3, #12]
 800a0a6:	f023 0207 	bic.w	r2, r3, #7
 800a0aa:	490f      	ldr	r1, [pc, #60]	; (800a0e8 <HAL_PWREx_ConfigSupply+0x70>)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a0b2:	f7fb fb91 	bl	80057d8 <HAL_GetTick>
 800a0b6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a0b8:	e009      	b.n	800a0ce <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a0ba:	f7fb fb8d 	bl	80057d8 <HAL_GetTick>
 800a0be:	4602      	mov	r2, r0
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	1ad3      	subs	r3, r2, r3
 800a0c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a0c8:	d901      	bls.n	800a0ce <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	e007      	b.n	800a0de <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a0ce:	4b06      	ldr	r3, [pc, #24]	; (800a0e8 <HAL_PWREx_ConfigSupply+0x70>)
 800a0d0:	685b      	ldr	r3, [r3, #4]
 800a0d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a0d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0da:	d1ee      	bne.n	800a0ba <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a0dc:	2300      	movs	r3, #0
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3710      	adds	r7, #16
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	58024800 	.word	0x58024800

0800a0ec <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800a0f0:	4b05      	ldr	r3, [pc, #20]	; (800a108 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a0f2:	68db      	ldr	r3, [r3, #12]
 800a0f4:	4a04      	ldr	r2, [pc, #16]	; (800a108 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a0f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a0fa:	60d3      	str	r3, [r2, #12]
}
 800a0fc:	bf00      	nop
 800a0fe:	46bd      	mov	sp, r7
 800a100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a104:	4770      	bx	lr
 800a106:	bf00      	nop
 800a108:	58024800 	.word	0x58024800

0800a10c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b086      	sub	sp, #24
 800a110:	af02      	add	r7, sp, #8
 800a112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a114:	f7fb fb60 	bl	80057d8 <HAL_GetTick>
 800a118:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d101      	bne.n	800a124 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800a120:	2301      	movs	r3, #1
 800a122:	e05f      	b.n	800a1e4 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a12a:	b2db      	uxtb	r3, r3
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d107      	bne.n	800a140 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f7fa fd9f 	bl	8004c74 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800a136:	f241 3188 	movw	r1, #5000	; 0x1388
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f000 f85a 	bl	800a1f4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	689b      	ldr	r3, [r3, #8]
 800a14e:	3b01      	subs	r3, #1
 800a150:	021a      	lsls	r2, r3, #8
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	430a      	orrs	r2, r1
 800a158:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a15e:	9300      	str	r3, [sp, #0]
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	2200      	movs	r2, #0
 800a164:	2120      	movs	r1, #32
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f000 f852 	bl	800a210 <QSPI_WaitFlagStateUntilTimeout>
 800a16c:	4603      	mov	r3, r0
 800a16e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800a170:	7afb      	ldrb	r3, [r7, #11]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d135      	bne.n	800a1e2 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	681a      	ldr	r2, [r3, #0]
 800a17c:	4b1b      	ldr	r3, [pc, #108]	; (800a1ec <HAL_QSPI_Init+0xe0>)
 800a17e:	4013      	ands	r3, r2
 800a180:	687a      	ldr	r2, [r7, #4]
 800a182:	6852      	ldr	r2, [r2, #4]
 800a184:	0611      	lsls	r1, r2, #24
 800a186:	687a      	ldr	r2, [r7, #4]
 800a188:	68d2      	ldr	r2, [r2, #12]
 800a18a:	4311      	orrs	r1, r2
 800a18c:	687a      	ldr	r2, [r7, #4]
 800a18e:	69d2      	ldr	r2, [r2, #28]
 800a190:	4311      	orrs	r1, r2
 800a192:	687a      	ldr	r2, [r7, #4]
 800a194:	6a12      	ldr	r2, [r2, #32]
 800a196:	4311      	orrs	r1, r2
 800a198:	687a      	ldr	r2, [r7, #4]
 800a19a:	6812      	ldr	r2, [r2, #0]
 800a19c:	430b      	orrs	r3, r1
 800a19e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	685a      	ldr	r2, [r3, #4]
 800a1a6:	4b12      	ldr	r3, [pc, #72]	; (800a1f0 <HAL_QSPI_Init+0xe4>)
 800a1a8:	4013      	ands	r3, r2
 800a1aa:	687a      	ldr	r2, [r7, #4]
 800a1ac:	6912      	ldr	r2, [r2, #16]
 800a1ae:	0411      	lsls	r1, r2, #16
 800a1b0:	687a      	ldr	r2, [r7, #4]
 800a1b2:	6952      	ldr	r2, [r2, #20]
 800a1b4:	4311      	orrs	r1, r2
 800a1b6:	687a      	ldr	r2, [r7, #4]
 800a1b8:	6992      	ldr	r2, [r2, #24]
 800a1ba:	4311      	orrs	r1, r2
 800a1bc:	687a      	ldr	r2, [r7, #4]
 800a1be:	6812      	ldr	r2, [r2, #0]
 800a1c0:	430b      	orrs	r3, r1
 800a1c2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	681a      	ldr	r2, [r3, #0]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f042 0201 	orr.w	r2, r2, #1
 800a1d2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2201      	movs	r2, #1
 800a1de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800a1e2:	7afb      	ldrb	r3, [r7, #11]
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3710      	adds	r7, #16
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}
 800a1ec:	00ffff2f 	.word	0x00ffff2f
 800a1f0:	ffe0f8fe 	.word	0xffe0f8fe

0800a1f4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b083      	sub	sp, #12
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	683a      	ldr	r2, [r7, #0]
 800a202:	649a      	str	r2, [r3, #72]	; 0x48
}
 800a204:	bf00      	nop
 800a206:	370c      	adds	r7, #12
 800a208:	46bd      	mov	sp, r7
 800a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20e:	4770      	bx	lr

0800a210 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b084      	sub	sp, #16
 800a214:	af00      	add	r7, sp, #0
 800a216:	60f8      	str	r0, [r7, #12]
 800a218:	60b9      	str	r1, [r7, #8]
 800a21a:	603b      	str	r3, [r7, #0]
 800a21c:	4613      	mov	r3, r2
 800a21e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800a220:	e01a      	b.n	800a258 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a222:	69bb      	ldr	r3, [r7, #24]
 800a224:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a228:	d016      	beq.n	800a258 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a22a:	f7fb fad5 	bl	80057d8 <HAL_GetTick>
 800a22e:	4602      	mov	r2, r0
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	1ad3      	subs	r3, r2, r3
 800a234:	69ba      	ldr	r2, [r7, #24]
 800a236:	429a      	cmp	r2, r3
 800a238:	d302      	bcc.n	800a240 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800a23a:	69bb      	ldr	r3, [r7, #24]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d10b      	bne.n	800a258 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	2204      	movs	r2, #4
 800a244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a24c:	f043 0201 	orr.w	r2, r3, #1
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800a254:	2301      	movs	r3, #1
 800a256:	e00e      	b.n	800a276 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	689a      	ldr	r2, [r3, #8]
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	4013      	ands	r3, r2
 800a262:	2b00      	cmp	r3, #0
 800a264:	bf14      	ite	ne
 800a266:	2301      	movne	r3, #1
 800a268:	2300      	moveq	r3, #0
 800a26a:	b2db      	uxtb	r3, r3
 800a26c:	461a      	mov	r2, r3
 800a26e:	79fb      	ldrb	r3, [r7, #7]
 800a270:	429a      	cmp	r2, r3
 800a272:	d1d6      	bne.n	800a222 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a274:	2300      	movs	r3, #0
}
 800a276:	4618      	mov	r0, r3
 800a278:	3710      	adds	r7, #16
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}
	...

0800a280 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b08c      	sub	sp, #48	; 0x30
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d102      	bne.n	800a294 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a28e:	2301      	movs	r3, #1
 800a290:	f000 bc48 	b.w	800ab24 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f003 0301 	and.w	r3, r3, #1
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	f000 8088 	beq.w	800a3b2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a2a2:	4b99      	ldr	r3, [pc, #612]	; (800a508 <HAL_RCC_OscConfig+0x288>)
 800a2a4:	691b      	ldr	r3, [r3, #16]
 800a2a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a2aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a2ac:	4b96      	ldr	r3, [pc, #600]	; (800a508 <HAL_RCC_OscConfig+0x288>)
 800a2ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2b0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a2b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2b4:	2b10      	cmp	r3, #16
 800a2b6:	d007      	beq.n	800a2c8 <HAL_RCC_OscConfig+0x48>
 800a2b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ba:	2b18      	cmp	r3, #24
 800a2bc:	d111      	bne.n	800a2e2 <HAL_RCC_OscConfig+0x62>
 800a2be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2c0:	f003 0303 	and.w	r3, r3, #3
 800a2c4:	2b02      	cmp	r3, #2
 800a2c6:	d10c      	bne.n	800a2e2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a2c8:	4b8f      	ldr	r3, [pc, #572]	; (800a508 <HAL_RCC_OscConfig+0x288>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d06d      	beq.n	800a3b0 <HAL_RCC_OscConfig+0x130>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	685b      	ldr	r3, [r3, #4]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d169      	bne.n	800a3b0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a2dc:	2301      	movs	r3, #1
 800a2de:	f000 bc21 	b.w	800ab24 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	685b      	ldr	r3, [r3, #4]
 800a2e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2ea:	d106      	bne.n	800a2fa <HAL_RCC_OscConfig+0x7a>
 800a2ec:	4b86      	ldr	r3, [pc, #536]	; (800a508 <HAL_RCC_OscConfig+0x288>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	4a85      	ldr	r2, [pc, #532]	; (800a508 <HAL_RCC_OscConfig+0x288>)
 800a2f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a2f6:	6013      	str	r3, [r2, #0]
 800a2f8:	e02e      	b.n	800a358 <HAL_RCC_OscConfig+0xd8>
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d10c      	bne.n	800a31c <HAL_RCC_OscConfig+0x9c>
 800a302:	4b81      	ldr	r3, [pc, #516]	; (800a508 <HAL_RCC_OscConfig+0x288>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	4a80      	ldr	r2, [pc, #512]	; (800a508 <HAL_RCC_OscConfig+0x288>)
 800a308:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a30c:	6013      	str	r3, [r2, #0]
 800a30e:	4b7e      	ldr	r3, [pc, #504]	; (800a508 <HAL_RCC_OscConfig+0x288>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	4a7d      	ldr	r2, [pc, #500]	; (800a508 <HAL_RCC_OscConfig+0x288>)
 800a314:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a318:	6013      	str	r3, [r2, #0]
 800a31a:	e01d      	b.n	800a358 <HAL_RCC_OscConfig+0xd8>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	685b      	ldr	r3, [r3, #4]
 800a320:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a324:	d10c      	bne.n	800a340 <HAL_RCC_OscConfig+0xc0>
 800a326:	4b78      	ldr	r3, [pc, #480]	; (800a508 <HAL_RCC_OscConfig+0x288>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	4a77      	ldr	r2, [pc, #476]	; (800a508 <HAL_RCC_OscConfig+0x288>)
 800a32c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a330:	6013      	str	r3, [r2, #0]
 800a332:	4b75      	ldr	r3, [pc, #468]	; (800a508 <HAL_RCC_OscConfig+0x288>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	4a74      	ldr	r2, [pc, #464]	; (800a508 <HAL_RCC_OscConfig+0x288>)
 800a338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a33c:	6013      	str	r3, [r2, #0]
 800a33e:	e00b      	b.n	800a358 <HAL_RCC_OscConfig+0xd8>
 800a340:	4b71      	ldr	r3, [pc, #452]	; (800a508 <HAL_RCC_OscConfig+0x288>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4a70      	ldr	r2, [pc, #448]	; (800a508 <HAL_RCC_OscConfig+0x288>)
 800a346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a34a:	6013      	str	r3, [r2, #0]
 800a34c:	4b6e      	ldr	r3, [pc, #440]	; (800a508 <HAL_RCC_OscConfig+0x288>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4a6d      	ldr	r2, [pc, #436]	; (800a508 <HAL_RCC_OscConfig+0x288>)
 800a352:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a356:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d013      	beq.n	800a388 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a360:	f7fb fa3a 	bl	80057d8 <HAL_GetTick>
 800a364:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a366:	e008      	b.n	800a37a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a368:	f7fb fa36 	bl	80057d8 <HAL_GetTick>
 800a36c:	4602      	mov	r2, r0
 800a36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a370:	1ad3      	subs	r3, r2, r3
 800a372:	2b64      	cmp	r3, #100	; 0x64
 800a374:	d901      	bls.n	800a37a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a376:	2303      	movs	r3, #3
 800a378:	e3d4      	b.n	800ab24 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a37a:	4b63      	ldr	r3, [pc, #396]	; (800a508 <HAL_RCC_OscConfig+0x288>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a382:	2b00      	cmp	r3, #0
 800a384:	d0f0      	beq.n	800a368 <HAL_RCC_OscConfig+0xe8>
 800a386:	e014      	b.n	800a3b2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a388:	f7fb fa26 	bl	80057d8 <HAL_GetTick>
 800a38c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a38e:	e008      	b.n	800a3a2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a390:	f7fb fa22 	bl	80057d8 <HAL_GetTick>
 800a394:	4602      	mov	r2, r0
 800a396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a398:	1ad3      	subs	r3, r2, r3
 800a39a:	2b64      	cmp	r3, #100	; 0x64
 800a39c:	d901      	bls.n	800a3a2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a39e:	2303      	movs	r3, #3
 800a3a0:	e3c0      	b.n	800ab24 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a3a2:	4b59      	ldr	r3, [pc, #356]	; (800a508 <HAL_RCC_OscConfig+0x288>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d1f0      	bne.n	800a390 <HAL_RCC_OscConfig+0x110>
 800a3ae:	e000      	b.n	800a3b2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a3b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f003 0302 	and.w	r3, r3, #2
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	f000 80ca 	beq.w	800a554 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a3c0:	4b51      	ldr	r3, [pc, #324]	; (800a508 <HAL_RCC_OscConfig+0x288>)
 800a3c2:	691b      	ldr	r3, [r3, #16]
 800a3c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a3c8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a3ca:	4b4f      	ldr	r3, [pc, #316]	; (800a508 <HAL_RCC_OscConfig+0x288>)
 800a3cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3ce:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a3d0:	6a3b      	ldr	r3, [r7, #32]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d007      	beq.n	800a3e6 <HAL_RCC_OscConfig+0x166>
 800a3d6:	6a3b      	ldr	r3, [r7, #32]
 800a3d8:	2b18      	cmp	r3, #24
 800a3da:	d156      	bne.n	800a48a <HAL_RCC_OscConfig+0x20a>
 800a3dc:	69fb      	ldr	r3, [r7, #28]
 800a3de:	f003 0303 	and.w	r3, r3, #3
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d151      	bne.n	800a48a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a3e6:	4b48      	ldr	r3, [pc, #288]	; (800a508 <HAL_RCC_OscConfig+0x288>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f003 0304 	and.w	r3, r3, #4
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d005      	beq.n	800a3fe <HAL_RCC_OscConfig+0x17e>
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	68db      	ldr	r3, [r3, #12]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d101      	bne.n	800a3fe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	e392      	b.n	800ab24 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a3fe:	4b42      	ldr	r3, [pc, #264]	; (800a508 <HAL_RCC_OscConfig+0x288>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f023 0219 	bic.w	r2, r3, #25
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	68db      	ldr	r3, [r3, #12]
 800a40a:	493f      	ldr	r1, [pc, #252]	; (800a508 <HAL_RCC_OscConfig+0x288>)
 800a40c:	4313      	orrs	r3, r2
 800a40e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a410:	f7fb f9e2 	bl	80057d8 <HAL_GetTick>
 800a414:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a416:	e008      	b.n	800a42a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a418:	f7fb f9de 	bl	80057d8 <HAL_GetTick>
 800a41c:	4602      	mov	r2, r0
 800a41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a420:	1ad3      	subs	r3, r2, r3
 800a422:	2b02      	cmp	r3, #2
 800a424:	d901      	bls.n	800a42a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a426:	2303      	movs	r3, #3
 800a428:	e37c      	b.n	800ab24 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a42a:	4b37      	ldr	r3, [pc, #220]	; (800a508 <HAL_RCC_OscConfig+0x288>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f003 0304 	and.w	r3, r3, #4
 800a432:	2b00      	cmp	r3, #0
 800a434:	d0f0      	beq.n	800a418 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a436:	f7fb f9ff 	bl	8005838 <HAL_GetREVID>
 800a43a:	4603      	mov	r3, r0
 800a43c:	f241 0203 	movw	r2, #4099	; 0x1003
 800a440:	4293      	cmp	r3, r2
 800a442:	d817      	bhi.n	800a474 <HAL_RCC_OscConfig+0x1f4>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	691b      	ldr	r3, [r3, #16]
 800a448:	2b40      	cmp	r3, #64	; 0x40
 800a44a:	d108      	bne.n	800a45e <HAL_RCC_OscConfig+0x1de>
 800a44c:	4b2e      	ldr	r3, [pc, #184]	; (800a508 <HAL_RCC_OscConfig+0x288>)
 800a44e:	685b      	ldr	r3, [r3, #4]
 800a450:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a454:	4a2c      	ldr	r2, [pc, #176]	; (800a508 <HAL_RCC_OscConfig+0x288>)
 800a456:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a45a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a45c:	e07a      	b.n	800a554 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a45e:	4b2a      	ldr	r3, [pc, #168]	; (800a508 <HAL_RCC_OscConfig+0x288>)
 800a460:	685b      	ldr	r3, [r3, #4]
 800a462:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	691b      	ldr	r3, [r3, #16]
 800a46a:	031b      	lsls	r3, r3, #12
 800a46c:	4926      	ldr	r1, [pc, #152]	; (800a508 <HAL_RCC_OscConfig+0x288>)
 800a46e:	4313      	orrs	r3, r2
 800a470:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a472:	e06f      	b.n	800a554 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a474:	4b24      	ldr	r3, [pc, #144]	; (800a508 <HAL_RCC_OscConfig+0x288>)
 800a476:	685b      	ldr	r3, [r3, #4]
 800a478:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	691b      	ldr	r3, [r3, #16]
 800a480:	061b      	lsls	r3, r3, #24
 800a482:	4921      	ldr	r1, [pc, #132]	; (800a508 <HAL_RCC_OscConfig+0x288>)
 800a484:	4313      	orrs	r3, r2
 800a486:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a488:	e064      	b.n	800a554 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	68db      	ldr	r3, [r3, #12]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d047      	beq.n	800a522 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a492:	4b1d      	ldr	r3, [pc, #116]	; (800a508 <HAL_RCC_OscConfig+0x288>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f023 0219 	bic.w	r2, r3, #25
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	68db      	ldr	r3, [r3, #12]
 800a49e:	491a      	ldr	r1, [pc, #104]	; (800a508 <HAL_RCC_OscConfig+0x288>)
 800a4a0:	4313      	orrs	r3, r2
 800a4a2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4a4:	f7fb f998 	bl	80057d8 <HAL_GetTick>
 800a4a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a4aa:	e008      	b.n	800a4be <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a4ac:	f7fb f994 	bl	80057d8 <HAL_GetTick>
 800a4b0:	4602      	mov	r2, r0
 800a4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b4:	1ad3      	subs	r3, r2, r3
 800a4b6:	2b02      	cmp	r3, #2
 800a4b8:	d901      	bls.n	800a4be <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800a4ba:	2303      	movs	r3, #3
 800a4bc:	e332      	b.n	800ab24 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a4be:	4b12      	ldr	r3, [pc, #72]	; (800a508 <HAL_RCC_OscConfig+0x288>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f003 0304 	and.w	r3, r3, #4
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d0f0      	beq.n	800a4ac <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a4ca:	f7fb f9b5 	bl	8005838 <HAL_GetREVID>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	f241 0203 	movw	r2, #4099	; 0x1003
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d819      	bhi.n	800a50c <HAL_RCC_OscConfig+0x28c>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	691b      	ldr	r3, [r3, #16]
 800a4dc:	2b40      	cmp	r3, #64	; 0x40
 800a4de:	d108      	bne.n	800a4f2 <HAL_RCC_OscConfig+0x272>
 800a4e0:	4b09      	ldr	r3, [pc, #36]	; (800a508 <HAL_RCC_OscConfig+0x288>)
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a4e8:	4a07      	ldr	r2, [pc, #28]	; (800a508 <HAL_RCC_OscConfig+0x288>)
 800a4ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a4ee:	6053      	str	r3, [r2, #4]
 800a4f0:	e030      	b.n	800a554 <HAL_RCC_OscConfig+0x2d4>
 800a4f2:	4b05      	ldr	r3, [pc, #20]	; (800a508 <HAL_RCC_OscConfig+0x288>)
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	691b      	ldr	r3, [r3, #16]
 800a4fe:	031b      	lsls	r3, r3, #12
 800a500:	4901      	ldr	r1, [pc, #4]	; (800a508 <HAL_RCC_OscConfig+0x288>)
 800a502:	4313      	orrs	r3, r2
 800a504:	604b      	str	r3, [r1, #4]
 800a506:	e025      	b.n	800a554 <HAL_RCC_OscConfig+0x2d4>
 800a508:	58024400 	.word	0x58024400
 800a50c:	4b9a      	ldr	r3, [pc, #616]	; (800a778 <HAL_RCC_OscConfig+0x4f8>)
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	691b      	ldr	r3, [r3, #16]
 800a518:	061b      	lsls	r3, r3, #24
 800a51a:	4997      	ldr	r1, [pc, #604]	; (800a778 <HAL_RCC_OscConfig+0x4f8>)
 800a51c:	4313      	orrs	r3, r2
 800a51e:	604b      	str	r3, [r1, #4]
 800a520:	e018      	b.n	800a554 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a522:	4b95      	ldr	r3, [pc, #596]	; (800a778 <HAL_RCC_OscConfig+0x4f8>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	4a94      	ldr	r2, [pc, #592]	; (800a778 <HAL_RCC_OscConfig+0x4f8>)
 800a528:	f023 0301 	bic.w	r3, r3, #1
 800a52c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a52e:	f7fb f953 	bl	80057d8 <HAL_GetTick>
 800a532:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a534:	e008      	b.n	800a548 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a536:	f7fb f94f 	bl	80057d8 <HAL_GetTick>
 800a53a:	4602      	mov	r2, r0
 800a53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a53e:	1ad3      	subs	r3, r2, r3
 800a540:	2b02      	cmp	r3, #2
 800a542:	d901      	bls.n	800a548 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800a544:	2303      	movs	r3, #3
 800a546:	e2ed      	b.n	800ab24 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a548:	4b8b      	ldr	r3, [pc, #556]	; (800a778 <HAL_RCC_OscConfig+0x4f8>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f003 0304 	and.w	r3, r3, #4
 800a550:	2b00      	cmp	r3, #0
 800a552:	d1f0      	bne.n	800a536 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f003 0310 	and.w	r3, r3, #16
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	f000 80a9 	beq.w	800a6b4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a562:	4b85      	ldr	r3, [pc, #532]	; (800a778 <HAL_RCC_OscConfig+0x4f8>)
 800a564:	691b      	ldr	r3, [r3, #16]
 800a566:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a56a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a56c:	4b82      	ldr	r3, [pc, #520]	; (800a778 <HAL_RCC_OscConfig+0x4f8>)
 800a56e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a570:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a572:	69bb      	ldr	r3, [r7, #24]
 800a574:	2b08      	cmp	r3, #8
 800a576:	d007      	beq.n	800a588 <HAL_RCC_OscConfig+0x308>
 800a578:	69bb      	ldr	r3, [r7, #24]
 800a57a:	2b18      	cmp	r3, #24
 800a57c:	d13a      	bne.n	800a5f4 <HAL_RCC_OscConfig+0x374>
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	f003 0303 	and.w	r3, r3, #3
 800a584:	2b01      	cmp	r3, #1
 800a586:	d135      	bne.n	800a5f4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a588:	4b7b      	ldr	r3, [pc, #492]	; (800a778 <HAL_RCC_OscConfig+0x4f8>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a590:	2b00      	cmp	r3, #0
 800a592:	d005      	beq.n	800a5a0 <HAL_RCC_OscConfig+0x320>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	69db      	ldr	r3, [r3, #28]
 800a598:	2b80      	cmp	r3, #128	; 0x80
 800a59a:	d001      	beq.n	800a5a0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800a59c:	2301      	movs	r3, #1
 800a59e:	e2c1      	b.n	800ab24 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a5a0:	f7fb f94a 	bl	8005838 <HAL_GetREVID>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	f241 0203 	movw	r2, #4099	; 0x1003
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d817      	bhi.n	800a5de <HAL_RCC_OscConfig+0x35e>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6a1b      	ldr	r3, [r3, #32]
 800a5b2:	2b20      	cmp	r3, #32
 800a5b4:	d108      	bne.n	800a5c8 <HAL_RCC_OscConfig+0x348>
 800a5b6:	4b70      	ldr	r3, [pc, #448]	; (800a778 <HAL_RCC_OscConfig+0x4f8>)
 800a5b8:	685b      	ldr	r3, [r3, #4]
 800a5ba:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a5be:	4a6e      	ldr	r2, [pc, #440]	; (800a778 <HAL_RCC_OscConfig+0x4f8>)
 800a5c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a5c4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a5c6:	e075      	b.n	800a6b4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a5c8:	4b6b      	ldr	r3, [pc, #428]	; (800a778 <HAL_RCC_OscConfig+0x4f8>)
 800a5ca:	685b      	ldr	r3, [r3, #4]
 800a5cc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6a1b      	ldr	r3, [r3, #32]
 800a5d4:	069b      	lsls	r3, r3, #26
 800a5d6:	4968      	ldr	r1, [pc, #416]	; (800a778 <HAL_RCC_OscConfig+0x4f8>)
 800a5d8:	4313      	orrs	r3, r2
 800a5da:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a5dc:	e06a      	b.n	800a6b4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a5de:	4b66      	ldr	r3, [pc, #408]	; (800a778 <HAL_RCC_OscConfig+0x4f8>)
 800a5e0:	68db      	ldr	r3, [r3, #12]
 800a5e2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6a1b      	ldr	r3, [r3, #32]
 800a5ea:	061b      	lsls	r3, r3, #24
 800a5ec:	4962      	ldr	r1, [pc, #392]	; (800a778 <HAL_RCC_OscConfig+0x4f8>)
 800a5ee:	4313      	orrs	r3, r2
 800a5f0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a5f2:	e05f      	b.n	800a6b4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	69db      	ldr	r3, [r3, #28]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d042      	beq.n	800a682 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a5fc:	4b5e      	ldr	r3, [pc, #376]	; (800a778 <HAL_RCC_OscConfig+0x4f8>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4a5d      	ldr	r2, [pc, #372]	; (800a778 <HAL_RCC_OscConfig+0x4f8>)
 800a602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a606:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a608:	f7fb f8e6 	bl	80057d8 <HAL_GetTick>
 800a60c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a60e:	e008      	b.n	800a622 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a610:	f7fb f8e2 	bl	80057d8 <HAL_GetTick>
 800a614:	4602      	mov	r2, r0
 800a616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a618:	1ad3      	subs	r3, r2, r3
 800a61a:	2b02      	cmp	r3, #2
 800a61c:	d901      	bls.n	800a622 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800a61e:	2303      	movs	r3, #3
 800a620:	e280      	b.n	800ab24 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a622:	4b55      	ldr	r3, [pc, #340]	; (800a778 <HAL_RCC_OscConfig+0x4f8>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d0f0      	beq.n	800a610 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a62e:	f7fb f903 	bl	8005838 <HAL_GetREVID>
 800a632:	4603      	mov	r3, r0
 800a634:	f241 0203 	movw	r2, #4099	; 0x1003
 800a638:	4293      	cmp	r3, r2
 800a63a:	d817      	bhi.n	800a66c <HAL_RCC_OscConfig+0x3ec>
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6a1b      	ldr	r3, [r3, #32]
 800a640:	2b20      	cmp	r3, #32
 800a642:	d108      	bne.n	800a656 <HAL_RCC_OscConfig+0x3d6>
 800a644:	4b4c      	ldr	r3, [pc, #304]	; (800a778 <HAL_RCC_OscConfig+0x4f8>)
 800a646:	685b      	ldr	r3, [r3, #4]
 800a648:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a64c:	4a4a      	ldr	r2, [pc, #296]	; (800a778 <HAL_RCC_OscConfig+0x4f8>)
 800a64e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a652:	6053      	str	r3, [r2, #4]
 800a654:	e02e      	b.n	800a6b4 <HAL_RCC_OscConfig+0x434>
 800a656:	4b48      	ldr	r3, [pc, #288]	; (800a778 <HAL_RCC_OscConfig+0x4f8>)
 800a658:	685b      	ldr	r3, [r3, #4]
 800a65a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6a1b      	ldr	r3, [r3, #32]
 800a662:	069b      	lsls	r3, r3, #26
 800a664:	4944      	ldr	r1, [pc, #272]	; (800a778 <HAL_RCC_OscConfig+0x4f8>)
 800a666:	4313      	orrs	r3, r2
 800a668:	604b      	str	r3, [r1, #4]
 800a66a:	e023      	b.n	800a6b4 <HAL_RCC_OscConfig+0x434>
 800a66c:	4b42      	ldr	r3, [pc, #264]	; (800a778 <HAL_RCC_OscConfig+0x4f8>)
 800a66e:	68db      	ldr	r3, [r3, #12]
 800a670:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6a1b      	ldr	r3, [r3, #32]
 800a678:	061b      	lsls	r3, r3, #24
 800a67a:	493f      	ldr	r1, [pc, #252]	; (800a778 <HAL_RCC_OscConfig+0x4f8>)
 800a67c:	4313      	orrs	r3, r2
 800a67e:	60cb      	str	r3, [r1, #12]
 800a680:	e018      	b.n	800a6b4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a682:	4b3d      	ldr	r3, [pc, #244]	; (800a778 <HAL_RCC_OscConfig+0x4f8>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	4a3c      	ldr	r2, [pc, #240]	; (800a778 <HAL_RCC_OscConfig+0x4f8>)
 800a688:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a68c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a68e:	f7fb f8a3 	bl	80057d8 <HAL_GetTick>
 800a692:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a694:	e008      	b.n	800a6a8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a696:	f7fb f89f 	bl	80057d8 <HAL_GetTick>
 800a69a:	4602      	mov	r2, r0
 800a69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a69e:	1ad3      	subs	r3, r2, r3
 800a6a0:	2b02      	cmp	r3, #2
 800a6a2:	d901      	bls.n	800a6a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a6a4:	2303      	movs	r3, #3
 800a6a6:	e23d      	b.n	800ab24 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a6a8:	4b33      	ldr	r3, [pc, #204]	; (800a778 <HAL_RCC_OscConfig+0x4f8>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d1f0      	bne.n	800a696 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f003 0308 	and.w	r3, r3, #8
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d036      	beq.n	800a72e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	695b      	ldr	r3, [r3, #20]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d019      	beq.n	800a6fc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a6c8:	4b2b      	ldr	r3, [pc, #172]	; (800a778 <HAL_RCC_OscConfig+0x4f8>)
 800a6ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6cc:	4a2a      	ldr	r2, [pc, #168]	; (800a778 <HAL_RCC_OscConfig+0x4f8>)
 800a6ce:	f043 0301 	orr.w	r3, r3, #1
 800a6d2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a6d4:	f7fb f880 	bl	80057d8 <HAL_GetTick>
 800a6d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a6da:	e008      	b.n	800a6ee <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a6dc:	f7fb f87c 	bl	80057d8 <HAL_GetTick>
 800a6e0:	4602      	mov	r2, r0
 800a6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e4:	1ad3      	subs	r3, r2, r3
 800a6e6:	2b02      	cmp	r3, #2
 800a6e8:	d901      	bls.n	800a6ee <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800a6ea:	2303      	movs	r3, #3
 800a6ec:	e21a      	b.n	800ab24 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a6ee:	4b22      	ldr	r3, [pc, #136]	; (800a778 <HAL_RCC_OscConfig+0x4f8>)
 800a6f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6f2:	f003 0302 	and.w	r3, r3, #2
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d0f0      	beq.n	800a6dc <HAL_RCC_OscConfig+0x45c>
 800a6fa:	e018      	b.n	800a72e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a6fc:	4b1e      	ldr	r3, [pc, #120]	; (800a778 <HAL_RCC_OscConfig+0x4f8>)
 800a6fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a700:	4a1d      	ldr	r2, [pc, #116]	; (800a778 <HAL_RCC_OscConfig+0x4f8>)
 800a702:	f023 0301 	bic.w	r3, r3, #1
 800a706:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a708:	f7fb f866 	bl	80057d8 <HAL_GetTick>
 800a70c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a70e:	e008      	b.n	800a722 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a710:	f7fb f862 	bl	80057d8 <HAL_GetTick>
 800a714:	4602      	mov	r2, r0
 800a716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a718:	1ad3      	subs	r3, r2, r3
 800a71a:	2b02      	cmp	r3, #2
 800a71c:	d901      	bls.n	800a722 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800a71e:	2303      	movs	r3, #3
 800a720:	e200      	b.n	800ab24 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a722:	4b15      	ldr	r3, [pc, #84]	; (800a778 <HAL_RCC_OscConfig+0x4f8>)
 800a724:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a726:	f003 0302 	and.w	r3, r3, #2
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d1f0      	bne.n	800a710 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f003 0320 	and.w	r3, r3, #32
 800a736:	2b00      	cmp	r3, #0
 800a738:	d039      	beq.n	800a7ae <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	699b      	ldr	r3, [r3, #24]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d01c      	beq.n	800a77c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a742:	4b0d      	ldr	r3, [pc, #52]	; (800a778 <HAL_RCC_OscConfig+0x4f8>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	4a0c      	ldr	r2, [pc, #48]	; (800a778 <HAL_RCC_OscConfig+0x4f8>)
 800a748:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a74c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a74e:	f7fb f843 	bl	80057d8 <HAL_GetTick>
 800a752:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a754:	e008      	b.n	800a768 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a756:	f7fb f83f 	bl	80057d8 <HAL_GetTick>
 800a75a:	4602      	mov	r2, r0
 800a75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a75e:	1ad3      	subs	r3, r2, r3
 800a760:	2b02      	cmp	r3, #2
 800a762:	d901      	bls.n	800a768 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800a764:	2303      	movs	r3, #3
 800a766:	e1dd      	b.n	800ab24 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a768:	4b03      	ldr	r3, [pc, #12]	; (800a778 <HAL_RCC_OscConfig+0x4f8>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a770:	2b00      	cmp	r3, #0
 800a772:	d0f0      	beq.n	800a756 <HAL_RCC_OscConfig+0x4d6>
 800a774:	e01b      	b.n	800a7ae <HAL_RCC_OscConfig+0x52e>
 800a776:	bf00      	nop
 800a778:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a77c:	4b9b      	ldr	r3, [pc, #620]	; (800a9ec <HAL_RCC_OscConfig+0x76c>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	4a9a      	ldr	r2, [pc, #616]	; (800a9ec <HAL_RCC_OscConfig+0x76c>)
 800a782:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a786:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a788:	f7fb f826 	bl	80057d8 <HAL_GetTick>
 800a78c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a78e:	e008      	b.n	800a7a2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a790:	f7fb f822 	bl	80057d8 <HAL_GetTick>
 800a794:	4602      	mov	r2, r0
 800a796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a798:	1ad3      	subs	r3, r2, r3
 800a79a:	2b02      	cmp	r3, #2
 800a79c:	d901      	bls.n	800a7a2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a79e:	2303      	movs	r3, #3
 800a7a0:	e1c0      	b.n	800ab24 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a7a2:	4b92      	ldr	r3, [pc, #584]	; (800a9ec <HAL_RCC_OscConfig+0x76c>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d1f0      	bne.n	800a790 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f003 0304 	and.w	r3, r3, #4
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	f000 8081 	beq.w	800a8be <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a7bc:	4b8c      	ldr	r3, [pc, #560]	; (800a9f0 <HAL_RCC_OscConfig+0x770>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	4a8b      	ldr	r2, [pc, #556]	; (800a9f0 <HAL_RCC_OscConfig+0x770>)
 800a7c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a7c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a7c8:	f7fb f806 	bl	80057d8 <HAL_GetTick>
 800a7cc:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a7ce:	e008      	b.n	800a7e2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a7d0:	f7fb f802 	bl	80057d8 <HAL_GetTick>
 800a7d4:	4602      	mov	r2, r0
 800a7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d8:	1ad3      	subs	r3, r2, r3
 800a7da:	2b64      	cmp	r3, #100	; 0x64
 800a7dc:	d901      	bls.n	800a7e2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800a7de:	2303      	movs	r3, #3
 800a7e0:	e1a0      	b.n	800ab24 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a7e2:	4b83      	ldr	r3, [pc, #524]	; (800a9f0 <HAL_RCC_OscConfig+0x770>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d0f0      	beq.n	800a7d0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	689b      	ldr	r3, [r3, #8]
 800a7f2:	2b01      	cmp	r3, #1
 800a7f4:	d106      	bne.n	800a804 <HAL_RCC_OscConfig+0x584>
 800a7f6:	4b7d      	ldr	r3, [pc, #500]	; (800a9ec <HAL_RCC_OscConfig+0x76c>)
 800a7f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7fa:	4a7c      	ldr	r2, [pc, #496]	; (800a9ec <HAL_RCC_OscConfig+0x76c>)
 800a7fc:	f043 0301 	orr.w	r3, r3, #1
 800a800:	6713      	str	r3, [r2, #112]	; 0x70
 800a802:	e02d      	b.n	800a860 <HAL_RCC_OscConfig+0x5e0>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	689b      	ldr	r3, [r3, #8]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d10c      	bne.n	800a826 <HAL_RCC_OscConfig+0x5a6>
 800a80c:	4b77      	ldr	r3, [pc, #476]	; (800a9ec <HAL_RCC_OscConfig+0x76c>)
 800a80e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a810:	4a76      	ldr	r2, [pc, #472]	; (800a9ec <HAL_RCC_OscConfig+0x76c>)
 800a812:	f023 0301 	bic.w	r3, r3, #1
 800a816:	6713      	str	r3, [r2, #112]	; 0x70
 800a818:	4b74      	ldr	r3, [pc, #464]	; (800a9ec <HAL_RCC_OscConfig+0x76c>)
 800a81a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a81c:	4a73      	ldr	r2, [pc, #460]	; (800a9ec <HAL_RCC_OscConfig+0x76c>)
 800a81e:	f023 0304 	bic.w	r3, r3, #4
 800a822:	6713      	str	r3, [r2, #112]	; 0x70
 800a824:	e01c      	b.n	800a860 <HAL_RCC_OscConfig+0x5e0>
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	689b      	ldr	r3, [r3, #8]
 800a82a:	2b05      	cmp	r3, #5
 800a82c:	d10c      	bne.n	800a848 <HAL_RCC_OscConfig+0x5c8>
 800a82e:	4b6f      	ldr	r3, [pc, #444]	; (800a9ec <HAL_RCC_OscConfig+0x76c>)
 800a830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a832:	4a6e      	ldr	r2, [pc, #440]	; (800a9ec <HAL_RCC_OscConfig+0x76c>)
 800a834:	f043 0304 	orr.w	r3, r3, #4
 800a838:	6713      	str	r3, [r2, #112]	; 0x70
 800a83a:	4b6c      	ldr	r3, [pc, #432]	; (800a9ec <HAL_RCC_OscConfig+0x76c>)
 800a83c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a83e:	4a6b      	ldr	r2, [pc, #428]	; (800a9ec <HAL_RCC_OscConfig+0x76c>)
 800a840:	f043 0301 	orr.w	r3, r3, #1
 800a844:	6713      	str	r3, [r2, #112]	; 0x70
 800a846:	e00b      	b.n	800a860 <HAL_RCC_OscConfig+0x5e0>
 800a848:	4b68      	ldr	r3, [pc, #416]	; (800a9ec <HAL_RCC_OscConfig+0x76c>)
 800a84a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a84c:	4a67      	ldr	r2, [pc, #412]	; (800a9ec <HAL_RCC_OscConfig+0x76c>)
 800a84e:	f023 0301 	bic.w	r3, r3, #1
 800a852:	6713      	str	r3, [r2, #112]	; 0x70
 800a854:	4b65      	ldr	r3, [pc, #404]	; (800a9ec <HAL_RCC_OscConfig+0x76c>)
 800a856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a858:	4a64      	ldr	r2, [pc, #400]	; (800a9ec <HAL_RCC_OscConfig+0x76c>)
 800a85a:	f023 0304 	bic.w	r3, r3, #4
 800a85e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	689b      	ldr	r3, [r3, #8]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d015      	beq.n	800a894 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a868:	f7fa ffb6 	bl	80057d8 <HAL_GetTick>
 800a86c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a86e:	e00a      	b.n	800a886 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a870:	f7fa ffb2 	bl	80057d8 <HAL_GetTick>
 800a874:	4602      	mov	r2, r0
 800a876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a878:	1ad3      	subs	r3, r2, r3
 800a87a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a87e:	4293      	cmp	r3, r2
 800a880:	d901      	bls.n	800a886 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a882:	2303      	movs	r3, #3
 800a884:	e14e      	b.n	800ab24 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a886:	4b59      	ldr	r3, [pc, #356]	; (800a9ec <HAL_RCC_OscConfig+0x76c>)
 800a888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a88a:	f003 0302 	and.w	r3, r3, #2
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d0ee      	beq.n	800a870 <HAL_RCC_OscConfig+0x5f0>
 800a892:	e014      	b.n	800a8be <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a894:	f7fa ffa0 	bl	80057d8 <HAL_GetTick>
 800a898:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a89a:	e00a      	b.n	800a8b2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a89c:	f7fa ff9c 	bl	80057d8 <HAL_GetTick>
 800a8a0:	4602      	mov	r2, r0
 800a8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a4:	1ad3      	subs	r3, r2, r3
 800a8a6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d901      	bls.n	800a8b2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a8ae:	2303      	movs	r3, #3
 800a8b0:	e138      	b.n	800ab24 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a8b2:	4b4e      	ldr	r3, [pc, #312]	; (800a9ec <HAL_RCC_OscConfig+0x76c>)
 800a8b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8b6:	f003 0302 	and.w	r3, r3, #2
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d1ee      	bne.n	800a89c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	f000 812d 	beq.w	800ab22 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a8c8:	4b48      	ldr	r3, [pc, #288]	; (800a9ec <HAL_RCC_OscConfig+0x76c>)
 800a8ca:	691b      	ldr	r3, [r3, #16]
 800a8cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a8d0:	2b18      	cmp	r3, #24
 800a8d2:	f000 80bd 	beq.w	800aa50 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8da:	2b02      	cmp	r3, #2
 800a8dc:	f040 809e 	bne.w	800aa1c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a8e0:	4b42      	ldr	r3, [pc, #264]	; (800a9ec <HAL_RCC_OscConfig+0x76c>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	4a41      	ldr	r2, [pc, #260]	; (800a9ec <HAL_RCC_OscConfig+0x76c>)
 800a8e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a8ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8ec:	f7fa ff74 	bl	80057d8 <HAL_GetTick>
 800a8f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a8f2:	e008      	b.n	800a906 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a8f4:	f7fa ff70 	bl	80057d8 <HAL_GetTick>
 800a8f8:	4602      	mov	r2, r0
 800a8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8fc:	1ad3      	subs	r3, r2, r3
 800a8fe:	2b02      	cmp	r3, #2
 800a900:	d901      	bls.n	800a906 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a902:	2303      	movs	r3, #3
 800a904:	e10e      	b.n	800ab24 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a906:	4b39      	ldr	r3, [pc, #228]	; (800a9ec <HAL_RCC_OscConfig+0x76c>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d1f0      	bne.n	800a8f4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a912:	4b36      	ldr	r3, [pc, #216]	; (800a9ec <HAL_RCC_OscConfig+0x76c>)
 800a914:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a916:	4b37      	ldr	r3, [pc, #220]	; (800a9f4 <HAL_RCC_OscConfig+0x774>)
 800a918:	4013      	ands	r3, r2
 800a91a:	687a      	ldr	r2, [r7, #4]
 800a91c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a91e:	687a      	ldr	r2, [r7, #4]
 800a920:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a922:	0112      	lsls	r2, r2, #4
 800a924:	430a      	orrs	r2, r1
 800a926:	4931      	ldr	r1, [pc, #196]	; (800a9ec <HAL_RCC_OscConfig+0x76c>)
 800a928:	4313      	orrs	r3, r2
 800a92a:	628b      	str	r3, [r1, #40]	; 0x28
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a930:	3b01      	subs	r3, #1
 800a932:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a93a:	3b01      	subs	r3, #1
 800a93c:	025b      	lsls	r3, r3, #9
 800a93e:	b29b      	uxth	r3, r3
 800a940:	431a      	orrs	r2, r3
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a946:	3b01      	subs	r3, #1
 800a948:	041b      	lsls	r3, r3, #16
 800a94a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a94e:	431a      	orrs	r2, r3
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a954:	3b01      	subs	r3, #1
 800a956:	061b      	lsls	r3, r3, #24
 800a958:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a95c:	4923      	ldr	r1, [pc, #140]	; (800a9ec <HAL_RCC_OscConfig+0x76c>)
 800a95e:	4313      	orrs	r3, r2
 800a960:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a962:	4b22      	ldr	r3, [pc, #136]	; (800a9ec <HAL_RCC_OscConfig+0x76c>)
 800a964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a966:	4a21      	ldr	r2, [pc, #132]	; (800a9ec <HAL_RCC_OscConfig+0x76c>)
 800a968:	f023 0301 	bic.w	r3, r3, #1
 800a96c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a96e:	4b1f      	ldr	r3, [pc, #124]	; (800a9ec <HAL_RCC_OscConfig+0x76c>)
 800a970:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a972:	4b21      	ldr	r3, [pc, #132]	; (800a9f8 <HAL_RCC_OscConfig+0x778>)
 800a974:	4013      	ands	r3, r2
 800a976:	687a      	ldr	r2, [r7, #4]
 800a978:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a97a:	00d2      	lsls	r2, r2, #3
 800a97c:	491b      	ldr	r1, [pc, #108]	; (800a9ec <HAL_RCC_OscConfig+0x76c>)
 800a97e:	4313      	orrs	r3, r2
 800a980:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a982:	4b1a      	ldr	r3, [pc, #104]	; (800a9ec <HAL_RCC_OscConfig+0x76c>)
 800a984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a986:	f023 020c 	bic.w	r2, r3, #12
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a98e:	4917      	ldr	r1, [pc, #92]	; (800a9ec <HAL_RCC_OscConfig+0x76c>)
 800a990:	4313      	orrs	r3, r2
 800a992:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a994:	4b15      	ldr	r3, [pc, #84]	; (800a9ec <HAL_RCC_OscConfig+0x76c>)
 800a996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a998:	f023 0202 	bic.w	r2, r3, #2
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9a0:	4912      	ldr	r1, [pc, #72]	; (800a9ec <HAL_RCC_OscConfig+0x76c>)
 800a9a2:	4313      	orrs	r3, r2
 800a9a4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a9a6:	4b11      	ldr	r3, [pc, #68]	; (800a9ec <HAL_RCC_OscConfig+0x76c>)
 800a9a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9aa:	4a10      	ldr	r2, [pc, #64]	; (800a9ec <HAL_RCC_OscConfig+0x76c>)
 800a9ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a9b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9b2:	4b0e      	ldr	r3, [pc, #56]	; (800a9ec <HAL_RCC_OscConfig+0x76c>)
 800a9b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9b6:	4a0d      	ldr	r2, [pc, #52]	; (800a9ec <HAL_RCC_OscConfig+0x76c>)
 800a9b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a9be:	4b0b      	ldr	r3, [pc, #44]	; (800a9ec <HAL_RCC_OscConfig+0x76c>)
 800a9c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9c2:	4a0a      	ldr	r2, [pc, #40]	; (800a9ec <HAL_RCC_OscConfig+0x76c>)
 800a9c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a9c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a9ca:	4b08      	ldr	r3, [pc, #32]	; (800a9ec <HAL_RCC_OscConfig+0x76c>)
 800a9cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ce:	4a07      	ldr	r2, [pc, #28]	; (800a9ec <HAL_RCC_OscConfig+0x76c>)
 800a9d0:	f043 0301 	orr.w	r3, r3, #1
 800a9d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a9d6:	4b05      	ldr	r3, [pc, #20]	; (800a9ec <HAL_RCC_OscConfig+0x76c>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	4a04      	ldr	r2, [pc, #16]	; (800a9ec <HAL_RCC_OscConfig+0x76c>)
 800a9dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a9e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9e2:	f7fa fef9 	bl	80057d8 <HAL_GetTick>
 800a9e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a9e8:	e011      	b.n	800aa0e <HAL_RCC_OscConfig+0x78e>
 800a9ea:	bf00      	nop
 800a9ec:	58024400 	.word	0x58024400
 800a9f0:	58024800 	.word	0x58024800
 800a9f4:	fffffc0c 	.word	0xfffffc0c
 800a9f8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a9fc:	f7fa feec 	bl	80057d8 <HAL_GetTick>
 800aa00:	4602      	mov	r2, r0
 800aa02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa04:	1ad3      	subs	r3, r2, r3
 800aa06:	2b02      	cmp	r3, #2
 800aa08:	d901      	bls.n	800aa0e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800aa0a:	2303      	movs	r3, #3
 800aa0c:	e08a      	b.n	800ab24 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800aa0e:	4b47      	ldr	r3, [pc, #284]	; (800ab2c <HAL_RCC_OscConfig+0x8ac>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d0f0      	beq.n	800a9fc <HAL_RCC_OscConfig+0x77c>
 800aa1a:	e082      	b.n	800ab22 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aa1c:	4b43      	ldr	r3, [pc, #268]	; (800ab2c <HAL_RCC_OscConfig+0x8ac>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	4a42      	ldr	r2, [pc, #264]	; (800ab2c <HAL_RCC_OscConfig+0x8ac>)
 800aa22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aa26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa28:	f7fa fed6 	bl	80057d8 <HAL_GetTick>
 800aa2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aa2e:	e008      	b.n	800aa42 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa30:	f7fa fed2 	bl	80057d8 <HAL_GetTick>
 800aa34:	4602      	mov	r2, r0
 800aa36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa38:	1ad3      	subs	r3, r2, r3
 800aa3a:	2b02      	cmp	r3, #2
 800aa3c:	d901      	bls.n	800aa42 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800aa3e:	2303      	movs	r3, #3
 800aa40:	e070      	b.n	800ab24 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aa42:	4b3a      	ldr	r3, [pc, #232]	; (800ab2c <HAL_RCC_OscConfig+0x8ac>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d1f0      	bne.n	800aa30 <HAL_RCC_OscConfig+0x7b0>
 800aa4e:	e068      	b.n	800ab22 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800aa50:	4b36      	ldr	r3, [pc, #216]	; (800ab2c <HAL_RCC_OscConfig+0x8ac>)
 800aa52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa54:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800aa56:	4b35      	ldr	r3, [pc, #212]	; (800ab2c <HAL_RCC_OscConfig+0x8ac>)
 800aa58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa5a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	d031      	beq.n	800aac8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	f003 0203 	and.w	r2, r3, #3
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	d12a      	bne.n	800aac8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	091b      	lsrs	r3, r3, #4
 800aa76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aa7e:	429a      	cmp	r2, r3
 800aa80:	d122      	bne.n	800aac8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa8c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800aa8e:	429a      	cmp	r2, r3
 800aa90:	d11a      	bne.n	800aac8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	0a5b      	lsrs	r3, r3, #9
 800aa96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa9e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	d111      	bne.n	800aac8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	0c1b      	lsrs	r3, r3, #16
 800aaa8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aab0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d108      	bne.n	800aac8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	0e1b      	lsrs	r3, r3, #24
 800aaba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aac2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d001      	beq.n	800aacc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800aac8:	2301      	movs	r3, #1
 800aaca:	e02b      	b.n	800ab24 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800aacc:	4b17      	ldr	r3, [pc, #92]	; (800ab2c <HAL_RCC_OscConfig+0x8ac>)
 800aace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aad0:	08db      	lsrs	r3, r3, #3
 800aad2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aad6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aadc:	693a      	ldr	r2, [r7, #16]
 800aade:	429a      	cmp	r2, r3
 800aae0:	d01f      	beq.n	800ab22 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800aae2:	4b12      	ldr	r3, [pc, #72]	; (800ab2c <HAL_RCC_OscConfig+0x8ac>)
 800aae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aae6:	4a11      	ldr	r2, [pc, #68]	; (800ab2c <HAL_RCC_OscConfig+0x8ac>)
 800aae8:	f023 0301 	bic.w	r3, r3, #1
 800aaec:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800aaee:	f7fa fe73 	bl	80057d8 <HAL_GetTick>
 800aaf2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800aaf4:	bf00      	nop
 800aaf6:	f7fa fe6f 	bl	80057d8 <HAL_GetTick>
 800aafa:	4602      	mov	r2, r0
 800aafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d0f9      	beq.n	800aaf6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ab02:	4b0a      	ldr	r3, [pc, #40]	; (800ab2c <HAL_RCC_OscConfig+0x8ac>)
 800ab04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab06:	4b0a      	ldr	r3, [pc, #40]	; (800ab30 <HAL_RCC_OscConfig+0x8b0>)
 800ab08:	4013      	ands	r3, r2
 800ab0a:	687a      	ldr	r2, [r7, #4]
 800ab0c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ab0e:	00d2      	lsls	r2, r2, #3
 800ab10:	4906      	ldr	r1, [pc, #24]	; (800ab2c <HAL_RCC_OscConfig+0x8ac>)
 800ab12:	4313      	orrs	r3, r2
 800ab14:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800ab16:	4b05      	ldr	r3, [pc, #20]	; (800ab2c <HAL_RCC_OscConfig+0x8ac>)
 800ab18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab1a:	4a04      	ldr	r2, [pc, #16]	; (800ab2c <HAL_RCC_OscConfig+0x8ac>)
 800ab1c:	f043 0301 	orr.w	r3, r3, #1
 800ab20:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800ab22:	2300      	movs	r3, #0
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3730      	adds	r7, #48	; 0x30
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}
 800ab2c:	58024400 	.word	0x58024400
 800ab30:	ffff0007 	.word	0xffff0007

0800ab34 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b086      	sub	sp, #24
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
 800ab3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d101      	bne.n	800ab48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ab44:	2301      	movs	r3, #1
 800ab46:	e19c      	b.n	800ae82 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ab48:	4b8a      	ldr	r3, [pc, #552]	; (800ad74 <HAL_RCC_ClockConfig+0x240>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f003 030f 	and.w	r3, r3, #15
 800ab50:	683a      	ldr	r2, [r7, #0]
 800ab52:	429a      	cmp	r2, r3
 800ab54:	d910      	bls.n	800ab78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ab56:	4b87      	ldr	r3, [pc, #540]	; (800ad74 <HAL_RCC_ClockConfig+0x240>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f023 020f 	bic.w	r2, r3, #15
 800ab5e:	4985      	ldr	r1, [pc, #532]	; (800ad74 <HAL_RCC_ClockConfig+0x240>)
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	4313      	orrs	r3, r2
 800ab64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ab66:	4b83      	ldr	r3, [pc, #524]	; (800ad74 <HAL_RCC_ClockConfig+0x240>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	f003 030f 	and.w	r3, r3, #15
 800ab6e:	683a      	ldr	r2, [r7, #0]
 800ab70:	429a      	cmp	r2, r3
 800ab72:	d001      	beq.n	800ab78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800ab74:	2301      	movs	r3, #1
 800ab76:	e184      	b.n	800ae82 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f003 0304 	and.w	r3, r3, #4
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d010      	beq.n	800aba6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	691a      	ldr	r2, [r3, #16]
 800ab88:	4b7b      	ldr	r3, [pc, #492]	; (800ad78 <HAL_RCC_ClockConfig+0x244>)
 800ab8a:	699b      	ldr	r3, [r3, #24]
 800ab8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ab90:	429a      	cmp	r2, r3
 800ab92:	d908      	bls.n	800aba6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ab94:	4b78      	ldr	r3, [pc, #480]	; (800ad78 <HAL_RCC_ClockConfig+0x244>)
 800ab96:	699b      	ldr	r3, [r3, #24]
 800ab98:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	691b      	ldr	r3, [r3, #16]
 800aba0:	4975      	ldr	r1, [pc, #468]	; (800ad78 <HAL_RCC_ClockConfig+0x244>)
 800aba2:	4313      	orrs	r3, r2
 800aba4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f003 0308 	and.w	r3, r3, #8
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d010      	beq.n	800abd4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	695a      	ldr	r2, [r3, #20]
 800abb6:	4b70      	ldr	r3, [pc, #448]	; (800ad78 <HAL_RCC_ClockConfig+0x244>)
 800abb8:	69db      	ldr	r3, [r3, #28]
 800abba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800abbe:	429a      	cmp	r2, r3
 800abc0:	d908      	bls.n	800abd4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800abc2:	4b6d      	ldr	r3, [pc, #436]	; (800ad78 <HAL_RCC_ClockConfig+0x244>)
 800abc4:	69db      	ldr	r3, [r3, #28]
 800abc6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	695b      	ldr	r3, [r3, #20]
 800abce:	496a      	ldr	r1, [pc, #424]	; (800ad78 <HAL_RCC_ClockConfig+0x244>)
 800abd0:	4313      	orrs	r3, r2
 800abd2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f003 0310 	and.w	r3, r3, #16
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d010      	beq.n	800ac02 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	699a      	ldr	r2, [r3, #24]
 800abe4:	4b64      	ldr	r3, [pc, #400]	; (800ad78 <HAL_RCC_ClockConfig+0x244>)
 800abe6:	69db      	ldr	r3, [r3, #28]
 800abe8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800abec:	429a      	cmp	r2, r3
 800abee:	d908      	bls.n	800ac02 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800abf0:	4b61      	ldr	r3, [pc, #388]	; (800ad78 <HAL_RCC_ClockConfig+0x244>)
 800abf2:	69db      	ldr	r3, [r3, #28]
 800abf4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	699b      	ldr	r3, [r3, #24]
 800abfc:	495e      	ldr	r1, [pc, #376]	; (800ad78 <HAL_RCC_ClockConfig+0x244>)
 800abfe:	4313      	orrs	r3, r2
 800ac00:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f003 0320 	and.w	r3, r3, #32
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d010      	beq.n	800ac30 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	69da      	ldr	r2, [r3, #28]
 800ac12:	4b59      	ldr	r3, [pc, #356]	; (800ad78 <HAL_RCC_ClockConfig+0x244>)
 800ac14:	6a1b      	ldr	r3, [r3, #32]
 800ac16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ac1a:	429a      	cmp	r2, r3
 800ac1c:	d908      	bls.n	800ac30 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ac1e:	4b56      	ldr	r3, [pc, #344]	; (800ad78 <HAL_RCC_ClockConfig+0x244>)
 800ac20:	6a1b      	ldr	r3, [r3, #32]
 800ac22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	69db      	ldr	r3, [r3, #28]
 800ac2a:	4953      	ldr	r1, [pc, #332]	; (800ad78 <HAL_RCC_ClockConfig+0x244>)
 800ac2c:	4313      	orrs	r3, r2
 800ac2e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f003 0302 	and.w	r3, r3, #2
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d010      	beq.n	800ac5e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	68da      	ldr	r2, [r3, #12]
 800ac40:	4b4d      	ldr	r3, [pc, #308]	; (800ad78 <HAL_RCC_ClockConfig+0x244>)
 800ac42:	699b      	ldr	r3, [r3, #24]
 800ac44:	f003 030f 	and.w	r3, r3, #15
 800ac48:	429a      	cmp	r2, r3
 800ac4a:	d908      	bls.n	800ac5e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ac4c:	4b4a      	ldr	r3, [pc, #296]	; (800ad78 <HAL_RCC_ClockConfig+0x244>)
 800ac4e:	699b      	ldr	r3, [r3, #24]
 800ac50:	f023 020f 	bic.w	r2, r3, #15
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	68db      	ldr	r3, [r3, #12]
 800ac58:	4947      	ldr	r1, [pc, #284]	; (800ad78 <HAL_RCC_ClockConfig+0x244>)
 800ac5a:	4313      	orrs	r3, r2
 800ac5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f003 0301 	and.w	r3, r3, #1
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d055      	beq.n	800ad16 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800ac6a:	4b43      	ldr	r3, [pc, #268]	; (800ad78 <HAL_RCC_ClockConfig+0x244>)
 800ac6c:	699b      	ldr	r3, [r3, #24]
 800ac6e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	689b      	ldr	r3, [r3, #8]
 800ac76:	4940      	ldr	r1, [pc, #256]	; (800ad78 <HAL_RCC_ClockConfig+0x244>)
 800ac78:	4313      	orrs	r3, r2
 800ac7a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	685b      	ldr	r3, [r3, #4]
 800ac80:	2b02      	cmp	r3, #2
 800ac82:	d107      	bne.n	800ac94 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ac84:	4b3c      	ldr	r3, [pc, #240]	; (800ad78 <HAL_RCC_ClockConfig+0x244>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d121      	bne.n	800acd4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ac90:	2301      	movs	r3, #1
 800ac92:	e0f6      	b.n	800ae82 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	685b      	ldr	r3, [r3, #4]
 800ac98:	2b03      	cmp	r3, #3
 800ac9a:	d107      	bne.n	800acac <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ac9c:	4b36      	ldr	r3, [pc, #216]	; (800ad78 <HAL_RCC_ClockConfig+0x244>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d115      	bne.n	800acd4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aca8:	2301      	movs	r3, #1
 800acaa:	e0ea      	b.n	800ae82 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	685b      	ldr	r3, [r3, #4]
 800acb0:	2b01      	cmp	r3, #1
 800acb2:	d107      	bne.n	800acc4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800acb4:	4b30      	ldr	r3, [pc, #192]	; (800ad78 <HAL_RCC_ClockConfig+0x244>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d109      	bne.n	800acd4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800acc0:	2301      	movs	r3, #1
 800acc2:	e0de      	b.n	800ae82 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800acc4:	4b2c      	ldr	r3, [pc, #176]	; (800ad78 <HAL_RCC_ClockConfig+0x244>)
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f003 0304 	and.w	r3, r3, #4
 800accc:	2b00      	cmp	r3, #0
 800acce:	d101      	bne.n	800acd4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800acd0:	2301      	movs	r3, #1
 800acd2:	e0d6      	b.n	800ae82 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800acd4:	4b28      	ldr	r3, [pc, #160]	; (800ad78 <HAL_RCC_ClockConfig+0x244>)
 800acd6:	691b      	ldr	r3, [r3, #16]
 800acd8:	f023 0207 	bic.w	r2, r3, #7
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	685b      	ldr	r3, [r3, #4]
 800ace0:	4925      	ldr	r1, [pc, #148]	; (800ad78 <HAL_RCC_ClockConfig+0x244>)
 800ace2:	4313      	orrs	r3, r2
 800ace4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ace6:	f7fa fd77 	bl	80057d8 <HAL_GetTick>
 800acea:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800acec:	e00a      	b.n	800ad04 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800acee:	f7fa fd73 	bl	80057d8 <HAL_GetTick>
 800acf2:	4602      	mov	r2, r0
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	1ad3      	subs	r3, r2, r3
 800acf8:	f241 3288 	movw	r2, #5000	; 0x1388
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d901      	bls.n	800ad04 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800ad00:	2303      	movs	r3, #3
 800ad02:	e0be      	b.n	800ae82 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ad04:	4b1c      	ldr	r3, [pc, #112]	; (800ad78 <HAL_RCC_ClockConfig+0x244>)
 800ad06:	691b      	ldr	r3, [r3, #16]
 800ad08:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	685b      	ldr	r3, [r3, #4]
 800ad10:	00db      	lsls	r3, r3, #3
 800ad12:	429a      	cmp	r2, r3
 800ad14:	d1eb      	bne.n	800acee <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f003 0302 	and.w	r3, r3, #2
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d010      	beq.n	800ad44 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	68da      	ldr	r2, [r3, #12]
 800ad26:	4b14      	ldr	r3, [pc, #80]	; (800ad78 <HAL_RCC_ClockConfig+0x244>)
 800ad28:	699b      	ldr	r3, [r3, #24]
 800ad2a:	f003 030f 	and.w	r3, r3, #15
 800ad2e:	429a      	cmp	r2, r3
 800ad30:	d208      	bcs.n	800ad44 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ad32:	4b11      	ldr	r3, [pc, #68]	; (800ad78 <HAL_RCC_ClockConfig+0x244>)
 800ad34:	699b      	ldr	r3, [r3, #24]
 800ad36:	f023 020f 	bic.w	r2, r3, #15
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	68db      	ldr	r3, [r3, #12]
 800ad3e:	490e      	ldr	r1, [pc, #56]	; (800ad78 <HAL_RCC_ClockConfig+0x244>)
 800ad40:	4313      	orrs	r3, r2
 800ad42:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ad44:	4b0b      	ldr	r3, [pc, #44]	; (800ad74 <HAL_RCC_ClockConfig+0x240>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	f003 030f 	and.w	r3, r3, #15
 800ad4c:	683a      	ldr	r2, [r7, #0]
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	d214      	bcs.n	800ad7c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad52:	4b08      	ldr	r3, [pc, #32]	; (800ad74 <HAL_RCC_ClockConfig+0x240>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f023 020f 	bic.w	r2, r3, #15
 800ad5a:	4906      	ldr	r1, [pc, #24]	; (800ad74 <HAL_RCC_ClockConfig+0x240>)
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	4313      	orrs	r3, r2
 800ad60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad62:	4b04      	ldr	r3, [pc, #16]	; (800ad74 <HAL_RCC_ClockConfig+0x240>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f003 030f 	and.w	r3, r3, #15
 800ad6a:	683a      	ldr	r2, [r7, #0]
 800ad6c:	429a      	cmp	r2, r3
 800ad6e:	d005      	beq.n	800ad7c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800ad70:	2301      	movs	r3, #1
 800ad72:	e086      	b.n	800ae82 <HAL_RCC_ClockConfig+0x34e>
 800ad74:	52002000 	.word	0x52002000
 800ad78:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f003 0304 	and.w	r3, r3, #4
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d010      	beq.n	800adaa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	691a      	ldr	r2, [r3, #16]
 800ad8c:	4b3f      	ldr	r3, [pc, #252]	; (800ae8c <HAL_RCC_ClockConfig+0x358>)
 800ad8e:	699b      	ldr	r3, [r3, #24]
 800ad90:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ad94:	429a      	cmp	r2, r3
 800ad96:	d208      	bcs.n	800adaa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ad98:	4b3c      	ldr	r3, [pc, #240]	; (800ae8c <HAL_RCC_ClockConfig+0x358>)
 800ad9a:	699b      	ldr	r3, [r3, #24]
 800ad9c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	691b      	ldr	r3, [r3, #16]
 800ada4:	4939      	ldr	r1, [pc, #228]	; (800ae8c <HAL_RCC_ClockConfig+0x358>)
 800ada6:	4313      	orrs	r3, r2
 800ada8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	f003 0308 	and.w	r3, r3, #8
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d010      	beq.n	800add8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	695a      	ldr	r2, [r3, #20]
 800adba:	4b34      	ldr	r3, [pc, #208]	; (800ae8c <HAL_RCC_ClockConfig+0x358>)
 800adbc:	69db      	ldr	r3, [r3, #28]
 800adbe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800adc2:	429a      	cmp	r2, r3
 800adc4:	d208      	bcs.n	800add8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800adc6:	4b31      	ldr	r3, [pc, #196]	; (800ae8c <HAL_RCC_ClockConfig+0x358>)
 800adc8:	69db      	ldr	r3, [r3, #28]
 800adca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	695b      	ldr	r3, [r3, #20]
 800add2:	492e      	ldr	r1, [pc, #184]	; (800ae8c <HAL_RCC_ClockConfig+0x358>)
 800add4:	4313      	orrs	r3, r2
 800add6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f003 0310 	and.w	r3, r3, #16
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d010      	beq.n	800ae06 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	699a      	ldr	r2, [r3, #24]
 800ade8:	4b28      	ldr	r3, [pc, #160]	; (800ae8c <HAL_RCC_ClockConfig+0x358>)
 800adea:	69db      	ldr	r3, [r3, #28]
 800adec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800adf0:	429a      	cmp	r2, r3
 800adf2:	d208      	bcs.n	800ae06 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800adf4:	4b25      	ldr	r3, [pc, #148]	; (800ae8c <HAL_RCC_ClockConfig+0x358>)
 800adf6:	69db      	ldr	r3, [r3, #28]
 800adf8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	699b      	ldr	r3, [r3, #24]
 800ae00:	4922      	ldr	r1, [pc, #136]	; (800ae8c <HAL_RCC_ClockConfig+0x358>)
 800ae02:	4313      	orrs	r3, r2
 800ae04:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f003 0320 	and.w	r3, r3, #32
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d010      	beq.n	800ae34 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	69da      	ldr	r2, [r3, #28]
 800ae16:	4b1d      	ldr	r3, [pc, #116]	; (800ae8c <HAL_RCC_ClockConfig+0x358>)
 800ae18:	6a1b      	ldr	r3, [r3, #32]
 800ae1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d208      	bcs.n	800ae34 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ae22:	4b1a      	ldr	r3, [pc, #104]	; (800ae8c <HAL_RCC_ClockConfig+0x358>)
 800ae24:	6a1b      	ldr	r3, [r3, #32]
 800ae26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	69db      	ldr	r3, [r3, #28]
 800ae2e:	4917      	ldr	r1, [pc, #92]	; (800ae8c <HAL_RCC_ClockConfig+0x358>)
 800ae30:	4313      	orrs	r3, r2
 800ae32:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ae34:	f000 f834 	bl	800aea0 <HAL_RCC_GetSysClockFreq>
 800ae38:	4602      	mov	r2, r0
 800ae3a:	4b14      	ldr	r3, [pc, #80]	; (800ae8c <HAL_RCC_ClockConfig+0x358>)
 800ae3c:	699b      	ldr	r3, [r3, #24]
 800ae3e:	0a1b      	lsrs	r3, r3, #8
 800ae40:	f003 030f 	and.w	r3, r3, #15
 800ae44:	4912      	ldr	r1, [pc, #72]	; (800ae90 <HAL_RCC_ClockConfig+0x35c>)
 800ae46:	5ccb      	ldrb	r3, [r1, r3]
 800ae48:	f003 031f 	and.w	r3, r3, #31
 800ae4c:	fa22 f303 	lsr.w	r3, r2, r3
 800ae50:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ae52:	4b0e      	ldr	r3, [pc, #56]	; (800ae8c <HAL_RCC_ClockConfig+0x358>)
 800ae54:	699b      	ldr	r3, [r3, #24]
 800ae56:	f003 030f 	and.w	r3, r3, #15
 800ae5a:	4a0d      	ldr	r2, [pc, #52]	; (800ae90 <HAL_RCC_ClockConfig+0x35c>)
 800ae5c:	5cd3      	ldrb	r3, [r2, r3]
 800ae5e:	f003 031f 	and.w	r3, r3, #31
 800ae62:	693a      	ldr	r2, [r7, #16]
 800ae64:	fa22 f303 	lsr.w	r3, r2, r3
 800ae68:	4a0a      	ldr	r2, [pc, #40]	; (800ae94 <HAL_RCC_ClockConfig+0x360>)
 800ae6a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ae6c:	4a0a      	ldr	r2, [pc, #40]	; (800ae98 <HAL_RCC_ClockConfig+0x364>)
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800ae72:	4b0a      	ldr	r3, [pc, #40]	; (800ae9c <HAL_RCC_ClockConfig+0x368>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	4618      	mov	r0, r3
 800ae78:	f7fa fc64 	bl	8005744 <HAL_InitTick>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800ae80:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3718      	adds	r7, #24
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}
 800ae8a:	bf00      	nop
 800ae8c:	58024400 	.word	0x58024400
 800ae90:	08014358 	.word	0x08014358
 800ae94:	24000004 	.word	0x24000004
 800ae98:	24000000 	.word	0x24000000
 800ae9c:	24000008 	.word	0x24000008

0800aea0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aea0:	b480      	push	{r7}
 800aea2:	b089      	sub	sp, #36	; 0x24
 800aea4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800aea6:	4bb3      	ldr	r3, [pc, #716]	; (800b174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aea8:	691b      	ldr	r3, [r3, #16]
 800aeaa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aeae:	2b18      	cmp	r3, #24
 800aeb0:	f200 8155 	bhi.w	800b15e <HAL_RCC_GetSysClockFreq+0x2be>
 800aeb4:	a201      	add	r2, pc, #4	; (adr r2, 800aebc <HAL_RCC_GetSysClockFreq+0x1c>)
 800aeb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeba:	bf00      	nop
 800aebc:	0800af21 	.word	0x0800af21
 800aec0:	0800b15f 	.word	0x0800b15f
 800aec4:	0800b15f 	.word	0x0800b15f
 800aec8:	0800b15f 	.word	0x0800b15f
 800aecc:	0800b15f 	.word	0x0800b15f
 800aed0:	0800b15f 	.word	0x0800b15f
 800aed4:	0800b15f 	.word	0x0800b15f
 800aed8:	0800b15f 	.word	0x0800b15f
 800aedc:	0800af47 	.word	0x0800af47
 800aee0:	0800b15f 	.word	0x0800b15f
 800aee4:	0800b15f 	.word	0x0800b15f
 800aee8:	0800b15f 	.word	0x0800b15f
 800aeec:	0800b15f 	.word	0x0800b15f
 800aef0:	0800b15f 	.word	0x0800b15f
 800aef4:	0800b15f 	.word	0x0800b15f
 800aef8:	0800b15f 	.word	0x0800b15f
 800aefc:	0800af4d 	.word	0x0800af4d
 800af00:	0800b15f 	.word	0x0800b15f
 800af04:	0800b15f 	.word	0x0800b15f
 800af08:	0800b15f 	.word	0x0800b15f
 800af0c:	0800b15f 	.word	0x0800b15f
 800af10:	0800b15f 	.word	0x0800b15f
 800af14:	0800b15f 	.word	0x0800b15f
 800af18:	0800b15f 	.word	0x0800b15f
 800af1c:	0800af53 	.word	0x0800af53
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af20:	4b94      	ldr	r3, [pc, #592]	; (800b174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f003 0320 	and.w	r3, r3, #32
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d009      	beq.n	800af40 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af2c:	4b91      	ldr	r3, [pc, #580]	; (800b174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	08db      	lsrs	r3, r3, #3
 800af32:	f003 0303 	and.w	r3, r3, #3
 800af36:	4a90      	ldr	r2, [pc, #576]	; (800b178 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800af38:	fa22 f303 	lsr.w	r3, r2, r3
 800af3c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800af3e:	e111      	b.n	800b164 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800af40:	4b8d      	ldr	r3, [pc, #564]	; (800b178 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800af42:	61bb      	str	r3, [r7, #24]
      break;
 800af44:	e10e      	b.n	800b164 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800af46:	4b8d      	ldr	r3, [pc, #564]	; (800b17c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800af48:	61bb      	str	r3, [r7, #24]
      break;
 800af4a:	e10b      	b.n	800b164 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800af4c:	4b8c      	ldr	r3, [pc, #560]	; (800b180 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800af4e:	61bb      	str	r3, [r7, #24]
      break;
 800af50:	e108      	b.n	800b164 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800af52:	4b88      	ldr	r3, [pc, #544]	; (800b174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af56:	f003 0303 	and.w	r3, r3, #3
 800af5a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800af5c:	4b85      	ldr	r3, [pc, #532]	; (800b174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af60:	091b      	lsrs	r3, r3, #4
 800af62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af66:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800af68:	4b82      	ldr	r3, [pc, #520]	; (800b174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af6c:	f003 0301 	and.w	r3, r3, #1
 800af70:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800af72:	4b80      	ldr	r3, [pc, #512]	; (800b174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af76:	08db      	lsrs	r3, r3, #3
 800af78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800af7c:	68fa      	ldr	r2, [r7, #12]
 800af7e:	fb02 f303 	mul.w	r3, r2, r3
 800af82:	ee07 3a90 	vmov	s15, r3
 800af86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af8a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800af8e:	693b      	ldr	r3, [r7, #16]
 800af90:	2b00      	cmp	r3, #0
 800af92:	f000 80e1 	beq.w	800b158 <HAL_RCC_GetSysClockFreq+0x2b8>
 800af96:	697b      	ldr	r3, [r7, #20]
 800af98:	2b02      	cmp	r3, #2
 800af9a:	f000 8083 	beq.w	800b0a4 <HAL_RCC_GetSysClockFreq+0x204>
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	2b02      	cmp	r3, #2
 800afa2:	f200 80a1 	bhi.w	800b0e8 <HAL_RCC_GetSysClockFreq+0x248>
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d003      	beq.n	800afb4 <HAL_RCC_GetSysClockFreq+0x114>
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	2b01      	cmp	r3, #1
 800afb0:	d056      	beq.n	800b060 <HAL_RCC_GetSysClockFreq+0x1c0>
 800afb2:	e099      	b.n	800b0e8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800afb4:	4b6f      	ldr	r3, [pc, #444]	; (800b174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	f003 0320 	and.w	r3, r3, #32
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d02d      	beq.n	800b01c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800afc0:	4b6c      	ldr	r3, [pc, #432]	; (800b174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	08db      	lsrs	r3, r3, #3
 800afc6:	f003 0303 	and.w	r3, r3, #3
 800afca:	4a6b      	ldr	r2, [pc, #428]	; (800b178 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800afcc:	fa22 f303 	lsr.w	r3, r2, r3
 800afd0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	ee07 3a90 	vmov	s15, r3
 800afd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afdc:	693b      	ldr	r3, [r7, #16]
 800afde:	ee07 3a90 	vmov	s15, r3
 800afe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afea:	4b62      	ldr	r3, [pc, #392]	; (800b174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800afec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aff2:	ee07 3a90 	vmov	s15, r3
 800aff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800affa:	ed97 6a02 	vldr	s12, [r7, #8]
 800affe:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b184 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b00a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b00e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b012:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b016:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b01a:	e087      	b.n	800b12c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	ee07 3a90 	vmov	s15, r3
 800b022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b026:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b188 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b02a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b02e:	4b51      	ldr	r3, [pc, #324]	; (800b174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b036:	ee07 3a90 	vmov	s15, r3
 800b03a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b03e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b042:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b184 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b046:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b04a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b04e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b05a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b05e:	e065      	b.n	800b12c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	ee07 3a90 	vmov	s15, r3
 800b066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b06a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b18c <HAL_RCC_GetSysClockFreq+0x2ec>
 800b06e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b072:	4b40      	ldr	r3, [pc, #256]	; (800b174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b07a:	ee07 3a90 	vmov	s15, r3
 800b07e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b082:	ed97 6a02 	vldr	s12, [r7, #8]
 800b086:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b184 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b08a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b08e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b092:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b096:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b09a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b09e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b0a2:	e043      	b.n	800b12c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b0a4:	693b      	ldr	r3, [r7, #16]
 800b0a6:	ee07 3a90 	vmov	s15, r3
 800b0aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0ae:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b190 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b0b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0b6:	4b2f      	ldr	r3, [pc, #188]	; (800b174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0be:	ee07 3a90 	vmov	s15, r3
 800b0c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0c6:	ed97 6a02 	vldr	s12, [r7, #8]
 800b0ca:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b184 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b0ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b0e6:	e021      	b.n	800b12c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b0e8:	693b      	ldr	r3, [r7, #16]
 800b0ea:	ee07 3a90 	vmov	s15, r3
 800b0ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0f2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b18c <HAL_RCC_GetSysClockFreq+0x2ec>
 800b0f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0fa:	4b1e      	ldr	r3, [pc, #120]	; (800b174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b102:	ee07 3a90 	vmov	s15, r3
 800b106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b10a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b10e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b184 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b11a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b11e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b122:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b126:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b12a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b12c:	4b11      	ldr	r3, [pc, #68]	; (800b174 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b12e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b130:	0a5b      	lsrs	r3, r3, #9
 800b132:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b136:	3301      	adds	r3, #1
 800b138:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	ee07 3a90 	vmov	s15, r3
 800b140:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b144:	edd7 6a07 	vldr	s13, [r7, #28]
 800b148:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b14c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b150:	ee17 3a90 	vmov	r3, s15
 800b154:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b156:	e005      	b.n	800b164 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b158:	2300      	movs	r3, #0
 800b15a:	61bb      	str	r3, [r7, #24]
      break;
 800b15c:	e002      	b.n	800b164 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b15e:	4b07      	ldr	r3, [pc, #28]	; (800b17c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b160:	61bb      	str	r3, [r7, #24]
      break;
 800b162:	bf00      	nop
  }

  return sysclockfreq;
 800b164:	69bb      	ldr	r3, [r7, #24]
}
 800b166:	4618      	mov	r0, r3
 800b168:	3724      	adds	r7, #36	; 0x24
 800b16a:	46bd      	mov	sp, r7
 800b16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b170:	4770      	bx	lr
 800b172:	bf00      	nop
 800b174:	58024400 	.word	0x58024400
 800b178:	03d09000 	.word	0x03d09000
 800b17c:	003d0900 	.word	0x003d0900
 800b180:	017d7840 	.word	0x017d7840
 800b184:	46000000 	.word	0x46000000
 800b188:	4c742400 	.word	0x4c742400
 800b18c:	4a742400 	.word	0x4a742400
 800b190:	4bbebc20 	.word	0x4bbebc20

0800b194 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b082      	sub	sp, #8
 800b198:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b19a:	f7ff fe81 	bl	800aea0 <HAL_RCC_GetSysClockFreq>
 800b19e:	4602      	mov	r2, r0
 800b1a0:	4b10      	ldr	r3, [pc, #64]	; (800b1e4 <HAL_RCC_GetHCLKFreq+0x50>)
 800b1a2:	699b      	ldr	r3, [r3, #24]
 800b1a4:	0a1b      	lsrs	r3, r3, #8
 800b1a6:	f003 030f 	and.w	r3, r3, #15
 800b1aa:	490f      	ldr	r1, [pc, #60]	; (800b1e8 <HAL_RCC_GetHCLKFreq+0x54>)
 800b1ac:	5ccb      	ldrb	r3, [r1, r3]
 800b1ae:	f003 031f 	and.w	r3, r3, #31
 800b1b2:	fa22 f303 	lsr.w	r3, r2, r3
 800b1b6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b1b8:	4b0a      	ldr	r3, [pc, #40]	; (800b1e4 <HAL_RCC_GetHCLKFreq+0x50>)
 800b1ba:	699b      	ldr	r3, [r3, #24]
 800b1bc:	f003 030f 	and.w	r3, r3, #15
 800b1c0:	4a09      	ldr	r2, [pc, #36]	; (800b1e8 <HAL_RCC_GetHCLKFreq+0x54>)
 800b1c2:	5cd3      	ldrb	r3, [r2, r3]
 800b1c4:	f003 031f 	and.w	r3, r3, #31
 800b1c8:	687a      	ldr	r2, [r7, #4]
 800b1ca:	fa22 f303 	lsr.w	r3, r2, r3
 800b1ce:	4a07      	ldr	r2, [pc, #28]	; (800b1ec <HAL_RCC_GetHCLKFreq+0x58>)
 800b1d0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b1d2:	4a07      	ldr	r2, [pc, #28]	; (800b1f0 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b1d8:	4b04      	ldr	r3, [pc, #16]	; (800b1ec <HAL_RCC_GetHCLKFreq+0x58>)
 800b1da:	681b      	ldr	r3, [r3, #0]
}
 800b1dc:	4618      	mov	r0, r3
 800b1de:	3708      	adds	r7, #8
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}
 800b1e4:	58024400 	.word	0x58024400
 800b1e8:	08014358 	.word	0x08014358
 800b1ec:	24000004 	.word	0x24000004
 800b1f0:	24000000 	.word	0x24000000

0800b1f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b1f8:	f7ff ffcc 	bl	800b194 <HAL_RCC_GetHCLKFreq>
 800b1fc:	4602      	mov	r2, r0
 800b1fe:	4b06      	ldr	r3, [pc, #24]	; (800b218 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b200:	69db      	ldr	r3, [r3, #28]
 800b202:	091b      	lsrs	r3, r3, #4
 800b204:	f003 0307 	and.w	r3, r3, #7
 800b208:	4904      	ldr	r1, [pc, #16]	; (800b21c <HAL_RCC_GetPCLK1Freq+0x28>)
 800b20a:	5ccb      	ldrb	r3, [r1, r3]
 800b20c:	f003 031f 	and.w	r3, r3, #31
 800b210:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b214:	4618      	mov	r0, r3
 800b216:	bd80      	pop	{r7, pc}
 800b218:	58024400 	.word	0x58024400
 800b21c:	08014358 	.word	0x08014358

0800b220 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b224:	f7ff ffb6 	bl	800b194 <HAL_RCC_GetHCLKFreq>
 800b228:	4602      	mov	r2, r0
 800b22a:	4b06      	ldr	r3, [pc, #24]	; (800b244 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b22c:	69db      	ldr	r3, [r3, #28]
 800b22e:	0a1b      	lsrs	r3, r3, #8
 800b230:	f003 0307 	and.w	r3, r3, #7
 800b234:	4904      	ldr	r1, [pc, #16]	; (800b248 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b236:	5ccb      	ldrb	r3, [r1, r3]
 800b238:	f003 031f 	and.w	r3, r3, #31
 800b23c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b240:	4618      	mov	r0, r3
 800b242:	bd80      	pop	{r7, pc}
 800b244:	58024400 	.word	0x58024400
 800b248:	08014358 	.word	0x08014358

0800b24c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b24c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b250:	b0ca      	sub	sp, #296	; 0x128
 800b252:	af00      	add	r7, sp, #0
 800b254:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b258:	2300      	movs	r3, #0
 800b25a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b25e:	2300      	movs	r3, #0
 800b260:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b264:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b26c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800b270:	2500      	movs	r5, #0
 800b272:	ea54 0305 	orrs.w	r3, r4, r5
 800b276:	d049      	beq.n	800b30c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b278:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b27c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b27e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b282:	d02f      	beq.n	800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b284:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b288:	d828      	bhi.n	800b2dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b28a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b28e:	d01a      	beq.n	800b2c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b290:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b294:	d822      	bhi.n	800b2dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b296:	2b00      	cmp	r3, #0
 800b298:	d003      	beq.n	800b2a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b29a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b29e:	d007      	beq.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b2a0:	e01c      	b.n	800b2dc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b2a2:	4bb8      	ldr	r3, [pc, #736]	; (800b584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b2a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2a6:	4ab7      	ldr	r2, [pc, #732]	; (800b584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b2a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b2ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b2ae:	e01a      	b.n	800b2e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b2b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2b4:	3308      	adds	r3, #8
 800b2b6:	2102      	movs	r1, #2
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	f002 fb61 	bl	800d980 <RCCEx_PLL2_Config>
 800b2be:	4603      	mov	r3, r0
 800b2c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b2c4:	e00f      	b.n	800b2e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b2c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2ca:	3328      	adds	r3, #40	; 0x28
 800b2cc:	2102      	movs	r1, #2
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f002 fc08 	bl	800dae4 <RCCEx_PLL3_Config>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b2da:	e004      	b.n	800b2e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b2dc:	2301      	movs	r3, #1
 800b2de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b2e2:	e000      	b.n	800b2e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b2e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d10a      	bne.n	800b304 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b2ee:	4ba5      	ldr	r3, [pc, #660]	; (800b584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b2f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2f2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b2f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b2fc:	4aa1      	ldr	r2, [pc, #644]	; (800b584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b2fe:	430b      	orrs	r3, r1
 800b300:	6513      	str	r3, [r2, #80]	; 0x50
 800b302:	e003      	b.n	800b30c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b304:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b308:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b30c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b314:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b318:	f04f 0900 	mov.w	r9, #0
 800b31c:	ea58 0309 	orrs.w	r3, r8, r9
 800b320:	d047      	beq.n	800b3b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b322:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b328:	2b04      	cmp	r3, #4
 800b32a:	d82a      	bhi.n	800b382 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b32c:	a201      	add	r2, pc, #4	; (adr r2, 800b334 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b32e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b332:	bf00      	nop
 800b334:	0800b349 	.word	0x0800b349
 800b338:	0800b357 	.word	0x0800b357
 800b33c:	0800b36d 	.word	0x0800b36d
 800b340:	0800b38b 	.word	0x0800b38b
 800b344:	0800b38b 	.word	0x0800b38b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b348:	4b8e      	ldr	r3, [pc, #568]	; (800b584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b34a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b34c:	4a8d      	ldr	r2, [pc, #564]	; (800b584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b34e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b352:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b354:	e01a      	b.n	800b38c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b356:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b35a:	3308      	adds	r3, #8
 800b35c:	2100      	movs	r1, #0
 800b35e:	4618      	mov	r0, r3
 800b360:	f002 fb0e 	bl	800d980 <RCCEx_PLL2_Config>
 800b364:	4603      	mov	r3, r0
 800b366:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b36a:	e00f      	b.n	800b38c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b36c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b370:	3328      	adds	r3, #40	; 0x28
 800b372:	2100      	movs	r1, #0
 800b374:	4618      	mov	r0, r3
 800b376:	f002 fbb5 	bl	800dae4 <RCCEx_PLL3_Config>
 800b37a:	4603      	mov	r3, r0
 800b37c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b380:	e004      	b.n	800b38c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b382:	2301      	movs	r3, #1
 800b384:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b388:	e000      	b.n	800b38c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b38a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b38c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b390:	2b00      	cmp	r3, #0
 800b392:	d10a      	bne.n	800b3aa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b394:	4b7b      	ldr	r3, [pc, #492]	; (800b584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b398:	f023 0107 	bic.w	r1, r3, #7
 800b39c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3a2:	4a78      	ldr	r2, [pc, #480]	; (800b584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b3a4:	430b      	orrs	r3, r1
 800b3a6:	6513      	str	r3, [r2, #80]	; 0x50
 800b3a8:	e003      	b.n	800b3b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b3ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b3b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ba:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800b3be:	f04f 0b00 	mov.w	fp, #0
 800b3c2:	ea5a 030b 	orrs.w	r3, sl, fp
 800b3c6:	d04c      	beq.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800b3c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b3ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3d2:	d030      	beq.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800b3d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3d8:	d829      	bhi.n	800b42e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b3da:	2bc0      	cmp	r3, #192	; 0xc0
 800b3dc:	d02d      	beq.n	800b43a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b3de:	2bc0      	cmp	r3, #192	; 0xc0
 800b3e0:	d825      	bhi.n	800b42e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b3e2:	2b80      	cmp	r3, #128	; 0x80
 800b3e4:	d018      	beq.n	800b418 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800b3e6:	2b80      	cmp	r3, #128	; 0x80
 800b3e8:	d821      	bhi.n	800b42e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d002      	beq.n	800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800b3ee:	2b40      	cmp	r3, #64	; 0x40
 800b3f0:	d007      	beq.n	800b402 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800b3f2:	e01c      	b.n	800b42e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3f4:	4b63      	ldr	r3, [pc, #396]	; (800b584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b3f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3f8:	4a62      	ldr	r2, [pc, #392]	; (800b584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b3fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b400:	e01c      	b.n	800b43c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b402:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b406:	3308      	adds	r3, #8
 800b408:	2100      	movs	r1, #0
 800b40a:	4618      	mov	r0, r3
 800b40c:	f002 fab8 	bl	800d980 <RCCEx_PLL2_Config>
 800b410:	4603      	mov	r3, r0
 800b412:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b416:	e011      	b.n	800b43c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b418:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b41c:	3328      	adds	r3, #40	; 0x28
 800b41e:	2100      	movs	r1, #0
 800b420:	4618      	mov	r0, r3
 800b422:	f002 fb5f 	bl	800dae4 <RCCEx_PLL3_Config>
 800b426:	4603      	mov	r3, r0
 800b428:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b42c:	e006      	b.n	800b43c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b42e:	2301      	movs	r3, #1
 800b430:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b434:	e002      	b.n	800b43c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b436:	bf00      	nop
 800b438:	e000      	b.n	800b43c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b43a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b43c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b440:	2b00      	cmp	r3, #0
 800b442:	d10a      	bne.n	800b45a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b444:	4b4f      	ldr	r3, [pc, #316]	; (800b584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b448:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800b44c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b452:	4a4c      	ldr	r2, [pc, #304]	; (800b584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b454:	430b      	orrs	r3, r1
 800b456:	6513      	str	r3, [r2, #80]	; 0x50
 800b458:	e003      	b.n	800b462 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b45a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b45e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b462:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b46a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b46e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b472:	2300      	movs	r3, #0
 800b474:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b478:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800b47c:	460b      	mov	r3, r1
 800b47e:	4313      	orrs	r3, r2
 800b480:	d053      	beq.n	800b52a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b482:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b486:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b48a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b48e:	d035      	beq.n	800b4fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800b490:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b494:	d82e      	bhi.n	800b4f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b496:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b49a:	d031      	beq.n	800b500 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800b49c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b4a0:	d828      	bhi.n	800b4f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b4a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b4a6:	d01a      	beq.n	800b4de <HAL_RCCEx_PeriphCLKConfig+0x292>
 800b4a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b4ac:	d822      	bhi.n	800b4f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d003      	beq.n	800b4ba <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800b4b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b4b6:	d007      	beq.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800b4b8:	e01c      	b.n	800b4f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b4ba:	4b32      	ldr	r3, [pc, #200]	; (800b584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b4bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4be:	4a31      	ldr	r2, [pc, #196]	; (800b584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b4c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b4c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b4c6:	e01c      	b.n	800b502 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b4c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4cc:	3308      	adds	r3, #8
 800b4ce:	2100      	movs	r1, #0
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f002 fa55 	bl	800d980 <RCCEx_PLL2_Config>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b4dc:	e011      	b.n	800b502 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b4de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4e2:	3328      	adds	r3, #40	; 0x28
 800b4e4:	2100      	movs	r1, #0
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f002 fafc 	bl	800dae4 <RCCEx_PLL3_Config>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b4f2:	e006      	b.n	800b502 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b4f4:	2301      	movs	r3, #1
 800b4f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b4fa:	e002      	b.n	800b502 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b4fc:	bf00      	nop
 800b4fe:	e000      	b.n	800b502 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b500:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b502:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b506:	2b00      	cmp	r3, #0
 800b508:	d10b      	bne.n	800b522 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b50a:	4b1e      	ldr	r3, [pc, #120]	; (800b584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b50c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b50e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800b512:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b516:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b51a:	4a1a      	ldr	r2, [pc, #104]	; (800b584 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b51c:	430b      	orrs	r3, r1
 800b51e:	6593      	str	r3, [r2, #88]	; 0x58
 800b520:	e003      	b.n	800b52a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b522:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b526:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b52a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b532:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800b536:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b53a:	2300      	movs	r3, #0
 800b53c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b540:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800b544:	460b      	mov	r3, r1
 800b546:	4313      	orrs	r3, r2
 800b548:	d056      	beq.n	800b5f8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b54a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b54e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b552:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b556:	d038      	beq.n	800b5ca <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b558:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b55c:	d831      	bhi.n	800b5c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b55e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b562:	d034      	beq.n	800b5ce <HAL_RCCEx_PeriphCLKConfig+0x382>
 800b564:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b568:	d82b      	bhi.n	800b5c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b56a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b56e:	d01d      	beq.n	800b5ac <HAL_RCCEx_PeriphCLKConfig+0x360>
 800b570:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b574:	d825      	bhi.n	800b5c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b576:	2b00      	cmp	r3, #0
 800b578:	d006      	beq.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800b57a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b57e:	d00a      	beq.n	800b596 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b580:	e01f      	b.n	800b5c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b582:	bf00      	nop
 800b584:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b588:	4ba2      	ldr	r3, [pc, #648]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b58a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b58c:	4aa1      	ldr	r2, [pc, #644]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b58e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b592:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b594:	e01c      	b.n	800b5d0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b59a:	3308      	adds	r3, #8
 800b59c:	2100      	movs	r1, #0
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f002 f9ee 	bl	800d980 <RCCEx_PLL2_Config>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b5aa:	e011      	b.n	800b5d0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b5ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5b0:	3328      	adds	r3, #40	; 0x28
 800b5b2:	2100      	movs	r1, #0
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	f002 fa95 	bl	800dae4 <RCCEx_PLL3_Config>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b5c0:	e006      	b.n	800b5d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b5c8:	e002      	b.n	800b5d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b5ca:	bf00      	nop
 800b5cc:	e000      	b.n	800b5d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b5ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d10b      	bne.n	800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b5d8:	4b8e      	ldr	r3, [pc, #568]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b5da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5dc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800b5e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5e4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b5e8:	4a8a      	ldr	r2, [pc, #552]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b5ea:	430b      	orrs	r3, r1
 800b5ec:	6593      	str	r3, [r2, #88]	; 0x58
 800b5ee:	e003      	b.n	800b5f8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b5f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b600:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b604:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b608:	2300      	movs	r3, #0
 800b60a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b60e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b612:	460b      	mov	r3, r1
 800b614:	4313      	orrs	r3, r2
 800b616:	d03a      	beq.n	800b68e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800b618:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b61c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b61e:	2b30      	cmp	r3, #48	; 0x30
 800b620:	d01f      	beq.n	800b662 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800b622:	2b30      	cmp	r3, #48	; 0x30
 800b624:	d819      	bhi.n	800b65a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b626:	2b20      	cmp	r3, #32
 800b628:	d00c      	beq.n	800b644 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800b62a:	2b20      	cmp	r3, #32
 800b62c:	d815      	bhi.n	800b65a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d019      	beq.n	800b666 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800b632:	2b10      	cmp	r3, #16
 800b634:	d111      	bne.n	800b65a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b636:	4b77      	ldr	r3, [pc, #476]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b63a:	4a76      	ldr	r2, [pc, #472]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b63c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b640:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b642:	e011      	b.n	800b668 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b644:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b648:	3308      	adds	r3, #8
 800b64a:	2102      	movs	r1, #2
 800b64c:	4618      	mov	r0, r3
 800b64e:	f002 f997 	bl	800d980 <RCCEx_PLL2_Config>
 800b652:	4603      	mov	r3, r0
 800b654:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b658:	e006      	b.n	800b668 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b65a:	2301      	movs	r3, #1
 800b65c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b660:	e002      	b.n	800b668 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b662:	bf00      	nop
 800b664:	e000      	b.n	800b668 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b666:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b668:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d10a      	bne.n	800b686 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b670:	4b68      	ldr	r3, [pc, #416]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b674:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b678:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b67c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b67e:	4a65      	ldr	r2, [pc, #404]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b680:	430b      	orrs	r3, r1
 800b682:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b684:	e003      	b.n	800b68e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b686:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b68a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b68e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b696:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b69a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b69e:	2300      	movs	r3, #0
 800b6a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b6a4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b6a8:	460b      	mov	r3, r1
 800b6aa:	4313      	orrs	r3, r2
 800b6ac:	d051      	beq.n	800b752 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b6ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b6b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b6b8:	d035      	beq.n	800b726 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800b6ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b6be:	d82e      	bhi.n	800b71e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b6c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b6c4:	d031      	beq.n	800b72a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800b6c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b6ca:	d828      	bhi.n	800b71e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b6cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b6d0:	d01a      	beq.n	800b708 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b6d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b6d6:	d822      	bhi.n	800b71e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d003      	beq.n	800b6e4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800b6dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6e0:	d007      	beq.n	800b6f2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800b6e2:	e01c      	b.n	800b71e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6e4:	4b4b      	ldr	r3, [pc, #300]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b6e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6e8:	4a4a      	ldr	r2, [pc, #296]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b6ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b6ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b6f0:	e01c      	b.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b6f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6f6:	3308      	adds	r3, #8
 800b6f8:	2100      	movs	r1, #0
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f002 f940 	bl	800d980 <RCCEx_PLL2_Config>
 800b700:	4603      	mov	r3, r0
 800b702:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b706:	e011      	b.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b708:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b70c:	3328      	adds	r3, #40	; 0x28
 800b70e:	2100      	movs	r1, #0
 800b710:	4618      	mov	r0, r3
 800b712:	f002 f9e7 	bl	800dae4 <RCCEx_PLL3_Config>
 800b716:	4603      	mov	r3, r0
 800b718:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b71c:	e006      	b.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b71e:	2301      	movs	r3, #1
 800b720:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b724:	e002      	b.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b726:	bf00      	nop
 800b728:	e000      	b.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b72a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b72c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b730:	2b00      	cmp	r3, #0
 800b732:	d10a      	bne.n	800b74a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b734:	4b37      	ldr	r3, [pc, #220]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b738:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b73c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b742:	4a34      	ldr	r2, [pc, #208]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b744:	430b      	orrs	r3, r1
 800b746:	6513      	str	r3, [r2, #80]	; 0x50
 800b748:	e003      	b.n	800b752 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b74a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b74e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b752:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b75a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b75e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b762:	2300      	movs	r3, #0
 800b764:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b768:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b76c:	460b      	mov	r3, r1
 800b76e:	4313      	orrs	r3, r2
 800b770:	d056      	beq.n	800b820 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b772:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b776:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b778:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b77c:	d033      	beq.n	800b7e6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b77e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b782:	d82c      	bhi.n	800b7de <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b784:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b788:	d02f      	beq.n	800b7ea <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800b78a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b78e:	d826      	bhi.n	800b7de <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b790:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b794:	d02b      	beq.n	800b7ee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800b796:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b79a:	d820      	bhi.n	800b7de <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b79c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b7a0:	d012      	beq.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800b7a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b7a6:	d81a      	bhi.n	800b7de <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d022      	beq.n	800b7f2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b7ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7b0:	d115      	bne.n	800b7de <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b7b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7b6:	3308      	adds	r3, #8
 800b7b8:	2101      	movs	r1, #1
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f002 f8e0 	bl	800d980 <RCCEx_PLL2_Config>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b7c6:	e015      	b.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b7c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7cc:	3328      	adds	r3, #40	; 0x28
 800b7ce:	2101      	movs	r1, #1
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f002 f987 	bl	800dae4 <RCCEx_PLL3_Config>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b7dc:	e00a      	b.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7de:	2301      	movs	r3, #1
 800b7e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b7e4:	e006      	b.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b7e6:	bf00      	nop
 800b7e8:	e004      	b.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b7ea:	bf00      	nop
 800b7ec:	e002      	b.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b7ee:	bf00      	nop
 800b7f0:	e000      	b.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b7f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d10d      	bne.n	800b818 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b7fc:	4b05      	ldr	r3, [pc, #20]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b7fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b800:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b804:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b808:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b80a:	4a02      	ldr	r2, [pc, #8]	; (800b814 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b80c:	430b      	orrs	r3, r1
 800b80e:	6513      	str	r3, [r2, #80]	; 0x50
 800b810:	e006      	b.n	800b820 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b812:	bf00      	nop
 800b814:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b818:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b81c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b820:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b828:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b82c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b830:	2300      	movs	r3, #0
 800b832:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b836:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b83a:	460b      	mov	r3, r1
 800b83c:	4313      	orrs	r3, r2
 800b83e:	d055      	beq.n	800b8ec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b840:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b844:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b848:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b84c:	d033      	beq.n	800b8b6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800b84e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b852:	d82c      	bhi.n	800b8ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b858:	d02f      	beq.n	800b8ba <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800b85a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b85e:	d826      	bhi.n	800b8ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b860:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b864:	d02b      	beq.n	800b8be <HAL_RCCEx_PeriphCLKConfig+0x672>
 800b866:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b86a:	d820      	bhi.n	800b8ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b86c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b870:	d012      	beq.n	800b898 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800b872:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b876:	d81a      	bhi.n	800b8ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d022      	beq.n	800b8c2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800b87c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b880:	d115      	bne.n	800b8ae <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b882:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b886:	3308      	adds	r3, #8
 800b888:	2101      	movs	r1, #1
 800b88a:	4618      	mov	r0, r3
 800b88c:	f002 f878 	bl	800d980 <RCCEx_PLL2_Config>
 800b890:	4603      	mov	r3, r0
 800b892:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b896:	e015      	b.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b898:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b89c:	3328      	adds	r3, #40	; 0x28
 800b89e:	2101      	movs	r1, #1
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	f002 f91f 	bl	800dae4 <RCCEx_PLL3_Config>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b8ac:	e00a      	b.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b8b4:	e006      	b.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b8b6:	bf00      	nop
 800b8b8:	e004      	b.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b8ba:	bf00      	nop
 800b8bc:	e002      	b.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b8be:	bf00      	nop
 800b8c0:	e000      	b.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b8c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d10b      	bne.n	800b8e4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b8cc:	4ba3      	ldr	r3, [pc, #652]	; (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8d0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b8d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b8dc:	4a9f      	ldr	r2, [pc, #636]	; (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8de:	430b      	orrs	r3, r1
 800b8e0:	6593      	str	r3, [r2, #88]	; 0x58
 800b8e2:	e003      	b.n	800b8ec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b8e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b8ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b8f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b902:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b906:	460b      	mov	r3, r1
 800b908:	4313      	orrs	r3, r2
 800b90a:	d037      	beq.n	800b97c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b90c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b912:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b916:	d00e      	beq.n	800b936 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800b918:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b91c:	d816      	bhi.n	800b94c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d018      	beq.n	800b954 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800b922:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b926:	d111      	bne.n	800b94c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b928:	4b8c      	ldr	r3, [pc, #560]	; (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b92a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b92c:	4a8b      	ldr	r2, [pc, #556]	; (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b92e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b932:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b934:	e00f      	b.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b936:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b93a:	3308      	adds	r3, #8
 800b93c:	2101      	movs	r1, #1
 800b93e:	4618      	mov	r0, r3
 800b940:	f002 f81e 	bl	800d980 <RCCEx_PLL2_Config>
 800b944:	4603      	mov	r3, r0
 800b946:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b94a:	e004      	b.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b94c:	2301      	movs	r3, #1
 800b94e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b952:	e000      	b.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800b954:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b956:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d10a      	bne.n	800b974 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b95e:	4b7f      	ldr	r3, [pc, #508]	; (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b962:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b966:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b96a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b96c:	4a7b      	ldr	r2, [pc, #492]	; (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b96e:	430b      	orrs	r3, r1
 800b970:	6513      	str	r3, [r2, #80]	; 0x50
 800b972:	e003      	b.n	800b97c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b974:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b978:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b97c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b984:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b988:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b98c:	2300      	movs	r3, #0
 800b98e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b992:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b996:	460b      	mov	r3, r1
 800b998:	4313      	orrs	r3, r2
 800b99a:	d039      	beq.n	800ba10 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b99c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9a2:	2b03      	cmp	r3, #3
 800b9a4:	d81c      	bhi.n	800b9e0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b9a6:	a201      	add	r2, pc, #4	; (adr r2, 800b9ac <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b9a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9ac:	0800b9e9 	.word	0x0800b9e9
 800b9b0:	0800b9bd 	.word	0x0800b9bd
 800b9b4:	0800b9cb 	.word	0x0800b9cb
 800b9b8:	0800b9e9 	.word	0x0800b9e9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9bc:	4b67      	ldr	r3, [pc, #412]	; (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b9be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9c0:	4a66      	ldr	r2, [pc, #408]	; (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b9c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b9c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b9c8:	e00f      	b.n	800b9ea <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b9ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9ce:	3308      	adds	r3, #8
 800b9d0:	2102      	movs	r1, #2
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f001 ffd4 	bl	800d980 <RCCEx_PLL2_Config>
 800b9d8:	4603      	mov	r3, r0
 800b9da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b9de:	e004      	b.n	800b9ea <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b9e0:	2301      	movs	r3, #1
 800b9e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b9e6:	e000      	b.n	800b9ea <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b9e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d10a      	bne.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b9f2:	4b5a      	ldr	r3, [pc, #360]	; (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b9f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9f6:	f023 0103 	bic.w	r1, r3, #3
 800b9fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba00:	4a56      	ldr	r2, [pc, #344]	; (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ba02:	430b      	orrs	r3, r1
 800ba04:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ba06:	e003      	b.n	800ba10 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba0c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ba10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba18:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800ba1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ba20:	2300      	movs	r3, #0
 800ba22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ba26:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800ba2a:	460b      	mov	r3, r1
 800ba2c:	4313      	orrs	r3, r2
 800ba2e:	f000 809f 	beq.w	800bb70 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ba32:	4b4b      	ldr	r3, [pc, #300]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	4a4a      	ldr	r2, [pc, #296]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800ba38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ba3e:	f7f9 fecb 	bl	80057d8 <HAL_GetTick>
 800ba42:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ba46:	e00b      	b.n	800ba60 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ba48:	f7f9 fec6 	bl	80057d8 <HAL_GetTick>
 800ba4c:	4602      	mov	r2, r0
 800ba4e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800ba52:	1ad3      	subs	r3, r2, r3
 800ba54:	2b64      	cmp	r3, #100	; 0x64
 800ba56:	d903      	bls.n	800ba60 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800ba58:	2303      	movs	r3, #3
 800ba5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ba5e:	e005      	b.n	800ba6c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ba60:	4b3f      	ldr	r3, [pc, #252]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d0ed      	beq.n	800ba48 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800ba6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d179      	bne.n	800bb68 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800ba74:	4b39      	ldr	r3, [pc, #228]	; (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ba76:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ba78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba7c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ba80:	4053      	eors	r3, r2
 800ba82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d015      	beq.n	800bab6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ba8a:	4b34      	ldr	r3, [pc, #208]	; (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ba8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba92:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ba96:	4b31      	ldr	r3, [pc, #196]	; (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ba98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba9a:	4a30      	ldr	r2, [pc, #192]	; (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ba9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800baa0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800baa2:	4b2e      	ldr	r3, [pc, #184]	; (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800baa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800baa6:	4a2d      	ldr	r2, [pc, #180]	; (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800baa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800baac:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800baae:	4a2b      	ldr	r2, [pc, #172]	; (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bab0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800bab4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800babe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bac2:	d118      	bne.n	800baf6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bac4:	f7f9 fe88 	bl	80057d8 <HAL_GetTick>
 800bac8:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bacc:	e00d      	b.n	800baea <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bace:	f7f9 fe83 	bl	80057d8 <HAL_GetTick>
 800bad2:	4602      	mov	r2, r0
 800bad4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800bad8:	1ad2      	subs	r2, r2, r3
 800bada:	f241 3388 	movw	r3, #5000	; 0x1388
 800bade:	429a      	cmp	r2, r3
 800bae0:	d903      	bls.n	800baea <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800bae2:	2303      	movs	r3, #3
 800bae4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800bae8:	e005      	b.n	800baf6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800baea:	4b1c      	ldr	r3, [pc, #112]	; (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800baec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800baee:	f003 0302 	and.w	r3, r3, #2
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d0eb      	beq.n	800bace <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800baf6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d129      	bne.n	800bb52 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bafe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb02:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bb06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bb0e:	d10e      	bne.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800bb10:	4b12      	ldr	r3, [pc, #72]	; (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bb12:	691b      	ldr	r3, [r3, #16]
 800bb14:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800bb18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb1c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bb20:	091a      	lsrs	r2, r3, #4
 800bb22:	4b10      	ldr	r3, [pc, #64]	; (800bb64 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800bb24:	4013      	ands	r3, r2
 800bb26:	4a0d      	ldr	r2, [pc, #52]	; (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bb28:	430b      	orrs	r3, r1
 800bb2a:	6113      	str	r3, [r2, #16]
 800bb2c:	e005      	b.n	800bb3a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800bb2e:	4b0b      	ldr	r3, [pc, #44]	; (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bb30:	691b      	ldr	r3, [r3, #16]
 800bb32:	4a0a      	ldr	r2, [pc, #40]	; (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bb34:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bb38:	6113      	str	r3, [r2, #16]
 800bb3a:	4b08      	ldr	r3, [pc, #32]	; (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bb3c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800bb3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb42:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bb46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bb4a:	4a04      	ldr	r2, [pc, #16]	; (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bb4c:	430b      	orrs	r3, r1
 800bb4e:	6713      	str	r3, [r2, #112]	; 0x70
 800bb50:	e00e      	b.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bb52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800bb5a:	e009      	b.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800bb5c:	58024400 	.word	0x58024400
 800bb60:	58024800 	.word	0x58024800
 800bb64:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb6c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800bb70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb78:	f002 0301 	and.w	r3, r2, #1
 800bb7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bb80:	2300      	movs	r3, #0
 800bb82:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bb86:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bb8a:	460b      	mov	r3, r1
 800bb8c:	4313      	orrs	r3, r2
 800bb8e:	f000 8089 	beq.w	800bca4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800bb92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb98:	2b28      	cmp	r3, #40	; 0x28
 800bb9a:	d86b      	bhi.n	800bc74 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800bb9c:	a201      	add	r2, pc, #4	; (adr r2, 800bba4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bb9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bba2:	bf00      	nop
 800bba4:	0800bc7d 	.word	0x0800bc7d
 800bba8:	0800bc75 	.word	0x0800bc75
 800bbac:	0800bc75 	.word	0x0800bc75
 800bbb0:	0800bc75 	.word	0x0800bc75
 800bbb4:	0800bc75 	.word	0x0800bc75
 800bbb8:	0800bc75 	.word	0x0800bc75
 800bbbc:	0800bc75 	.word	0x0800bc75
 800bbc0:	0800bc75 	.word	0x0800bc75
 800bbc4:	0800bc49 	.word	0x0800bc49
 800bbc8:	0800bc75 	.word	0x0800bc75
 800bbcc:	0800bc75 	.word	0x0800bc75
 800bbd0:	0800bc75 	.word	0x0800bc75
 800bbd4:	0800bc75 	.word	0x0800bc75
 800bbd8:	0800bc75 	.word	0x0800bc75
 800bbdc:	0800bc75 	.word	0x0800bc75
 800bbe0:	0800bc75 	.word	0x0800bc75
 800bbe4:	0800bc5f 	.word	0x0800bc5f
 800bbe8:	0800bc75 	.word	0x0800bc75
 800bbec:	0800bc75 	.word	0x0800bc75
 800bbf0:	0800bc75 	.word	0x0800bc75
 800bbf4:	0800bc75 	.word	0x0800bc75
 800bbf8:	0800bc75 	.word	0x0800bc75
 800bbfc:	0800bc75 	.word	0x0800bc75
 800bc00:	0800bc75 	.word	0x0800bc75
 800bc04:	0800bc7d 	.word	0x0800bc7d
 800bc08:	0800bc75 	.word	0x0800bc75
 800bc0c:	0800bc75 	.word	0x0800bc75
 800bc10:	0800bc75 	.word	0x0800bc75
 800bc14:	0800bc75 	.word	0x0800bc75
 800bc18:	0800bc75 	.word	0x0800bc75
 800bc1c:	0800bc75 	.word	0x0800bc75
 800bc20:	0800bc75 	.word	0x0800bc75
 800bc24:	0800bc7d 	.word	0x0800bc7d
 800bc28:	0800bc75 	.word	0x0800bc75
 800bc2c:	0800bc75 	.word	0x0800bc75
 800bc30:	0800bc75 	.word	0x0800bc75
 800bc34:	0800bc75 	.word	0x0800bc75
 800bc38:	0800bc75 	.word	0x0800bc75
 800bc3c:	0800bc75 	.word	0x0800bc75
 800bc40:	0800bc75 	.word	0x0800bc75
 800bc44:	0800bc7d 	.word	0x0800bc7d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bc48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc4c:	3308      	adds	r3, #8
 800bc4e:	2101      	movs	r1, #1
 800bc50:	4618      	mov	r0, r3
 800bc52:	f001 fe95 	bl	800d980 <RCCEx_PLL2_Config>
 800bc56:	4603      	mov	r3, r0
 800bc58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bc5c:	e00f      	b.n	800bc7e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bc5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc62:	3328      	adds	r3, #40	; 0x28
 800bc64:	2101      	movs	r1, #1
 800bc66:	4618      	mov	r0, r3
 800bc68:	f001 ff3c 	bl	800dae4 <RCCEx_PLL3_Config>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bc72:	e004      	b.n	800bc7e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc74:	2301      	movs	r3, #1
 800bc76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bc7a:	e000      	b.n	800bc7e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800bc7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d10a      	bne.n	800bc9c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bc86:	4bbf      	ldr	r3, [pc, #764]	; (800bf84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bc88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc8a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800bc8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc94:	4abb      	ldr	r2, [pc, #748]	; (800bf84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bc96:	430b      	orrs	r3, r1
 800bc98:	6553      	str	r3, [r2, #84]	; 0x54
 800bc9a:	e003      	b.n	800bca4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bca0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcac:	f002 0302 	and.w	r3, r2, #2
 800bcb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800bcba:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800bcbe:	460b      	mov	r3, r1
 800bcc0:	4313      	orrs	r3, r2
 800bcc2:	d041      	beq.n	800bd48 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800bcc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bcca:	2b05      	cmp	r3, #5
 800bccc:	d824      	bhi.n	800bd18 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800bcce:	a201      	add	r2, pc, #4	; (adr r2, 800bcd4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800bcd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcd4:	0800bd21 	.word	0x0800bd21
 800bcd8:	0800bced 	.word	0x0800bced
 800bcdc:	0800bd03 	.word	0x0800bd03
 800bce0:	0800bd21 	.word	0x0800bd21
 800bce4:	0800bd21 	.word	0x0800bd21
 800bce8:	0800bd21 	.word	0x0800bd21
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bcec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcf0:	3308      	adds	r3, #8
 800bcf2:	2101      	movs	r1, #1
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	f001 fe43 	bl	800d980 <RCCEx_PLL2_Config>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bd00:	e00f      	b.n	800bd22 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bd02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd06:	3328      	adds	r3, #40	; 0x28
 800bd08:	2101      	movs	r1, #1
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f001 feea 	bl	800dae4 <RCCEx_PLL3_Config>
 800bd10:	4603      	mov	r3, r0
 800bd12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bd16:	e004      	b.n	800bd22 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd18:	2301      	movs	r3, #1
 800bd1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bd1e:	e000      	b.n	800bd22 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800bd20:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d10a      	bne.n	800bd40 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800bd2a:	4b96      	ldr	r3, [pc, #600]	; (800bf84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bd2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd2e:	f023 0107 	bic.w	r1, r3, #7
 800bd32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd38:	4a92      	ldr	r2, [pc, #584]	; (800bf84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bd3a:	430b      	orrs	r3, r1
 800bd3c:	6553      	str	r3, [r2, #84]	; 0x54
 800bd3e:	e003      	b.n	800bd48 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd44:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bd48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd50:	f002 0304 	and.w	r3, r2, #4
 800bd54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bd58:	2300      	movs	r3, #0
 800bd5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bd5e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800bd62:	460b      	mov	r3, r1
 800bd64:	4313      	orrs	r3, r2
 800bd66:	d044      	beq.n	800bdf2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800bd68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bd70:	2b05      	cmp	r3, #5
 800bd72:	d825      	bhi.n	800bdc0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800bd74:	a201      	add	r2, pc, #4	; (adr r2, 800bd7c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800bd76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd7a:	bf00      	nop
 800bd7c:	0800bdc9 	.word	0x0800bdc9
 800bd80:	0800bd95 	.word	0x0800bd95
 800bd84:	0800bdab 	.word	0x0800bdab
 800bd88:	0800bdc9 	.word	0x0800bdc9
 800bd8c:	0800bdc9 	.word	0x0800bdc9
 800bd90:	0800bdc9 	.word	0x0800bdc9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bd94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd98:	3308      	adds	r3, #8
 800bd9a:	2101      	movs	r1, #1
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	f001 fdef 	bl	800d980 <RCCEx_PLL2_Config>
 800bda2:	4603      	mov	r3, r0
 800bda4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bda8:	e00f      	b.n	800bdca <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bdaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdae:	3328      	adds	r3, #40	; 0x28
 800bdb0:	2101      	movs	r1, #1
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f001 fe96 	bl	800dae4 <RCCEx_PLL3_Config>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bdbe:	e004      	b.n	800bdca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bdc6:	e000      	b.n	800bdca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800bdc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bdca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d10b      	bne.n	800bdea <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bdd2:	4b6c      	ldr	r3, [pc, #432]	; (800bf84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bdd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdd6:	f023 0107 	bic.w	r1, r3, #7
 800bdda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bde2:	4a68      	ldr	r2, [pc, #416]	; (800bf84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bde4:	430b      	orrs	r3, r1
 800bde6:	6593      	str	r3, [r2, #88]	; 0x58
 800bde8:	e003      	b.n	800bdf2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bdee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bdf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdfa:	f002 0320 	and.w	r3, r2, #32
 800bdfe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800be02:	2300      	movs	r3, #0
 800be04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800be08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800be0c:	460b      	mov	r3, r1
 800be0e:	4313      	orrs	r3, r2
 800be10:	d055      	beq.n	800bebe <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800be12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800be1e:	d033      	beq.n	800be88 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800be20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800be24:	d82c      	bhi.n	800be80 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800be26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be2a:	d02f      	beq.n	800be8c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800be2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be30:	d826      	bhi.n	800be80 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800be32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800be36:	d02b      	beq.n	800be90 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800be38:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800be3c:	d820      	bhi.n	800be80 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800be3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be42:	d012      	beq.n	800be6a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800be44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be48:	d81a      	bhi.n	800be80 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d022      	beq.n	800be94 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800be4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be52:	d115      	bne.n	800be80 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800be54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be58:	3308      	adds	r3, #8
 800be5a:	2100      	movs	r1, #0
 800be5c:	4618      	mov	r0, r3
 800be5e:	f001 fd8f 	bl	800d980 <RCCEx_PLL2_Config>
 800be62:	4603      	mov	r3, r0
 800be64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800be68:	e015      	b.n	800be96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800be6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be6e:	3328      	adds	r3, #40	; 0x28
 800be70:	2102      	movs	r1, #2
 800be72:	4618      	mov	r0, r3
 800be74:	f001 fe36 	bl	800dae4 <RCCEx_PLL3_Config>
 800be78:	4603      	mov	r3, r0
 800be7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800be7e:	e00a      	b.n	800be96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be80:	2301      	movs	r3, #1
 800be82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800be86:	e006      	b.n	800be96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800be88:	bf00      	nop
 800be8a:	e004      	b.n	800be96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800be8c:	bf00      	nop
 800be8e:	e002      	b.n	800be96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800be90:	bf00      	nop
 800be92:	e000      	b.n	800be96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800be94:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d10b      	bne.n	800beb6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800be9e:	4b39      	ldr	r3, [pc, #228]	; (800bf84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bea2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800bea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800beaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800beae:	4a35      	ldr	r2, [pc, #212]	; (800bf84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800beb0:	430b      	orrs	r3, r1
 800beb2:	6553      	str	r3, [r2, #84]	; 0x54
 800beb4:	e003      	b.n	800bebe <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800beb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800beba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800bebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800beca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bece:	2300      	movs	r3, #0
 800bed0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bed4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800bed8:	460b      	mov	r3, r1
 800beda:	4313      	orrs	r3, r2
 800bedc:	d058      	beq.n	800bf90 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800bede:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bee2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bee6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800beea:	d033      	beq.n	800bf54 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800beec:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bef0:	d82c      	bhi.n	800bf4c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bef6:	d02f      	beq.n	800bf58 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800bef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800befc:	d826      	bhi.n	800bf4c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800befe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bf02:	d02b      	beq.n	800bf5c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800bf04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bf08:	d820      	bhi.n	800bf4c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bf0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bf0e:	d012      	beq.n	800bf36 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800bf10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bf14:	d81a      	bhi.n	800bf4c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d022      	beq.n	800bf60 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800bf1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf1e:	d115      	bne.n	800bf4c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bf20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf24:	3308      	adds	r3, #8
 800bf26:	2100      	movs	r1, #0
 800bf28:	4618      	mov	r0, r3
 800bf2a:	f001 fd29 	bl	800d980 <RCCEx_PLL2_Config>
 800bf2e:	4603      	mov	r3, r0
 800bf30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bf34:	e015      	b.n	800bf62 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bf36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf3a:	3328      	adds	r3, #40	; 0x28
 800bf3c:	2102      	movs	r1, #2
 800bf3e:	4618      	mov	r0, r3
 800bf40:	f001 fdd0 	bl	800dae4 <RCCEx_PLL3_Config>
 800bf44:	4603      	mov	r3, r0
 800bf46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bf4a:	e00a      	b.n	800bf62 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bf52:	e006      	b.n	800bf62 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bf54:	bf00      	nop
 800bf56:	e004      	b.n	800bf62 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bf58:	bf00      	nop
 800bf5a:	e002      	b.n	800bf62 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bf5c:	bf00      	nop
 800bf5e:	e000      	b.n	800bf62 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bf60:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d10e      	bne.n	800bf88 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bf6a:	4b06      	ldr	r3, [pc, #24]	; (800bf84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bf6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf6e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800bf72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bf7a:	4a02      	ldr	r2, [pc, #8]	; (800bf84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bf7c:	430b      	orrs	r3, r1
 800bf7e:	6593      	str	r3, [r2, #88]	; 0x58
 800bf80:	e006      	b.n	800bf90 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800bf82:	bf00      	nop
 800bf84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bf90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf98:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800bf9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bfa6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800bfaa:	460b      	mov	r3, r1
 800bfac:	4313      	orrs	r3, r2
 800bfae:	d055      	beq.n	800c05c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800bfb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfb4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bfb8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bfbc:	d033      	beq.n	800c026 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800bfbe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bfc2:	d82c      	bhi.n	800c01e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bfc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bfc8:	d02f      	beq.n	800c02a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800bfca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bfce:	d826      	bhi.n	800c01e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bfd0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bfd4:	d02b      	beq.n	800c02e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800bfd6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bfda:	d820      	bhi.n	800c01e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bfdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bfe0:	d012      	beq.n	800c008 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800bfe2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bfe6:	d81a      	bhi.n	800c01e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d022      	beq.n	800c032 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800bfec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bff0:	d115      	bne.n	800c01e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bff6:	3308      	adds	r3, #8
 800bff8:	2100      	movs	r1, #0
 800bffa:	4618      	mov	r0, r3
 800bffc:	f001 fcc0 	bl	800d980 <RCCEx_PLL2_Config>
 800c000:	4603      	mov	r3, r0
 800c002:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c006:	e015      	b.n	800c034 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c008:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c00c:	3328      	adds	r3, #40	; 0x28
 800c00e:	2102      	movs	r1, #2
 800c010:	4618      	mov	r0, r3
 800c012:	f001 fd67 	bl	800dae4 <RCCEx_PLL3_Config>
 800c016:	4603      	mov	r3, r0
 800c018:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c01c:	e00a      	b.n	800c034 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c01e:	2301      	movs	r3, #1
 800c020:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c024:	e006      	b.n	800c034 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c026:	bf00      	nop
 800c028:	e004      	b.n	800c034 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c02a:	bf00      	nop
 800c02c:	e002      	b.n	800c034 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c02e:	bf00      	nop
 800c030:	e000      	b.n	800c034 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c032:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c034:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d10b      	bne.n	800c054 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c03c:	4ba1      	ldr	r3, [pc, #644]	; (800c2c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c03e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c040:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800c044:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c048:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c04c:	4a9d      	ldr	r2, [pc, #628]	; (800c2c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c04e:	430b      	orrs	r3, r1
 800c050:	6593      	str	r3, [r2, #88]	; 0x58
 800c052:	e003      	b.n	800c05c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c054:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c058:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c05c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c064:	f002 0308 	and.w	r3, r2, #8
 800c068:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c06c:	2300      	movs	r3, #0
 800c06e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c072:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800c076:	460b      	mov	r3, r1
 800c078:	4313      	orrs	r3, r2
 800c07a:	d01e      	beq.n	800c0ba <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800c07c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c080:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c088:	d10c      	bne.n	800c0a4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c08a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c08e:	3328      	adds	r3, #40	; 0x28
 800c090:	2102      	movs	r1, #2
 800c092:	4618      	mov	r0, r3
 800c094:	f001 fd26 	bl	800dae4 <RCCEx_PLL3_Config>
 800c098:	4603      	mov	r3, r0
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d002      	beq.n	800c0a4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800c09e:	2301      	movs	r3, #1
 800c0a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c0a4:	4b87      	ldr	r3, [pc, #540]	; (800c2c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c0a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0a8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c0ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c0b4:	4a83      	ldr	r2, [pc, #524]	; (800c2c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c0b6:	430b      	orrs	r3, r1
 800c0b8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c0ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c2:	f002 0310 	and.w	r3, r2, #16
 800c0c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c0d0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800c0d4:	460b      	mov	r3, r1
 800c0d6:	4313      	orrs	r3, r2
 800c0d8:	d01e      	beq.n	800c118 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c0da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c0e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0e6:	d10c      	bne.n	800c102 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c0e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0ec:	3328      	adds	r3, #40	; 0x28
 800c0ee:	2102      	movs	r1, #2
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f001 fcf7 	bl	800dae4 <RCCEx_PLL3_Config>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d002      	beq.n	800c102 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c102:	4b70      	ldr	r3, [pc, #448]	; (800c2c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c106:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c10a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c10e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c112:	4a6c      	ldr	r2, [pc, #432]	; (800c2c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c114:	430b      	orrs	r3, r1
 800c116:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c118:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c120:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800c124:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c128:	2300      	movs	r3, #0
 800c12a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c12e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800c132:	460b      	mov	r3, r1
 800c134:	4313      	orrs	r3, r2
 800c136:	d03e      	beq.n	800c1b6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c138:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c13c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c140:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c144:	d022      	beq.n	800c18c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800c146:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c14a:	d81b      	bhi.n	800c184 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d003      	beq.n	800c158 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800c150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c154:	d00b      	beq.n	800c16e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800c156:	e015      	b.n	800c184 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c158:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c15c:	3308      	adds	r3, #8
 800c15e:	2100      	movs	r1, #0
 800c160:	4618      	mov	r0, r3
 800c162:	f001 fc0d 	bl	800d980 <RCCEx_PLL2_Config>
 800c166:	4603      	mov	r3, r0
 800c168:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c16c:	e00f      	b.n	800c18e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c16e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c172:	3328      	adds	r3, #40	; 0x28
 800c174:	2102      	movs	r1, #2
 800c176:	4618      	mov	r0, r3
 800c178:	f001 fcb4 	bl	800dae4 <RCCEx_PLL3_Config>
 800c17c:	4603      	mov	r3, r0
 800c17e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c182:	e004      	b.n	800c18e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c184:	2301      	movs	r3, #1
 800c186:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c18a:	e000      	b.n	800c18e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800c18c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c18e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c192:	2b00      	cmp	r3, #0
 800c194:	d10b      	bne.n	800c1ae <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c196:	4b4b      	ldr	r3, [pc, #300]	; (800c2c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c19a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800c19e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c1a6:	4a47      	ldr	r2, [pc, #284]	; (800c2c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c1a8:	430b      	orrs	r3, r1
 800c1aa:	6593      	str	r3, [r2, #88]	; 0x58
 800c1ac:	e003      	b.n	800c1b6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c1b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1be:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800c1c2:	67bb      	str	r3, [r7, #120]	; 0x78
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c1c8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800c1cc:	460b      	mov	r3, r1
 800c1ce:	4313      	orrs	r3, r2
 800c1d0:	d03b      	beq.n	800c24a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c1d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c1de:	d01f      	beq.n	800c220 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800c1e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c1e4:	d818      	bhi.n	800c218 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800c1e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c1ea:	d003      	beq.n	800c1f4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800c1ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c1f0:	d007      	beq.n	800c202 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800c1f2:	e011      	b.n	800c218 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c1f4:	4b33      	ldr	r3, [pc, #204]	; (800c2c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c1f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1f8:	4a32      	ldr	r2, [pc, #200]	; (800c2c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c1fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c1fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c200:	e00f      	b.n	800c222 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c202:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c206:	3328      	adds	r3, #40	; 0x28
 800c208:	2101      	movs	r1, #1
 800c20a:	4618      	mov	r0, r3
 800c20c:	f001 fc6a 	bl	800dae4 <RCCEx_PLL3_Config>
 800c210:	4603      	mov	r3, r0
 800c212:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800c216:	e004      	b.n	800c222 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c218:	2301      	movs	r3, #1
 800c21a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c21e:	e000      	b.n	800c222 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800c220:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c222:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c226:	2b00      	cmp	r3, #0
 800c228:	d10b      	bne.n	800c242 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c22a:	4b26      	ldr	r3, [pc, #152]	; (800c2c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c22c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c22e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c232:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c23a:	4a22      	ldr	r2, [pc, #136]	; (800c2c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c23c:	430b      	orrs	r3, r1
 800c23e:	6553      	str	r3, [r2, #84]	; 0x54
 800c240:	e003      	b.n	800c24a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c242:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c246:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c24a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c252:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800c256:	673b      	str	r3, [r7, #112]	; 0x70
 800c258:	2300      	movs	r3, #0
 800c25a:	677b      	str	r3, [r7, #116]	; 0x74
 800c25c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800c260:	460b      	mov	r3, r1
 800c262:	4313      	orrs	r3, r2
 800c264:	d034      	beq.n	800c2d0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c266:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c26a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d003      	beq.n	800c278 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800c270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c274:	d007      	beq.n	800c286 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800c276:	e011      	b.n	800c29c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c278:	4b12      	ldr	r3, [pc, #72]	; (800c2c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c27a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c27c:	4a11      	ldr	r2, [pc, #68]	; (800c2c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c27e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c282:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c284:	e00e      	b.n	800c2a4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c286:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c28a:	3308      	adds	r3, #8
 800c28c:	2102      	movs	r1, #2
 800c28e:	4618      	mov	r0, r3
 800c290:	f001 fb76 	bl	800d980 <RCCEx_PLL2_Config>
 800c294:	4603      	mov	r3, r0
 800c296:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c29a:	e003      	b.n	800c2a4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800c29c:	2301      	movs	r3, #1
 800c29e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c2a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c2a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d10d      	bne.n	800c2c8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c2ac:	4b05      	ldr	r3, [pc, #20]	; (800c2c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c2ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c2b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2ba:	4a02      	ldr	r2, [pc, #8]	; (800c2c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c2bc:	430b      	orrs	r3, r1
 800c2be:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c2c0:	e006      	b.n	800c2d0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800c2c2:	bf00      	nop
 800c2c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c2cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c2d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2d8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c2dc:	66bb      	str	r3, [r7, #104]	; 0x68
 800c2de:	2300      	movs	r3, #0
 800c2e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c2e2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c2e6:	460b      	mov	r3, r1
 800c2e8:	4313      	orrs	r3, r2
 800c2ea:	d00c      	beq.n	800c306 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c2ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2f0:	3328      	adds	r3, #40	; 0x28
 800c2f2:	2102      	movs	r1, #2
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	f001 fbf5 	bl	800dae4 <RCCEx_PLL3_Config>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d002      	beq.n	800c306 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800c300:	2301      	movs	r3, #1
 800c302:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c306:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c30e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c312:	663b      	str	r3, [r7, #96]	; 0x60
 800c314:	2300      	movs	r3, #0
 800c316:	667b      	str	r3, [r7, #100]	; 0x64
 800c318:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c31c:	460b      	mov	r3, r1
 800c31e:	4313      	orrs	r3, r2
 800c320:	d038      	beq.n	800c394 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c322:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c326:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c32a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c32e:	d018      	beq.n	800c362 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800c330:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c334:	d811      	bhi.n	800c35a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c336:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c33a:	d014      	beq.n	800c366 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800c33c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c340:	d80b      	bhi.n	800c35a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c342:	2b00      	cmp	r3, #0
 800c344:	d011      	beq.n	800c36a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800c346:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c34a:	d106      	bne.n	800c35a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c34c:	4bc3      	ldr	r3, [pc, #780]	; (800c65c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c34e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c350:	4ac2      	ldr	r2, [pc, #776]	; (800c65c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c352:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c356:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c358:	e008      	b.n	800c36c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c35a:	2301      	movs	r3, #1
 800c35c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c360:	e004      	b.n	800c36c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c362:	bf00      	nop
 800c364:	e002      	b.n	800c36c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c366:	bf00      	nop
 800c368:	e000      	b.n	800c36c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c36a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c36c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c370:	2b00      	cmp	r3, #0
 800c372:	d10b      	bne.n	800c38c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c374:	4bb9      	ldr	r3, [pc, #740]	; (800c65c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c378:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c37c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c380:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c384:	4ab5      	ldr	r2, [pc, #724]	; (800c65c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c386:	430b      	orrs	r3, r1
 800c388:	6553      	str	r3, [r2, #84]	; 0x54
 800c38a:	e003      	b.n	800c394 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c38c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c390:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c394:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c39c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c3a0:	65bb      	str	r3, [r7, #88]	; 0x58
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c3a6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c3aa:	460b      	mov	r3, r1
 800c3ac:	4313      	orrs	r3, r2
 800c3ae:	d009      	beq.n	800c3c4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c3b0:	4baa      	ldr	r3, [pc, #680]	; (800c65c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c3b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3b4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c3b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3be:	4aa7      	ldr	r2, [pc, #668]	; (800c65c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c3c0:	430b      	orrs	r3, r1
 800c3c2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c3c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3cc:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800c3d0:	653b      	str	r3, [r7, #80]	; 0x50
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	657b      	str	r3, [r7, #84]	; 0x54
 800c3d6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c3da:	460b      	mov	r3, r1
 800c3dc:	4313      	orrs	r3, r2
 800c3de:	d00a      	beq.n	800c3f6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c3e0:	4b9e      	ldr	r3, [pc, #632]	; (800c65c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c3e2:	691b      	ldr	r3, [r3, #16]
 800c3e4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800c3e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3ec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c3f0:	4a9a      	ldr	r2, [pc, #616]	; (800c65c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c3f2:	430b      	orrs	r3, r1
 800c3f4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c3f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3fe:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c402:	64bb      	str	r3, [r7, #72]	; 0x48
 800c404:	2300      	movs	r3, #0
 800c406:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c408:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c40c:	460b      	mov	r3, r1
 800c40e:	4313      	orrs	r3, r2
 800c410:	d009      	beq.n	800c426 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c412:	4b92      	ldr	r3, [pc, #584]	; (800c65c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c416:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c41a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c41e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c420:	4a8e      	ldr	r2, [pc, #568]	; (800c65c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c422:	430b      	orrs	r3, r1
 800c424:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c426:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c42e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c432:	643b      	str	r3, [r7, #64]	; 0x40
 800c434:	2300      	movs	r3, #0
 800c436:	647b      	str	r3, [r7, #68]	; 0x44
 800c438:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c43c:	460b      	mov	r3, r1
 800c43e:	4313      	orrs	r3, r2
 800c440:	d00e      	beq.n	800c460 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c442:	4b86      	ldr	r3, [pc, #536]	; (800c65c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c444:	691b      	ldr	r3, [r3, #16]
 800c446:	4a85      	ldr	r2, [pc, #532]	; (800c65c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c448:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c44c:	6113      	str	r3, [r2, #16]
 800c44e:	4b83      	ldr	r3, [pc, #524]	; (800c65c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c450:	6919      	ldr	r1, [r3, #16]
 800c452:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c456:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c45a:	4a80      	ldr	r2, [pc, #512]	; (800c65c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c45c:	430b      	orrs	r3, r1
 800c45e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c460:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c468:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c46c:	63bb      	str	r3, [r7, #56]	; 0x38
 800c46e:	2300      	movs	r3, #0
 800c470:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c472:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c476:	460b      	mov	r3, r1
 800c478:	4313      	orrs	r3, r2
 800c47a:	d009      	beq.n	800c490 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c47c:	4b77      	ldr	r3, [pc, #476]	; (800c65c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c47e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c480:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c484:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c48a:	4a74      	ldr	r2, [pc, #464]	; (800c65c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c48c:	430b      	orrs	r3, r1
 800c48e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c490:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c498:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c49c:	633b      	str	r3, [r7, #48]	; 0x30
 800c49e:	2300      	movs	r3, #0
 800c4a0:	637b      	str	r3, [r7, #52]	; 0x34
 800c4a2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c4a6:	460b      	mov	r3, r1
 800c4a8:	4313      	orrs	r3, r2
 800c4aa:	d00a      	beq.n	800c4c2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c4ac:	4b6b      	ldr	r3, [pc, #428]	; (800c65c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c4ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4b0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c4b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c4b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4bc:	4a67      	ldr	r2, [pc, #412]	; (800c65c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c4be:	430b      	orrs	r3, r1
 800c4c0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c4c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ca:	2100      	movs	r1, #0
 800c4cc:	62b9      	str	r1, [r7, #40]	; 0x28
 800c4ce:	f003 0301 	and.w	r3, r3, #1
 800c4d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c4d4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c4d8:	460b      	mov	r3, r1
 800c4da:	4313      	orrs	r3, r2
 800c4dc:	d011      	beq.n	800c502 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c4de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c4e2:	3308      	adds	r3, #8
 800c4e4:	2100      	movs	r1, #0
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f001 fa4a 	bl	800d980 <RCCEx_PLL2_Config>
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c4f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d003      	beq.n	800c502 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c4fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c502:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c50a:	2100      	movs	r1, #0
 800c50c:	6239      	str	r1, [r7, #32]
 800c50e:	f003 0302 	and.w	r3, r3, #2
 800c512:	627b      	str	r3, [r7, #36]	; 0x24
 800c514:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c518:	460b      	mov	r3, r1
 800c51a:	4313      	orrs	r3, r2
 800c51c:	d011      	beq.n	800c542 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c51e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c522:	3308      	adds	r3, #8
 800c524:	2101      	movs	r1, #1
 800c526:	4618      	mov	r0, r3
 800c528:	f001 fa2a 	bl	800d980 <RCCEx_PLL2_Config>
 800c52c:	4603      	mov	r3, r0
 800c52e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c532:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c536:	2b00      	cmp	r3, #0
 800c538:	d003      	beq.n	800c542 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c53a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c53e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c542:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c54a:	2100      	movs	r1, #0
 800c54c:	61b9      	str	r1, [r7, #24]
 800c54e:	f003 0304 	and.w	r3, r3, #4
 800c552:	61fb      	str	r3, [r7, #28]
 800c554:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c558:	460b      	mov	r3, r1
 800c55a:	4313      	orrs	r3, r2
 800c55c:	d011      	beq.n	800c582 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c55e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c562:	3308      	adds	r3, #8
 800c564:	2102      	movs	r1, #2
 800c566:	4618      	mov	r0, r3
 800c568:	f001 fa0a 	bl	800d980 <RCCEx_PLL2_Config>
 800c56c:	4603      	mov	r3, r0
 800c56e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c572:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c576:	2b00      	cmp	r3, #0
 800c578:	d003      	beq.n	800c582 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c57a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c57e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c582:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c58a:	2100      	movs	r1, #0
 800c58c:	6139      	str	r1, [r7, #16]
 800c58e:	f003 0308 	and.w	r3, r3, #8
 800c592:	617b      	str	r3, [r7, #20]
 800c594:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c598:	460b      	mov	r3, r1
 800c59a:	4313      	orrs	r3, r2
 800c59c:	d011      	beq.n	800c5c2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c59e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5a2:	3328      	adds	r3, #40	; 0x28
 800c5a4:	2100      	movs	r1, #0
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f001 fa9c 	bl	800dae4 <RCCEx_PLL3_Config>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800c5b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d003      	beq.n	800c5c2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c5be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c5c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ca:	2100      	movs	r1, #0
 800c5cc:	60b9      	str	r1, [r7, #8]
 800c5ce:	f003 0310 	and.w	r3, r3, #16
 800c5d2:	60fb      	str	r3, [r7, #12]
 800c5d4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c5d8:	460b      	mov	r3, r1
 800c5da:	4313      	orrs	r3, r2
 800c5dc:	d011      	beq.n	800c602 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c5de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5e2:	3328      	adds	r3, #40	; 0x28
 800c5e4:	2101      	movs	r1, #1
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f001 fa7c 	bl	800dae4 <RCCEx_PLL3_Config>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c5f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d003      	beq.n	800c602 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c5fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c602:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c60a:	2100      	movs	r1, #0
 800c60c:	6039      	str	r1, [r7, #0]
 800c60e:	f003 0320 	and.w	r3, r3, #32
 800c612:	607b      	str	r3, [r7, #4]
 800c614:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c618:	460b      	mov	r3, r1
 800c61a:	4313      	orrs	r3, r2
 800c61c:	d011      	beq.n	800c642 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c61e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c622:	3328      	adds	r3, #40	; 0x28
 800c624:	2102      	movs	r1, #2
 800c626:	4618      	mov	r0, r3
 800c628:	f001 fa5c 	bl	800dae4 <RCCEx_PLL3_Config>
 800c62c:	4603      	mov	r3, r0
 800c62e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c632:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c636:	2b00      	cmp	r3, #0
 800c638:	d003      	beq.n	800c642 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c63a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c63e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800c642:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800c646:	2b00      	cmp	r3, #0
 800c648:	d101      	bne.n	800c64e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800c64a:	2300      	movs	r3, #0
 800c64c:	e000      	b.n	800c650 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800c64e:	2301      	movs	r3, #1
}
 800c650:	4618      	mov	r0, r3
 800c652:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800c656:	46bd      	mov	sp, r7
 800c658:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c65c:	58024400 	.word	0x58024400

0800c660 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b090      	sub	sp, #64	; 0x40
 800c664:	af00      	add	r7, sp, #0
 800c666:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c66a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c66e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c672:	430b      	orrs	r3, r1
 800c674:	f040 8094 	bne.w	800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c678:	4b9e      	ldr	r3, [pc, #632]	; (800c8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c67a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c67c:	f003 0307 	and.w	r3, r3, #7
 800c680:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c684:	2b04      	cmp	r3, #4
 800c686:	f200 8087 	bhi.w	800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c68a:	a201      	add	r2, pc, #4	; (adr r2, 800c690 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c68c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c690:	0800c6a5 	.word	0x0800c6a5
 800c694:	0800c6cd 	.word	0x0800c6cd
 800c698:	0800c6f5 	.word	0x0800c6f5
 800c69c:	0800c791 	.word	0x0800c791
 800c6a0:	0800c71d 	.word	0x0800c71d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c6a4:	4b93      	ldr	r3, [pc, #588]	; (800c8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c6ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c6b0:	d108      	bne.n	800c6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c6b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f001 f810 	bl	800d6dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c6bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6c0:	f000 bd45 	b.w	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6c8:	f000 bd41 	b.w	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c6cc:	4b89      	ldr	r3, [pc, #548]	; (800c8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c6d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c6d8:	d108      	bne.n	800c6ec <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6da:	f107 0318 	add.w	r3, r7, #24
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f000 fd54 	bl	800d18c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c6e4:	69bb      	ldr	r3, [r7, #24]
 800c6e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6e8:	f000 bd31 	b.w	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6f0:	f000 bd2d 	b.w	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c6f4:	4b7f      	ldr	r3, [pc, #508]	; (800c8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c6fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c700:	d108      	bne.n	800c714 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c702:	f107 030c 	add.w	r3, r7, #12
 800c706:	4618      	mov	r0, r3
 800c708:	f000 fe94 	bl	800d434 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c710:	f000 bd1d 	b.w	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c714:	2300      	movs	r3, #0
 800c716:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c718:	f000 bd19 	b.w	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c71c:	4b75      	ldr	r3, [pc, #468]	; (800c8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c71e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c720:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c724:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c726:	4b73      	ldr	r3, [pc, #460]	; (800c8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	f003 0304 	and.w	r3, r3, #4
 800c72e:	2b04      	cmp	r3, #4
 800c730:	d10c      	bne.n	800c74c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c734:	2b00      	cmp	r3, #0
 800c736:	d109      	bne.n	800c74c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c738:	4b6e      	ldr	r3, [pc, #440]	; (800c8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	08db      	lsrs	r3, r3, #3
 800c73e:	f003 0303 	and.w	r3, r3, #3
 800c742:	4a6d      	ldr	r2, [pc, #436]	; (800c8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c744:	fa22 f303 	lsr.w	r3, r2, r3
 800c748:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c74a:	e01f      	b.n	800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c74c:	4b69      	ldr	r3, [pc, #420]	; (800c8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c754:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c758:	d106      	bne.n	800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c75a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c75c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c760:	d102      	bne.n	800c768 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c762:	4b66      	ldr	r3, [pc, #408]	; (800c8fc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c764:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c766:	e011      	b.n	800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c768:	4b62      	ldr	r3, [pc, #392]	; (800c8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c770:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c774:	d106      	bne.n	800c784 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c778:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c77c:	d102      	bne.n	800c784 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c77e:	4b60      	ldr	r3, [pc, #384]	; (800c900 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c780:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c782:	e003      	b.n	800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c784:	2300      	movs	r3, #0
 800c786:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c788:	f000 bce1 	b.w	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c78c:	f000 bcdf 	b.w	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c790:	4b5c      	ldr	r3, [pc, #368]	; (800c904 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c792:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c794:	f000 bcdb 	b.w	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c798:	2300      	movs	r3, #0
 800c79a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c79c:	f000 bcd7 	b.w	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c7a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7a4:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800c7a8:	430b      	orrs	r3, r1
 800c7aa:	f040 80ad 	bne.w	800c908 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800c7ae:	4b51      	ldr	r3, [pc, #324]	; (800c8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c7b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7b2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800c7b6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7be:	d056      	beq.n	800c86e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800c7c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7c6:	f200 8090 	bhi.w	800c8ea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c7ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7cc:	2bc0      	cmp	r3, #192	; 0xc0
 800c7ce:	f000 8088 	beq.w	800c8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800c7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d4:	2bc0      	cmp	r3, #192	; 0xc0
 800c7d6:	f200 8088 	bhi.w	800c8ea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7dc:	2b80      	cmp	r3, #128	; 0x80
 800c7de:	d032      	beq.n	800c846 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e2:	2b80      	cmp	r3, #128	; 0x80
 800c7e4:	f200 8081 	bhi.w	800c8ea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d003      	beq.n	800c7f6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800c7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f0:	2b40      	cmp	r3, #64	; 0x40
 800c7f2:	d014      	beq.n	800c81e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800c7f4:	e079      	b.n	800c8ea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c7f6:	4b3f      	ldr	r3, [pc, #252]	; (800c8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c802:	d108      	bne.n	800c816 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c808:	4618      	mov	r0, r3
 800c80a:	f000 ff67 	bl	800d6dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c810:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c812:	f000 bc9c 	b.w	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c816:	2300      	movs	r3, #0
 800c818:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c81a:	f000 bc98 	b.w	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c81e:	4b35      	ldr	r3, [pc, #212]	; (800c8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c826:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c82a:	d108      	bne.n	800c83e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c82c:	f107 0318 	add.w	r3, r7, #24
 800c830:	4618      	mov	r0, r3
 800c832:	f000 fcab 	bl	800d18c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c836:	69bb      	ldr	r3, [r7, #24]
 800c838:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c83a:	f000 bc88 	b.w	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c83e:	2300      	movs	r3, #0
 800c840:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c842:	f000 bc84 	b.w	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c846:	4b2b      	ldr	r3, [pc, #172]	; (800c8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c84e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c852:	d108      	bne.n	800c866 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c854:	f107 030c 	add.w	r3, r7, #12
 800c858:	4618      	mov	r0, r3
 800c85a:	f000 fdeb 	bl	800d434 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c862:	f000 bc74 	b.w	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c866:	2300      	movs	r3, #0
 800c868:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c86a:	f000 bc70 	b.w	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c86e:	4b21      	ldr	r3, [pc, #132]	; (800c8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c872:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c876:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c878:	4b1e      	ldr	r3, [pc, #120]	; (800c8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	f003 0304 	and.w	r3, r3, #4
 800c880:	2b04      	cmp	r3, #4
 800c882:	d10c      	bne.n	800c89e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800c884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c886:	2b00      	cmp	r3, #0
 800c888:	d109      	bne.n	800c89e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c88a:	4b1a      	ldr	r3, [pc, #104]	; (800c8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	08db      	lsrs	r3, r3, #3
 800c890:	f003 0303 	and.w	r3, r3, #3
 800c894:	4a18      	ldr	r2, [pc, #96]	; (800c8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c896:	fa22 f303 	lsr.w	r3, r2, r3
 800c89a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c89c:	e01f      	b.n	800c8de <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c89e:	4b15      	ldr	r3, [pc, #84]	; (800c8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8aa:	d106      	bne.n	800c8ba <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800c8ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c8b2:	d102      	bne.n	800c8ba <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c8b4:	4b11      	ldr	r3, [pc, #68]	; (800c8fc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c8b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8b8:	e011      	b.n	800c8de <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c8ba:	4b0e      	ldr	r3, [pc, #56]	; (800c8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c8c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c8c6:	d106      	bne.n	800c8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800c8c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8ce:	d102      	bne.n	800c8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c8d0:	4b0b      	ldr	r3, [pc, #44]	; (800c900 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c8d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8d4:	e003      	b.n	800c8de <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c8da:	f000 bc38 	b.w	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c8de:	f000 bc36 	b.w	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c8e2:	4b08      	ldr	r3, [pc, #32]	; (800c904 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c8e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8e6:	f000 bc32 	b.w	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8ee:	f000 bc2e 	b.w	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c8f2:	bf00      	nop
 800c8f4:	58024400 	.word	0x58024400
 800c8f8:	03d09000 	.word	0x03d09000
 800c8fc:	003d0900 	.word	0x003d0900
 800c900:	017d7840 	.word	0x017d7840
 800c904:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c908:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c90c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c910:	430b      	orrs	r3, r1
 800c912:	f040 809c 	bne.w	800ca4e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c916:	4b9e      	ldr	r3, [pc, #632]	; (800cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c91a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c91e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c922:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c926:	d054      	beq.n	800c9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800c928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c92a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c92e:	f200 808b 	bhi.w	800ca48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c934:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c938:	f000 8083 	beq.w	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800c93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c93e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c942:	f200 8081 	bhi.w	800ca48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c948:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c94c:	d02f      	beq.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800c94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c950:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c954:	d878      	bhi.n	800ca48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d004      	beq.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c95c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c95e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c962:	d012      	beq.n	800c98a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c964:	e070      	b.n	800ca48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c966:	4b8a      	ldr	r3, [pc, #552]	; (800cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c96e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c972:	d107      	bne.n	800c984 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c974:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c978:	4618      	mov	r0, r3
 800c97a:	f000 feaf 	bl	800d6dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c97e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c980:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c982:	e3e4      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c984:	2300      	movs	r3, #0
 800c986:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c988:	e3e1      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c98a:	4b81      	ldr	r3, [pc, #516]	; (800cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c992:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c996:	d107      	bne.n	800c9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c998:	f107 0318 	add.w	r3, r7, #24
 800c99c:	4618      	mov	r0, r3
 800c99e:	f000 fbf5 	bl	800d18c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c9a2:	69bb      	ldr	r3, [r7, #24]
 800c9a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9a6:	e3d2      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9ac:	e3cf      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c9ae:	4b78      	ldr	r3, [pc, #480]	; (800cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c9b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9ba:	d107      	bne.n	800c9cc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c9bc:	f107 030c 	add.w	r3, r7, #12
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f000 fd37 	bl	800d434 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9ca:	e3c0      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9d0:	e3bd      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c9d2:	4b6f      	ldr	r3, [pc, #444]	; (800cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c9d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c9d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c9da:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c9dc:	4b6c      	ldr	r3, [pc, #432]	; (800cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	f003 0304 	and.w	r3, r3, #4
 800c9e4:	2b04      	cmp	r3, #4
 800c9e6:	d10c      	bne.n	800ca02 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c9e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d109      	bne.n	800ca02 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c9ee:	4b68      	ldr	r3, [pc, #416]	; (800cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	08db      	lsrs	r3, r3, #3
 800c9f4:	f003 0303 	and.w	r3, r3, #3
 800c9f8:	4a66      	ldr	r2, [pc, #408]	; (800cb94 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c9fa:	fa22 f303 	lsr.w	r3, r2, r3
 800c9fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca00:	e01e      	b.n	800ca40 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ca02:	4b63      	ldr	r3, [pc, #396]	; (800cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca0e:	d106      	bne.n	800ca1e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800ca10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ca16:	d102      	bne.n	800ca1e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ca18:	4b5f      	ldr	r3, [pc, #380]	; (800cb98 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800ca1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca1c:	e010      	b.n	800ca40 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ca1e:	4b5c      	ldr	r3, [pc, #368]	; (800cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca2a:	d106      	bne.n	800ca3a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800ca2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca32:	d102      	bne.n	800ca3a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ca34:	4b59      	ldr	r3, [pc, #356]	; (800cb9c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800ca36:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca38:	e002      	b.n	800ca40 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ca3e:	e386      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ca40:	e385      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ca42:	4b57      	ldr	r3, [pc, #348]	; (800cba0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800ca44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca46:	e382      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ca48:	2300      	movs	r3, #0
 800ca4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca4c:	e37f      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ca4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca52:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800ca56:	430b      	orrs	r3, r1
 800ca58:	f040 80a7 	bne.w	800cbaa <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800ca5c:	4b4c      	ldr	r3, [pc, #304]	; (800cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ca5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca60:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800ca64:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ca66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ca6c:	d055      	beq.n	800cb1a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800ca6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ca74:	f200 8096 	bhi.w	800cba4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ca78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca7a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ca7e:	f000 8084 	beq.w	800cb8a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800ca82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca84:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ca88:	f200 808c 	bhi.w	800cba4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ca8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ca92:	d030      	beq.n	800caf6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800ca94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ca9a:	f200 8083 	bhi.w	800cba4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ca9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d004      	beq.n	800caae <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800caa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caa6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800caaa:	d012      	beq.n	800cad2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800caac:	e07a      	b.n	800cba4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800caae:	4b38      	ldr	r3, [pc, #224]	; (800cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cab6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800caba:	d107      	bne.n	800cacc <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cabc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cac0:	4618      	mov	r0, r3
 800cac2:	f000 fe0b 	bl	800d6dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cac8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800caca:	e340      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cacc:	2300      	movs	r3, #0
 800cace:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cad0:	e33d      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cad2:	4b2f      	ldr	r3, [pc, #188]	; (800cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cada:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cade:	d107      	bne.n	800caf0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cae0:	f107 0318 	add.w	r3, r7, #24
 800cae4:	4618      	mov	r0, r3
 800cae6:	f000 fb51 	bl	800d18c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800caea:	69bb      	ldr	r3, [r7, #24]
 800caec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800caee:	e32e      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800caf0:	2300      	movs	r3, #0
 800caf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800caf4:	e32b      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800caf6:	4b26      	ldr	r3, [pc, #152]	; (800cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cafe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb02:	d107      	bne.n	800cb14 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb04:	f107 030c 	add.w	r3, r7, #12
 800cb08:	4618      	mov	r0, r3
 800cb0a:	f000 fc93 	bl	800d434 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb12:	e31c      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb14:	2300      	movs	r3, #0
 800cb16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb18:	e319      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cb1a:	4b1d      	ldr	r3, [pc, #116]	; (800cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cb1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb1e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cb22:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cb24:	4b1a      	ldr	r3, [pc, #104]	; (800cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	f003 0304 	and.w	r3, r3, #4
 800cb2c:	2b04      	cmp	r3, #4
 800cb2e:	d10c      	bne.n	800cb4a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800cb30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d109      	bne.n	800cb4a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb36:	4b16      	ldr	r3, [pc, #88]	; (800cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	08db      	lsrs	r3, r3, #3
 800cb3c:	f003 0303 	and.w	r3, r3, #3
 800cb40:	4a14      	ldr	r2, [pc, #80]	; (800cb94 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800cb42:	fa22 f303 	lsr.w	r3, r2, r3
 800cb46:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb48:	e01e      	b.n	800cb88 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cb4a:	4b11      	ldr	r3, [pc, #68]	; (800cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb56:	d106      	bne.n	800cb66 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800cb58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cb5e:	d102      	bne.n	800cb66 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cb60:	4b0d      	ldr	r3, [pc, #52]	; (800cb98 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800cb62:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb64:	e010      	b.n	800cb88 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cb66:	4b0a      	ldr	r3, [pc, #40]	; (800cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb72:	d106      	bne.n	800cb82 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800cb74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb7a:	d102      	bne.n	800cb82 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cb7c:	4b07      	ldr	r3, [pc, #28]	; (800cb9c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800cb7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb80:	e002      	b.n	800cb88 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cb82:	2300      	movs	r3, #0
 800cb84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cb86:	e2e2      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cb88:	e2e1      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cb8a:	4b05      	ldr	r3, [pc, #20]	; (800cba0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800cb8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb8e:	e2de      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cb90:	58024400 	.word	0x58024400
 800cb94:	03d09000 	.word	0x03d09000
 800cb98:	003d0900 	.word	0x003d0900
 800cb9c:	017d7840 	.word	0x017d7840
 800cba0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800cba4:	2300      	movs	r3, #0
 800cba6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cba8:	e2d1      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800cbaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cbae:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800cbb2:	430b      	orrs	r3, r1
 800cbb4:	f040 809c 	bne.w	800ccf0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800cbb8:	4b93      	ldr	r3, [pc, #588]	; (800ce08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cbba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbbc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800cbc0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cbc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cbc8:	d054      	beq.n	800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800cbca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cbd0:	f200 808b 	bhi.w	800ccea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800cbd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbd6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cbda:	f000 8083 	beq.w	800cce4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800cbde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbe0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cbe4:	f200 8081 	bhi.w	800ccea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800cbe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cbee:	d02f      	beq.n	800cc50 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800cbf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cbf6:	d878      	bhi.n	800ccea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800cbf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d004      	beq.n	800cc08 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800cbfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc04:	d012      	beq.n	800cc2c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800cc06:	e070      	b.n	800ccea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cc08:	4b7f      	ldr	r3, [pc, #508]	; (800ce08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cc14:	d107      	bne.n	800cc26 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cc16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f000 fd5e 	bl	800d6dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cc20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc24:	e293      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc26:	2300      	movs	r3, #0
 800cc28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc2a:	e290      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cc2c:	4b76      	ldr	r3, [pc, #472]	; (800ce08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cc38:	d107      	bne.n	800cc4a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc3a:	f107 0318 	add.w	r3, r7, #24
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f000 faa4 	bl	800d18c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cc44:	69bb      	ldr	r3, [r7, #24]
 800cc46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc48:	e281      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc4e:	e27e      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cc50:	4b6d      	ldr	r3, [pc, #436]	; (800ce08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cc58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc5c:	d107      	bne.n	800cc6e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc5e:	f107 030c 	add.w	r3, r7, #12
 800cc62:	4618      	mov	r0, r3
 800cc64:	f000 fbe6 	bl	800d434 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc6c:	e26f      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc72:	e26c      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cc74:	4b64      	ldr	r3, [pc, #400]	; (800ce08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cc7c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cc7e:	4b62      	ldr	r3, [pc, #392]	; (800ce08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	f003 0304 	and.w	r3, r3, #4
 800cc86:	2b04      	cmp	r3, #4
 800cc88:	d10c      	bne.n	800cca4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800cc8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d109      	bne.n	800cca4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc90:	4b5d      	ldr	r3, [pc, #372]	; (800ce08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	08db      	lsrs	r3, r3, #3
 800cc96:	f003 0303 	and.w	r3, r3, #3
 800cc9a:	4a5c      	ldr	r2, [pc, #368]	; (800ce0c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800cc9c:	fa22 f303 	lsr.w	r3, r2, r3
 800cca0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cca2:	e01e      	b.n	800cce2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cca4:	4b58      	ldr	r3, [pc, #352]	; (800ce08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ccac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ccb0:	d106      	bne.n	800ccc0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800ccb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ccb8:	d102      	bne.n	800ccc0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ccba:	4b55      	ldr	r3, [pc, #340]	; (800ce10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ccbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ccbe:	e010      	b.n	800cce2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ccc0:	4b51      	ldr	r3, [pc, #324]	; (800ce08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ccc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cccc:	d106      	bne.n	800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800ccce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ccd4:	d102      	bne.n	800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ccd6:	4b4f      	ldr	r3, [pc, #316]	; (800ce14 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ccd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ccda:	e002      	b.n	800cce2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ccdc:	2300      	movs	r3, #0
 800ccde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cce0:	e235      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cce2:	e234      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cce4:	4b4c      	ldr	r3, [pc, #304]	; (800ce18 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800cce6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cce8:	e231      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ccea:	2300      	movs	r3, #0
 800ccec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccee:	e22e      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800ccf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ccf4:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800ccf8:	430b      	orrs	r3, r1
 800ccfa:	f040 808f 	bne.w	800ce1c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800ccfe:	4b42      	ldr	r3, [pc, #264]	; (800ce08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cd00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd02:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800cd06:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800cd08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cd0e:	d06b      	beq.n	800cde8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800cd10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cd16:	d874      	bhi.n	800ce02 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cd18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cd1e:	d056      	beq.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800cd20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cd26:	d86c      	bhi.n	800ce02 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cd28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd2a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cd2e:	d03b      	beq.n	800cda8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800cd30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd32:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cd36:	d864      	bhi.n	800ce02 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cd38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd3e:	d021      	beq.n	800cd84 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800cd40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd46:	d85c      	bhi.n	800ce02 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cd48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d004      	beq.n	800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800cd4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd54:	d004      	beq.n	800cd60 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800cd56:	e054      	b.n	800ce02 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800cd58:	f7fe fa4c 	bl	800b1f4 <HAL_RCC_GetPCLK1Freq>
 800cd5c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cd5e:	e1f6      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cd60:	4b29      	ldr	r3, [pc, #164]	; (800ce08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cd6c:	d107      	bne.n	800cd7e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd6e:	f107 0318 	add.w	r3, r7, #24
 800cd72:	4618      	mov	r0, r3
 800cd74:	f000 fa0a 	bl	800d18c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cd78:	69fb      	ldr	r3, [r7, #28]
 800cd7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd7c:	e1e7      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd7e:	2300      	movs	r3, #0
 800cd80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd82:	e1e4      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cd84:	4b20      	ldr	r3, [pc, #128]	; (800ce08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cd8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd90:	d107      	bne.n	800cda2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd92:	f107 030c 	add.w	r3, r7, #12
 800cd96:	4618      	mov	r0, r3
 800cd98:	f000 fb4c 	bl	800d434 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cd9c:	693b      	ldr	r3, [r7, #16]
 800cd9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cda0:	e1d5      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cda2:	2300      	movs	r3, #0
 800cda4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cda6:	e1d2      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cda8:	4b17      	ldr	r3, [pc, #92]	; (800ce08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	f003 0304 	and.w	r3, r3, #4
 800cdb0:	2b04      	cmp	r3, #4
 800cdb2:	d109      	bne.n	800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cdb4:	4b14      	ldr	r3, [pc, #80]	; (800ce08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	08db      	lsrs	r3, r3, #3
 800cdba:	f003 0303 	and.w	r3, r3, #3
 800cdbe:	4a13      	ldr	r2, [pc, #76]	; (800ce0c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800cdc0:	fa22 f303 	lsr.w	r3, r2, r3
 800cdc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdc6:	e1c2      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cdc8:	2300      	movs	r3, #0
 800cdca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdcc:	e1bf      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cdce:	4b0e      	ldr	r3, [pc, #56]	; (800ce08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cdd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cdda:	d102      	bne.n	800cde2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800cddc:	4b0c      	ldr	r3, [pc, #48]	; (800ce10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cdde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cde0:	e1b5      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cde2:	2300      	movs	r3, #0
 800cde4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cde6:	e1b2      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cde8:	4b07      	ldr	r3, [pc, #28]	; (800ce08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cdf0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cdf4:	d102      	bne.n	800cdfc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800cdf6:	4b07      	ldr	r3, [pc, #28]	; (800ce14 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800cdf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdfa:	e1a8      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce00:	e1a5      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ce02:	2300      	movs	r3, #0
 800ce04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce06:	e1a2      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ce08:	58024400 	.word	0x58024400
 800ce0c:	03d09000 	.word	0x03d09000
 800ce10:	003d0900 	.word	0x003d0900
 800ce14:	017d7840 	.word	0x017d7840
 800ce18:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ce1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce20:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800ce24:	430b      	orrs	r3, r1
 800ce26:	d173      	bne.n	800cf10 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ce28:	4b9c      	ldr	r3, [pc, #624]	; (800d09c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ce30:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ce32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ce38:	d02f      	beq.n	800ce9a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800ce3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ce40:	d863      	bhi.n	800cf0a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800ce42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d004      	beq.n	800ce52 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800ce48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce4e:	d012      	beq.n	800ce76 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800ce50:	e05b      	b.n	800cf0a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ce52:	4b92      	ldr	r3, [pc, #584]	; (800d09c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ce5e:	d107      	bne.n	800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce60:	f107 0318 	add.w	r3, r7, #24
 800ce64:	4618      	mov	r0, r3
 800ce66:	f000 f991 	bl	800d18c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ce6a:	69bb      	ldr	r3, [r7, #24]
 800ce6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce6e:	e16e      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce70:	2300      	movs	r3, #0
 800ce72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce74:	e16b      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ce76:	4b89      	ldr	r3, [pc, #548]	; (800d09c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce82:	d107      	bne.n	800ce94 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce84:	f107 030c 	add.w	r3, r7, #12
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f000 fad3 	bl	800d434 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ce8e:	697b      	ldr	r3, [r7, #20]
 800ce90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce92:	e15c      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce94:	2300      	movs	r3, #0
 800ce96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce98:	e159      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ce9a:	4b80      	ldr	r3, [pc, #512]	; (800d09c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ce9e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cea2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cea4:	4b7d      	ldr	r3, [pc, #500]	; (800d09c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	f003 0304 	and.w	r3, r3, #4
 800ceac:	2b04      	cmp	r3, #4
 800ceae:	d10c      	bne.n	800ceca <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800ceb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d109      	bne.n	800ceca <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ceb6:	4b79      	ldr	r3, [pc, #484]	; (800d09c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	08db      	lsrs	r3, r3, #3
 800cebc:	f003 0303 	and.w	r3, r3, #3
 800cec0:	4a77      	ldr	r2, [pc, #476]	; (800d0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800cec2:	fa22 f303 	lsr.w	r3, r2, r3
 800cec6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cec8:	e01e      	b.n	800cf08 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ceca:	4b74      	ldr	r3, [pc, #464]	; (800d09c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ced2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ced6:	d106      	bne.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800ced8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ceda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cede:	d102      	bne.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cee0:	4b70      	ldr	r3, [pc, #448]	; (800d0a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800cee2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cee4:	e010      	b.n	800cf08 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cee6:	4b6d      	ldr	r3, [pc, #436]	; (800d09c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ceee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cef2:	d106      	bne.n	800cf02 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800cef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cef6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cefa:	d102      	bne.n	800cf02 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cefc:	4b6a      	ldr	r3, [pc, #424]	; (800d0a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800cefe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf00:	e002      	b.n	800cf08 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cf02:	2300      	movs	r3, #0
 800cf04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cf06:	e122      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cf08:	e121      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf0e:	e11e      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800cf10:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf14:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800cf18:	430b      	orrs	r3, r1
 800cf1a:	d133      	bne.n	800cf84 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800cf1c:	4b5f      	ldr	r3, [pc, #380]	; (800d09c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cf1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cf24:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cf26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d004      	beq.n	800cf36 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800cf2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf32:	d012      	beq.n	800cf5a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800cf34:	e023      	b.n	800cf7e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cf36:	4b59      	ldr	r3, [pc, #356]	; (800d09c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cf42:	d107      	bne.n	800cf54 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cf44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cf48:	4618      	mov	r0, r3
 800cf4a:	f000 fbc7 	bl	800d6dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cf4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf50:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf52:	e0fc      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cf54:	2300      	movs	r3, #0
 800cf56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf58:	e0f9      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cf5a:	4b50      	ldr	r3, [pc, #320]	; (800d09c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cf66:	d107      	bne.n	800cf78 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf68:	f107 0318 	add.w	r3, r7, #24
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	f000 f90d 	bl	800d18c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800cf72:	6a3b      	ldr	r3, [r7, #32]
 800cf74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf76:	e0ea      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cf78:	2300      	movs	r3, #0
 800cf7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf7c:	e0e7      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cf7e:	2300      	movs	r3, #0
 800cf80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf82:	e0e4      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800cf84:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf88:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800cf8c:	430b      	orrs	r3, r1
 800cf8e:	f040 808d 	bne.w	800d0ac <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800cf92:	4b42      	ldr	r3, [pc, #264]	; (800d09c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cf94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf96:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800cf9a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cf9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cfa2:	d06b      	beq.n	800d07c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800cfa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cfaa:	d874      	bhi.n	800d096 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cfac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cfb2:	d056      	beq.n	800d062 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800cfb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cfba:	d86c      	bhi.n	800d096 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cfbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfbe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cfc2:	d03b      	beq.n	800d03c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800cfc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfc6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cfca:	d864      	bhi.n	800d096 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cfcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cfd2:	d021      	beq.n	800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800cfd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cfda:	d85c      	bhi.n	800d096 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cfdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d004      	beq.n	800cfec <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800cfe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfe4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cfe8:	d004      	beq.n	800cff4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800cfea:	e054      	b.n	800d096 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800cfec:	f000 f8b8 	bl	800d160 <HAL_RCCEx_GetD3PCLK1Freq>
 800cff0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cff2:	e0ac      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cff4:	4b29      	ldr	r3, [pc, #164]	; (800d09c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cffc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d000:	d107      	bne.n	800d012 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d002:	f107 0318 	add.w	r3, r7, #24
 800d006:	4618      	mov	r0, r3
 800d008:	f000 f8c0 	bl	800d18c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d00c:	69fb      	ldr	r3, [r7, #28]
 800d00e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d010:	e09d      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d012:	2300      	movs	r3, #0
 800d014:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d016:	e09a      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d018:	4b20      	ldr	r3, [pc, #128]	; (800d09c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d020:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d024:	d107      	bne.n	800d036 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d026:	f107 030c 	add.w	r3, r7, #12
 800d02a:	4618      	mov	r0, r3
 800d02c:	f000 fa02 	bl	800d434 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d030:	693b      	ldr	r3, [r7, #16]
 800d032:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d034:	e08b      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d036:	2300      	movs	r3, #0
 800d038:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d03a:	e088      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d03c:	4b17      	ldr	r3, [pc, #92]	; (800d09c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	f003 0304 	and.w	r3, r3, #4
 800d044:	2b04      	cmp	r3, #4
 800d046:	d109      	bne.n	800d05c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d048:	4b14      	ldr	r3, [pc, #80]	; (800d09c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	08db      	lsrs	r3, r3, #3
 800d04e:	f003 0303 	and.w	r3, r3, #3
 800d052:	4a13      	ldr	r2, [pc, #76]	; (800d0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800d054:	fa22 f303 	lsr.w	r3, r2, r3
 800d058:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d05a:	e078      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d05c:	2300      	movs	r3, #0
 800d05e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d060:	e075      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d062:	4b0e      	ldr	r3, [pc, #56]	; (800d09c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d06a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d06e:	d102      	bne.n	800d076 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800d070:	4b0c      	ldr	r3, [pc, #48]	; (800d0a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800d072:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d074:	e06b      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d076:	2300      	movs	r3, #0
 800d078:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d07a:	e068      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d07c:	4b07      	ldr	r3, [pc, #28]	; (800d09c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d084:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d088:	d102      	bne.n	800d090 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800d08a:	4b07      	ldr	r3, [pc, #28]	; (800d0a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800d08c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d08e:	e05e      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d090:	2300      	movs	r3, #0
 800d092:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d094:	e05b      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800d096:	2300      	movs	r3, #0
 800d098:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d09a:	e058      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800d09c:	58024400 	.word	0x58024400
 800d0a0:	03d09000 	.word	0x03d09000
 800d0a4:	003d0900 	.word	0x003d0900
 800d0a8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800d0ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d0b0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800d0b4:	430b      	orrs	r3, r1
 800d0b6:	d148      	bne.n	800d14a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800d0b8:	4b27      	ldr	r3, [pc, #156]	; (800d158 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d0ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d0c0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d0c8:	d02a      	beq.n	800d120 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800d0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d0d0:	d838      	bhi.n	800d144 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800d0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d004      	beq.n	800d0e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800d0d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d0de:	d00d      	beq.n	800d0fc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800d0e0:	e030      	b.n	800d144 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d0e2:	4b1d      	ldr	r3, [pc, #116]	; (800d158 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d0ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d0ee:	d102      	bne.n	800d0f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800d0f0:	4b1a      	ldr	r3, [pc, #104]	; (800d15c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800d0f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d0f4:	e02b      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0fa:	e028      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d0fc:	4b16      	ldr	r3, [pc, #88]	; (800d158 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d104:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d108:	d107      	bne.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d10a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d10e:	4618      	mov	r0, r3
 800d110:	f000 fae4 	bl	800d6dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d116:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d118:	e019      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d11a:	2300      	movs	r3, #0
 800d11c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d11e:	e016      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d120:	4b0d      	ldr	r3, [pc, #52]	; (800d158 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d128:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d12c:	d107      	bne.n	800d13e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d12e:	f107 0318 	add.w	r3, r7, #24
 800d132:	4618      	mov	r0, r3
 800d134:	f000 f82a 	bl	800d18c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d138:	69fb      	ldr	r3, [r7, #28]
 800d13a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d13c:	e007      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d13e:	2300      	movs	r3, #0
 800d140:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d142:	e004      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800d144:	2300      	movs	r3, #0
 800d146:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d148:	e001      	b.n	800d14e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800d14a:	2300      	movs	r3, #0
 800d14c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800d14e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d150:	4618      	mov	r0, r3
 800d152:	3740      	adds	r7, #64	; 0x40
 800d154:	46bd      	mov	sp, r7
 800d156:	bd80      	pop	{r7, pc}
 800d158:	58024400 	.word	0x58024400
 800d15c:	017d7840 	.word	0x017d7840

0800d160 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d164:	f7fe f816 	bl	800b194 <HAL_RCC_GetHCLKFreq>
 800d168:	4602      	mov	r2, r0
 800d16a:	4b06      	ldr	r3, [pc, #24]	; (800d184 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d16c:	6a1b      	ldr	r3, [r3, #32]
 800d16e:	091b      	lsrs	r3, r3, #4
 800d170:	f003 0307 	and.w	r3, r3, #7
 800d174:	4904      	ldr	r1, [pc, #16]	; (800d188 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d176:	5ccb      	ldrb	r3, [r1, r3]
 800d178:	f003 031f 	and.w	r3, r3, #31
 800d17c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d180:	4618      	mov	r0, r3
 800d182:	bd80      	pop	{r7, pc}
 800d184:	58024400 	.word	0x58024400
 800d188:	08014358 	.word	0x08014358

0800d18c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d18c:	b480      	push	{r7}
 800d18e:	b089      	sub	sp, #36	; 0x24
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d194:	4ba1      	ldr	r3, [pc, #644]	; (800d41c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d198:	f003 0303 	and.w	r3, r3, #3
 800d19c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d19e:	4b9f      	ldr	r3, [pc, #636]	; (800d41c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d1a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1a2:	0b1b      	lsrs	r3, r3, #12
 800d1a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d1a8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d1aa:	4b9c      	ldr	r3, [pc, #624]	; (800d41c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d1ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1ae:	091b      	lsrs	r3, r3, #4
 800d1b0:	f003 0301 	and.w	r3, r3, #1
 800d1b4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d1b6:	4b99      	ldr	r3, [pc, #612]	; (800d41c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d1b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1ba:	08db      	lsrs	r3, r3, #3
 800d1bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d1c0:	693a      	ldr	r2, [r7, #16]
 800d1c2:	fb02 f303 	mul.w	r3, r2, r3
 800d1c6:	ee07 3a90 	vmov	s15, r3
 800d1ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d1d2:	697b      	ldr	r3, [r7, #20]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	f000 8111 	beq.w	800d3fc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d1da:	69bb      	ldr	r3, [r7, #24]
 800d1dc:	2b02      	cmp	r3, #2
 800d1de:	f000 8083 	beq.w	800d2e8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d1e2:	69bb      	ldr	r3, [r7, #24]
 800d1e4:	2b02      	cmp	r3, #2
 800d1e6:	f200 80a1 	bhi.w	800d32c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d1ea:	69bb      	ldr	r3, [r7, #24]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d003      	beq.n	800d1f8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d1f0:	69bb      	ldr	r3, [r7, #24]
 800d1f2:	2b01      	cmp	r3, #1
 800d1f4:	d056      	beq.n	800d2a4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d1f6:	e099      	b.n	800d32c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d1f8:	4b88      	ldr	r3, [pc, #544]	; (800d41c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	f003 0320 	and.w	r3, r3, #32
 800d200:	2b00      	cmp	r3, #0
 800d202:	d02d      	beq.n	800d260 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d204:	4b85      	ldr	r3, [pc, #532]	; (800d41c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	08db      	lsrs	r3, r3, #3
 800d20a:	f003 0303 	and.w	r3, r3, #3
 800d20e:	4a84      	ldr	r2, [pc, #528]	; (800d420 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d210:	fa22 f303 	lsr.w	r3, r2, r3
 800d214:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d216:	68bb      	ldr	r3, [r7, #8]
 800d218:	ee07 3a90 	vmov	s15, r3
 800d21c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d220:	697b      	ldr	r3, [r7, #20]
 800d222:	ee07 3a90 	vmov	s15, r3
 800d226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d22a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d22e:	4b7b      	ldr	r3, [pc, #492]	; (800d41c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d236:	ee07 3a90 	vmov	s15, r3
 800d23a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d23e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d242:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d424 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d24a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d24e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d25a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d25e:	e087      	b.n	800d370 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d260:	697b      	ldr	r3, [r7, #20]
 800d262:	ee07 3a90 	vmov	s15, r3
 800d266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d26a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d428 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d26e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d272:	4b6a      	ldr	r3, [pc, #424]	; (800d41c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d27a:	ee07 3a90 	vmov	s15, r3
 800d27e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d282:	ed97 6a03 	vldr	s12, [r7, #12]
 800d286:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d424 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d28a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d28e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d292:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d29a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d29e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d2a2:	e065      	b.n	800d370 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d2a4:	697b      	ldr	r3, [r7, #20]
 800d2a6:	ee07 3a90 	vmov	s15, r3
 800d2aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2ae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d42c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d2b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d2b6:	4b59      	ldr	r3, [pc, #356]	; (800d41c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d2b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2be:	ee07 3a90 	vmov	s15, r3
 800d2c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d2ca:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d424 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d2ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d2d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d2d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d2da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d2e6:	e043      	b.n	800d370 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d2e8:	697b      	ldr	r3, [r7, #20]
 800d2ea:	ee07 3a90 	vmov	s15, r3
 800d2ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2f2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d430 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d2f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d2fa:	4b48      	ldr	r3, [pc, #288]	; (800d41c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d2fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d302:	ee07 3a90 	vmov	s15, r3
 800d306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d30a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d30e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d424 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d31a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d31e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d322:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d326:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d32a:	e021      	b.n	800d370 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d32c:	697b      	ldr	r3, [r7, #20]
 800d32e:	ee07 3a90 	vmov	s15, r3
 800d332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d336:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d42c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d33a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d33e:	4b37      	ldr	r3, [pc, #220]	; (800d41c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d346:	ee07 3a90 	vmov	s15, r3
 800d34a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d34e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d352:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d424 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d35a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d35e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d36a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d36e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d370:	4b2a      	ldr	r3, [pc, #168]	; (800d41c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d374:	0a5b      	lsrs	r3, r3, #9
 800d376:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d37a:	ee07 3a90 	vmov	s15, r3
 800d37e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d382:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d386:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d38a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d38e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d392:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d396:	ee17 2a90 	vmov	r2, s15
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d39e:	4b1f      	ldr	r3, [pc, #124]	; (800d41c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d3a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3a2:	0c1b      	lsrs	r3, r3, #16
 800d3a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3a8:	ee07 3a90 	vmov	s15, r3
 800d3ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d3b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d3b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800d3bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d3c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d3c4:	ee17 2a90 	vmov	r2, s15
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d3cc:	4b13      	ldr	r3, [pc, #76]	; (800d41c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d3ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3d0:	0e1b      	lsrs	r3, r3, #24
 800d3d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3d6:	ee07 3a90 	vmov	s15, r3
 800d3da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d3e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d3e6:	edd7 6a07 	vldr	s13, [r7, #28]
 800d3ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d3ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d3f2:	ee17 2a90 	vmov	r2, s15
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d3fa:	e008      	b.n	800d40e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	2200      	movs	r2, #0
 800d400:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2200      	movs	r2, #0
 800d406:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2200      	movs	r2, #0
 800d40c:	609a      	str	r2, [r3, #8]
}
 800d40e:	bf00      	nop
 800d410:	3724      	adds	r7, #36	; 0x24
 800d412:	46bd      	mov	sp, r7
 800d414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d418:	4770      	bx	lr
 800d41a:	bf00      	nop
 800d41c:	58024400 	.word	0x58024400
 800d420:	03d09000 	.word	0x03d09000
 800d424:	46000000 	.word	0x46000000
 800d428:	4c742400 	.word	0x4c742400
 800d42c:	4a742400 	.word	0x4a742400
 800d430:	4bbebc20 	.word	0x4bbebc20

0800d434 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d434:	b480      	push	{r7}
 800d436:	b089      	sub	sp, #36	; 0x24
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d43c:	4ba1      	ldr	r3, [pc, #644]	; (800d6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d43e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d440:	f003 0303 	and.w	r3, r3, #3
 800d444:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d446:	4b9f      	ldr	r3, [pc, #636]	; (800d6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d44a:	0d1b      	lsrs	r3, r3, #20
 800d44c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d450:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d452:	4b9c      	ldr	r3, [pc, #624]	; (800d6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d456:	0a1b      	lsrs	r3, r3, #8
 800d458:	f003 0301 	and.w	r3, r3, #1
 800d45c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d45e:	4b99      	ldr	r3, [pc, #612]	; (800d6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d462:	08db      	lsrs	r3, r3, #3
 800d464:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d468:	693a      	ldr	r2, [r7, #16]
 800d46a:	fb02 f303 	mul.w	r3, r2, r3
 800d46e:	ee07 3a90 	vmov	s15, r3
 800d472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d476:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d47a:	697b      	ldr	r3, [r7, #20]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	f000 8111 	beq.w	800d6a4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d482:	69bb      	ldr	r3, [r7, #24]
 800d484:	2b02      	cmp	r3, #2
 800d486:	f000 8083 	beq.w	800d590 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d48a:	69bb      	ldr	r3, [r7, #24]
 800d48c:	2b02      	cmp	r3, #2
 800d48e:	f200 80a1 	bhi.w	800d5d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d492:	69bb      	ldr	r3, [r7, #24]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d003      	beq.n	800d4a0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d498:	69bb      	ldr	r3, [r7, #24]
 800d49a:	2b01      	cmp	r3, #1
 800d49c:	d056      	beq.n	800d54c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d49e:	e099      	b.n	800d5d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d4a0:	4b88      	ldr	r3, [pc, #544]	; (800d6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	f003 0320 	and.w	r3, r3, #32
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d02d      	beq.n	800d508 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d4ac:	4b85      	ldr	r3, [pc, #532]	; (800d6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	08db      	lsrs	r3, r3, #3
 800d4b2:	f003 0303 	and.w	r3, r3, #3
 800d4b6:	4a84      	ldr	r2, [pc, #528]	; (800d6c8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d4b8:	fa22 f303 	lsr.w	r3, r2, r3
 800d4bc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d4be:	68bb      	ldr	r3, [r7, #8]
 800d4c0:	ee07 3a90 	vmov	s15, r3
 800d4c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4c8:	697b      	ldr	r3, [r7, #20]
 800d4ca:	ee07 3a90 	vmov	s15, r3
 800d4ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4d6:	4b7b      	ldr	r3, [pc, #492]	; (800d6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d4d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4de:	ee07 3a90 	vmov	s15, r3
 800d4e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d4ea:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d6cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d4ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d4f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d4f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d4fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d502:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d506:	e087      	b.n	800d618 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d508:	697b      	ldr	r3, [r7, #20]
 800d50a:	ee07 3a90 	vmov	s15, r3
 800d50e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d512:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d6d0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d51a:	4b6a      	ldr	r3, [pc, #424]	; (800d6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d51c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d51e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d522:	ee07 3a90 	vmov	s15, r3
 800d526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d52a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d52e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d6cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d53a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d53e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d542:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d546:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d54a:	e065      	b.n	800d618 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d54c:	697b      	ldr	r3, [r7, #20]
 800d54e:	ee07 3a90 	vmov	s15, r3
 800d552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d556:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d6d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d55a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d55e:	4b59      	ldr	r3, [pc, #356]	; (800d6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d566:	ee07 3a90 	vmov	s15, r3
 800d56a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d56e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d572:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d6cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d576:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d57a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d57e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d582:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d58a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d58e:	e043      	b.n	800d618 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d590:	697b      	ldr	r3, [r7, #20]
 800d592:	ee07 3a90 	vmov	s15, r3
 800d596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d59a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d6d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d59e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5a2:	4b48      	ldr	r3, [pc, #288]	; (800d6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d5a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5aa:	ee07 3a90 	vmov	s15, r3
 800d5ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d5b6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d6cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d5ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d5c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d5d2:	e021      	b.n	800d618 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d5d4:	697b      	ldr	r3, [r7, #20]
 800d5d6:	ee07 3a90 	vmov	s15, r3
 800d5da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5de:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d6d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d5e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5e6:	4b37      	ldr	r3, [pc, #220]	; (800d6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d5e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5ee:	ee07 3a90 	vmov	s15, r3
 800d5f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d5fa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d6cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d5fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d606:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d60a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d60e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d612:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d616:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d618:	4b2a      	ldr	r3, [pc, #168]	; (800d6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d61a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d61c:	0a5b      	lsrs	r3, r3, #9
 800d61e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d622:	ee07 3a90 	vmov	s15, r3
 800d626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d62a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d62e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d632:	edd7 6a07 	vldr	s13, [r7, #28]
 800d636:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d63a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d63e:	ee17 2a90 	vmov	r2, s15
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d646:	4b1f      	ldr	r3, [pc, #124]	; (800d6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d64a:	0c1b      	lsrs	r3, r3, #16
 800d64c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d650:	ee07 3a90 	vmov	s15, r3
 800d654:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d658:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d65c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d660:	edd7 6a07 	vldr	s13, [r7, #28]
 800d664:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d668:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d66c:	ee17 2a90 	vmov	r2, s15
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d674:	4b13      	ldr	r3, [pc, #76]	; (800d6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d678:	0e1b      	lsrs	r3, r3, #24
 800d67a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d67e:	ee07 3a90 	vmov	s15, r3
 800d682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d686:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d68a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d68e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d692:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d696:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d69a:	ee17 2a90 	vmov	r2, s15
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d6a2:	e008      	b.n	800d6b6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	609a      	str	r2, [r3, #8]
}
 800d6b6:	bf00      	nop
 800d6b8:	3724      	adds	r7, #36	; 0x24
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c0:	4770      	bx	lr
 800d6c2:	bf00      	nop
 800d6c4:	58024400 	.word	0x58024400
 800d6c8:	03d09000 	.word	0x03d09000
 800d6cc:	46000000 	.word	0x46000000
 800d6d0:	4c742400 	.word	0x4c742400
 800d6d4:	4a742400 	.word	0x4a742400
 800d6d8:	4bbebc20 	.word	0x4bbebc20

0800d6dc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d6dc:	b480      	push	{r7}
 800d6de:	b089      	sub	sp, #36	; 0x24
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d6e4:	4ba0      	ldr	r3, [pc, #640]	; (800d968 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d6e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6e8:	f003 0303 	and.w	r3, r3, #3
 800d6ec:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d6ee:	4b9e      	ldr	r3, [pc, #632]	; (800d968 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d6f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6f2:	091b      	lsrs	r3, r3, #4
 800d6f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d6f8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d6fa:	4b9b      	ldr	r3, [pc, #620]	; (800d968 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d6fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6fe:	f003 0301 	and.w	r3, r3, #1
 800d702:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d704:	4b98      	ldr	r3, [pc, #608]	; (800d968 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d708:	08db      	lsrs	r3, r3, #3
 800d70a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d70e:	693a      	ldr	r2, [r7, #16]
 800d710:	fb02 f303 	mul.w	r3, r2, r3
 800d714:	ee07 3a90 	vmov	s15, r3
 800d718:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d71c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d720:	697b      	ldr	r3, [r7, #20]
 800d722:	2b00      	cmp	r3, #0
 800d724:	f000 8111 	beq.w	800d94a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d728:	69bb      	ldr	r3, [r7, #24]
 800d72a:	2b02      	cmp	r3, #2
 800d72c:	f000 8083 	beq.w	800d836 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d730:	69bb      	ldr	r3, [r7, #24]
 800d732:	2b02      	cmp	r3, #2
 800d734:	f200 80a1 	bhi.w	800d87a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d738:	69bb      	ldr	r3, [r7, #24]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d003      	beq.n	800d746 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d73e:	69bb      	ldr	r3, [r7, #24]
 800d740:	2b01      	cmp	r3, #1
 800d742:	d056      	beq.n	800d7f2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d744:	e099      	b.n	800d87a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d746:	4b88      	ldr	r3, [pc, #544]	; (800d968 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	f003 0320 	and.w	r3, r3, #32
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d02d      	beq.n	800d7ae <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d752:	4b85      	ldr	r3, [pc, #532]	; (800d968 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	08db      	lsrs	r3, r3, #3
 800d758:	f003 0303 	and.w	r3, r3, #3
 800d75c:	4a83      	ldr	r2, [pc, #524]	; (800d96c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d75e:	fa22 f303 	lsr.w	r3, r2, r3
 800d762:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d764:	68bb      	ldr	r3, [r7, #8]
 800d766:	ee07 3a90 	vmov	s15, r3
 800d76a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d76e:	697b      	ldr	r3, [r7, #20]
 800d770:	ee07 3a90 	vmov	s15, r3
 800d774:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d778:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d77c:	4b7a      	ldr	r3, [pc, #488]	; (800d968 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d77e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d784:	ee07 3a90 	vmov	s15, r3
 800d788:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d78c:	ed97 6a03 	vldr	s12, [r7, #12]
 800d790:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d970 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d794:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d798:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d79c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d7a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7a8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d7ac:	e087      	b.n	800d8be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d7ae:	697b      	ldr	r3, [r7, #20]
 800d7b0:	ee07 3a90 	vmov	s15, r3
 800d7b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7b8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d974 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d7bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d7c0:	4b69      	ldr	r3, [pc, #420]	; (800d968 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d7c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7c8:	ee07 3a90 	vmov	s15, r3
 800d7cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d7d0:	ed97 6a03 	vldr	s12, [r7, #12]
 800d7d4:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d970 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d7d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d7dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d7e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d7e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d7f0:	e065      	b.n	800d8be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d7f2:	697b      	ldr	r3, [r7, #20]
 800d7f4:	ee07 3a90 	vmov	s15, r3
 800d7f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7fc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d978 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d800:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d804:	4b58      	ldr	r3, [pc, #352]	; (800d968 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d808:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d80c:	ee07 3a90 	vmov	s15, r3
 800d810:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d814:	ed97 6a03 	vldr	s12, [r7, #12]
 800d818:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d970 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d81c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d820:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d824:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d828:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d82c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d830:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d834:	e043      	b.n	800d8be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d836:	697b      	ldr	r3, [r7, #20]
 800d838:	ee07 3a90 	vmov	s15, r3
 800d83c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d840:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d97c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d844:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d848:	4b47      	ldr	r3, [pc, #284]	; (800d968 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d84a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d84c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d850:	ee07 3a90 	vmov	s15, r3
 800d854:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d858:	ed97 6a03 	vldr	s12, [r7, #12]
 800d85c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d970 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d860:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d864:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d868:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d86c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d870:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d874:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d878:	e021      	b.n	800d8be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d87a:	697b      	ldr	r3, [r7, #20]
 800d87c:	ee07 3a90 	vmov	s15, r3
 800d880:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d884:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d974 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d888:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d88c:	4b36      	ldr	r3, [pc, #216]	; (800d968 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d88e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d890:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d894:	ee07 3a90 	vmov	s15, r3
 800d898:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d89c:	ed97 6a03 	vldr	s12, [r7, #12]
 800d8a0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d970 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d8a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d8a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d8ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d8b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d8b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d8b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d8bc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d8be:	4b2a      	ldr	r3, [pc, #168]	; (800d968 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d8c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8c2:	0a5b      	lsrs	r3, r3, #9
 800d8c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8c8:	ee07 3a90 	vmov	s15, r3
 800d8cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d8d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d8d8:	edd7 6a07 	vldr	s13, [r7, #28]
 800d8dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d8e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d8e4:	ee17 2a90 	vmov	r2, s15
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d8ec:	4b1e      	ldr	r3, [pc, #120]	; (800d968 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d8ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8f0:	0c1b      	lsrs	r3, r3, #16
 800d8f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8f6:	ee07 3a90 	vmov	s15, r3
 800d8fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d902:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d906:	edd7 6a07 	vldr	s13, [r7, #28]
 800d90a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d90e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d912:	ee17 2a90 	vmov	r2, s15
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d91a:	4b13      	ldr	r3, [pc, #76]	; (800d968 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d91c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d91e:	0e1b      	lsrs	r3, r3, #24
 800d920:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d924:	ee07 3a90 	vmov	s15, r3
 800d928:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d92c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d930:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d934:	edd7 6a07 	vldr	s13, [r7, #28]
 800d938:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d93c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d940:	ee17 2a90 	vmov	r2, s15
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d948:	e008      	b.n	800d95c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	2200      	movs	r2, #0
 800d94e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2200      	movs	r2, #0
 800d954:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	2200      	movs	r2, #0
 800d95a:	609a      	str	r2, [r3, #8]
}
 800d95c:	bf00      	nop
 800d95e:	3724      	adds	r7, #36	; 0x24
 800d960:	46bd      	mov	sp, r7
 800d962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d966:	4770      	bx	lr
 800d968:	58024400 	.word	0x58024400
 800d96c:	03d09000 	.word	0x03d09000
 800d970:	46000000 	.word	0x46000000
 800d974:	4c742400 	.word	0x4c742400
 800d978:	4a742400 	.word	0x4a742400
 800d97c:	4bbebc20 	.word	0x4bbebc20

0800d980 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b084      	sub	sp, #16
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
 800d988:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d98a:	2300      	movs	r3, #0
 800d98c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d98e:	4b53      	ldr	r3, [pc, #332]	; (800dadc <RCCEx_PLL2_Config+0x15c>)
 800d990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d992:	f003 0303 	and.w	r3, r3, #3
 800d996:	2b03      	cmp	r3, #3
 800d998:	d101      	bne.n	800d99e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d99a:	2301      	movs	r3, #1
 800d99c:	e099      	b.n	800dad2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d99e:	4b4f      	ldr	r3, [pc, #316]	; (800dadc <RCCEx_PLL2_Config+0x15c>)
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	4a4e      	ldr	r2, [pc, #312]	; (800dadc <RCCEx_PLL2_Config+0x15c>)
 800d9a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d9a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d9aa:	f7f7 ff15 	bl	80057d8 <HAL_GetTick>
 800d9ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d9b0:	e008      	b.n	800d9c4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d9b2:	f7f7 ff11 	bl	80057d8 <HAL_GetTick>
 800d9b6:	4602      	mov	r2, r0
 800d9b8:	68bb      	ldr	r3, [r7, #8]
 800d9ba:	1ad3      	subs	r3, r2, r3
 800d9bc:	2b02      	cmp	r3, #2
 800d9be:	d901      	bls.n	800d9c4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d9c0:	2303      	movs	r3, #3
 800d9c2:	e086      	b.n	800dad2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d9c4:	4b45      	ldr	r3, [pc, #276]	; (800dadc <RCCEx_PLL2_Config+0x15c>)
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d1f0      	bne.n	800d9b2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d9d0:	4b42      	ldr	r3, [pc, #264]	; (800dadc <RCCEx_PLL2_Config+0x15c>)
 800d9d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9d4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	031b      	lsls	r3, r3, #12
 800d9de:	493f      	ldr	r1, [pc, #252]	; (800dadc <RCCEx_PLL2_Config+0x15c>)
 800d9e0:	4313      	orrs	r3, r2
 800d9e2:	628b      	str	r3, [r1, #40]	; 0x28
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	685b      	ldr	r3, [r3, #4]
 800d9e8:	3b01      	subs	r3, #1
 800d9ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	689b      	ldr	r3, [r3, #8]
 800d9f2:	3b01      	subs	r3, #1
 800d9f4:	025b      	lsls	r3, r3, #9
 800d9f6:	b29b      	uxth	r3, r3
 800d9f8:	431a      	orrs	r2, r3
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	68db      	ldr	r3, [r3, #12]
 800d9fe:	3b01      	subs	r3, #1
 800da00:	041b      	lsls	r3, r3, #16
 800da02:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800da06:	431a      	orrs	r2, r3
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	691b      	ldr	r3, [r3, #16]
 800da0c:	3b01      	subs	r3, #1
 800da0e:	061b      	lsls	r3, r3, #24
 800da10:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800da14:	4931      	ldr	r1, [pc, #196]	; (800dadc <RCCEx_PLL2_Config+0x15c>)
 800da16:	4313      	orrs	r3, r2
 800da18:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800da1a:	4b30      	ldr	r3, [pc, #192]	; (800dadc <RCCEx_PLL2_Config+0x15c>)
 800da1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da1e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	695b      	ldr	r3, [r3, #20]
 800da26:	492d      	ldr	r1, [pc, #180]	; (800dadc <RCCEx_PLL2_Config+0x15c>)
 800da28:	4313      	orrs	r3, r2
 800da2a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800da2c:	4b2b      	ldr	r3, [pc, #172]	; (800dadc <RCCEx_PLL2_Config+0x15c>)
 800da2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da30:	f023 0220 	bic.w	r2, r3, #32
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	699b      	ldr	r3, [r3, #24]
 800da38:	4928      	ldr	r1, [pc, #160]	; (800dadc <RCCEx_PLL2_Config+0x15c>)
 800da3a:	4313      	orrs	r3, r2
 800da3c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800da3e:	4b27      	ldr	r3, [pc, #156]	; (800dadc <RCCEx_PLL2_Config+0x15c>)
 800da40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da42:	4a26      	ldr	r2, [pc, #152]	; (800dadc <RCCEx_PLL2_Config+0x15c>)
 800da44:	f023 0310 	bic.w	r3, r3, #16
 800da48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800da4a:	4b24      	ldr	r3, [pc, #144]	; (800dadc <RCCEx_PLL2_Config+0x15c>)
 800da4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800da4e:	4b24      	ldr	r3, [pc, #144]	; (800dae0 <RCCEx_PLL2_Config+0x160>)
 800da50:	4013      	ands	r3, r2
 800da52:	687a      	ldr	r2, [r7, #4]
 800da54:	69d2      	ldr	r2, [r2, #28]
 800da56:	00d2      	lsls	r2, r2, #3
 800da58:	4920      	ldr	r1, [pc, #128]	; (800dadc <RCCEx_PLL2_Config+0x15c>)
 800da5a:	4313      	orrs	r3, r2
 800da5c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800da5e:	4b1f      	ldr	r3, [pc, #124]	; (800dadc <RCCEx_PLL2_Config+0x15c>)
 800da60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da62:	4a1e      	ldr	r2, [pc, #120]	; (800dadc <RCCEx_PLL2_Config+0x15c>)
 800da64:	f043 0310 	orr.w	r3, r3, #16
 800da68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d106      	bne.n	800da7e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800da70:	4b1a      	ldr	r3, [pc, #104]	; (800dadc <RCCEx_PLL2_Config+0x15c>)
 800da72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da74:	4a19      	ldr	r2, [pc, #100]	; (800dadc <RCCEx_PLL2_Config+0x15c>)
 800da76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800da7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800da7c:	e00f      	b.n	800da9e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	2b01      	cmp	r3, #1
 800da82:	d106      	bne.n	800da92 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800da84:	4b15      	ldr	r3, [pc, #84]	; (800dadc <RCCEx_PLL2_Config+0x15c>)
 800da86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da88:	4a14      	ldr	r2, [pc, #80]	; (800dadc <RCCEx_PLL2_Config+0x15c>)
 800da8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800da8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800da90:	e005      	b.n	800da9e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800da92:	4b12      	ldr	r3, [pc, #72]	; (800dadc <RCCEx_PLL2_Config+0x15c>)
 800da94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da96:	4a11      	ldr	r2, [pc, #68]	; (800dadc <RCCEx_PLL2_Config+0x15c>)
 800da98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800da9c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800da9e:	4b0f      	ldr	r3, [pc, #60]	; (800dadc <RCCEx_PLL2_Config+0x15c>)
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	4a0e      	ldr	r2, [pc, #56]	; (800dadc <RCCEx_PLL2_Config+0x15c>)
 800daa4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800daa8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800daaa:	f7f7 fe95 	bl	80057d8 <HAL_GetTick>
 800daae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dab0:	e008      	b.n	800dac4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dab2:	f7f7 fe91 	bl	80057d8 <HAL_GetTick>
 800dab6:	4602      	mov	r2, r0
 800dab8:	68bb      	ldr	r3, [r7, #8]
 800daba:	1ad3      	subs	r3, r2, r3
 800dabc:	2b02      	cmp	r3, #2
 800dabe:	d901      	bls.n	800dac4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800dac0:	2303      	movs	r3, #3
 800dac2:	e006      	b.n	800dad2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dac4:	4b05      	ldr	r3, [pc, #20]	; (800dadc <RCCEx_PLL2_Config+0x15c>)
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d0f0      	beq.n	800dab2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800dad0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dad2:	4618      	mov	r0, r3
 800dad4:	3710      	adds	r7, #16
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}
 800dada:	bf00      	nop
 800dadc:	58024400 	.word	0x58024400
 800dae0:	ffff0007 	.word	0xffff0007

0800dae4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b084      	sub	sp, #16
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]
 800daec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800daee:	2300      	movs	r3, #0
 800daf0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800daf2:	4b53      	ldr	r3, [pc, #332]	; (800dc40 <RCCEx_PLL3_Config+0x15c>)
 800daf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daf6:	f003 0303 	and.w	r3, r3, #3
 800dafa:	2b03      	cmp	r3, #3
 800dafc:	d101      	bne.n	800db02 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800dafe:	2301      	movs	r3, #1
 800db00:	e099      	b.n	800dc36 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800db02:	4b4f      	ldr	r3, [pc, #316]	; (800dc40 <RCCEx_PLL3_Config+0x15c>)
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	4a4e      	ldr	r2, [pc, #312]	; (800dc40 <RCCEx_PLL3_Config+0x15c>)
 800db08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800db0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800db0e:	f7f7 fe63 	bl	80057d8 <HAL_GetTick>
 800db12:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800db14:	e008      	b.n	800db28 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800db16:	f7f7 fe5f 	bl	80057d8 <HAL_GetTick>
 800db1a:	4602      	mov	r2, r0
 800db1c:	68bb      	ldr	r3, [r7, #8]
 800db1e:	1ad3      	subs	r3, r2, r3
 800db20:	2b02      	cmp	r3, #2
 800db22:	d901      	bls.n	800db28 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800db24:	2303      	movs	r3, #3
 800db26:	e086      	b.n	800dc36 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800db28:	4b45      	ldr	r3, [pc, #276]	; (800dc40 <RCCEx_PLL3_Config+0x15c>)
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800db30:	2b00      	cmp	r3, #0
 800db32:	d1f0      	bne.n	800db16 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800db34:	4b42      	ldr	r3, [pc, #264]	; (800dc40 <RCCEx_PLL3_Config+0x15c>)
 800db36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db38:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	051b      	lsls	r3, r3, #20
 800db42:	493f      	ldr	r1, [pc, #252]	; (800dc40 <RCCEx_PLL3_Config+0x15c>)
 800db44:	4313      	orrs	r3, r2
 800db46:	628b      	str	r3, [r1, #40]	; 0x28
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	685b      	ldr	r3, [r3, #4]
 800db4c:	3b01      	subs	r3, #1
 800db4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	689b      	ldr	r3, [r3, #8]
 800db56:	3b01      	subs	r3, #1
 800db58:	025b      	lsls	r3, r3, #9
 800db5a:	b29b      	uxth	r3, r3
 800db5c:	431a      	orrs	r2, r3
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	68db      	ldr	r3, [r3, #12]
 800db62:	3b01      	subs	r3, #1
 800db64:	041b      	lsls	r3, r3, #16
 800db66:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800db6a:	431a      	orrs	r2, r3
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	691b      	ldr	r3, [r3, #16]
 800db70:	3b01      	subs	r3, #1
 800db72:	061b      	lsls	r3, r3, #24
 800db74:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800db78:	4931      	ldr	r1, [pc, #196]	; (800dc40 <RCCEx_PLL3_Config+0x15c>)
 800db7a:	4313      	orrs	r3, r2
 800db7c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800db7e:	4b30      	ldr	r3, [pc, #192]	; (800dc40 <RCCEx_PLL3_Config+0x15c>)
 800db80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db82:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	695b      	ldr	r3, [r3, #20]
 800db8a:	492d      	ldr	r1, [pc, #180]	; (800dc40 <RCCEx_PLL3_Config+0x15c>)
 800db8c:	4313      	orrs	r3, r2
 800db8e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800db90:	4b2b      	ldr	r3, [pc, #172]	; (800dc40 <RCCEx_PLL3_Config+0x15c>)
 800db92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db94:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	699b      	ldr	r3, [r3, #24]
 800db9c:	4928      	ldr	r1, [pc, #160]	; (800dc40 <RCCEx_PLL3_Config+0x15c>)
 800db9e:	4313      	orrs	r3, r2
 800dba0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800dba2:	4b27      	ldr	r3, [pc, #156]	; (800dc40 <RCCEx_PLL3_Config+0x15c>)
 800dba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dba6:	4a26      	ldr	r2, [pc, #152]	; (800dc40 <RCCEx_PLL3_Config+0x15c>)
 800dba8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dbac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800dbae:	4b24      	ldr	r3, [pc, #144]	; (800dc40 <RCCEx_PLL3_Config+0x15c>)
 800dbb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dbb2:	4b24      	ldr	r3, [pc, #144]	; (800dc44 <RCCEx_PLL3_Config+0x160>)
 800dbb4:	4013      	ands	r3, r2
 800dbb6:	687a      	ldr	r2, [r7, #4]
 800dbb8:	69d2      	ldr	r2, [r2, #28]
 800dbba:	00d2      	lsls	r2, r2, #3
 800dbbc:	4920      	ldr	r1, [pc, #128]	; (800dc40 <RCCEx_PLL3_Config+0x15c>)
 800dbbe:	4313      	orrs	r3, r2
 800dbc0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800dbc2:	4b1f      	ldr	r3, [pc, #124]	; (800dc40 <RCCEx_PLL3_Config+0x15c>)
 800dbc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbc6:	4a1e      	ldr	r2, [pc, #120]	; (800dc40 <RCCEx_PLL3_Config+0x15c>)
 800dbc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dbcc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800dbce:	683b      	ldr	r3, [r7, #0]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d106      	bne.n	800dbe2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800dbd4:	4b1a      	ldr	r3, [pc, #104]	; (800dc40 <RCCEx_PLL3_Config+0x15c>)
 800dbd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbd8:	4a19      	ldr	r2, [pc, #100]	; (800dc40 <RCCEx_PLL3_Config+0x15c>)
 800dbda:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800dbde:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dbe0:	e00f      	b.n	800dc02 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800dbe2:	683b      	ldr	r3, [r7, #0]
 800dbe4:	2b01      	cmp	r3, #1
 800dbe6:	d106      	bne.n	800dbf6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800dbe8:	4b15      	ldr	r3, [pc, #84]	; (800dc40 <RCCEx_PLL3_Config+0x15c>)
 800dbea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbec:	4a14      	ldr	r2, [pc, #80]	; (800dc40 <RCCEx_PLL3_Config+0x15c>)
 800dbee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800dbf2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dbf4:	e005      	b.n	800dc02 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800dbf6:	4b12      	ldr	r3, [pc, #72]	; (800dc40 <RCCEx_PLL3_Config+0x15c>)
 800dbf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbfa:	4a11      	ldr	r2, [pc, #68]	; (800dc40 <RCCEx_PLL3_Config+0x15c>)
 800dbfc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800dc00:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800dc02:	4b0f      	ldr	r3, [pc, #60]	; (800dc40 <RCCEx_PLL3_Config+0x15c>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	4a0e      	ldr	r2, [pc, #56]	; (800dc40 <RCCEx_PLL3_Config+0x15c>)
 800dc08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dc0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dc0e:	f7f7 fde3 	bl	80057d8 <HAL_GetTick>
 800dc12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800dc14:	e008      	b.n	800dc28 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800dc16:	f7f7 fddf 	bl	80057d8 <HAL_GetTick>
 800dc1a:	4602      	mov	r2, r0
 800dc1c:	68bb      	ldr	r3, [r7, #8]
 800dc1e:	1ad3      	subs	r3, r2, r3
 800dc20:	2b02      	cmp	r3, #2
 800dc22:	d901      	bls.n	800dc28 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800dc24:	2303      	movs	r3, #3
 800dc26:	e006      	b.n	800dc36 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800dc28:	4b05      	ldr	r3, [pc, #20]	; (800dc40 <RCCEx_PLL3_Config+0x15c>)
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d0f0      	beq.n	800dc16 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800dc34:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc36:	4618      	mov	r0, r3
 800dc38:	3710      	adds	r7, #16
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	bd80      	pop	{r7, pc}
 800dc3e:	bf00      	nop
 800dc40:	58024400 	.word	0x58024400
 800dc44:	ffff0007 	.word	0xffff0007

0800dc48 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b08a      	sub	sp, #40	; 0x28
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d101      	bne.n	800dc5a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800dc56:	2301      	movs	r3, #1
 800dc58:	e075      	b.n	800dd46 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dc60:	b2db      	uxtb	r3, r3
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d105      	bne.n	800dc72 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	2200      	movs	r2, #0
 800dc6a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800dc6c:	6878      	ldr	r0, [r7, #4]
 800dc6e:	f7f7 f8cb 	bl	8004e08 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	2204      	movs	r2, #4
 800dc76:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800dc7a:	6878      	ldr	r0, [r7, #4]
 800dc7c:	f000 f868 	bl	800dd50 <HAL_SD_InitCard>
 800dc80:	4603      	mov	r3, r0
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d001      	beq.n	800dc8a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800dc86:	2301      	movs	r3, #1
 800dc88:	e05d      	b.n	800dd46 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800dc8a:	f107 0308 	add.w	r3, r7, #8
 800dc8e:	4619      	mov	r1, r3
 800dc90:	6878      	ldr	r0, [r7, #4]
 800dc92:	f000 fa9d 	bl	800e1d0 <HAL_SD_GetCardStatus>
 800dc96:	4603      	mov	r3, r0
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d001      	beq.n	800dca0 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800dc9c:	2301      	movs	r3, #1
 800dc9e:	e052      	b.n	800dd46 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800dca0:	7e3b      	ldrb	r3, [r7, #24]
 800dca2:	b2db      	uxtb	r3, r3
 800dca4:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800dca6:	7e7b      	ldrb	r3, [r7, #25]
 800dca8:	b2db      	uxtb	r3, r3
 800dcaa:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcb0:	2b01      	cmp	r3, #1
 800dcb2:	d10a      	bne.n	800dcca <HAL_SD_Init+0x82>
 800dcb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d102      	bne.n	800dcc0 <HAL_SD_Init+0x78>
 800dcba:	6a3b      	ldr	r3, [r7, #32]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d004      	beq.n	800dcca <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dcc6:	659a      	str	r2, [r3, #88]	; 0x58
 800dcc8:	e00b      	b.n	800dce2 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcce:	2b01      	cmp	r3, #1
 800dcd0:	d104      	bne.n	800dcdc <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dcd8:	659a      	str	r2, [r3, #88]	; 0x58
 800dcda:	e002      	b.n	800dce2 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	2200      	movs	r2, #0
 800dce0:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	68db      	ldr	r3, [r3, #12]
 800dce6:	4619      	mov	r1, r3
 800dce8:	6878      	ldr	r0, [r7, #4]
 800dcea:	f000 fb2f 	bl	800e34c <HAL_SD_ConfigWideBusOperation>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d001      	beq.n	800dcf8 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800dcf4:	2301      	movs	r3, #1
 800dcf6:	e026      	b.n	800dd46 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800dcf8:	f7f7 fd6e 	bl	80057d8 <HAL_GetTick>
 800dcfc:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800dcfe:	e011      	b.n	800dd24 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800dd00:	f7f7 fd6a 	bl	80057d8 <HAL_GetTick>
 800dd04:	4602      	mov	r2, r0
 800dd06:	69fb      	ldr	r3, [r7, #28]
 800dd08:	1ad3      	subs	r3, r2, r3
 800dd0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dd0e:	d109      	bne.n	800dd24 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dd16:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	2201      	movs	r2, #1
 800dd1c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800dd20:	2303      	movs	r3, #3
 800dd22:	e010      	b.n	800dd46 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800dd24:	6878      	ldr	r0, [r7, #4]
 800dd26:	f000 fc23 	bl	800e570 <HAL_SD_GetCardState>
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	2b04      	cmp	r3, #4
 800dd2e:	d1e7      	bne.n	800dd00 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	2200      	movs	r2, #0
 800dd34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	2200      	movs	r2, #0
 800dd3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	2201      	movs	r2, #1
 800dd40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800dd44:	2300      	movs	r3, #0
}
 800dd46:	4618      	mov	r0, r3
 800dd48:	3728      	adds	r7, #40	; 0x28
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	bd80      	pop	{r7, pc}
	...

0800dd50 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800dd50:	b590      	push	{r4, r7, lr}
 800dd52:	b08d      	sub	sp, #52	; 0x34
 800dd54:	af02      	add	r7, sp, #8
 800dd56:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800dd58:	2300      	movs	r3, #0
 800dd5a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800dd60:	2300      	movs	r3, #0
 800dd62:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800dd64:	2300      	movs	r3, #0
 800dd66:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800dd68:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800dd6c:	f04f 0100 	mov.w	r1, #0
 800dd70:	f7fe fc76 	bl	800c660 <HAL_RCCEx_GetPeriphCLKFreq>
 800dd74:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800dd76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d109      	bne.n	800dd90 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	2201      	movs	r2, #1
 800dd80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800dd8a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	e070      	b.n	800de72 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800dd90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd92:	0a1b      	lsrs	r3, r3, #8
 800dd94:	4a39      	ldr	r2, [pc, #228]	; (800de7c <HAL_SD_InitCard+0x12c>)
 800dd96:	fba2 2303 	umull	r2, r3, r2, r3
 800dd9a:	091b      	lsrs	r3, r3, #4
 800dd9c:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	681c      	ldr	r4, [r3, #0]
 800dda2:	466a      	mov	r2, sp
 800dda4:	f107 0318 	add.w	r3, r7, #24
 800dda8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ddac:	e882 0003 	stmia.w	r2, {r0, r1}
 800ddb0:	f107 030c 	add.w	r3, r7, #12
 800ddb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ddb6:	4620      	mov	r0, r4
 800ddb8:	f004 ff74 	bl	8012ca4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	f004 ffa6 	bl	8012d12 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800ddc6:	69fb      	ldr	r3, [r7, #28]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d005      	beq.n	800ddd8 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800ddcc:	69fb      	ldr	r3, [r7, #28]
 800ddce:	005b      	lsls	r3, r3, #1
 800ddd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddd2:	fbb2 f3f3 	udiv	r3, r2, r3
 800ddd6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800ddd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d007      	beq.n	800ddee <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800ddde:	4a28      	ldr	r2, [pc, #160]	; (800de80 <HAL_SD_InitCard+0x130>)
 800dde0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dde2:	fbb2 f3f3 	udiv	r3, r2, r3
 800dde6:	3301      	adds	r3, #1
 800dde8:	4618      	mov	r0, r3
 800ddea:	f7f7 fd01 	bl	80057f0 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800ddee:	6878      	ldr	r0, [r7, #4]
 800ddf0:	f000 fcac 	bl	800e74c <SD_PowerON>
 800ddf4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ddf6:	6a3b      	ldr	r3, [r7, #32]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d00b      	beq.n	800de14 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	2201      	movs	r2, #1
 800de00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800de08:	6a3b      	ldr	r3, [r7, #32]
 800de0a:	431a      	orrs	r2, r3
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800de10:	2301      	movs	r3, #1
 800de12:	e02e      	b.n	800de72 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800de14:	6878      	ldr	r0, [r7, #4]
 800de16:	f000 fbcb 	bl	800e5b0 <SD_InitCard>
 800de1a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800de1c:	6a3b      	ldr	r3, [r7, #32]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d00b      	beq.n	800de3a <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	2201      	movs	r2, #1
 800de26:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800de2e:	6a3b      	ldr	r3, [r7, #32]
 800de30:	431a      	orrs	r2, r3
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800de36:	2301      	movs	r3, #1
 800de38:	e01b      	b.n	800de72 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800de42:	4618      	mov	r0, r3
 800de44:	f004 fffa 	bl	8012e3c <SDMMC_CmdBlockLength>
 800de48:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800de4a:	6a3b      	ldr	r3, [r7, #32]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d00f      	beq.n	800de70 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	4a0b      	ldr	r2, [pc, #44]	; (800de84 <HAL_SD_InitCard+0x134>)
 800de56:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800de5c:	6a3b      	ldr	r3, [r7, #32]
 800de5e:	431a      	orrs	r2, r3
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	2201      	movs	r2, #1
 800de68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800de6c:	2301      	movs	r3, #1
 800de6e:	e000      	b.n	800de72 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800de70:	2300      	movs	r3, #0
}
 800de72:	4618      	mov	r0, r3
 800de74:	372c      	adds	r7, #44	; 0x2c
 800de76:	46bd      	mov	sp, r7
 800de78:	bd90      	pop	{r4, r7, pc}
 800de7a:	bf00      	nop
 800de7c:	014f8b59 	.word	0x014f8b59
 800de80:	00012110 	.word	0x00012110
 800de84:	1fe00fff 	.word	0x1fe00fff

0800de88 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800de88:	b480      	push	{r7}
 800de8a:	b083      	sub	sp, #12
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
 800de90:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de96:	0f9b      	lsrs	r3, r3, #30
 800de98:	b2da      	uxtb	r2, r3
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dea2:	0e9b      	lsrs	r3, r3, #26
 800dea4:	b2db      	uxtb	r3, r3
 800dea6:	f003 030f 	and.w	r3, r3, #15
 800deaa:	b2da      	uxtb	r2, r3
 800deac:	683b      	ldr	r3, [r7, #0]
 800deae:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800deb4:	0e1b      	lsrs	r3, r3, #24
 800deb6:	b2db      	uxtb	r3, r3
 800deb8:	f003 0303 	and.w	r3, r3, #3
 800debc:	b2da      	uxtb	r2, r3
 800debe:	683b      	ldr	r3, [r7, #0]
 800dec0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dec6:	0c1b      	lsrs	r3, r3, #16
 800dec8:	b2da      	uxtb	r2, r3
 800deca:	683b      	ldr	r3, [r7, #0]
 800decc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ded2:	0a1b      	lsrs	r3, r3, #8
 800ded4:	b2da      	uxtb	r2, r3
 800ded6:	683b      	ldr	r3, [r7, #0]
 800ded8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dede:	b2da      	uxtb	r2, r3
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dee8:	0d1b      	lsrs	r3, r3, #20
 800deea:	b29a      	uxth	r2, r3
 800deec:	683b      	ldr	r3, [r7, #0]
 800deee:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800def4:	0c1b      	lsrs	r3, r3, #16
 800def6:	b2db      	uxtb	r3, r3
 800def8:	f003 030f 	and.w	r3, r3, #15
 800defc:	b2da      	uxtb	r2, r3
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df06:	0bdb      	lsrs	r3, r3, #15
 800df08:	b2db      	uxtb	r3, r3
 800df0a:	f003 0301 	and.w	r3, r3, #1
 800df0e:	b2da      	uxtb	r2, r3
 800df10:	683b      	ldr	r3, [r7, #0]
 800df12:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df18:	0b9b      	lsrs	r3, r3, #14
 800df1a:	b2db      	uxtb	r3, r3
 800df1c:	f003 0301 	and.w	r3, r3, #1
 800df20:	b2da      	uxtb	r2, r3
 800df22:	683b      	ldr	r3, [r7, #0]
 800df24:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df2a:	0b5b      	lsrs	r3, r3, #13
 800df2c:	b2db      	uxtb	r3, r3
 800df2e:	f003 0301 	and.w	r3, r3, #1
 800df32:	b2da      	uxtb	r2, r3
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df3c:	0b1b      	lsrs	r3, r3, #12
 800df3e:	b2db      	uxtb	r3, r3
 800df40:	f003 0301 	and.w	r3, r3, #1
 800df44:	b2da      	uxtb	r2, r3
 800df46:	683b      	ldr	r3, [r7, #0]
 800df48:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800df4a:	683b      	ldr	r3, [r7, #0]
 800df4c:	2200      	movs	r2, #0
 800df4e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df54:	2b00      	cmp	r3, #0
 800df56:	d163      	bne.n	800e020 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df5c:	009a      	lsls	r2, r3, #2
 800df5e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800df62:	4013      	ands	r3, r2
 800df64:	687a      	ldr	r2, [r7, #4]
 800df66:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800df68:	0f92      	lsrs	r2, r2, #30
 800df6a:	431a      	orrs	r2, r3
 800df6c:	683b      	ldr	r3, [r7, #0]
 800df6e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df74:	0edb      	lsrs	r3, r3, #27
 800df76:	b2db      	uxtb	r3, r3
 800df78:	f003 0307 	and.w	r3, r3, #7
 800df7c:	b2da      	uxtb	r2, r3
 800df7e:	683b      	ldr	r3, [r7, #0]
 800df80:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df86:	0e1b      	lsrs	r3, r3, #24
 800df88:	b2db      	uxtb	r3, r3
 800df8a:	f003 0307 	and.w	r3, r3, #7
 800df8e:	b2da      	uxtb	r2, r3
 800df90:	683b      	ldr	r3, [r7, #0]
 800df92:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df98:	0d5b      	lsrs	r3, r3, #21
 800df9a:	b2db      	uxtb	r3, r3
 800df9c:	f003 0307 	and.w	r3, r3, #7
 800dfa0:	b2da      	uxtb	r2, r3
 800dfa2:	683b      	ldr	r3, [r7, #0]
 800dfa4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfaa:	0c9b      	lsrs	r3, r3, #18
 800dfac:	b2db      	uxtb	r3, r3
 800dfae:	f003 0307 	and.w	r3, r3, #7
 800dfb2:	b2da      	uxtb	r2, r3
 800dfb4:	683b      	ldr	r3, [r7, #0]
 800dfb6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfbc:	0bdb      	lsrs	r3, r3, #15
 800dfbe:	b2db      	uxtb	r3, r3
 800dfc0:	f003 0307 	and.w	r3, r3, #7
 800dfc4:	b2da      	uxtb	r2, r3
 800dfc6:	683b      	ldr	r3, [r7, #0]
 800dfc8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800dfca:	683b      	ldr	r3, [r7, #0]
 800dfcc:	691b      	ldr	r3, [r3, #16]
 800dfce:	1c5a      	adds	r2, r3, #1
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	7e1b      	ldrb	r3, [r3, #24]
 800dfd8:	b2db      	uxtb	r3, r3
 800dfda:	f003 0307 	and.w	r3, r3, #7
 800dfde:	3302      	adds	r3, #2
 800dfe0:	2201      	movs	r2, #1
 800dfe2:	fa02 f303 	lsl.w	r3, r2, r3
 800dfe6:	687a      	ldr	r2, [r7, #4]
 800dfe8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800dfea:	fb03 f202 	mul.w	r2, r3, r2
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800dff2:	683b      	ldr	r3, [r7, #0]
 800dff4:	7a1b      	ldrb	r3, [r3, #8]
 800dff6:	b2db      	uxtb	r3, r3
 800dff8:	f003 030f 	and.w	r3, r3, #15
 800dffc:	2201      	movs	r2, #1
 800dffe:	409a      	lsls	r2, r3
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e008:	687a      	ldr	r2, [r7, #4]
 800e00a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800e00c:	0a52      	lsrs	r2, r2, #9
 800e00e:	fb03 f202 	mul.w	r2, r3, r2
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e01c:	655a      	str	r2, [r3, #84]	; 0x54
 800e01e:	e031      	b.n	800e084 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e024:	2b01      	cmp	r3, #1
 800e026:	d11d      	bne.n	800e064 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e02c:	041b      	lsls	r3, r3, #16
 800e02e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e036:	0c1b      	lsrs	r3, r3, #16
 800e038:	431a      	orrs	r2, r3
 800e03a:	683b      	ldr	r3, [r7, #0]
 800e03c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800e03e:	683b      	ldr	r3, [r7, #0]
 800e040:	691b      	ldr	r3, [r3, #16]
 800e042:	3301      	adds	r3, #1
 800e044:	029a      	lsls	r2, r3, #10
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e058:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	655a      	str	r2, [r3, #84]	; 0x54
 800e062:	e00f      	b.n	800e084 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	4a58      	ldr	r2, [pc, #352]	; (800e1cc <HAL_SD_GetCardCSD+0x344>)
 800e06a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e070:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	2201      	movs	r2, #1
 800e07c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800e080:	2301      	movs	r3, #1
 800e082:	e09d      	b.n	800e1c0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e088:	0b9b      	lsrs	r3, r3, #14
 800e08a:	b2db      	uxtb	r3, r3
 800e08c:	f003 0301 	and.w	r3, r3, #1
 800e090:	b2da      	uxtb	r2, r3
 800e092:	683b      	ldr	r3, [r7, #0]
 800e094:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e09a:	09db      	lsrs	r3, r3, #7
 800e09c:	b2db      	uxtb	r3, r3
 800e09e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0a2:	b2da      	uxtb	r2, r3
 800e0a4:	683b      	ldr	r3, [r7, #0]
 800e0a6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0ac:	b2db      	uxtb	r3, r3
 800e0ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0b2:	b2da      	uxtb	r2, r3
 800e0b4:	683b      	ldr	r3, [r7, #0]
 800e0b6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e0bc:	0fdb      	lsrs	r3, r3, #31
 800e0be:	b2da      	uxtb	r2, r3
 800e0c0:	683b      	ldr	r3, [r7, #0]
 800e0c2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e0c8:	0f5b      	lsrs	r3, r3, #29
 800e0ca:	b2db      	uxtb	r3, r3
 800e0cc:	f003 0303 	and.w	r3, r3, #3
 800e0d0:	b2da      	uxtb	r2, r3
 800e0d2:	683b      	ldr	r3, [r7, #0]
 800e0d4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e0da:	0e9b      	lsrs	r3, r3, #26
 800e0dc:	b2db      	uxtb	r3, r3
 800e0de:	f003 0307 	and.w	r3, r3, #7
 800e0e2:	b2da      	uxtb	r2, r3
 800e0e4:	683b      	ldr	r3, [r7, #0]
 800e0e6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e0ec:	0d9b      	lsrs	r3, r3, #22
 800e0ee:	b2db      	uxtb	r3, r3
 800e0f0:	f003 030f 	and.w	r3, r3, #15
 800e0f4:	b2da      	uxtb	r2, r3
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e0fe:	0d5b      	lsrs	r3, r3, #21
 800e100:	b2db      	uxtb	r3, r3
 800e102:	f003 0301 	and.w	r3, r3, #1
 800e106:	b2da      	uxtb	r2, r3
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	2200      	movs	r2, #0
 800e112:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e11a:	0c1b      	lsrs	r3, r3, #16
 800e11c:	b2db      	uxtb	r3, r3
 800e11e:	f003 0301 	and.w	r3, r3, #1
 800e122:	b2da      	uxtb	r2, r3
 800e124:	683b      	ldr	r3, [r7, #0]
 800e126:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e12e:	0bdb      	lsrs	r3, r3, #15
 800e130:	b2db      	uxtb	r3, r3
 800e132:	f003 0301 	and.w	r3, r3, #1
 800e136:	b2da      	uxtb	r2, r3
 800e138:	683b      	ldr	r3, [r7, #0]
 800e13a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e142:	0b9b      	lsrs	r3, r3, #14
 800e144:	b2db      	uxtb	r3, r3
 800e146:	f003 0301 	and.w	r3, r3, #1
 800e14a:	b2da      	uxtb	r2, r3
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e156:	0b5b      	lsrs	r3, r3, #13
 800e158:	b2db      	uxtb	r3, r3
 800e15a:	f003 0301 	and.w	r3, r3, #1
 800e15e:	b2da      	uxtb	r2, r3
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e16a:	0b1b      	lsrs	r3, r3, #12
 800e16c:	b2db      	uxtb	r3, r3
 800e16e:	f003 0301 	and.w	r3, r3, #1
 800e172:	b2da      	uxtb	r2, r3
 800e174:	683b      	ldr	r3, [r7, #0]
 800e176:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e17e:	0a9b      	lsrs	r3, r3, #10
 800e180:	b2db      	uxtb	r3, r3
 800e182:	f003 0303 	and.w	r3, r3, #3
 800e186:	b2da      	uxtb	r2, r3
 800e188:	683b      	ldr	r3, [r7, #0]
 800e18a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e192:	0a1b      	lsrs	r3, r3, #8
 800e194:	b2db      	uxtb	r3, r3
 800e196:	f003 0303 	and.w	r3, r3, #3
 800e19a:	b2da      	uxtb	r2, r3
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e1a6:	085b      	lsrs	r3, r3, #1
 800e1a8:	b2db      	uxtb	r3, r3
 800e1aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e1ae:	b2da      	uxtb	r2, r3
 800e1b0:	683b      	ldr	r3, [r7, #0]
 800e1b2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800e1b6:	683b      	ldr	r3, [r7, #0]
 800e1b8:	2201      	movs	r2, #1
 800e1ba:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800e1be:	2300      	movs	r3, #0
}
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	370c      	adds	r7, #12
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ca:	4770      	bx	lr
 800e1cc:	1fe00fff 	.word	0x1fe00fff

0800e1d0 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b094      	sub	sp, #80	; 0x50
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
 800e1d8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800e1da:	2300      	movs	r3, #0
 800e1dc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e1e6:	b2db      	uxtb	r3, r3
 800e1e8:	2b03      	cmp	r3, #3
 800e1ea:	d101      	bne.n	800e1f0 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800e1ec:	2301      	movs	r3, #1
 800e1ee:	e0a7      	b.n	800e340 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800e1f0:	f107 0308 	add.w	r3, r7, #8
 800e1f4:	4619      	mov	r1, r3
 800e1f6:	6878      	ldr	r0, [r7, #4]
 800e1f8:	f000 fb36 	bl	800e868 <SD_SendSDStatus>
 800e1fc:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800e1fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e200:	2b00      	cmp	r3, #0
 800e202:	d011      	beq.n	800e228 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	4a4f      	ldr	r2, [pc, #316]	; (800e348 <HAL_SD_GetCardStatus+0x178>)
 800e20a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e210:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e212:	431a      	orrs	r2, r3
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2201      	movs	r2, #1
 800e21c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800e220:	2301      	movs	r3, #1
 800e222:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800e226:	e070      	b.n	800e30a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800e228:	68bb      	ldr	r3, [r7, #8]
 800e22a:	099b      	lsrs	r3, r3, #6
 800e22c:	b2db      	uxtb	r3, r3
 800e22e:	f003 0303 	and.w	r3, r3, #3
 800e232:	b2da      	uxtb	r2, r3
 800e234:	683b      	ldr	r3, [r7, #0]
 800e236:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800e238:	68bb      	ldr	r3, [r7, #8]
 800e23a:	095b      	lsrs	r3, r3, #5
 800e23c:	b2db      	uxtb	r3, r3
 800e23e:	f003 0301 	and.w	r3, r3, #1
 800e242:	b2da      	uxtb	r2, r3
 800e244:	683b      	ldr	r3, [r7, #0]
 800e246:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800e248:	68bb      	ldr	r3, [r7, #8]
 800e24a:	0a1b      	lsrs	r3, r3, #8
 800e24c:	b29b      	uxth	r3, r3
 800e24e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e252:	b29a      	uxth	r2, r3
 800e254:	68bb      	ldr	r3, [r7, #8]
 800e256:	0e1b      	lsrs	r3, r3, #24
 800e258:	b29b      	uxth	r3, r3
 800e25a:	4313      	orrs	r3, r2
 800e25c:	b29a      	uxth	r2, r3
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	061a      	lsls	r2, r3, #24
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	021b      	lsls	r3, r3, #8
 800e26a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e26e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	0a1b      	lsrs	r3, r3, #8
 800e274:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e278:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	0e1b      	lsrs	r3, r3, #24
 800e27e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e280:	683b      	ldr	r3, [r7, #0]
 800e282:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800e284:	693b      	ldr	r3, [r7, #16]
 800e286:	b2da      	uxtb	r2, r3
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800e28c:	693b      	ldr	r3, [r7, #16]
 800e28e:	0a1b      	lsrs	r3, r3, #8
 800e290:	b2da      	uxtb	r2, r3
 800e292:	683b      	ldr	r3, [r7, #0]
 800e294:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800e296:	693b      	ldr	r3, [r7, #16]
 800e298:	0d1b      	lsrs	r3, r3, #20
 800e29a:	b2db      	uxtb	r3, r3
 800e29c:	f003 030f 	and.w	r3, r3, #15
 800e2a0:	b2da      	uxtb	r2, r3
 800e2a2:	683b      	ldr	r3, [r7, #0]
 800e2a4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800e2a6:	693b      	ldr	r3, [r7, #16]
 800e2a8:	0c1b      	lsrs	r3, r3, #16
 800e2aa:	b29b      	uxth	r3, r3
 800e2ac:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e2b0:	b29a      	uxth	r2, r3
 800e2b2:	697b      	ldr	r3, [r7, #20]
 800e2b4:	b29b      	uxth	r3, r3
 800e2b6:	b2db      	uxtb	r3, r3
 800e2b8:	b29b      	uxth	r3, r3
 800e2ba:	4313      	orrs	r3, r2
 800e2bc:	b29a      	uxth	r2, r3
 800e2be:	683b      	ldr	r3, [r7, #0]
 800e2c0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800e2c2:	697b      	ldr	r3, [r7, #20]
 800e2c4:	0a9b      	lsrs	r3, r3, #10
 800e2c6:	b2db      	uxtb	r3, r3
 800e2c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e2cc:	b2da      	uxtb	r2, r3
 800e2ce:	683b      	ldr	r3, [r7, #0]
 800e2d0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800e2d2:	697b      	ldr	r3, [r7, #20]
 800e2d4:	0a1b      	lsrs	r3, r3, #8
 800e2d6:	b2db      	uxtb	r3, r3
 800e2d8:	f003 0303 	and.w	r3, r3, #3
 800e2dc:	b2da      	uxtb	r2, r3
 800e2de:	683b      	ldr	r3, [r7, #0]
 800e2e0:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800e2e2:	697b      	ldr	r3, [r7, #20]
 800e2e4:	091b      	lsrs	r3, r3, #4
 800e2e6:	b2db      	uxtb	r3, r3
 800e2e8:	f003 030f 	and.w	r3, r3, #15
 800e2ec:	b2da      	uxtb	r2, r3
 800e2ee:	683b      	ldr	r3, [r7, #0]
 800e2f0:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800e2f2:	697b      	ldr	r3, [r7, #20]
 800e2f4:	b2db      	uxtb	r3, r3
 800e2f6:	f003 030f 	and.w	r3, r3, #15
 800e2fa:	b2da      	uxtb	r2, r3
 800e2fc:	683b      	ldr	r3, [r7, #0]
 800e2fe:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800e300:	69bb      	ldr	r3, [r7, #24]
 800e302:	0e1b      	lsrs	r3, r3, #24
 800e304:	b2da      	uxtb	r2, r3
 800e306:	683b      	ldr	r3, [r7, #0]
 800e308:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e312:	4618      	mov	r0, r3
 800e314:	f004 fd92 	bl	8012e3c <SDMMC_CmdBlockLength>
 800e318:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800e31a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d00d      	beq.n	800e33c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	4a08      	ldr	r2, [pc, #32]	; (800e348 <HAL_SD_GetCardStatus+0x178>)
 800e326:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e32c:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	2201      	movs	r2, #1
 800e332:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800e336:	2301      	movs	r3, #1
 800e338:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800e33c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800e340:	4618      	mov	r0, r3
 800e342:	3750      	adds	r7, #80	; 0x50
 800e344:	46bd      	mov	sp, r7
 800e346:	bd80      	pop	{r7, pc}
 800e348:	1fe00fff 	.word	0x1fe00fff

0800e34c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800e34c:	b590      	push	{r4, r7, lr}
 800e34e:	b08d      	sub	sp, #52	; 0x34
 800e350:	af02      	add	r7, sp, #8
 800e352:	6078      	str	r0, [r7, #4]
 800e354:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800e356:	2300      	movs	r3, #0
 800e358:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	2203      	movs	r2, #3
 800e360:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e368:	2b03      	cmp	r3, #3
 800e36a:	d02e      	beq.n	800e3ca <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800e36c:	683b      	ldr	r3, [r7, #0]
 800e36e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e372:	d106      	bne.n	800e382 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e378:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	635a      	str	r2, [r3, #52]	; 0x34
 800e380:	e029      	b.n	800e3d6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800e382:	683b      	ldr	r3, [r7, #0]
 800e384:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e388:	d10a      	bne.n	800e3a0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800e38a:	6878      	ldr	r0, [r7, #4]
 800e38c:	f000 fb64 	bl	800ea58 <SD_WideBus_Enable>
 800e390:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e396:	6a3b      	ldr	r3, [r7, #32]
 800e398:	431a      	orrs	r2, r3
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	635a      	str	r2, [r3, #52]	; 0x34
 800e39e:	e01a      	b.n	800e3d6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800e3a0:	683b      	ldr	r3, [r7, #0]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d10a      	bne.n	800e3bc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800e3a6:	6878      	ldr	r0, [r7, #4]
 800e3a8:	f000 fba1 	bl	800eaee <SD_WideBus_Disable>
 800e3ac:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e3b2:	6a3b      	ldr	r3, [r7, #32]
 800e3b4:	431a      	orrs	r2, r3
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	635a      	str	r2, [r3, #52]	; 0x34
 800e3ba:	e00c      	b.n	800e3d6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3c0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	635a      	str	r2, [r3, #52]	; 0x34
 800e3c8:	e005      	b.n	800e3d6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3ce:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d007      	beq.n	800e3ee <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	4a5f      	ldr	r2, [pc, #380]	; (800e560 <HAL_SD_ConfigWideBusOperation+0x214>)
 800e3e4:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800e3e6:	2301      	movs	r3, #1
 800e3e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e3ec:	e096      	b.n	800e51c <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800e3ee:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800e3f2:	f04f 0100 	mov.w	r1, #0
 800e3f6:	f7fe f933 	bl	800c660 <HAL_RCCEx_GetPeriphCLKFreq>
 800e3fa:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800e3fc:	69fb      	ldr	r3, [r7, #28]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	f000 8083 	beq.w	800e50a <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	685b      	ldr	r3, [r3, #4]
 800e408:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	689b      	ldr	r3, [r3, #8]
 800e40e:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800e410:	683b      	ldr	r3, [r7, #0]
 800e412:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	691b      	ldr	r3, [r3, #16]
 800e418:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	695a      	ldr	r2, [r3, #20]
 800e41e:	69fb      	ldr	r3, [r7, #28]
 800e420:	4950      	ldr	r1, [pc, #320]	; (800e564 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e422:	fba1 1303 	umull	r1, r3, r1, r3
 800e426:	0e1b      	lsrs	r3, r3, #24
 800e428:	429a      	cmp	r2, r3
 800e42a:	d303      	bcc.n	800e434 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	695b      	ldr	r3, [r3, #20]
 800e430:	61bb      	str	r3, [r7, #24]
 800e432:	e05a      	b.n	800e4ea <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e43c:	d103      	bne.n	800e446 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	695b      	ldr	r3, [r3, #20]
 800e442:	61bb      	str	r3, [r7, #24]
 800e444:	e051      	b.n	800e4ea <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e44a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e44e:	d126      	bne.n	800e49e <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	695b      	ldr	r3, [r3, #20]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d10e      	bne.n	800e476 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800e458:	69fb      	ldr	r3, [r7, #28]
 800e45a:	4a43      	ldr	r2, [pc, #268]	; (800e568 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e45c:	4293      	cmp	r3, r2
 800e45e:	d906      	bls.n	800e46e <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800e460:	69fb      	ldr	r3, [r7, #28]
 800e462:	4a40      	ldr	r2, [pc, #256]	; (800e564 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e464:	fba2 2303 	umull	r2, r3, r2, r3
 800e468:	0e5b      	lsrs	r3, r3, #25
 800e46a:	61bb      	str	r3, [r7, #24]
 800e46c:	e03d      	b.n	800e4ea <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	695b      	ldr	r3, [r3, #20]
 800e472:	61bb      	str	r3, [r7, #24]
 800e474:	e039      	b.n	800e4ea <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	695b      	ldr	r3, [r3, #20]
 800e47a:	005b      	lsls	r3, r3, #1
 800e47c:	69fa      	ldr	r2, [r7, #28]
 800e47e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e482:	4a39      	ldr	r2, [pc, #228]	; (800e568 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e484:	4293      	cmp	r3, r2
 800e486:	d906      	bls.n	800e496 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800e488:	69fb      	ldr	r3, [r7, #28]
 800e48a:	4a36      	ldr	r2, [pc, #216]	; (800e564 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e48c:	fba2 2303 	umull	r2, r3, r2, r3
 800e490:	0e5b      	lsrs	r3, r3, #25
 800e492:	61bb      	str	r3, [r7, #24]
 800e494:	e029      	b.n	800e4ea <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	695b      	ldr	r3, [r3, #20]
 800e49a:	61bb      	str	r3, [r7, #24]
 800e49c:	e025      	b.n	800e4ea <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	695b      	ldr	r3, [r3, #20]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d10e      	bne.n	800e4c4 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800e4a6:	69fb      	ldr	r3, [r7, #28]
 800e4a8:	4a30      	ldr	r2, [pc, #192]	; (800e56c <HAL_SD_ConfigWideBusOperation+0x220>)
 800e4aa:	4293      	cmp	r3, r2
 800e4ac:	d906      	bls.n	800e4bc <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e4ae:	69fb      	ldr	r3, [r7, #28]
 800e4b0:	4a2c      	ldr	r2, [pc, #176]	; (800e564 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e4b2:	fba2 2303 	umull	r2, r3, r2, r3
 800e4b6:	0e1b      	lsrs	r3, r3, #24
 800e4b8:	61bb      	str	r3, [r7, #24]
 800e4ba:	e016      	b.n	800e4ea <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	695b      	ldr	r3, [r3, #20]
 800e4c0:	61bb      	str	r3, [r7, #24]
 800e4c2:	e012      	b.n	800e4ea <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	695b      	ldr	r3, [r3, #20]
 800e4c8:	005b      	lsls	r3, r3, #1
 800e4ca:	69fa      	ldr	r2, [r7, #28]
 800e4cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4d0:	4a26      	ldr	r2, [pc, #152]	; (800e56c <HAL_SD_ConfigWideBusOperation+0x220>)
 800e4d2:	4293      	cmp	r3, r2
 800e4d4:	d906      	bls.n	800e4e4 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e4d6:	69fb      	ldr	r3, [r7, #28]
 800e4d8:	4a22      	ldr	r2, [pc, #136]	; (800e564 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e4da:	fba2 2303 	umull	r2, r3, r2, r3
 800e4de:	0e1b      	lsrs	r3, r3, #24
 800e4e0:	61bb      	str	r3, [r7, #24]
 800e4e2:	e002      	b.n	800e4ea <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	695b      	ldr	r3, [r3, #20]
 800e4e8:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681c      	ldr	r4, [r3, #0]
 800e4ee:	466a      	mov	r2, sp
 800e4f0:	f107 0314 	add.w	r3, r7, #20
 800e4f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e4f8:	e882 0003 	stmia.w	r2, {r0, r1}
 800e4fc:	f107 0308 	add.w	r3, r7, #8
 800e500:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e502:	4620      	mov	r0, r4
 800e504:	f004 fbce 	bl	8012ca4 <SDMMC_Init>
 800e508:	e008      	b.n	800e51c <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e50e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800e516:	2301      	movs	r3, #1
 800e518:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e524:	4618      	mov	r0, r3
 800e526:	f004 fc89 	bl	8012e3c <SDMMC_CmdBlockLength>
 800e52a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e52c:	6a3b      	ldr	r3, [r7, #32]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d00c      	beq.n	800e54c <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	4a0a      	ldr	r2, [pc, #40]	; (800e560 <HAL_SD_ConfigWideBusOperation+0x214>)
 800e538:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e53e:	6a3b      	ldr	r3, [r7, #32]
 800e540:	431a      	orrs	r2, r3
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800e546:	2301      	movs	r3, #1
 800e548:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	2201      	movs	r2, #1
 800e550:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800e554:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e558:	4618      	mov	r0, r3
 800e55a:	372c      	adds	r7, #44	; 0x2c
 800e55c:	46bd      	mov	sp, r7
 800e55e:	bd90      	pop	{r4, r7, pc}
 800e560:	1fe00fff 	.word	0x1fe00fff
 800e564:	55e63b89 	.word	0x55e63b89
 800e568:	02faf080 	.word	0x02faf080
 800e56c:	017d7840 	.word	0x017d7840

0800e570 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b086      	sub	sp, #24
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800e578:	2300      	movs	r3, #0
 800e57a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800e57c:	f107 030c 	add.w	r3, r7, #12
 800e580:	4619      	mov	r1, r3
 800e582:	6878      	ldr	r0, [r7, #4]
 800e584:	f000 fa40 	bl	800ea08 <SD_SendStatus>
 800e588:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e58a:	697b      	ldr	r3, [r7, #20]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d005      	beq.n	800e59c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e594:	697b      	ldr	r3, [r7, #20]
 800e596:	431a      	orrs	r2, r3
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	0a5b      	lsrs	r3, r3, #9
 800e5a0:	f003 030f 	and.w	r3, r3, #15
 800e5a4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800e5a6:	693b      	ldr	r3, [r7, #16]
}
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	3718      	adds	r7, #24
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	bd80      	pop	{r7, pc}

0800e5b0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b090      	sub	sp, #64	; 0x40
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800e5bc:	f7f7 f90c 	bl	80057d8 <HAL_GetTick>
 800e5c0:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	f004 fbb4 	bl	8012d34 <SDMMC_GetPowerState>
 800e5cc:	4603      	mov	r3, r0
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d102      	bne.n	800e5d8 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e5d2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e5d6:	e0b5      	b.n	800e744 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5dc:	2b03      	cmp	r3, #3
 800e5de:	d02e      	beq.n	800e63e <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	f004 fd35 	bl	8013054 <SDMMC_CmdSendCID>
 800e5ea:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e5ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d001      	beq.n	800e5f6 <SD_InitCard+0x46>
    {
      return errorstate;
 800e5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5f4:	e0a6      	b.n	800e744 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	2100      	movs	r1, #0
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	f004 fbde 	bl	8012dbe <SDMMC_GetResponse>
 800e602:	4602      	mov	r2, r0
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	2104      	movs	r1, #4
 800e60e:	4618      	mov	r0, r3
 800e610:	f004 fbd5 	bl	8012dbe <SDMMC_GetResponse>
 800e614:	4602      	mov	r2, r0
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	2108      	movs	r1, #8
 800e620:	4618      	mov	r0, r3
 800e622:	f004 fbcc 	bl	8012dbe <SDMMC_GetResponse>
 800e626:	4602      	mov	r2, r0
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	210c      	movs	r1, #12
 800e632:	4618      	mov	r0, r3
 800e634:	f004 fbc3 	bl	8012dbe <SDMMC_GetResponse>
 800e638:	4602      	mov	r2, r0
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e642:	2b03      	cmp	r3, #3
 800e644:	d01d      	beq.n	800e682 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800e646:	e019      	b.n	800e67c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	f107 020a 	add.w	r2, r7, #10
 800e650:	4611      	mov	r1, r2
 800e652:	4618      	mov	r0, r3
 800e654:	f004 fd3d 	bl	80130d2 <SDMMC_CmdSetRelAdd>
 800e658:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800e65a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d001      	beq.n	800e664 <SD_InitCard+0xb4>
      {
        return errorstate;
 800e660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e662:	e06f      	b.n	800e744 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800e664:	f7f7 f8b8 	bl	80057d8 <HAL_GetTick>
 800e668:	4602      	mov	r2, r0
 800e66a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e66c:	1ad3      	subs	r3, r2, r3
 800e66e:	f241 3287 	movw	r2, #4999	; 0x1387
 800e672:	4293      	cmp	r3, r2
 800e674:	d902      	bls.n	800e67c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800e676:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e67a:	e063      	b.n	800e744 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800e67c:	897b      	ldrh	r3, [r7, #10]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d0e2      	beq.n	800e648 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e686:	2b03      	cmp	r3, #3
 800e688:	d036      	beq.n	800e6f8 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e68a:	897b      	ldrh	r3, [r7, #10]
 800e68c:	461a      	mov	r2, r3
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	681a      	ldr	r2, [r3, #0]
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e69a:	041b      	lsls	r3, r3, #16
 800e69c:	4619      	mov	r1, r3
 800e69e:	4610      	mov	r0, r2
 800e6a0:	f004 fcf7 	bl	8013092 <SDMMC_CmdSendCSD>
 800e6a4:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e6a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d001      	beq.n	800e6b0 <SD_InitCard+0x100>
    {
      return errorstate;
 800e6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6ae:	e049      	b.n	800e744 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	2100      	movs	r1, #0
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	f004 fb81 	bl	8012dbe <SDMMC_GetResponse>
 800e6bc:	4602      	mov	r2, r0
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	2104      	movs	r1, #4
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	f004 fb78 	bl	8012dbe <SDMMC_GetResponse>
 800e6ce:	4602      	mov	r2, r0
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	2108      	movs	r1, #8
 800e6da:	4618      	mov	r0, r3
 800e6dc:	f004 fb6f 	bl	8012dbe <SDMMC_GetResponse>
 800e6e0:	4602      	mov	r2, r0
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	210c      	movs	r1, #12
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	f004 fb66 	bl	8012dbe <SDMMC_GetResponse>
 800e6f2:	4602      	mov	r2, r0
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	2104      	movs	r1, #4
 800e6fe:	4618      	mov	r0, r3
 800e700:	f004 fb5d 	bl	8012dbe <SDMMC_GetResponse>
 800e704:	4603      	mov	r3, r0
 800e706:	0d1a      	lsrs	r2, r3, #20
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e70c:	f107 030c 	add.w	r3, r7, #12
 800e710:	4619      	mov	r1, r3
 800e712:	6878      	ldr	r0, [r7, #4]
 800e714:	f7ff fbb8 	bl	800de88 <HAL_SD_GetCardCSD>
 800e718:	4603      	mov	r3, r0
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d002      	beq.n	800e724 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e71e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e722:	e00f      	b.n	800e744 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681a      	ldr	r2, [r3, #0]
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e72c:	041b      	lsls	r3, r3, #16
 800e72e:	4619      	mov	r1, r3
 800e730:	4610      	mov	r0, r2
 800e732:	f004 fba6 	bl	8012e82 <SDMMC_CmdSelDesel>
 800e736:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800e738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d001      	beq.n	800e742 <SD_InitCard+0x192>
  {
    return errorstate;
 800e73e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e740:	e000      	b.n	800e744 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e742:	2300      	movs	r3, #0
}
 800e744:	4618      	mov	r0, r3
 800e746:	3740      	adds	r7, #64	; 0x40
 800e748:	46bd      	mov	sp, r7
 800e74a:	bd80      	pop	{r7, pc}

0800e74c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b086      	sub	sp, #24
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e754:	2300      	movs	r3, #0
 800e756:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800e758:	2300      	movs	r3, #0
 800e75a:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800e75c:	2300      	movs	r3, #0
 800e75e:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	4618      	mov	r0, r3
 800e766:	f004 fbaf 	bl	8012ec8 <SDMMC_CmdGoIdleState>
 800e76a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d001      	beq.n	800e776 <SD_PowerON+0x2a>
  {
    return errorstate;
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	e072      	b.n	800e85c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	4618      	mov	r0, r3
 800e77c:	f004 fbc2 	bl	8012f04 <SDMMC_CmdOperCond>
 800e780:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e788:	d10d      	bne.n	800e7a6 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	2200      	movs	r2, #0
 800e78e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	4618      	mov	r0, r3
 800e796:	f004 fb97 	bl	8012ec8 <SDMMC_CmdGoIdleState>
 800e79a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d004      	beq.n	800e7ac <SD_PowerON+0x60>
    {
      return errorstate;
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	e05a      	b.n	800e85c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	2201      	movs	r2, #1
 800e7aa:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7b0:	2b01      	cmp	r3, #1
 800e7b2:	d137      	bne.n	800e824 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	2100      	movs	r1, #0
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	f004 fbc2 	bl	8012f44 <SDMMC_CmdAppCommand>
 800e7c0:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d02d      	beq.n	800e824 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e7c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e7cc:	e046      	b.n	800e85c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	2100      	movs	r1, #0
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	f004 fbb5 	bl	8012f44 <SDMMC_CmdAppCommand>
 800e7da:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d001      	beq.n	800e7e6 <SD_PowerON+0x9a>
    {
      return errorstate;
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	e03a      	b.n	800e85c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	491e      	ldr	r1, [pc, #120]	; (800e864 <SD_PowerON+0x118>)
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	f004 fbcc 	bl	8012f8a <SDMMC_CmdAppOperCommand>
 800e7f2:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d002      	beq.n	800e800 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e7fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e7fe:	e02d      	b.n	800e85c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	2100      	movs	r1, #0
 800e806:	4618      	mov	r0, r3
 800e808:	f004 fad9 	bl	8012dbe <SDMMC_GetResponse>
 800e80c:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e80e:	697b      	ldr	r3, [r7, #20]
 800e810:	0fdb      	lsrs	r3, r3, #31
 800e812:	2b01      	cmp	r3, #1
 800e814:	d101      	bne.n	800e81a <SD_PowerON+0xce>
 800e816:	2301      	movs	r3, #1
 800e818:	e000      	b.n	800e81c <SD_PowerON+0xd0>
 800e81a:	2300      	movs	r3, #0
 800e81c:	613b      	str	r3, [r7, #16]

    count++;
 800e81e:	68bb      	ldr	r3, [r7, #8]
 800e820:	3301      	adds	r3, #1
 800e822:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e824:	68bb      	ldr	r3, [r7, #8]
 800e826:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e82a:	4293      	cmp	r3, r2
 800e82c:	d802      	bhi.n	800e834 <SD_PowerON+0xe8>
 800e82e:	693b      	ldr	r3, [r7, #16]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d0cc      	beq.n	800e7ce <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800e834:	68bb      	ldr	r3, [r7, #8]
 800e836:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e83a:	4293      	cmp	r3, r2
 800e83c:	d902      	bls.n	800e844 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e83e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e842:	e00b      	b.n	800e85c <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	2200      	movs	r2, #0
 800e848:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800e84a:	697b      	ldr	r3, [r7, #20]
 800e84c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e850:	2b00      	cmp	r3, #0
 800e852:	d002      	beq.n	800e85a <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	2201      	movs	r2, #1
 800e858:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800e85a:	2300      	movs	r3, #0
}
 800e85c:	4618      	mov	r0, r3
 800e85e:	3718      	adds	r7, #24
 800e860:	46bd      	mov	sp, r7
 800e862:	bd80      	pop	{r7, pc}
 800e864:	c1100000 	.word	0xc1100000

0800e868 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b08c      	sub	sp, #48	; 0x30
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]
 800e870:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e872:	f7f6 ffb1 	bl	80057d8 <HAL_GetTick>
 800e876:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800e878:	683b      	ldr	r3, [r7, #0]
 800e87a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	2100      	movs	r1, #0
 800e882:	4618      	mov	r0, r3
 800e884:	f004 fa9b 	bl	8012dbe <SDMMC_GetResponse>
 800e888:	4603      	mov	r3, r0
 800e88a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e88e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e892:	d102      	bne.n	800e89a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e894:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e898:	e0b0      	b.n	800e9fc <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	2140      	movs	r1, #64	; 0x40
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	f004 facb 	bl	8012e3c <SDMMC_CmdBlockLength>
 800e8a6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e8a8:	6a3b      	ldr	r3, [r7, #32]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d005      	beq.n	800e8ba <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e8b6:	6a3b      	ldr	r3, [r7, #32]
 800e8b8:	e0a0      	b.n	800e9fc <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	681a      	ldr	r2, [r3, #0]
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8c2:	041b      	lsls	r3, r3, #16
 800e8c4:	4619      	mov	r1, r3
 800e8c6:	4610      	mov	r0, r2
 800e8c8:	f004 fb3c 	bl	8012f44 <SDMMC_CmdAppCommand>
 800e8cc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e8ce:	6a3b      	ldr	r3, [r7, #32]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d005      	beq.n	800e8e0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e8dc:	6a3b      	ldr	r3, [r7, #32]
 800e8de:	e08d      	b.n	800e9fc <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e8e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e8e4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800e8e6:	2340      	movs	r3, #64	; 0x40
 800e8e8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800e8ea:	2360      	movs	r3, #96	; 0x60
 800e8ec:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e8ee:	2302      	movs	r3, #2
 800e8f0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e8f6:	2301      	movs	r3, #1
 800e8f8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	f107 0208 	add.w	r2, r7, #8
 800e902:	4611      	mov	r1, r2
 800e904:	4618      	mov	r0, r3
 800e906:	f004 fa6d 	bl	8012de4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	4618      	mov	r0, r3
 800e910:	f004 fc24 	bl	801315c <SDMMC_CmdStatusRegister>
 800e914:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e916:	6a3b      	ldr	r3, [r7, #32]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d02b      	beq.n	800e974 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e924:	6a3b      	ldr	r3, [r7, #32]
 800e926:	e069      	b.n	800e9fc <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e92e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e932:	2b00      	cmp	r3, #0
 800e934:	d013      	beq.n	800e95e <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800e936:	2300      	movs	r3, #0
 800e938:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e93a:	e00d      	b.n	800e958 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	4618      	mov	r0, r3
 800e942:	f004 f9d9 	bl	8012cf8 <SDMMC_ReadFIFO>
 800e946:	4602      	mov	r2, r0
 800e948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e94a:	601a      	str	r2, [r3, #0]
        pData++;
 800e94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e94e:	3304      	adds	r3, #4
 800e950:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800e952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e954:	3301      	adds	r3, #1
 800e956:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e95a:	2b07      	cmp	r3, #7
 800e95c:	d9ee      	bls.n	800e93c <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e95e:	f7f6 ff3b 	bl	80057d8 <HAL_GetTick>
 800e962:	4602      	mov	r2, r0
 800e964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e966:	1ad3      	subs	r3, r2, r3
 800e968:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e96c:	d102      	bne.n	800e974 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e96e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e972:	e043      	b.n	800e9fc <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e97a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d0d2      	beq.n	800e928 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e988:	f003 0308 	and.w	r3, r3, #8
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d001      	beq.n	800e994 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e990:	2308      	movs	r3, #8
 800e992:	e033      	b.n	800e9fc <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e99a:	f003 0302 	and.w	r3, r3, #2
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d001      	beq.n	800e9a6 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e9a2:	2302      	movs	r3, #2
 800e9a4:	e02a      	b.n	800e9fc <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9ac:	f003 0320 	and.w	r3, r3, #32
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d017      	beq.n	800e9e4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800e9b4:	2320      	movs	r3, #32
 800e9b6:	e021      	b.n	800e9fc <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	4618      	mov	r0, r3
 800e9be:	f004 f99b 	bl	8012cf8 <SDMMC_ReadFIFO>
 800e9c2:	4602      	mov	r2, r0
 800e9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9c6:	601a      	str	r2, [r3, #0]
    pData++;
 800e9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ca:	3304      	adds	r3, #4
 800e9cc:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e9ce:	f7f6 ff03 	bl	80057d8 <HAL_GetTick>
 800e9d2:	4602      	mov	r2, r0
 800e9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9d6:	1ad3      	subs	r3, r2, r3
 800e9d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e9dc:	d102      	bne.n	800e9e4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e9de:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e9e2:	e00b      	b.n	800e9fc <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d1e2      	bne.n	800e9b8 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	4a03      	ldr	r2, [pc, #12]	; (800ea04 <SD_SendSDStatus+0x19c>)
 800e9f8:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800e9fa:	2300      	movs	r3, #0
}
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	3730      	adds	r7, #48	; 0x30
 800ea00:	46bd      	mov	sp, r7
 800ea02:	bd80      	pop	{r7, pc}
 800ea04:	18000f3a 	.word	0x18000f3a

0800ea08 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b084      	sub	sp, #16
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
 800ea10:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800ea12:	683b      	ldr	r3, [r7, #0]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d102      	bne.n	800ea1e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800ea18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ea1c:	e018      	b.n	800ea50 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	681a      	ldr	r2, [r3, #0]
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea26:	041b      	lsls	r3, r3, #16
 800ea28:	4619      	mov	r1, r3
 800ea2a:	4610      	mov	r0, r2
 800ea2c:	f004 fb73 	bl	8013116 <SDMMC_CmdSendStatus>
 800ea30:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d001      	beq.n	800ea3c <SD_SendStatus+0x34>
  {
    return errorstate;
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	e009      	b.n	800ea50 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	2100      	movs	r1, #0
 800ea42:	4618      	mov	r0, r3
 800ea44:	f004 f9bb 	bl	8012dbe <SDMMC_GetResponse>
 800ea48:	4602      	mov	r2, r0
 800ea4a:	683b      	ldr	r3, [r7, #0]
 800ea4c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ea4e:	2300      	movs	r3, #0
}
 800ea50:	4618      	mov	r0, r3
 800ea52:	3710      	adds	r7, #16
 800ea54:	46bd      	mov	sp, r7
 800ea56:	bd80      	pop	{r7, pc}

0800ea58 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b086      	sub	sp, #24
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ea60:	2300      	movs	r3, #0
 800ea62:	60fb      	str	r3, [r7, #12]
 800ea64:	2300      	movs	r3, #0
 800ea66:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	2100      	movs	r1, #0
 800ea6e:	4618      	mov	r0, r3
 800ea70:	f004 f9a5 	bl	8012dbe <SDMMC_GetResponse>
 800ea74:	4603      	mov	r3, r0
 800ea76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ea7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ea7e:	d102      	bne.n	800ea86 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ea80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ea84:	e02f      	b.n	800eae6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ea86:	f107 030c 	add.w	r3, r7, #12
 800ea8a:	4619      	mov	r1, r3
 800ea8c:	6878      	ldr	r0, [r7, #4]
 800ea8e:	f000 f879 	bl	800eb84 <SD_FindSCR>
 800ea92:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ea94:	697b      	ldr	r3, [r7, #20]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d001      	beq.n	800ea9e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800ea9a:	697b      	ldr	r3, [r7, #20]
 800ea9c:	e023      	b.n	800eae6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ea9e:	693b      	ldr	r3, [r7, #16]
 800eaa0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d01c      	beq.n	800eae2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	681a      	ldr	r2, [r3, #0]
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eab0:	041b      	lsls	r3, r3, #16
 800eab2:	4619      	mov	r1, r3
 800eab4:	4610      	mov	r0, r2
 800eab6:	f004 fa45 	bl	8012f44 <SDMMC_CmdAppCommand>
 800eaba:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800eabc:	697b      	ldr	r3, [r7, #20]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d001      	beq.n	800eac6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800eac2:	697b      	ldr	r3, [r7, #20]
 800eac4:	e00f      	b.n	800eae6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	2102      	movs	r1, #2
 800eacc:	4618      	mov	r0, r3
 800eace:	f004 fa7c 	bl	8012fca <SDMMC_CmdBusWidth>
 800ead2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ead4:	697b      	ldr	r3, [r7, #20]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d001      	beq.n	800eade <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800eada:	697b      	ldr	r3, [r7, #20]
 800eadc:	e003      	b.n	800eae6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800eade:	2300      	movs	r3, #0
 800eae0:	e001      	b.n	800eae6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800eae2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800eae6:	4618      	mov	r0, r3
 800eae8:	3718      	adds	r7, #24
 800eaea:	46bd      	mov	sp, r7
 800eaec:	bd80      	pop	{r7, pc}

0800eaee <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800eaee:	b580      	push	{r7, lr}
 800eaf0:	b086      	sub	sp, #24
 800eaf2:	af00      	add	r7, sp, #0
 800eaf4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	60fb      	str	r3, [r7, #12]
 800eafa:	2300      	movs	r3, #0
 800eafc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	2100      	movs	r1, #0
 800eb04:	4618      	mov	r0, r3
 800eb06:	f004 f95a 	bl	8012dbe <SDMMC_GetResponse>
 800eb0a:	4603      	mov	r3, r0
 800eb0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800eb10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800eb14:	d102      	bne.n	800eb1c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800eb16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800eb1a:	e02f      	b.n	800eb7c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800eb1c:	f107 030c 	add.w	r3, r7, #12
 800eb20:	4619      	mov	r1, r3
 800eb22:	6878      	ldr	r0, [r7, #4]
 800eb24:	f000 f82e 	bl	800eb84 <SD_FindSCR>
 800eb28:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800eb2a:	697b      	ldr	r3, [r7, #20]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d001      	beq.n	800eb34 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800eb30:	697b      	ldr	r3, [r7, #20]
 800eb32:	e023      	b.n	800eb7c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800eb34:	693b      	ldr	r3, [r7, #16]
 800eb36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d01c      	beq.n	800eb78 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681a      	ldr	r2, [r3, #0]
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb46:	041b      	lsls	r3, r3, #16
 800eb48:	4619      	mov	r1, r3
 800eb4a:	4610      	mov	r0, r2
 800eb4c:	f004 f9fa 	bl	8012f44 <SDMMC_CmdAppCommand>
 800eb50:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800eb52:	697b      	ldr	r3, [r7, #20]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d001      	beq.n	800eb5c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800eb58:	697b      	ldr	r3, [r7, #20]
 800eb5a:	e00f      	b.n	800eb7c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	2100      	movs	r1, #0
 800eb62:	4618      	mov	r0, r3
 800eb64:	f004 fa31 	bl	8012fca <SDMMC_CmdBusWidth>
 800eb68:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800eb6a:	697b      	ldr	r3, [r7, #20]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d001      	beq.n	800eb74 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800eb70:	697b      	ldr	r3, [r7, #20]
 800eb72:	e003      	b.n	800eb7c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800eb74:	2300      	movs	r3, #0
 800eb76:	e001      	b.n	800eb7c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800eb78:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	3718      	adds	r7, #24
 800eb80:	46bd      	mov	sp, r7
 800eb82:	bd80      	pop	{r7, pc}

0800eb84 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b08e      	sub	sp, #56	; 0x38
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
 800eb8c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800eb8e:	f7f6 fe23 	bl	80057d8 <HAL_GetTick>
 800eb92:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800eb94:	2300      	movs	r3, #0
 800eb96:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800eb98:	2300      	movs	r3, #0
 800eb9a:	60bb      	str	r3, [r7, #8]
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800eba0:	683b      	ldr	r3, [r7, #0]
 800eba2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	2108      	movs	r1, #8
 800ebaa:	4618      	mov	r0, r3
 800ebac:	f004 f946 	bl	8012e3c <SDMMC_CmdBlockLength>
 800ebb0:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ebb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d001      	beq.n	800ebbc <SD_FindSCR+0x38>
  {
    return errorstate;
 800ebb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebba:	e0ad      	b.n	800ed18 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681a      	ldr	r2, [r3, #0]
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ebc4:	041b      	lsls	r3, r3, #16
 800ebc6:	4619      	mov	r1, r3
 800ebc8:	4610      	mov	r0, r2
 800ebca:	f004 f9bb 	bl	8012f44 <SDMMC_CmdAppCommand>
 800ebce:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ebd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d001      	beq.n	800ebda <SD_FindSCR+0x56>
  {
    return errorstate;
 800ebd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebd8:	e09e      	b.n	800ed18 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ebda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ebde:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800ebe0:	2308      	movs	r3, #8
 800ebe2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800ebe4:	2330      	movs	r3, #48	; 0x30
 800ebe6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ebe8:	2302      	movs	r3, #2
 800ebea:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ebec:	2300      	movs	r3, #0
 800ebee:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800ebf0:	2301      	movs	r3, #1
 800ebf2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	f107 0210 	add.w	r2, r7, #16
 800ebfc:	4611      	mov	r1, r2
 800ebfe:	4618      	mov	r0, r3
 800ec00:	f004 f8f0 	bl	8012de4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	4618      	mov	r0, r3
 800ec0a:	f004 fa01 	bl	8013010 <SDMMC_CmdSendSCR>
 800ec0e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ec10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d027      	beq.n	800ec66 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800ec16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec18:	e07e      	b.n	800ed18 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d113      	bne.n	800ec50 <SD_FindSCR+0xcc>
 800ec28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d110      	bne.n	800ec50 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	4618      	mov	r0, r3
 800ec34:	f004 f860 	bl	8012cf8 <SDMMC_ReadFIFO>
 800ec38:	4603      	mov	r3, r0
 800ec3a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	4618      	mov	r0, r3
 800ec42:	f004 f859 	bl	8012cf8 <SDMMC_ReadFIFO>
 800ec46:	4603      	mov	r3, r0
 800ec48:	60fb      	str	r3, [r7, #12]
      index++;
 800ec4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec4c:	3301      	adds	r3, #1
 800ec4e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ec50:	f7f6 fdc2 	bl	80057d8 <HAL_GetTick>
 800ec54:	4602      	mov	r2, r0
 800ec56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec58:	1ad3      	subs	r3, r2, r3
 800ec5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ec5e:	d102      	bne.n	800ec66 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ec60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ec64:	e058      	b.n	800ed18 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ec6c:	f240 532a 	movw	r3, #1322	; 0x52a
 800ec70:	4013      	ands	r3, r2
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d0d1      	beq.n	800ec1a <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec7c:	f003 0308 	and.w	r3, r3, #8
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d005      	beq.n	800ec90 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	2208      	movs	r2, #8
 800ec8a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ec8c:	2308      	movs	r3, #8
 800ec8e:	e043      	b.n	800ed18 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec96:	f003 0302 	and.w	r3, r3, #2
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d005      	beq.n	800ecaa <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	2202      	movs	r2, #2
 800eca4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800eca6:	2302      	movs	r3, #2
 800eca8:	e036      	b.n	800ed18 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecb0:	f003 0320 	and.w	r3, r3, #32
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d005      	beq.n	800ecc4 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	2220      	movs	r2, #32
 800ecbe:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800ecc0:	2320      	movs	r3, #32
 800ecc2:	e029      	b.n	800ed18 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	4a15      	ldr	r2, [pc, #84]	; (800ed20 <SD_FindSCR+0x19c>)
 800ecca:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	061a      	lsls	r2, r3, #24
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	021b      	lsls	r3, r3, #8
 800ecd4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ecd8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	0a1b      	lsrs	r3, r3, #8
 800ecde:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ece2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	0e1b      	lsrs	r3, r3, #24
 800ece8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ecea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecec:	601a      	str	r2, [r3, #0]
    scr++;
 800ecee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecf0:	3304      	adds	r3, #4
 800ecf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ecf4:	68bb      	ldr	r3, [r7, #8]
 800ecf6:	061a      	lsls	r2, r3, #24
 800ecf8:	68bb      	ldr	r3, [r7, #8]
 800ecfa:	021b      	lsls	r3, r3, #8
 800ecfc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ed00:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ed02:	68bb      	ldr	r3, [r7, #8]
 800ed04:	0a1b      	lsrs	r3, r3, #8
 800ed06:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ed0a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ed0c:	68bb      	ldr	r3, [r7, #8]
 800ed0e:	0e1b      	lsrs	r3, r3, #24
 800ed10:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ed12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed14:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800ed16:	2300      	movs	r3, #0
}
 800ed18:	4618      	mov	r0, r3
 800ed1a:	3738      	adds	r7, #56	; 0x38
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	bd80      	pop	{r7, pc}
 800ed20:	18000f3a 	.word	0x18000f3a

0800ed24 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	b084      	sub	sp, #16
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d101      	bne.n	800ed36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ed32:	2301      	movs	r3, #1
 800ed34:	e10f      	b.n	800ef56 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	2200      	movs	r2, #0
 800ed3a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	4a87      	ldr	r2, [pc, #540]	; (800ef60 <HAL_SPI_Init+0x23c>)
 800ed42:	4293      	cmp	r3, r2
 800ed44:	d00f      	beq.n	800ed66 <HAL_SPI_Init+0x42>
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	4a86      	ldr	r2, [pc, #536]	; (800ef64 <HAL_SPI_Init+0x240>)
 800ed4c:	4293      	cmp	r3, r2
 800ed4e:	d00a      	beq.n	800ed66 <HAL_SPI_Init+0x42>
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	4a84      	ldr	r2, [pc, #528]	; (800ef68 <HAL_SPI_Init+0x244>)
 800ed56:	4293      	cmp	r3, r2
 800ed58:	d005      	beq.n	800ed66 <HAL_SPI_Init+0x42>
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	68db      	ldr	r3, [r3, #12]
 800ed5e:	2b0f      	cmp	r3, #15
 800ed60:	d901      	bls.n	800ed66 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ed62:	2301      	movs	r3, #1
 800ed64:	e0f7      	b.n	800ef56 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ed66:	6878      	ldr	r0, [r7, #4]
 800ed68:	f000 f900 	bl	800ef6c <SPI_GetPacketSize>
 800ed6c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	4a7b      	ldr	r2, [pc, #492]	; (800ef60 <HAL_SPI_Init+0x23c>)
 800ed74:	4293      	cmp	r3, r2
 800ed76:	d00c      	beq.n	800ed92 <HAL_SPI_Init+0x6e>
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	4a79      	ldr	r2, [pc, #484]	; (800ef64 <HAL_SPI_Init+0x240>)
 800ed7e:	4293      	cmp	r3, r2
 800ed80:	d007      	beq.n	800ed92 <HAL_SPI_Init+0x6e>
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	4a78      	ldr	r2, [pc, #480]	; (800ef68 <HAL_SPI_Init+0x244>)
 800ed88:	4293      	cmp	r3, r2
 800ed8a:	d002      	beq.n	800ed92 <HAL_SPI_Init+0x6e>
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	2b08      	cmp	r3, #8
 800ed90:	d811      	bhi.n	800edb6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ed96:	4a72      	ldr	r2, [pc, #456]	; (800ef60 <HAL_SPI_Init+0x23c>)
 800ed98:	4293      	cmp	r3, r2
 800ed9a:	d009      	beq.n	800edb0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	4a70      	ldr	r2, [pc, #448]	; (800ef64 <HAL_SPI_Init+0x240>)
 800eda2:	4293      	cmp	r3, r2
 800eda4:	d004      	beq.n	800edb0 <HAL_SPI_Init+0x8c>
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	4a6f      	ldr	r2, [pc, #444]	; (800ef68 <HAL_SPI_Init+0x244>)
 800edac:	4293      	cmp	r3, r2
 800edae:	d104      	bne.n	800edba <HAL_SPI_Init+0x96>
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	2b10      	cmp	r3, #16
 800edb4:	d901      	bls.n	800edba <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800edb6:	2301      	movs	r3, #1
 800edb8:	e0cd      	b.n	800ef56 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800edc0:	b2db      	uxtb	r3, r3
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d106      	bne.n	800edd4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	2200      	movs	r2, #0
 800edca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800edce:	6878      	ldr	r0, [r7, #4]
 800edd0:	f7f6 f886 	bl	8004ee0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	2202      	movs	r2, #2
 800edd8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	681a      	ldr	r2, [r3, #0]
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	f022 0201 	bic.w	r2, r2, #1
 800edea:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	689b      	ldr	r3, [r3, #8]
 800edf2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800edf6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	699b      	ldr	r3, [r3, #24]
 800edfc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ee00:	d119      	bne.n	800ee36 <HAL_SPI_Init+0x112>
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	685b      	ldr	r3, [r3, #4]
 800ee06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ee0a:	d103      	bne.n	800ee14 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d008      	beq.n	800ee26 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d10c      	bne.n	800ee36 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ee20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ee24:	d107      	bne.n	800ee36 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	681a      	ldr	r2, [r3, #0]
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ee34:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	685b      	ldr	r3, [r3, #4]
 800ee3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d00f      	beq.n	800ee62 <HAL_SPI_Init+0x13e>
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	68db      	ldr	r3, [r3, #12]
 800ee46:	2b06      	cmp	r3, #6
 800ee48:	d90b      	bls.n	800ee62 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	430a      	orrs	r2, r1
 800ee5e:	601a      	str	r2, [r3, #0]
 800ee60:	e007      	b.n	800ee72 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	681a      	ldr	r2, [r3, #0]
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ee70:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	69da      	ldr	r2, [r3, #28]
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee7a:	431a      	orrs	r2, r3
 800ee7c:	68bb      	ldr	r3, [r7, #8]
 800ee7e:	431a      	orrs	r2, r3
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee84:	ea42 0103 	orr.w	r1, r2, r3
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	68da      	ldr	r2, [r3, #12]
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	430a      	orrs	r2, r1
 800ee92:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee9c:	431a      	orrs	r2, r3
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eea2:	431a      	orrs	r2, r3
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	699b      	ldr	r3, [r3, #24]
 800eea8:	431a      	orrs	r2, r3
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	691b      	ldr	r3, [r3, #16]
 800eeae:	431a      	orrs	r2, r3
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	695b      	ldr	r3, [r3, #20]
 800eeb4:	431a      	orrs	r2, r3
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	6a1b      	ldr	r3, [r3, #32]
 800eeba:	431a      	orrs	r2, r3
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	685b      	ldr	r3, [r3, #4]
 800eec0:	431a      	orrs	r2, r3
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eec6:	431a      	orrs	r2, r3
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	689b      	ldr	r3, [r3, #8]
 800eecc:	431a      	orrs	r2, r3
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eed2:	ea42 0103 	orr.w	r1, r2, r3
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	430a      	orrs	r2, r1
 800eee0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	685b      	ldr	r3, [r3, #4]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d113      	bne.n	800ef12 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	689b      	ldr	r3, [r3, #8]
 800eef0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800eefc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	689b      	ldr	r3, [r3, #8]
 800ef04:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ef10:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	f022 0201 	bic.w	r2, r2, #1
 800ef20:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	685b      	ldr	r3, [r3, #4]
 800ef26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d00a      	beq.n	800ef44 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	68db      	ldr	r3, [r3, #12]
 800ef34:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	430a      	orrs	r2, r1
 800ef42:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	2200      	movs	r2, #0
 800ef48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	2201      	movs	r2, #1
 800ef50:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800ef54:	2300      	movs	r3, #0
}
 800ef56:	4618      	mov	r0, r3
 800ef58:	3710      	adds	r7, #16
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	bd80      	pop	{r7, pc}
 800ef5e:	bf00      	nop
 800ef60:	40013000 	.word	0x40013000
 800ef64:	40003800 	.word	0x40003800
 800ef68:	40003c00 	.word	0x40003c00

0800ef6c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800ef6c:	b480      	push	{r7}
 800ef6e:	b085      	sub	sp, #20
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef78:	095b      	lsrs	r3, r3, #5
 800ef7a:	3301      	adds	r3, #1
 800ef7c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	68db      	ldr	r3, [r3, #12]
 800ef82:	3301      	adds	r3, #1
 800ef84:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ef86:	68bb      	ldr	r3, [r7, #8]
 800ef88:	3307      	adds	r3, #7
 800ef8a:	08db      	lsrs	r3, r3, #3
 800ef8c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ef8e:	68bb      	ldr	r3, [r7, #8]
 800ef90:	68fa      	ldr	r2, [r7, #12]
 800ef92:	fb02 f303 	mul.w	r3, r2, r3
}
 800ef96:	4618      	mov	r0, r3
 800ef98:	3714      	adds	r7, #20
 800ef9a:	46bd      	mov	sp, r7
 800ef9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa0:	4770      	bx	lr

0800efa2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800efa2:	b580      	push	{r7, lr}
 800efa4:	b082      	sub	sp, #8
 800efa6:	af00      	add	r7, sp, #0
 800efa8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	2b00      	cmp	r3, #0
 800efae:	d101      	bne.n	800efb4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800efb0:	2301      	movs	r3, #1
 800efb2:	e049      	b.n	800f048 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800efba:	b2db      	uxtb	r3, r3
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d106      	bne.n	800efce <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	2200      	movs	r2, #0
 800efc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800efc8:	6878      	ldr	r0, [r7, #4]
 800efca:	f7f6 f8d1 	bl	8005170 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	2202      	movs	r2, #2
 800efd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	681a      	ldr	r2, [r3, #0]
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	3304      	adds	r3, #4
 800efde:	4619      	mov	r1, r3
 800efe0:	4610      	mov	r0, r2
 800efe2:	f000 ff7d 	bl	800fee0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	2201      	movs	r2, #1
 800efea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	2201      	movs	r2, #1
 800eff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	2201      	movs	r2, #1
 800effa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	2201      	movs	r2, #1
 800f002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	2201      	movs	r2, #1
 800f00a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	2201      	movs	r2, #1
 800f012:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	2201      	movs	r2, #1
 800f01a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	2201      	movs	r2, #1
 800f022:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	2201      	movs	r2, #1
 800f02a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	2201      	movs	r2, #1
 800f032:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	2201      	movs	r2, #1
 800f03a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	2201      	movs	r2, #1
 800f042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f046:	2300      	movs	r3, #0
}
 800f048:	4618      	mov	r0, r3
 800f04a:	3708      	adds	r7, #8
 800f04c:	46bd      	mov	sp, r7
 800f04e:	bd80      	pop	{r7, pc}

0800f050 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800f050:	b580      	push	{r7, lr}
 800f052:	b082      	sub	sp, #8
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d101      	bne.n	800f062 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800f05e:	2301      	movs	r3, #1
 800f060:	e049      	b.n	800f0f6 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f068:	b2db      	uxtb	r3, r3
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d106      	bne.n	800f07c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	2200      	movs	r2, #0
 800f072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800f076:	6878      	ldr	r0, [r7, #4]
 800f078:	f000 f841 	bl	800f0fe <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	2202      	movs	r2, #2
 800f080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681a      	ldr	r2, [r3, #0]
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	3304      	adds	r3, #4
 800f08c:	4619      	mov	r1, r3
 800f08e:	4610      	mov	r0, r2
 800f090:	f000 ff26 	bl	800fee0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2201      	movs	r2, #1
 800f098:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	2201      	movs	r2, #1
 800f0a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	2201      	movs	r2, #1
 800f0a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	2201      	movs	r2, #1
 800f0b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	2201      	movs	r2, #1
 800f0b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	2201      	movs	r2, #1
 800f0c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	2201      	movs	r2, #1
 800f0c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	2201      	movs	r2, #1
 800f0d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	2201      	movs	r2, #1
 800f0d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	2201      	movs	r2, #1
 800f0e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	2201      	movs	r2, #1
 800f0e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	2201      	movs	r2, #1
 800f0f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f0f4:	2300      	movs	r3, #0
}
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	3708      	adds	r7, #8
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	bd80      	pop	{r7, pc}

0800f0fe <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800f0fe:	b480      	push	{r7}
 800f100:	b083      	sub	sp, #12
 800f102:	af00      	add	r7, sp, #0
 800f104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800f106:	bf00      	nop
 800f108:	370c      	adds	r7, #12
 800f10a:	46bd      	mov	sp, r7
 800f10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f110:	4770      	bx	lr

0800f112 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f112:	b580      	push	{r7, lr}
 800f114:	b082      	sub	sp, #8
 800f116:	af00      	add	r7, sp, #0
 800f118:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d101      	bne.n	800f124 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f120:	2301      	movs	r3, #1
 800f122:	e049      	b.n	800f1b8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f12a:	b2db      	uxtb	r3, r3
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d106      	bne.n	800f13e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	2200      	movs	r2, #0
 800f134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f138:	6878      	ldr	r0, [r7, #4]
 800f13a:	f7f5 ff5f 	bl	8004ffc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	2202      	movs	r2, #2
 800f142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	681a      	ldr	r2, [r3, #0]
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	3304      	adds	r3, #4
 800f14e:	4619      	mov	r1, r3
 800f150:	4610      	mov	r0, r2
 800f152:	f000 fec5 	bl	800fee0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	2201      	movs	r2, #1
 800f15a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	2201      	movs	r2, #1
 800f162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	2201      	movs	r2, #1
 800f16a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	2201      	movs	r2, #1
 800f172:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	2201      	movs	r2, #1
 800f17a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	2201      	movs	r2, #1
 800f182:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	2201      	movs	r2, #1
 800f18a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	2201      	movs	r2, #1
 800f192:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	2201      	movs	r2, #1
 800f19a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	2201      	movs	r2, #1
 800f1a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	2201      	movs	r2, #1
 800f1aa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	2201      	movs	r2, #1
 800f1b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f1b6:	2300      	movs	r3, #0
}
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	3708      	adds	r7, #8
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	bd80      	pop	{r7, pc}

0800f1c0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	b082      	sub	sp, #8
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d101      	bne.n	800f1d2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800f1ce:	2301      	movs	r3, #1
 800f1d0:	e049      	b.n	800f266 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f1d8:	b2db      	uxtb	r3, r3
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d106      	bne.n	800f1ec <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	2200      	movs	r2, #0
 800f1e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800f1e6:	6878      	ldr	r0, [r7, #4]
 800f1e8:	f7f5 ff40 	bl	800506c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	2202      	movs	r2, #2
 800f1f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	681a      	ldr	r2, [r3, #0]
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	3304      	adds	r3, #4
 800f1fc:	4619      	mov	r1, r3
 800f1fe:	4610      	mov	r0, r2
 800f200:	f000 fe6e 	bl	800fee0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	2201      	movs	r2, #1
 800f208:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	2201      	movs	r2, #1
 800f210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	2201      	movs	r2, #1
 800f218:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	2201      	movs	r2, #1
 800f220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	2201      	movs	r2, #1
 800f228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	2201      	movs	r2, #1
 800f230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	2201      	movs	r2, #1
 800f238:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	2201      	movs	r2, #1
 800f240:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	2201      	movs	r2, #1
 800f248:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	2201      	movs	r2, #1
 800f250:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	2201      	movs	r2, #1
 800f258:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	2201      	movs	r2, #1
 800f260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f264:	2300      	movs	r3, #0
}
 800f266:	4618      	mov	r0, r3
 800f268:	3708      	adds	r7, #8
 800f26a:	46bd      	mov	sp, r7
 800f26c:	bd80      	pop	{r7, pc}
	...

0800f270 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f270:	b580      	push	{r7, lr}
 800f272:	b084      	sub	sp, #16
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]
 800f278:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800f27a:	683b      	ldr	r3, [r7, #0]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d104      	bne.n	800f28a <HAL_TIM_IC_Start+0x1a>
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f286:	b2db      	uxtb	r3, r3
 800f288:	e023      	b.n	800f2d2 <HAL_TIM_IC_Start+0x62>
 800f28a:	683b      	ldr	r3, [r7, #0]
 800f28c:	2b04      	cmp	r3, #4
 800f28e:	d104      	bne.n	800f29a <HAL_TIM_IC_Start+0x2a>
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f296:	b2db      	uxtb	r3, r3
 800f298:	e01b      	b.n	800f2d2 <HAL_TIM_IC_Start+0x62>
 800f29a:	683b      	ldr	r3, [r7, #0]
 800f29c:	2b08      	cmp	r3, #8
 800f29e:	d104      	bne.n	800f2aa <HAL_TIM_IC_Start+0x3a>
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f2a6:	b2db      	uxtb	r3, r3
 800f2a8:	e013      	b.n	800f2d2 <HAL_TIM_IC_Start+0x62>
 800f2aa:	683b      	ldr	r3, [r7, #0]
 800f2ac:	2b0c      	cmp	r3, #12
 800f2ae:	d104      	bne.n	800f2ba <HAL_TIM_IC_Start+0x4a>
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f2b6:	b2db      	uxtb	r3, r3
 800f2b8:	e00b      	b.n	800f2d2 <HAL_TIM_IC_Start+0x62>
 800f2ba:	683b      	ldr	r3, [r7, #0]
 800f2bc:	2b10      	cmp	r3, #16
 800f2be:	d104      	bne.n	800f2ca <HAL_TIM_IC_Start+0x5a>
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f2c6:	b2db      	uxtb	r3, r3
 800f2c8:	e003      	b.n	800f2d2 <HAL_TIM_IC_Start+0x62>
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f2d0:	b2db      	uxtb	r3, r3
 800f2d2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800f2d4:	683b      	ldr	r3, [r7, #0]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d104      	bne.n	800f2e4 <HAL_TIM_IC_Start+0x74>
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f2e0:	b2db      	uxtb	r3, r3
 800f2e2:	e013      	b.n	800f30c <HAL_TIM_IC_Start+0x9c>
 800f2e4:	683b      	ldr	r3, [r7, #0]
 800f2e6:	2b04      	cmp	r3, #4
 800f2e8:	d104      	bne.n	800f2f4 <HAL_TIM_IC_Start+0x84>
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f2f0:	b2db      	uxtb	r3, r3
 800f2f2:	e00b      	b.n	800f30c <HAL_TIM_IC_Start+0x9c>
 800f2f4:	683b      	ldr	r3, [r7, #0]
 800f2f6:	2b08      	cmp	r3, #8
 800f2f8:	d104      	bne.n	800f304 <HAL_TIM_IC_Start+0x94>
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800f300:	b2db      	uxtb	r3, r3
 800f302:	e003      	b.n	800f30c <HAL_TIM_IC_Start+0x9c>
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800f30a:	b2db      	uxtb	r3, r3
 800f30c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800f30e:	7bfb      	ldrb	r3, [r7, #15]
 800f310:	2b01      	cmp	r3, #1
 800f312:	d102      	bne.n	800f31a <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800f314:	7bbb      	ldrb	r3, [r7, #14]
 800f316:	2b01      	cmp	r3, #1
 800f318:	d001      	beq.n	800f31e <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 800f31a:	2301      	movs	r3, #1
 800f31c:	e097      	b.n	800f44e <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f31e:	683b      	ldr	r3, [r7, #0]
 800f320:	2b00      	cmp	r3, #0
 800f322:	d104      	bne.n	800f32e <HAL_TIM_IC_Start+0xbe>
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	2202      	movs	r2, #2
 800f328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f32c:	e023      	b.n	800f376 <HAL_TIM_IC_Start+0x106>
 800f32e:	683b      	ldr	r3, [r7, #0]
 800f330:	2b04      	cmp	r3, #4
 800f332:	d104      	bne.n	800f33e <HAL_TIM_IC_Start+0xce>
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	2202      	movs	r2, #2
 800f338:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f33c:	e01b      	b.n	800f376 <HAL_TIM_IC_Start+0x106>
 800f33e:	683b      	ldr	r3, [r7, #0]
 800f340:	2b08      	cmp	r3, #8
 800f342:	d104      	bne.n	800f34e <HAL_TIM_IC_Start+0xde>
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	2202      	movs	r2, #2
 800f348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f34c:	e013      	b.n	800f376 <HAL_TIM_IC_Start+0x106>
 800f34e:	683b      	ldr	r3, [r7, #0]
 800f350:	2b0c      	cmp	r3, #12
 800f352:	d104      	bne.n	800f35e <HAL_TIM_IC_Start+0xee>
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	2202      	movs	r2, #2
 800f358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f35c:	e00b      	b.n	800f376 <HAL_TIM_IC_Start+0x106>
 800f35e:	683b      	ldr	r3, [r7, #0]
 800f360:	2b10      	cmp	r3, #16
 800f362:	d104      	bne.n	800f36e <HAL_TIM_IC_Start+0xfe>
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	2202      	movs	r2, #2
 800f368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f36c:	e003      	b.n	800f376 <HAL_TIM_IC_Start+0x106>
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	2202      	movs	r2, #2
 800f372:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f376:	683b      	ldr	r3, [r7, #0]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d104      	bne.n	800f386 <HAL_TIM_IC_Start+0x116>
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	2202      	movs	r2, #2
 800f380:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f384:	e013      	b.n	800f3ae <HAL_TIM_IC_Start+0x13e>
 800f386:	683b      	ldr	r3, [r7, #0]
 800f388:	2b04      	cmp	r3, #4
 800f38a:	d104      	bne.n	800f396 <HAL_TIM_IC_Start+0x126>
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	2202      	movs	r2, #2
 800f390:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f394:	e00b      	b.n	800f3ae <HAL_TIM_IC_Start+0x13e>
 800f396:	683b      	ldr	r3, [r7, #0]
 800f398:	2b08      	cmp	r3, #8
 800f39a:	d104      	bne.n	800f3a6 <HAL_TIM_IC_Start+0x136>
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	2202      	movs	r2, #2
 800f3a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f3a4:	e003      	b.n	800f3ae <HAL_TIM_IC_Start+0x13e>
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	2202      	movs	r2, #2
 800f3aa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	2201      	movs	r2, #1
 800f3b4:	6839      	ldr	r1, [r7, #0]
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	f001 fb95 	bl	8010ae6 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	4a25      	ldr	r2, [pc, #148]	; (800f458 <HAL_TIM_IC_Start+0x1e8>)
 800f3c2:	4293      	cmp	r3, r2
 800f3c4:	d022      	beq.n	800f40c <HAL_TIM_IC_Start+0x19c>
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f3ce:	d01d      	beq.n	800f40c <HAL_TIM_IC_Start+0x19c>
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	4a21      	ldr	r2, [pc, #132]	; (800f45c <HAL_TIM_IC_Start+0x1ec>)
 800f3d6:	4293      	cmp	r3, r2
 800f3d8:	d018      	beq.n	800f40c <HAL_TIM_IC_Start+0x19c>
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	4a20      	ldr	r2, [pc, #128]	; (800f460 <HAL_TIM_IC_Start+0x1f0>)
 800f3e0:	4293      	cmp	r3, r2
 800f3e2:	d013      	beq.n	800f40c <HAL_TIM_IC_Start+0x19c>
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	4a1e      	ldr	r2, [pc, #120]	; (800f464 <HAL_TIM_IC_Start+0x1f4>)
 800f3ea:	4293      	cmp	r3, r2
 800f3ec:	d00e      	beq.n	800f40c <HAL_TIM_IC_Start+0x19c>
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	4a1d      	ldr	r2, [pc, #116]	; (800f468 <HAL_TIM_IC_Start+0x1f8>)
 800f3f4:	4293      	cmp	r3, r2
 800f3f6:	d009      	beq.n	800f40c <HAL_TIM_IC_Start+0x19c>
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	4a1b      	ldr	r2, [pc, #108]	; (800f46c <HAL_TIM_IC_Start+0x1fc>)
 800f3fe:	4293      	cmp	r3, r2
 800f400:	d004      	beq.n	800f40c <HAL_TIM_IC_Start+0x19c>
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	4a1a      	ldr	r2, [pc, #104]	; (800f470 <HAL_TIM_IC_Start+0x200>)
 800f408:	4293      	cmp	r3, r2
 800f40a:	d115      	bne.n	800f438 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	689a      	ldr	r2, [r3, #8]
 800f412:	4b18      	ldr	r3, [pc, #96]	; (800f474 <HAL_TIM_IC_Start+0x204>)
 800f414:	4013      	ands	r3, r2
 800f416:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f418:	68bb      	ldr	r3, [r7, #8]
 800f41a:	2b06      	cmp	r3, #6
 800f41c:	d015      	beq.n	800f44a <HAL_TIM_IC_Start+0x1da>
 800f41e:	68bb      	ldr	r3, [r7, #8]
 800f420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f424:	d011      	beq.n	800f44a <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	681a      	ldr	r2, [r3, #0]
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	f042 0201 	orr.w	r2, r2, #1
 800f434:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f436:	e008      	b.n	800f44a <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	681a      	ldr	r2, [r3, #0]
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	f042 0201 	orr.w	r2, r2, #1
 800f446:	601a      	str	r2, [r3, #0]
 800f448:	e000      	b.n	800f44c <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f44a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f44c:	2300      	movs	r3, #0
}
 800f44e:	4618      	mov	r0, r3
 800f450:	3710      	adds	r7, #16
 800f452:	46bd      	mov	sp, r7
 800f454:	bd80      	pop	{r7, pc}
 800f456:	bf00      	nop
 800f458:	40010000 	.word	0x40010000
 800f45c:	40000400 	.word	0x40000400
 800f460:	40000800 	.word	0x40000800
 800f464:	40000c00 	.word	0x40000c00
 800f468:	40010400 	.word	0x40010400
 800f46c:	40001800 	.word	0x40001800
 800f470:	40014000 	.word	0x40014000
 800f474:	00010007 	.word	0x00010007

0800f478 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f478:	b580      	push	{r7, lr}
 800f47a:	b084      	sub	sp, #16
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	6078      	str	r0, [r7, #4]
 800f480:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f482:	2300      	movs	r3, #0
 800f484:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800f486:	683b      	ldr	r3, [r7, #0]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d104      	bne.n	800f496 <HAL_TIM_IC_Start_IT+0x1e>
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f492:	b2db      	uxtb	r3, r3
 800f494:	e023      	b.n	800f4de <HAL_TIM_IC_Start_IT+0x66>
 800f496:	683b      	ldr	r3, [r7, #0]
 800f498:	2b04      	cmp	r3, #4
 800f49a:	d104      	bne.n	800f4a6 <HAL_TIM_IC_Start_IT+0x2e>
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f4a2:	b2db      	uxtb	r3, r3
 800f4a4:	e01b      	b.n	800f4de <HAL_TIM_IC_Start_IT+0x66>
 800f4a6:	683b      	ldr	r3, [r7, #0]
 800f4a8:	2b08      	cmp	r3, #8
 800f4aa:	d104      	bne.n	800f4b6 <HAL_TIM_IC_Start_IT+0x3e>
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f4b2:	b2db      	uxtb	r3, r3
 800f4b4:	e013      	b.n	800f4de <HAL_TIM_IC_Start_IT+0x66>
 800f4b6:	683b      	ldr	r3, [r7, #0]
 800f4b8:	2b0c      	cmp	r3, #12
 800f4ba:	d104      	bne.n	800f4c6 <HAL_TIM_IC_Start_IT+0x4e>
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f4c2:	b2db      	uxtb	r3, r3
 800f4c4:	e00b      	b.n	800f4de <HAL_TIM_IC_Start_IT+0x66>
 800f4c6:	683b      	ldr	r3, [r7, #0]
 800f4c8:	2b10      	cmp	r3, #16
 800f4ca:	d104      	bne.n	800f4d6 <HAL_TIM_IC_Start_IT+0x5e>
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f4d2:	b2db      	uxtb	r3, r3
 800f4d4:	e003      	b.n	800f4de <HAL_TIM_IC_Start_IT+0x66>
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f4dc:	b2db      	uxtb	r3, r3
 800f4de:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800f4e0:	683b      	ldr	r3, [r7, #0]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d104      	bne.n	800f4f0 <HAL_TIM_IC_Start_IT+0x78>
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f4ec:	b2db      	uxtb	r3, r3
 800f4ee:	e013      	b.n	800f518 <HAL_TIM_IC_Start_IT+0xa0>
 800f4f0:	683b      	ldr	r3, [r7, #0]
 800f4f2:	2b04      	cmp	r3, #4
 800f4f4:	d104      	bne.n	800f500 <HAL_TIM_IC_Start_IT+0x88>
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f4fc:	b2db      	uxtb	r3, r3
 800f4fe:	e00b      	b.n	800f518 <HAL_TIM_IC_Start_IT+0xa0>
 800f500:	683b      	ldr	r3, [r7, #0]
 800f502:	2b08      	cmp	r3, #8
 800f504:	d104      	bne.n	800f510 <HAL_TIM_IC_Start_IT+0x98>
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800f50c:	b2db      	uxtb	r3, r3
 800f50e:	e003      	b.n	800f518 <HAL_TIM_IC_Start_IT+0xa0>
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800f516:	b2db      	uxtb	r3, r3
 800f518:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800f51a:	7bbb      	ldrb	r3, [r7, #14]
 800f51c:	2b01      	cmp	r3, #1
 800f51e:	d102      	bne.n	800f526 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800f520:	7b7b      	ldrb	r3, [r7, #13]
 800f522:	2b01      	cmp	r3, #1
 800f524:	d001      	beq.n	800f52a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800f526:	2301      	movs	r3, #1
 800f528:	e0e2      	b.n	800f6f0 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f52a:	683b      	ldr	r3, [r7, #0]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d104      	bne.n	800f53a <HAL_TIM_IC_Start_IT+0xc2>
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	2202      	movs	r2, #2
 800f534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f538:	e023      	b.n	800f582 <HAL_TIM_IC_Start_IT+0x10a>
 800f53a:	683b      	ldr	r3, [r7, #0]
 800f53c:	2b04      	cmp	r3, #4
 800f53e:	d104      	bne.n	800f54a <HAL_TIM_IC_Start_IT+0xd2>
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	2202      	movs	r2, #2
 800f544:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f548:	e01b      	b.n	800f582 <HAL_TIM_IC_Start_IT+0x10a>
 800f54a:	683b      	ldr	r3, [r7, #0]
 800f54c:	2b08      	cmp	r3, #8
 800f54e:	d104      	bne.n	800f55a <HAL_TIM_IC_Start_IT+0xe2>
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	2202      	movs	r2, #2
 800f554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f558:	e013      	b.n	800f582 <HAL_TIM_IC_Start_IT+0x10a>
 800f55a:	683b      	ldr	r3, [r7, #0]
 800f55c:	2b0c      	cmp	r3, #12
 800f55e:	d104      	bne.n	800f56a <HAL_TIM_IC_Start_IT+0xf2>
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	2202      	movs	r2, #2
 800f564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f568:	e00b      	b.n	800f582 <HAL_TIM_IC_Start_IT+0x10a>
 800f56a:	683b      	ldr	r3, [r7, #0]
 800f56c:	2b10      	cmp	r3, #16
 800f56e:	d104      	bne.n	800f57a <HAL_TIM_IC_Start_IT+0x102>
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	2202      	movs	r2, #2
 800f574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f578:	e003      	b.n	800f582 <HAL_TIM_IC_Start_IT+0x10a>
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	2202      	movs	r2, #2
 800f57e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f582:	683b      	ldr	r3, [r7, #0]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d104      	bne.n	800f592 <HAL_TIM_IC_Start_IT+0x11a>
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	2202      	movs	r2, #2
 800f58c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f590:	e013      	b.n	800f5ba <HAL_TIM_IC_Start_IT+0x142>
 800f592:	683b      	ldr	r3, [r7, #0]
 800f594:	2b04      	cmp	r3, #4
 800f596:	d104      	bne.n	800f5a2 <HAL_TIM_IC_Start_IT+0x12a>
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	2202      	movs	r2, #2
 800f59c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f5a0:	e00b      	b.n	800f5ba <HAL_TIM_IC_Start_IT+0x142>
 800f5a2:	683b      	ldr	r3, [r7, #0]
 800f5a4:	2b08      	cmp	r3, #8
 800f5a6:	d104      	bne.n	800f5b2 <HAL_TIM_IC_Start_IT+0x13a>
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	2202      	movs	r2, #2
 800f5ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f5b0:	e003      	b.n	800f5ba <HAL_TIM_IC_Start_IT+0x142>
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	2202      	movs	r2, #2
 800f5b6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800f5ba:	683b      	ldr	r3, [r7, #0]
 800f5bc:	2b0c      	cmp	r3, #12
 800f5be:	d841      	bhi.n	800f644 <HAL_TIM_IC_Start_IT+0x1cc>
 800f5c0:	a201      	add	r2, pc, #4	; (adr r2, 800f5c8 <HAL_TIM_IC_Start_IT+0x150>)
 800f5c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5c6:	bf00      	nop
 800f5c8:	0800f5fd 	.word	0x0800f5fd
 800f5cc:	0800f645 	.word	0x0800f645
 800f5d0:	0800f645 	.word	0x0800f645
 800f5d4:	0800f645 	.word	0x0800f645
 800f5d8:	0800f60f 	.word	0x0800f60f
 800f5dc:	0800f645 	.word	0x0800f645
 800f5e0:	0800f645 	.word	0x0800f645
 800f5e4:	0800f645 	.word	0x0800f645
 800f5e8:	0800f621 	.word	0x0800f621
 800f5ec:	0800f645 	.word	0x0800f645
 800f5f0:	0800f645 	.word	0x0800f645
 800f5f4:	0800f645 	.word	0x0800f645
 800f5f8:	0800f633 	.word	0x0800f633
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	68da      	ldr	r2, [r3, #12]
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	f042 0202 	orr.w	r2, r2, #2
 800f60a:	60da      	str	r2, [r3, #12]
      break;
 800f60c:	e01d      	b.n	800f64a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	68da      	ldr	r2, [r3, #12]
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	f042 0204 	orr.w	r2, r2, #4
 800f61c:	60da      	str	r2, [r3, #12]
      break;
 800f61e:	e014      	b.n	800f64a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	68da      	ldr	r2, [r3, #12]
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	f042 0208 	orr.w	r2, r2, #8
 800f62e:	60da      	str	r2, [r3, #12]
      break;
 800f630:	e00b      	b.n	800f64a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	68da      	ldr	r2, [r3, #12]
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	f042 0210 	orr.w	r2, r2, #16
 800f640:	60da      	str	r2, [r3, #12]
      break;
 800f642:	e002      	b.n	800f64a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800f644:	2301      	movs	r3, #1
 800f646:	73fb      	strb	r3, [r7, #15]
      break;
 800f648:	bf00      	nop
  }

  if (status == HAL_OK)
 800f64a:	7bfb      	ldrb	r3, [r7, #15]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d14e      	bne.n	800f6ee <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	2201      	movs	r2, #1
 800f656:	6839      	ldr	r1, [r7, #0]
 800f658:	4618      	mov	r0, r3
 800f65a:	f001 fa44 	bl	8010ae6 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	4a25      	ldr	r2, [pc, #148]	; (800f6f8 <HAL_TIM_IC_Start_IT+0x280>)
 800f664:	4293      	cmp	r3, r2
 800f666:	d022      	beq.n	800f6ae <HAL_TIM_IC_Start_IT+0x236>
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f670:	d01d      	beq.n	800f6ae <HAL_TIM_IC_Start_IT+0x236>
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	4a21      	ldr	r2, [pc, #132]	; (800f6fc <HAL_TIM_IC_Start_IT+0x284>)
 800f678:	4293      	cmp	r3, r2
 800f67a:	d018      	beq.n	800f6ae <HAL_TIM_IC_Start_IT+0x236>
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	4a1f      	ldr	r2, [pc, #124]	; (800f700 <HAL_TIM_IC_Start_IT+0x288>)
 800f682:	4293      	cmp	r3, r2
 800f684:	d013      	beq.n	800f6ae <HAL_TIM_IC_Start_IT+0x236>
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	4a1e      	ldr	r2, [pc, #120]	; (800f704 <HAL_TIM_IC_Start_IT+0x28c>)
 800f68c:	4293      	cmp	r3, r2
 800f68e:	d00e      	beq.n	800f6ae <HAL_TIM_IC_Start_IT+0x236>
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	4a1c      	ldr	r2, [pc, #112]	; (800f708 <HAL_TIM_IC_Start_IT+0x290>)
 800f696:	4293      	cmp	r3, r2
 800f698:	d009      	beq.n	800f6ae <HAL_TIM_IC_Start_IT+0x236>
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	4a1b      	ldr	r2, [pc, #108]	; (800f70c <HAL_TIM_IC_Start_IT+0x294>)
 800f6a0:	4293      	cmp	r3, r2
 800f6a2:	d004      	beq.n	800f6ae <HAL_TIM_IC_Start_IT+0x236>
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	4a19      	ldr	r2, [pc, #100]	; (800f710 <HAL_TIM_IC_Start_IT+0x298>)
 800f6aa:	4293      	cmp	r3, r2
 800f6ac:	d115      	bne.n	800f6da <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	689a      	ldr	r2, [r3, #8]
 800f6b4:	4b17      	ldr	r3, [pc, #92]	; (800f714 <HAL_TIM_IC_Start_IT+0x29c>)
 800f6b6:	4013      	ands	r3, r2
 800f6b8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f6ba:	68bb      	ldr	r3, [r7, #8]
 800f6bc:	2b06      	cmp	r3, #6
 800f6be:	d015      	beq.n	800f6ec <HAL_TIM_IC_Start_IT+0x274>
 800f6c0:	68bb      	ldr	r3, [r7, #8]
 800f6c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f6c6:	d011      	beq.n	800f6ec <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	681a      	ldr	r2, [r3, #0]
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	f042 0201 	orr.w	r2, r2, #1
 800f6d6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f6d8:	e008      	b.n	800f6ec <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	681a      	ldr	r2, [r3, #0]
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	f042 0201 	orr.w	r2, r2, #1
 800f6e8:	601a      	str	r2, [r3, #0]
 800f6ea:	e000      	b.n	800f6ee <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f6ec:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800f6ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	3710      	adds	r7, #16
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	bd80      	pop	{r7, pc}
 800f6f8:	40010000 	.word	0x40010000
 800f6fc:	40000400 	.word	0x40000400
 800f700:	40000800 	.word	0x40000800
 800f704:	40000c00 	.word	0x40000c00
 800f708:	40010400 	.word	0x40010400
 800f70c:	40001800 	.word	0x40001800
 800f710:	40014000 	.word	0x40014000
 800f714:	00010007 	.word	0x00010007

0800f718 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f718:	b580      	push	{r7, lr}
 800f71a:	b082      	sub	sp, #8
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	691b      	ldr	r3, [r3, #16]
 800f726:	f003 0302 	and.w	r3, r3, #2
 800f72a:	2b02      	cmp	r3, #2
 800f72c:	d122      	bne.n	800f774 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	68db      	ldr	r3, [r3, #12]
 800f734:	f003 0302 	and.w	r3, r3, #2
 800f738:	2b02      	cmp	r3, #2
 800f73a:	d11b      	bne.n	800f774 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	f06f 0202 	mvn.w	r2, #2
 800f744:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	2201      	movs	r2, #1
 800f74a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	699b      	ldr	r3, [r3, #24]
 800f752:	f003 0303 	and.w	r3, r3, #3
 800f756:	2b00      	cmp	r3, #0
 800f758:	d003      	beq.n	800f762 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f75a:	6878      	ldr	r0, [r7, #4]
 800f75c:	f7f4 f8c6 	bl	80038ec <HAL_TIM_IC_CaptureCallback>
 800f760:	e005      	b.n	800f76e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f762:	6878      	ldr	r0, [r7, #4]
 800f764:	f000 fba8 	bl	800feb8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f768:	6878      	ldr	r0, [r7, #4]
 800f76a:	f7f4 f94d 	bl	8003a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	2200      	movs	r2, #0
 800f772:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	691b      	ldr	r3, [r3, #16]
 800f77a:	f003 0304 	and.w	r3, r3, #4
 800f77e:	2b04      	cmp	r3, #4
 800f780:	d122      	bne.n	800f7c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	68db      	ldr	r3, [r3, #12]
 800f788:	f003 0304 	and.w	r3, r3, #4
 800f78c:	2b04      	cmp	r3, #4
 800f78e:	d11b      	bne.n	800f7c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	f06f 0204 	mvn.w	r2, #4
 800f798:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	2202      	movs	r2, #2
 800f79e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	699b      	ldr	r3, [r3, #24]
 800f7a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d003      	beq.n	800f7b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f7ae:	6878      	ldr	r0, [r7, #4]
 800f7b0:	f7f4 f89c 	bl	80038ec <HAL_TIM_IC_CaptureCallback>
 800f7b4:	e005      	b.n	800f7c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f7b6:	6878      	ldr	r0, [r7, #4]
 800f7b8:	f000 fb7e 	bl	800feb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f7bc:	6878      	ldr	r0, [r7, #4]
 800f7be:	f7f4 f923 	bl	8003a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	691b      	ldr	r3, [r3, #16]
 800f7ce:	f003 0308 	and.w	r3, r3, #8
 800f7d2:	2b08      	cmp	r3, #8
 800f7d4:	d122      	bne.n	800f81c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	68db      	ldr	r3, [r3, #12]
 800f7dc:	f003 0308 	and.w	r3, r3, #8
 800f7e0:	2b08      	cmp	r3, #8
 800f7e2:	d11b      	bne.n	800f81c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	f06f 0208 	mvn.w	r2, #8
 800f7ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	2204      	movs	r2, #4
 800f7f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	69db      	ldr	r3, [r3, #28]
 800f7fa:	f003 0303 	and.w	r3, r3, #3
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d003      	beq.n	800f80a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f802:	6878      	ldr	r0, [r7, #4]
 800f804:	f7f4 f872 	bl	80038ec <HAL_TIM_IC_CaptureCallback>
 800f808:	e005      	b.n	800f816 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f80a:	6878      	ldr	r0, [r7, #4]
 800f80c:	f000 fb54 	bl	800feb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f810:	6878      	ldr	r0, [r7, #4]
 800f812:	f7f4 f8f9 	bl	8003a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	2200      	movs	r2, #0
 800f81a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	691b      	ldr	r3, [r3, #16]
 800f822:	f003 0310 	and.w	r3, r3, #16
 800f826:	2b10      	cmp	r3, #16
 800f828:	d122      	bne.n	800f870 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	68db      	ldr	r3, [r3, #12]
 800f830:	f003 0310 	and.w	r3, r3, #16
 800f834:	2b10      	cmp	r3, #16
 800f836:	d11b      	bne.n	800f870 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	f06f 0210 	mvn.w	r2, #16
 800f840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	2208      	movs	r2, #8
 800f846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	69db      	ldr	r3, [r3, #28]
 800f84e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f852:	2b00      	cmp	r3, #0
 800f854:	d003      	beq.n	800f85e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f856:	6878      	ldr	r0, [r7, #4]
 800f858:	f7f4 f848 	bl	80038ec <HAL_TIM_IC_CaptureCallback>
 800f85c:	e005      	b.n	800f86a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f85e:	6878      	ldr	r0, [r7, #4]
 800f860:	f000 fb2a 	bl	800feb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f864:	6878      	ldr	r0, [r7, #4]
 800f866:	f7f4 f8cf 	bl	8003a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	2200      	movs	r2, #0
 800f86e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	691b      	ldr	r3, [r3, #16]
 800f876:	f003 0301 	and.w	r3, r3, #1
 800f87a:	2b01      	cmp	r3, #1
 800f87c:	d10e      	bne.n	800f89c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	68db      	ldr	r3, [r3, #12]
 800f884:	f003 0301 	and.w	r3, r3, #1
 800f888:	2b01      	cmp	r3, #1
 800f88a:	d107      	bne.n	800f89c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	f06f 0201 	mvn.w	r2, #1
 800f894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f896:	6878      	ldr	r0, [r7, #4]
 800f898:	f7f4 f8c2 	bl	8003a20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	691b      	ldr	r3, [r3, #16]
 800f8a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f8a6:	2b80      	cmp	r3, #128	; 0x80
 800f8a8:	d10e      	bne.n	800f8c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	68db      	ldr	r3, [r3, #12]
 800f8b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f8b4:	2b80      	cmp	r3, #128	; 0x80
 800f8b6:	d107      	bne.n	800f8c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f8c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f8c2:	6878      	ldr	r0, [r7, #4]
 800f8c4:	f001 f9cc 	bl	8010c60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	691b      	ldr	r3, [r3, #16]
 800f8ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f8d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f8d6:	d10e      	bne.n	800f8f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	68db      	ldr	r3, [r3, #12]
 800f8de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f8e2:	2b80      	cmp	r3, #128	; 0x80
 800f8e4:	d107      	bne.n	800f8f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f8ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f8f0:	6878      	ldr	r0, [r7, #4]
 800f8f2:	f001 f9bf 	bl	8010c74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	691b      	ldr	r3, [r3, #16]
 800f8fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f900:	2b40      	cmp	r3, #64	; 0x40
 800f902:	d10e      	bne.n	800f922 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	68db      	ldr	r3, [r3, #12]
 800f90a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f90e:	2b40      	cmp	r3, #64	; 0x40
 800f910:	d107      	bne.n	800f922 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f91a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f91c:	6878      	ldr	r0, [r7, #4]
 800f91e:	f000 fad5 	bl	800fecc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	691b      	ldr	r3, [r3, #16]
 800f928:	f003 0320 	and.w	r3, r3, #32
 800f92c:	2b20      	cmp	r3, #32
 800f92e:	d10e      	bne.n	800f94e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	68db      	ldr	r3, [r3, #12]
 800f936:	f003 0320 	and.w	r3, r3, #32
 800f93a:	2b20      	cmp	r3, #32
 800f93c:	d107      	bne.n	800f94e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	f06f 0220 	mvn.w	r2, #32
 800f946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f948:	6878      	ldr	r0, [r7, #4]
 800f94a:	f001 f97f 	bl	8010c4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f94e:	bf00      	nop
 800f950:	3708      	adds	r7, #8
 800f952:	46bd      	mov	sp, r7
 800f954:	bd80      	pop	{r7, pc}
	...

0800f958 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800f958:	b580      	push	{r7, lr}
 800f95a:	b086      	sub	sp, #24
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	60f8      	str	r0, [r7, #12]
 800f960:	60b9      	str	r1, [r7, #8]
 800f962:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f964:	2300      	movs	r3, #0
 800f966:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f96e:	2b01      	cmp	r3, #1
 800f970:	d101      	bne.n	800f976 <HAL_TIM_OC_ConfigChannel+0x1e>
 800f972:	2302      	movs	r3, #2
 800f974:	e066      	b.n	800fa44 <HAL_TIM_OC_ConfigChannel+0xec>
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	2201      	movs	r2, #1
 800f97a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	2b14      	cmp	r3, #20
 800f982:	d857      	bhi.n	800fa34 <HAL_TIM_OC_ConfigChannel+0xdc>
 800f984:	a201      	add	r2, pc, #4	; (adr r2, 800f98c <HAL_TIM_OC_ConfigChannel+0x34>)
 800f986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f98a:	bf00      	nop
 800f98c:	0800f9e1 	.word	0x0800f9e1
 800f990:	0800fa35 	.word	0x0800fa35
 800f994:	0800fa35 	.word	0x0800fa35
 800f998:	0800fa35 	.word	0x0800fa35
 800f99c:	0800f9ef 	.word	0x0800f9ef
 800f9a0:	0800fa35 	.word	0x0800fa35
 800f9a4:	0800fa35 	.word	0x0800fa35
 800f9a8:	0800fa35 	.word	0x0800fa35
 800f9ac:	0800f9fd 	.word	0x0800f9fd
 800f9b0:	0800fa35 	.word	0x0800fa35
 800f9b4:	0800fa35 	.word	0x0800fa35
 800f9b8:	0800fa35 	.word	0x0800fa35
 800f9bc:	0800fa0b 	.word	0x0800fa0b
 800f9c0:	0800fa35 	.word	0x0800fa35
 800f9c4:	0800fa35 	.word	0x0800fa35
 800f9c8:	0800fa35 	.word	0x0800fa35
 800f9cc:	0800fa19 	.word	0x0800fa19
 800f9d0:	0800fa35 	.word	0x0800fa35
 800f9d4:	0800fa35 	.word	0x0800fa35
 800f9d8:	0800fa35 	.word	0x0800fa35
 800f9dc:	0800fa27 	.word	0x0800fa27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	68b9      	ldr	r1, [r7, #8]
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	f000 fb14 	bl	8010014 <TIM_OC1_SetConfig>
      break;
 800f9ec:	e025      	b.n	800fa3a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	68b9      	ldr	r1, [r7, #8]
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	f000 fb9d 	bl	8010134 <TIM_OC2_SetConfig>
      break;
 800f9fa:	e01e      	b.n	800fa3a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	68b9      	ldr	r1, [r7, #8]
 800fa02:	4618      	mov	r0, r3
 800fa04:	f000 fc20 	bl	8010248 <TIM_OC3_SetConfig>
      break;
 800fa08:	e017      	b.n	800fa3a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	68b9      	ldr	r1, [r7, #8]
 800fa10:	4618      	mov	r0, r3
 800fa12:	f000 fca1 	bl	8010358 <TIM_OC4_SetConfig>
      break;
 800fa16:	e010      	b.n	800fa3a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	68b9      	ldr	r1, [r7, #8]
 800fa1e:	4618      	mov	r0, r3
 800fa20:	f000 fd04 	bl	801042c <TIM_OC5_SetConfig>
      break;
 800fa24:	e009      	b.n	800fa3a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	68b9      	ldr	r1, [r7, #8]
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	f000 fd61 	bl	80104f4 <TIM_OC6_SetConfig>
      break;
 800fa32:	e002      	b.n	800fa3a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800fa34:	2301      	movs	r3, #1
 800fa36:	75fb      	strb	r3, [r7, #23]
      break;
 800fa38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	2200      	movs	r2, #0
 800fa3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800fa42:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa44:	4618      	mov	r0, r3
 800fa46:	3718      	adds	r7, #24
 800fa48:	46bd      	mov	sp, r7
 800fa4a:	bd80      	pop	{r7, pc}

0800fa4c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800fa4c:	b580      	push	{r7, lr}
 800fa4e:	b086      	sub	sp, #24
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	60f8      	str	r0, [r7, #12]
 800fa54:	60b9      	str	r1, [r7, #8]
 800fa56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fa58:	2300      	movs	r3, #0
 800fa5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fa62:	2b01      	cmp	r3, #1
 800fa64:	d101      	bne.n	800fa6a <HAL_TIM_IC_ConfigChannel+0x1e>
 800fa66:	2302      	movs	r3, #2
 800fa68:	e088      	b.n	800fb7c <HAL_TIM_IC_ConfigChannel+0x130>
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	2201      	movs	r2, #1
 800fa6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d11b      	bne.n	800fab0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800fa7c:	68bb      	ldr	r3, [r7, #8]
 800fa7e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800fa80:	68bb      	ldr	r3, [r7, #8]
 800fa82:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800fa84:	68bb      	ldr	r3, [r7, #8]
 800fa86:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800fa88:	f000 fe84 	bl	8010794 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	699a      	ldr	r2, [r3, #24]
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	f022 020c 	bic.w	r2, r2, #12
 800fa9a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	6999      	ldr	r1, [r3, #24]
 800faa2:	68bb      	ldr	r3, [r7, #8]
 800faa4:	689a      	ldr	r2, [r3, #8]
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	430a      	orrs	r2, r1
 800faac:	619a      	str	r2, [r3, #24]
 800faae:	e060      	b.n	800fb72 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	2b04      	cmp	r3, #4
 800fab4:	d11c      	bne.n	800faf0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800faba:	68bb      	ldr	r3, [r7, #8]
 800fabc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800fabe:	68bb      	ldr	r3, [r7, #8]
 800fac0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800fac2:	68bb      	ldr	r3, [r7, #8]
 800fac4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800fac6:	f000 ff08 	bl	80108da <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	699a      	ldr	r2, [r3, #24]
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800fad8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	6999      	ldr	r1, [r3, #24]
 800fae0:	68bb      	ldr	r3, [r7, #8]
 800fae2:	689b      	ldr	r3, [r3, #8]
 800fae4:	021a      	lsls	r2, r3, #8
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	430a      	orrs	r2, r1
 800faec:	619a      	str	r2, [r3, #24]
 800faee:	e040      	b.n	800fb72 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	2b08      	cmp	r3, #8
 800faf4:	d11b      	bne.n	800fb2e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800fafa:	68bb      	ldr	r3, [r7, #8]
 800fafc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800fafe:	68bb      	ldr	r3, [r7, #8]
 800fb00:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800fb02:	68bb      	ldr	r3, [r7, #8]
 800fb04:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800fb06:	f000 ff55 	bl	80109b4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	69da      	ldr	r2, [r3, #28]
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	f022 020c 	bic.w	r2, r2, #12
 800fb18:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	69d9      	ldr	r1, [r3, #28]
 800fb20:	68bb      	ldr	r3, [r7, #8]
 800fb22:	689a      	ldr	r2, [r3, #8]
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	430a      	orrs	r2, r1
 800fb2a:	61da      	str	r2, [r3, #28]
 800fb2c:	e021      	b.n	800fb72 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	2b0c      	cmp	r3, #12
 800fb32:	d11c      	bne.n	800fb6e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800fb38:	68bb      	ldr	r3, [r7, #8]
 800fb3a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800fb3c:	68bb      	ldr	r3, [r7, #8]
 800fb3e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800fb40:	68bb      	ldr	r3, [r7, #8]
 800fb42:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800fb44:	f000 ff72 	bl	8010a2c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	69da      	ldr	r2, [r3, #28]
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800fb56:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	69d9      	ldr	r1, [r3, #28]
 800fb5e:	68bb      	ldr	r3, [r7, #8]
 800fb60:	689b      	ldr	r3, [r3, #8]
 800fb62:	021a      	lsls	r2, r3, #8
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	430a      	orrs	r2, r1
 800fb6a:	61da      	str	r2, [r3, #28]
 800fb6c:	e001      	b.n	800fb72 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800fb6e:	2301      	movs	r3, #1
 800fb70:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	2200      	movs	r2, #0
 800fb76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800fb7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	3718      	adds	r7, #24
 800fb80:	46bd      	mov	sp, r7
 800fb82:	bd80      	pop	{r7, pc}

0800fb84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800fb84:	b580      	push	{r7, lr}
 800fb86:	b086      	sub	sp, #24
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	60f8      	str	r0, [r7, #12]
 800fb8c:	60b9      	str	r1, [r7, #8]
 800fb8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fb90:	2300      	movs	r3, #0
 800fb92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fb9a:	2b01      	cmp	r3, #1
 800fb9c:	d101      	bne.n	800fba2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800fb9e:	2302      	movs	r3, #2
 800fba0:	e0ff      	b.n	800fda2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	2201      	movs	r2, #1
 800fba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	2b14      	cmp	r3, #20
 800fbae:	f200 80f0 	bhi.w	800fd92 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800fbb2:	a201      	add	r2, pc, #4	; (adr r2, 800fbb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800fbb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbb8:	0800fc0d 	.word	0x0800fc0d
 800fbbc:	0800fd93 	.word	0x0800fd93
 800fbc0:	0800fd93 	.word	0x0800fd93
 800fbc4:	0800fd93 	.word	0x0800fd93
 800fbc8:	0800fc4d 	.word	0x0800fc4d
 800fbcc:	0800fd93 	.word	0x0800fd93
 800fbd0:	0800fd93 	.word	0x0800fd93
 800fbd4:	0800fd93 	.word	0x0800fd93
 800fbd8:	0800fc8f 	.word	0x0800fc8f
 800fbdc:	0800fd93 	.word	0x0800fd93
 800fbe0:	0800fd93 	.word	0x0800fd93
 800fbe4:	0800fd93 	.word	0x0800fd93
 800fbe8:	0800fccf 	.word	0x0800fccf
 800fbec:	0800fd93 	.word	0x0800fd93
 800fbf0:	0800fd93 	.word	0x0800fd93
 800fbf4:	0800fd93 	.word	0x0800fd93
 800fbf8:	0800fd11 	.word	0x0800fd11
 800fbfc:	0800fd93 	.word	0x0800fd93
 800fc00:	0800fd93 	.word	0x0800fd93
 800fc04:	0800fd93 	.word	0x0800fd93
 800fc08:	0800fd51 	.word	0x0800fd51
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	68b9      	ldr	r1, [r7, #8]
 800fc12:	4618      	mov	r0, r3
 800fc14:	f000 f9fe 	bl	8010014 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	699a      	ldr	r2, [r3, #24]
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	f042 0208 	orr.w	r2, r2, #8
 800fc26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	699a      	ldr	r2, [r3, #24]
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	f022 0204 	bic.w	r2, r2, #4
 800fc36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	6999      	ldr	r1, [r3, #24]
 800fc3e:	68bb      	ldr	r3, [r7, #8]
 800fc40:	691a      	ldr	r2, [r3, #16]
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	430a      	orrs	r2, r1
 800fc48:	619a      	str	r2, [r3, #24]
      break;
 800fc4a:	e0a5      	b.n	800fd98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	68b9      	ldr	r1, [r7, #8]
 800fc52:	4618      	mov	r0, r3
 800fc54:	f000 fa6e 	bl	8010134 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	699a      	ldr	r2, [r3, #24]
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fc66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	699a      	ldr	r2, [r3, #24]
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fc76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	6999      	ldr	r1, [r3, #24]
 800fc7e:	68bb      	ldr	r3, [r7, #8]
 800fc80:	691b      	ldr	r3, [r3, #16]
 800fc82:	021a      	lsls	r2, r3, #8
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	430a      	orrs	r2, r1
 800fc8a:	619a      	str	r2, [r3, #24]
      break;
 800fc8c:	e084      	b.n	800fd98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	68b9      	ldr	r1, [r7, #8]
 800fc94:	4618      	mov	r0, r3
 800fc96:	f000 fad7 	bl	8010248 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	69da      	ldr	r2, [r3, #28]
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	f042 0208 	orr.w	r2, r2, #8
 800fca8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	69da      	ldr	r2, [r3, #28]
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	f022 0204 	bic.w	r2, r2, #4
 800fcb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	69d9      	ldr	r1, [r3, #28]
 800fcc0:	68bb      	ldr	r3, [r7, #8]
 800fcc2:	691a      	ldr	r2, [r3, #16]
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	430a      	orrs	r2, r1
 800fcca:	61da      	str	r2, [r3, #28]
      break;
 800fccc:	e064      	b.n	800fd98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	68b9      	ldr	r1, [r7, #8]
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	f000 fb3f 	bl	8010358 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	69da      	ldr	r2, [r3, #28]
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fce8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	69da      	ldr	r2, [r3, #28]
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fcf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	69d9      	ldr	r1, [r3, #28]
 800fd00:	68bb      	ldr	r3, [r7, #8]
 800fd02:	691b      	ldr	r3, [r3, #16]
 800fd04:	021a      	lsls	r2, r3, #8
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	430a      	orrs	r2, r1
 800fd0c:	61da      	str	r2, [r3, #28]
      break;
 800fd0e:	e043      	b.n	800fd98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	68b9      	ldr	r1, [r7, #8]
 800fd16:	4618      	mov	r0, r3
 800fd18:	f000 fb88 	bl	801042c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	f042 0208 	orr.w	r2, r2, #8
 800fd2a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	f022 0204 	bic.w	r2, r2, #4
 800fd3a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fd42:	68bb      	ldr	r3, [r7, #8]
 800fd44:	691a      	ldr	r2, [r3, #16]
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	430a      	orrs	r2, r1
 800fd4c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800fd4e:	e023      	b.n	800fd98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	68b9      	ldr	r1, [r7, #8]
 800fd56:	4618      	mov	r0, r3
 800fd58:	f000 fbcc 	bl	80104f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fd6a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fd7a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fd82:	68bb      	ldr	r3, [r7, #8]
 800fd84:	691b      	ldr	r3, [r3, #16]
 800fd86:	021a      	lsls	r2, r3, #8
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	430a      	orrs	r2, r1
 800fd8e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800fd90:	e002      	b.n	800fd98 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800fd92:	2301      	movs	r3, #1
 800fd94:	75fb      	strb	r3, [r7, #23]
      break;
 800fd96:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	2200      	movs	r2, #0
 800fd9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800fda0:	7dfb      	ldrb	r3, [r7, #23]
}
 800fda2:	4618      	mov	r0, r3
 800fda4:	3718      	adds	r7, #24
 800fda6:	46bd      	mov	sp, r7
 800fda8:	bd80      	pop	{r7, pc}
 800fdaa:	bf00      	nop

0800fdac <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b082      	sub	sp, #8
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	6078      	str	r0, [r7, #4]
 800fdb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fdbc:	2b01      	cmp	r3, #1
 800fdbe:	d101      	bne.n	800fdc4 <HAL_TIM_SlaveConfigSynchro+0x18>
 800fdc0:	2302      	movs	r3, #2
 800fdc2:	e031      	b.n	800fe28 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	2201      	movs	r2, #1
 800fdc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	2202      	movs	r2, #2
 800fdd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800fdd4:	6839      	ldr	r1, [r7, #0]
 800fdd6:	6878      	ldr	r0, [r7, #4]
 800fdd8:	f000 fbf2 	bl	80105c0 <TIM_SlaveTimer_SetConfig>
 800fddc:	4603      	mov	r3, r0
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d009      	beq.n	800fdf6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	2201      	movs	r2, #1
 800fde6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	2200      	movs	r2, #0
 800fdee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800fdf2:	2301      	movs	r3, #1
 800fdf4:	e018      	b.n	800fe28 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	68da      	ldr	r2, [r3, #12]
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fe04:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	68da      	ldr	r2, [r3, #12]
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800fe14:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	2201      	movs	r2, #1
 800fe1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	2200      	movs	r2, #0
 800fe22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fe26:	2300      	movs	r3, #0
}
 800fe28:	4618      	mov	r0, r3
 800fe2a:	3708      	adds	r7, #8
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	bd80      	pop	{r7, pc}

0800fe30 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fe30:	b480      	push	{r7}
 800fe32:	b085      	sub	sp, #20
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	6078      	str	r0, [r7, #4]
 800fe38:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800fe3e:	683b      	ldr	r3, [r7, #0]
 800fe40:	2b0c      	cmp	r3, #12
 800fe42:	d831      	bhi.n	800fea8 <HAL_TIM_ReadCapturedValue+0x78>
 800fe44:	a201      	add	r2, pc, #4	; (adr r2, 800fe4c <HAL_TIM_ReadCapturedValue+0x1c>)
 800fe46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe4a:	bf00      	nop
 800fe4c:	0800fe81 	.word	0x0800fe81
 800fe50:	0800fea9 	.word	0x0800fea9
 800fe54:	0800fea9 	.word	0x0800fea9
 800fe58:	0800fea9 	.word	0x0800fea9
 800fe5c:	0800fe8b 	.word	0x0800fe8b
 800fe60:	0800fea9 	.word	0x0800fea9
 800fe64:	0800fea9 	.word	0x0800fea9
 800fe68:	0800fea9 	.word	0x0800fea9
 800fe6c:	0800fe95 	.word	0x0800fe95
 800fe70:	0800fea9 	.word	0x0800fea9
 800fe74:	0800fea9 	.word	0x0800fea9
 800fe78:	0800fea9 	.word	0x0800fea9
 800fe7c:	0800fe9f 	.word	0x0800fe9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe86:	60fb      	str	r3, [r7, #12]

      break;
 800fe88:	e00f      	b.n	800feaa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe90:	60fb      	str	r3, [r7, #12]

      break;
 800fe92:	e00a      	b.n	800feaa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe9a:	60fb      	str	r3, [r7, #12]

      break;
 800fe9c:	e005      	b.n	800feaa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fea4:	60fb      	str	r3, [r7, #12]

      break;
 800fea6:	e000      	b.n	800feaa <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800fea8:	bf00      	nop
  }

  return tmpreg;
 800feaa:	68fb      	ldr	r3, [r7, #12]
}
 800feac:	4618      	mov	r0, r3
 800feae:	3714      	adds	r7, #20
 800feb0:	46bd      	mov	sp, r7
 800feb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb6:	4770      	bx	lr

0800feb8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800feb8:	b480      	push	{r7}
 800feba:	b083      	sub	sp, #12
 800febc:	af00      	add	r7, sp, #0
 800febe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800fec0:	bf00      	nop
 800fec2:	370c      	adds	r7, #12
 800fec4:	46bd      	mov	sp, r7
 800fec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feca:	4770      	bx	lr

0800fecc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800fecc:	b480      	push	{r7}
 800fece:	b083      	sub	sp, #12
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fed4:	bf00      	nop
 800fed6:	370c      	adds	r7, #12
 800fed8:	46bd      	mov	sp, r7
 800feda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fede:	4770      	bx	lr

0800fee0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800fee0:	b480      	push	{r7}
 800fee2:	b085      	sub	sp, #20
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	6078      	str	r0, [r7, #4]
 800fee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	4a40      	ldr	r2, [pc, #256]	; (800fff4 <TIM_Base_SetConfig+0x114>)
 800fef4:	4293      	cmp	r3, r2
 800fef6:	d013      	beq.n	800ff20 <TIM_Base_SetConfig+0x40>
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fefe:	d00f      	beq.n	800ff20 <TIM_Base_SetConfig+0x40>
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	4a3d      	ldr	r2, [pc, #244]	; (800fff8 <TIM_Base_SetConfig+0x118>)
 800ff04:	4293      	cmp	r3, r2
 800ff06:	d00b      	beq.n	800ff20 <TIM_Base_SetConfig+0x40>
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	4a3c      	ldr	r2, [pc, #240]	; (800fffc <TIM_Base_SetConfig+0x11c>)
 800ff0c:	4293      	cmp	r3, r2
 800ff0e:	d007      	beq.n	800ff20 <TIM_Base_SetConfig+0x40>
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	4a3b      	ldr	r2, [pc, #236]	; (8010000 <TIM_Base_SetConfig+0x120>)
 800ff14:	4293      	cmp	r3, r2
 800ff16:	d003      	beq.n	800ff20 <TIM_Base_SetConfig+0x40>
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	4a3a      	ldr	r2, [pc, #232]	; (8010004 <TIM_Base_SetConfig+0x124>)
 800ff1c:	4293      	cmp	r3, r2
 800ff1e:	d108      	bne.n	800ff32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ff26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ff28:	683b      	ldr	r3, [r7, #0]
 800ff2a:	685b      	ldr	r3, [r3, #4]
 800ff2c:	68fa      	ldr	r2, [r7, #12]
 800ff2e:	4313      	orrs	r3, r2
 800ff30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	4a2f      	ldr	r2, [pc, #188]	; (800fff4 <TIM_Base_SetConfig+0x114>)
 800ff36:	4293      	cmp	r3, r2
 800ff38:	d01f      	beq.n	800ff7a <TIM_Base_SetConfig+0x9a>
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ff40:	d01b      	beq.n	800ff7a <TIM_Base_SetConfig+0x9a>
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	4a2c      	ldr	r2, [pc, #176]	; (800fff8 <TIM_Base_SetConfig+0x118>)
 800ff46:	4293      	cmp	r3, r2
 800ff48:	d017      	beq.n	800ff7a <TIM_Base_SetConfig+0x9a>
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	4a2b      	ldr	r2, [pc, #172]	; (800fffc <TIM_Base_SetConfig+0x11c>)
 800ff4e:	4293      	cmp	r3, r2
 800ff50:	d013      	beq.n	800ff7a <TIM_Base_SetConfig+0x9a>
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	4a2a      	ldr	r2, [pc, #168]	; (8010000 <TIM_Base_SetConfig+0x120>)
 800ff56:	4293      	cmp	r3, r2
 800ff58:	d00f      	beq.n	800ff7a <TIM_Base_SetConfig+0x9a>
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	4a29      	ldr	r2, [pc, #164]	; (8010004 <TIM_Base_SetConfig+0x124>)
 800ff5e:	4293      	cmp	r3, r2
 800ff60:	d00b      	beq.n	800ff7a <TIM_Base_SetConfig+0x9a>
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	4a28      	ldr	r2, [pc, #160]	; (8010008 <TIM_Base_SetConfig+0x128>)
 800ff66:	4293      	cmp	r3, r2
 800ff68:	d007      	beq.n	800ff7a <TIM_Base_SetConfig+0x9a>
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	4a27      	ldr	r2, [pc, #156]	; (801000c <TIM_Base_SetConfig+0x12c>)
 800ff6e:	4293      	cmp	r3, r2
 800ff70:	d003      	beq.n	800ff7a <TIM_Base_SetConfig+0x9a>
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	4a26      	ldr	r2, [pc, #152]	; (8010010 <TIM_Base_SetConfig+0x130>)
 800ff76:	4293      	cmp	r3, r2
 800ff78:	d108      	bne.n	800ff8c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ff80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ff82:	683b      	ldr	r3, [r7, #0]
 800ff84:	68db      	ldr	r3, [r3, #12]
 800ff86:	68fa      	ldr	r2, [r7, #12]
 800ff88:	4313      	orrs	r3, r2
 800ff8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ff92:	683b      	ldr	r3, [r7, #0]
 800ff94:	695b      	ldr	r3, [r3, #20]
 800ff96:	4313      	orrs	r3, r2
 800ff98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	68fa      	ldr	r2, [r7, #12]
 800ff9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ffa0:	683b      	ldr	r3, [r7, #0]
 800ffa2:	689a      	ldr	r2, [r3, #8]
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ffa8:	683b      	ldr	r3, [r7, #0]
 800ffaa:	681a      	ldr	r2, [r3, #0]
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	4a10      	ldr	r2, [pc, #64]	; (800fff4 <TIM_Base_SetConfig+0x114>)
 800ffb4:	4293      	cmp	r3, r2
 800ffb6:	d00f      	beq.n	800ffd8 <TIM_Base_SetConfig+0xf8>
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	4a12      	ldr	r2, [pc, #72]	; (8010004 <TIM_Base_SetConfig+0x124>)
 800ffbc:	4293      	cmp	r3, r2
 800ffbe:	d00b      	beq.n	800ffd8 <TIM_Base_SetConfig+0xf8>
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	4a11      	ldr	r2, [pc, #68]	; (8010008 <TIM_Base_SetConfig+0x128>)
 800ffc4:	4293      	cmp	r3, r2
 800ffc6:	d007      	beq.n	800ffd8 <TIM_Base_SetConfig+0xf8>
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	4a10      	ldr	r2, [pc, #64]	; (801000c <TIM_Base_SetConfig+0x12c>)
 800ffcc:	4293      	cmp	r3, r2
 800ffce:	d003      	beq.n	800ffd8 <TIM_Base_SetConfig+0xf8>
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	4a0f      	ldr	r2, [pc, #60]	; (8010010 <TIM_Base_SetConfig+0x130>)
 800ffd4:	4293      	cmp	r3, r2
 800ffd6:	d103      	bne.n	800ffe0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ffd8:	683b      	ldr	r3, [r7, #0]
 800ffda:	691a      	ldr	r2, [r3, #16]
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	2201      	movs	r2, #1
 800ffe4:	615a      	str	r2, [r3, #20]
}
 800ffe6:	bf00      	nop
 800ffe8:	3714      	adds	r7, #20
 800ffea:	46bd      	mov	sp, r7
 800ffec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff0:	4770      	bx	lr
 800fff2:	bf00      	nop
 800fff4:	40010000 	.word	0x40010000
 800fff8:	40000400 	.word	0x40000400
 800fffc:	40000800 	.word	0x40000800
 8010000:	40000c00 	.word	0x40000c00
 8010004:	40010400 	.word	0x40010400
 8010008:	40014000 	.word	0x40014000
 801000c:	40014400 	.word	0x40014400
 8010010:	40014800 	.word	0x40014800

08010014 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010014:	b480      	push	{r7}
 8010016:	b087      	sub	sp, #28
 8010018:	af00      	add	r7, sp, #0
 801001a:	6078      	str	r0, [r7, #4]
 801001c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	6a1b      	ldr	r3, [r3, #32]
 8010022:	f023 0201 	bic.w	r2, r3, #1
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	6a1b      	ldr	r3, [r3, #32]
 801002e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	685b      	ldr	r3, [r3, #4]
 8010034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	699b      	ldr	r3, [r3, #24]
 801003a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801003c:	68fa      	ldr	r2, [r7, #12]
 801003e:	4b37      	ldr	r3, [pc, #220]	; (801011c <TIM_OC1_SetConfig+0x108>)
 8010040:	4013      	ands	r3, r2
 8010042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	f023 0303 	bic.w	r3, r3, #3
 801004a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801004c:	683b      	ldr	r3, [r7, #0]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	68fa      	ldr	r2, [r7, #12]
 8010052:	4313      	orrs	r3, r2
 8010054:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010056:	697b      	ldr	r3, [r7, #20]
 8010058:	f023 0302 	bic.w	r3, r3, #2
 801005c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801005e:	683b      	ldr	r3, [r7, #0]
 8010060:	689b      	ldr	r3, [r3, #8]
 8010062:	697a      	ldr	r2, [r7, #20]
 8010064:	4313      	orrs	r3, r2
 8010066:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	4a2d      	ldr	r2, [pc, #180]	; (8010120 <TIM_OC1_SetConfig+0x10c>)
 801006c:	4293      	cmp	r3, r2
 801006e:	d00f      	beq.n	8010090 <TIM_OC1_SetConfig+0x7c>
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	4a2c      	ldr	r2, [pc, #176]	; (8010124 <TIM_OC1_SetConfig+0x110>)
 8010074:	4293      	cmp	r3, r2
 8010076:	d00b      	beq.n	8010090 <TIM_OC1_SetConfig+0x7c>
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	4a2b      	ldr	r2, [pc, #172]	; (8010128 <TIM_OC1_SetConfig+0x114>)
 801007c:	4293      	cmp	r3, r2
 801007e:	d007      	beq.n	8010090 <TIM_OC1_SetConfig+0x7c>
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	4a2a      	ldr	r2, [pc, #168]	; (801012c <TIM_OC1_SetConfig+0x118>)
 8010084:	4293      	cmp	r3, r2
 8010086:	d003      	beq.n	8010090 <TIM_OC1_SetConfig+0x7c>
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	4a29      	ldr	r2, [pc, #164]	; (8010130 <TIM_OC1_SetConfig+0x11c>)
 801008c:	4293      	cmp	r3, r2
 801008e:	d10c      	bne.n	80100aa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010090:	697b      	ldr	r3, [r7, #20]
 8010092:	f023 0308 	bic.w	r3, r3, #8
 8010096:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010098:	683b      	ldr	r3, [r7, #0]
 801009a:	68db      	ldr	r3, [r3, #12]
 801009c:	697a      	ldr	r2, [r7, #20]
 801009e:	4313      	orrs	r3, r2
 80100a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80100a2:	697b      	ldr	r3, [r7, #20]
 80100a4:	f023 0304 	bic.w	r3, r3, #4
 80100a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	4a1c      	ldr	r2, [pc, #112]	; (8010120 <TIM_OC1_SetConfig+0x10c>)
 80100ae:	4293      	cmp	r3, r2
 80100b0:	d00f      	beq.n	80100d2 <TIM_OC1_SetConfig+0xbe>
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	4a1b      	ldr	r2, [pc, #108]	; (8010124 <TIM_OC1_SetConfig+0x110>)
 80100b6:	4293      	cmp	r3, r2
 80100b8:	d00b      	beq.n	80100d2 <TIM_OC1_SetConfig+0xbe>
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	4a1a      	ldr	r2, [pc, #104]	; (8010128 <TIM_OC1_SetConfig+0x114>)
 80100be:	4293      	cmp	r3, r2
 80100c0:	d007      	beq.n	80100d2 <TIM_OC1_SetConfig+0xbe>
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	4a19      	ldr	r2, [pc, #100]	; (801012c <TIM_OC1_SetConfig+0x118>)
 80100c6:	4293      	cmp	r3, r2
 80100c8:	d003      	beq.n	80100d2 <TIM_OC1_SetConfig+0xbe>
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	4a18      	ldr	r2, [pc, #96]	; (8010130 <TIM_OC1_SetConfig+0x11c>)
 80100ce:	4293      	cmp	r3, r2
 80100d0:	d111      	bne.n	80100f6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80100d2:	693b      	ldr	r3, [r7, #16]
 80100d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80100d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80100da:	693b      	ldr	r3, [r7, #16]
 80100dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80100e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80100e2:	683b      	ldr	r3, [r7, #0]
 80100e4:	695b      	ldr	r3, [r3, #20]
 80100e6:	693a      	ldr	r2, [r7, #16]
 80100e8:	4313      	orrs	r3, r2
 80100ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80100ec:	683b      	ldr	r3, [r7, #0]
 80100ee:	699b      	ldr	r3, [r3, #24]
 80100f0:	693a      	ldr	r2, [r7, #16]
 80100f2:	4313      	orrs	r3, r2
 80100f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	693a      	ldr	r2, [r7, #16]
 80100fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	68fa      	ldr	r2, [r7, #12]
 8010100:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010102:	683b      	ldr	r3, [r7, #0]
 8010104:	685a      	ldr	r2, [r3, #4]
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	697a      	ldr	r2, [r7, #20]
 801010e:	621a      	str	r2, [r3, #32]
}
 8010110:	bf00      	nop
 8010112:	371c      	adds	r7, #28
 8010114:	46bd      	mov	sp, r7
 8010116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011a:	4770      	bx	lr
 801011c:	fffeff8f 	.word	0xfffeff8f
 8010120:	40010000 	.word	0x40010000
 8010124:	40010400 	.word	0x40010400
 8010128:	40014000 	.word	0x40014000
 801012c:	40014400 	.word	0x40014400
 8010130:	40014800 	.word	0x40014800

08010134 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010134:	b480      	push	{r7}
 8010136:	b087      	sub	sp, #28
 8010138:	af00      	add	r7, sp, #0
 801013a:	6078      	str	r0, [r7, #4]
 801013c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	6a1b      	ldr	r3, [r3, #32]
 8010142:	f023 0210 	bic.w	r2, r3, #16
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	6a1b      	ldr	r3, [r3, #32]
 801014e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	685b      	ldr	r3, [r3, #4]
 8010154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	699b      	ldr	r3, [r3, #24]
 801015a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801015c:	68fa      	ldr	r2, [r7, #12]
 801015e:	4b34      	ldr	r3, [pc, #208]	; (8010230 <TIM_OC2_SetConfig+0xfc>)
 8010160:	4013      	ands	r3, r2
 8010162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801016a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801016c:	683b      	ldr	r3, [r7, #0]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	021b      	lsls	r3, r3, #8
 8010172:	68fa      	ldr	r2, [r7, #12]
 8010174:	4313      	orrs	r3, r2
 8010176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010178:	697b      	ldr	r3, [r7, #20]
 801017a:	f023 0320 	bic.w	r3, r3, #32
 801017e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010180:	683b      	ldr	r3, [r7, #0]
 8010182:	689b      	ldr	r3, [r3, #8]
 8010184:	011b      	lsls	r3, r3, #4
 8010186:	697a      	ldr	r2, [r7, #20]
 8010188:	4313      	orrs	r3, r2
 801018a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	4a29      	ldr	r2, [pc, #164]	; (8010234 <TIM_OC2_SetConfig+0x100>)
 8010190:	4293      	cmp	r3, r2
 8010192:	d003      	beq.n	801019c <TIM_OC2_SetConfig+0x68>
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	4a28      	ldr	r2, [pc, #160]	; (8010238 <TIM_OC2_SetConfig+0x104>)
 8010198:	4293      	cmp	r3, r2
 801019a:	d10d      	bne.n	80101b8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801019c:	697b      	ldr	r3, [r7, #20]
 801019e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80101a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80101a4:	683b      	ldr	r3, [r7, #0]
 80101a6:	68db      	ldr	r3, [r3, #12]
 80101a8:	011b      	lsls	r3, r3, #4
 80101aa:	697a      	ldr	r2, [r7, #20]
 80101ac:	4313      	orrs	r3, r2
 80101ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80101b0:	697b      	ldr	r3, [r7, #20]
 80101b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80101b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	4a1e      	ldr	r2, [pc, #120]	; (8010234 <TIM_OC2_SetConfig+0x100>)
 80101bc:	4293      	cmp	r3, r2
 80101be:	d00f      	beq.n	80101e0 <TIM_OC2_SetConfig+0xac>
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	4a1d      	ldr	r2, [pc, #116]	; (8010238 <TIM_OC2_SetConfig+0x104>)
 80101c4:	4293      	cmp	r3, r2
 80101c6:	d00b      	beq.n	80101e0 <TIM_OC2_SetConfig+0xac>
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	4a1c      	ldr	r2, [pc, #112]	; (801023c <TIM_OC2_SetConfig+0x108>)
 80101cc:	4293      	cmp	r3, r2
 80101ce:	d007      	beq.n	80101e0 <TIM_OC2_SetConfig+0xac>
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	4a1b      	ldr	r2, [pc, #108]	; (8010240 <TIM_OC2_SetConfig+0x10c>)
 80101d4:	4293      	cmp	r3, r2
 80101d6:	d003      	beq.n	80101e0 <TIM_OC2_SetConfig+0xac>
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	4a1a      	ldr	r2, [pc, #104]	; (8010244 <TIM_OC2_SetConfig+0x110>)
 80101dc:	4293      	cmp	r3, r2
 80101de:	d113      	bne.n	8010208 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80101e0:	693b      	ldr	r3, [r7, #16]
 80101e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80101e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80101e8:	693b      	ldr	r3, [r7, #16]
 80101ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80101ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80101f0:	683b      	ldr	r3, [r7, #0]
 80101f2:	695b      	ldr	r3, [r3, #20]
 80101f4:	009b      	lsls	r3, r3, #2
 80101f6:	693a      	ldr	r2, [r7, #16]
 80101f8:	4313      	orrs	r3, r2
 80101fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80101fc:	683b      	ldr	r3, [r7, #0]
 80101fe:	699b      	ldr	r3, [r3, #24]
 8010200:	009b      	lsls	r3, r3, #2
 8010202:	693a      	ldr	r2, [r7, #16]
 8010204:	4313      	orrs	r3, r2
 8010206:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	693a      	ldr	r2, [r7, #16]
 801020c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	68fa      	ldr	r2, [r7, #12]
 8010212:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010214:	683b      	ldr	r3, [r7, #0]
 8010216:	685a      	ldr	r2, [r3, #4]
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	697a      	ldr	r2, [r7, #20]
 8010220:	621a      	str	r2, [r3, #32]
}
 8010222:	bf00      	nop
 8010224:	371c      	adds	r7, #28
 8010226:	46bd      	mov	sp, r7
 8010228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801022c:	4770      	bx	lr
 801022e:	bf00      	nop
 8010230:	feff8fff 	.word	0xfeff8fff
 8010234:	40010000 	.word	0x40010000
 8010238:	40010400 	.word	0x40010400
 801023c:	40014000 	.word	0x40014000
 8010240:	40014400 	.word	0x40014400
 8010244:	40014800 	.word	0x40014800

08010248 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010248:	b480      	push	{r7}
 801024a:	b087      	sub	sp, #28
 801024c:	af00      	add	r7, sp, #0
 801024e:	6078      	str	r0, [r7, #4]
 8010250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	6a1b      	ldr	r3, [r3, #32]
 8010256:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	6a1b      	ldr	r3, [r3, #32]
 8010262:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	685b      	ldr	r3, [r3, #4]
 8010268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	69db      	ldr	r3, [r3, #28]
 801026e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010270:	68fa      	ldr	r2, [r7, #12]
 8010272:	4b33      	ldr	r3, [pc, #204]	; (8010340 <TIM_OC3_SetConfig+0xf8>)
 8010274:	4013      	ands	r3, r2
 8010276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	f023 0303 	bic.w	r3, r3, #3
 801027e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010280:	683b      	ldr	r3, [r7, #0]
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	68fa      	ldr	r2, [r7, #12]
 8010286:	4313      	orrs	r3, r2
 8010288:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801028a:	697b      	ldr	r3, [r7, #20]
 801028c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010290:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010292:	683b      	ldr	r3, [r7, #0]
 8010294:	689b      	ldr	r3, [r3, #8]
 8010296:	021b      	lsls	r3, r3, #8
 8010298:	697a      	ldr	r2, [r7, #20]
 801029a:	4313      	orrs	r3, r2
 801029c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	4a28      	ldr	r2, [pc, #160]	; (8010344 <TIM_OC3_SetConfig+0xfc>)
 80102a2:	4293      	cmp	r3, r2
 80102a4:	d003      	beq.n	80102ae <TIM_OC3_SetConfig+0x66>
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	4a27      	ldr	r2, [pc, #156]	; (8010348 <TIM_OC3_SetConfig+0x100>)
 80102aa:	4293      	cmp	r3, r2
 80102ac:	d10d      	bne.n	80102ca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80102ae:	697b      	ldr	r3, [r7, #20]
 80102b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80102b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80102b6:	683b      	ldr	r3, [r7, #0]
 80102b8:	68db      	ldr	r3, [r3, #12]
 80102ba:	021b      	lsls	r3, r3, #8
 80102bc:	697a      	ldr	r2, [r7, #20]
 80102be:	4313      	orrs	r3, r2
 80102c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80102c2:	697b      	ldr	r3, [r7, #20]
 80102c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80102c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	4a1d      	ldr	r2, [pc, #116]	; (8010344 <TIM_OC3_SetConfig+0xfc>)
 80102ce:	4293      	cmp	r3, r2
 80102d0:	d00f      	beq.n	80102f2 <TIM_OC3_SetConfig+0xaa>
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	4a1c      	ldr	r2, [pc, #112]	; (8010348 <TIM_OC3_SetConfig+0x100>)
 80102d6:	4293      	cmp	r3, r2
 80102d8:	d00b      	beq.n	80102f2 <TIM_OC3_SetConfig+0xaa>
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	4a1b      	ldr	r2, [pc, #108]	; (801034c <TIM_OC3_SetConfig+0x104>)
 80102de:	4293      	cmp	r3, r2
 80102e0:	d007      	beq.n	80102f2 <TIM_OC3_SetConfig+0xaa>
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	4a1a      	ldr	r2, [pc, #104]	; (8010350 <TIM_OC3_SetConfig+0x108>)
 80102e6:	4293      	cmp	r3, r2
 80102e8:	d003      	beq.n	80102f2 <TIM_OC3_SetConfig+0xaa>
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	4a19      	ldr	r2, [pc, #100]	; (8010354 <TIM_OC3_SetConfig+0x10c>)
 80102ee:	4293      	cmp	r3, r2
 80102f0:	d113      	bne.n	801031a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80102f2:	693b      	ldr	r3, [r7, #16]
 80102f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80102f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80102fa:	693b      	ldr	r3, [r7, #16]
 80102fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010300:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010302:	683b      	ldr	r3, [r7, #0]
 8010304:	695b      	ldr	r3, [r3, #20]
 8010306:	011b      	lsls	r3, r3, #4
 8010308:	693a      	ldr	r2, [r7, #16]
 801030a:	4313      	orrs	r3, r2
 801030c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801030e:	683b      	ldr	r3, [r7, #0]
 8010310:	699b      	ldr	r3, [r3, #24]
 8010312:	011b      	lsls	r3, r3, #4
 8010314:	693a      	ldr	r2, [r7, #16]
 8010316:	4313      	orrs	r3, r2
 8010318:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	693a      	ldr	r2, [r7, #16]
 801031e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	68fa      	ldr	r2, [r7, #12]
 8010324:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010326:	683b      	ldr	r3, [r7, #0]
 8010328:	685a      	ldr	r2, [r3, #4]
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	697a      	ldr	r2, [r7, #20]
 8010332:	621a      	str	r2, [r3, #32]
}
 8010334:	bf00      	nop
 8010336:	371c      	adds	r7, #28
 8010338:	46bd      	mov	sp, r7
 801033a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801033e:	4770      	bx	lr
 8010340:	fffeff8f 	.word	0xfffeff8f
 8010344:	40010000 	.word	0x40010000
 8010348:	40010400 	.word	0x40010400
 801034c:	40014000 	.word	0x40014000
 8010350:	40014400 	.word	0x40014400
 8010354:	40014800 	.word	0x40014800

08010358 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010358:	b480      	push	{r7}
 801035a:	b087      	sub	sp, #28
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]
 8010360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	6a1b      	ldr	r3, [r3, #32]
 8010366:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	6a1b      	ldr	r3, [r3, #32]
 8010372:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	685b      	ldr	r3, [r3, #4]
 8010378:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	69db      	ldr	r3, [r3, #28]
 801037e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010380:	68fa      	ldr	r2, [r7, #12]
 8010382:	4b24      	ldr	r3, [pc, #144]	; (8010414 <TIM_OC4_SetConfig+0xbc>)
 8010384:	4013      	ands	r3, r2
 8010386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801038e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010390:	683b      	ldr	r3, [r7, #0]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	021b      	lsls	r3, r3, #8
 8010396:	68fa      	ldr	r2, [r7, #12]
 8010398:	4313      	orrs	r3, r2
 801039a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801039c:	693b      	ldr	r3, [r7, #16]
 801039e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80103a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80103a4:	683b      	ldr	r3, [r7, #0]
 80103a6:	689b      	ldr	r3, [r3, #8]
 80103a8:	031b      	lsls	r3, r3, #12
 80103aa:	693a      	ldr	r2, [r7, #16]
 80103ac:	4313      	orrs	r3, r2
 80103ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	4a19      	ldr	r2, [pc, #100]	; (8010418 <TIM_OC4_SetConfig+0xc0>)
 80103b4:	4293      	cmp	r3, r2
 80103b6:	d00f      	beq.n	80103d8 <TIM_OC4_SetConfig+0x80>
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	4a18      	ldr	r2, [pc, #96]	; (801041c <TIM_OC4_SetConfig+0xc4>)
 80103bc:	4293      	cmp	r3, r2
 80103be:	d00b      	beq.n	80103d8 <TIM_OC4_SetConfig+0x80>
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	4a17      	ldr	r2, [pc, #92]	; (8010420 <TIM_OC4_SetConfig+0xc8>)
 80103c4:	4293      	cmp	r3, r2
 80103c6:	d007      	beq.n	80103d8 <TIM_OC4_SetConfig+0x80>
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	4a16      	ldr	r2, [pc, #88]	; (8010424 <TIM_OC4_SetConfig+0xcc>)
 80103cc:	4293      	cmp	r3, r2
 80103ce:	d003      	beq.n	80103d8 <TIM_OC4_SetConfig+0x80>
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	4a15      	ldr	r2, [pc, #84]	; (8010428 <TIM_OC4_SetConfig+0xd0>)
 80103d4:	4293      	cmp	r3, r2
 80103d6:	d109      	bne.n	80103ec <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80103d8:	697b      	ldr	r3, [r7, #20]
 80103da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80103de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80103e0:	683b      	ldr	r3, [r7, #0]
 80103e2:	695b      	ldr	r3, [r3, #20]
 80103e4:	019b      	lsls	r3, r3, #6
 80103e6:	697a      	ldr	r2, [r7, #20]
 80103e8:	4313      	orrs	r3, r2
 80103ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	697a      	ldr	r2, [r7, #20]
 80103f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	68fa      	ldr	r2, [r7, #12]
 80103f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80103f8:	683b      	ldr	r3, [r7, #0]
 80103fa:	685a      	ldr	r2, [r3, #4]
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	693a      	ldr	r2, [r7, #16]
 8010404:	621a      	str	r2, [r3, #32]
}
 8010406:	bf00      	nop
 8010408:	371c      	adds	r7, #28
 801040a:	46bd      	mov	sp, r7
 801040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010410:	4770      	bx	lr
 8010412:	bf00      	nop
 8010414:	feff8fff 	.word	0xfeff8fff
 8010418:	40010000 	.word	0x40010000
 801041c:	40010400 	.word	0x40010400
 8010420:	40014000 	.word	0x40014000
 8010424:	40014400 	.word	0x40014400
 8010428:	40014800 	.word	0x40014800

0801042c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801042c:	b480      	push	{r7}
 801042e:	b087      	sub	sp, #28
 8010430:	af00      	add	r7, sp, #0
 8010432:	6078      	str	r0, [r7, #4]
 8010434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	6a1b      	ldr	r3, [r3, #32]
 801043a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	6a1b      	ldr	r3, [r3, #32]
 8010446:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	685b      	ldr	r3, [r3, #4]
 801044c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010454:	68fa      	ldr	r2, [r7, #12]
 8010456:	4b21      	ldr	r3, [pc, #132]	; (80104dc <TIM_OC5_SetConfig+0xb0>)
 8010458:	4013      	ands	r3, r2
 801045a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801045c:	683b      	ldr	r3, [r7, #0]
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	68fa      	ldr	r2, [r7, #12]
 8010462:	4313      	orrs	r3, r2
 8010464:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8010466:	693b      	ldr	r3, [r7, #16]
 8010468:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801046c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801046e:	683b      	ldr	r3, [r7, #0]
 8010470:	689b      	ldr	r3, [r3, #8]
 8010472:	041b      	lsls	r3, r3, #16
 8010474:	693a      	ldr	r2, [r7, #16]
 8010476:	4313      	orrs	r3, r2
 8010478:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	4a18      	ldr	r2, [pc, #96]	; (80104e0 <TIM_OC5_SetConfig+0xb4>)
 801047e:	4293      	cmp	r3, r2
 8010480:	d00f      	beq.n	80104a2 <TIM_OC5_SetConfig+0x76>
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	4a17      	ldr	r2, [pc, #92]	; (80104e4 <TIM_OC5_SetConfig+0xb8>)
 8010486:	4293      	cmp	r3, r2
 8010488:	d00b      	beq.n	80104a2 <TIM_OC5_SetConfig+0x76>
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	4a16      	ldr	r2, [pc, #88]	; (80104e8 <TIM_OC5_SetConfig+0xbc>)
 801048e:	4293      	cmp	r3, r2
 8010490:	d007      	beq.n	80104a2 <TIM_OC5_SetConfig+0x76>
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	4a15      	ldr	r2, [pc, #84]	; (80104ec <TIM_OC5_SetConfig+0xc0>)
 8010496:	4293      	cmp	r3, r2
 8010498:	d003      	beq.n	80104a2 <TIM_OC5_SetConfig+0x76>
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	4a14      	ldr	r2, [pc, #80]	; (80104f0 <TIM_OC5_SetConfig+0xc4>)
 801049e:	4293      	cmp	r3, r2
 80104a0:	d109      	bne.n	80104b6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80104a2:	697b      	ldr	r3, [r7, #20]
 80104a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80104a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80104aa:	683b      	ldr	r3, [r7, #0]
 80104ac:	695b      	ldr	r3, [r3, #20]
 80104ae:	021b      	lsls	r3, r3, #8
 80104b0:	697a      	ldr	r2, [r7, #20]
 80104b2:	4313      	orrs	r3, r2
 80104b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	697a      	ldr	r2, [r7, #20]
 80104ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	68fa      	ldr	r2, [r7, #12]
 80104c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80104c2:	683b      	ldr	r3, [r7, #0]
 80104c4:	685a      	ldr	r2, [r3, #4]
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	693a      	ldr	r2, [r7, #16]
 80104ce:	621a      	str	r2, [r3, #32]
}
 80104d0:	bf00      	nop
 80104d2:	371c      	adds	r7, #28
 80104d4:	46bd      	mov	sp, r7
 80104d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104da:	4770      	bx	lr
 80104dc:	fffeff8f 	.word	0xfffeff8f
 80104e0:	40010000 	.word	0x40010000
 80104e4:	40010400 	.word	0x40010400
 80104e8:	40014000 	.word	0x40014000
 80104ec:	40014400 	.word	0x40014400
 80104f0:	40014800 	.word	0x40014800

080104f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80104f4:	b480      	push	{r7}
 80104f6:	b087      	sub	sp, #28
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	6078      	str	r0, [r7, #4]
 80104fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	6a1b      	ldr	r3, [r3, #32]
 8010502:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	6a1b      	ldr	r3, [r3, #32]
 801050e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	685b      	ldr	r3, [r3, #4]
 8010514:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801051a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801051c:	68fa      	ldr	r2, [r7, #12]
 801051e:	4b22      	ldr	r3, [pc, #136]	; (80105a8 <TIM_OC6_SetConfig+0xb4>)
 8010520:	4013      	ands	r3, r2
 8010522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010524:	683b      	ldr	r3, [r7, #0]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	021b      	lsls	r3, r3, #8
 801052a:	68fa      	ldr	r2, [r7, #12]
 801052c:	4313      	orrs	r3, r2
 801052e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010530:	693b      	ldr	r3, [r7, #16]
 8010532:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010536:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010538:	683b      	ldr	r3, [r7, #0]
 801053a:	689b      	ldr	r3, [r3, #8]
 801053c:	051b      	lsls	r3, r3, #20
 801053e:	693a      	ldr	r2, [r7, #16]
 8010540:	4313      	orrs	r3, r2
 8010542:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	4a19      	ldr	r2, [pc, #100]	; (80105ac <TIM_OC6_SetConfig+0xb8>)
 8010548:	4293      	cmp	r3, r2
 801054a:	d00f      	beq.n	801056c <TIM_OC6_SetConfig+0x78>
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	4a18      	ldr	r2, [pc, #96]	; (80105b0 <TIM_OC6_SetConfig+0xbc>)
 8010550:	4293      	cmp	r3, r2
 8010552:	d00b      	beq.n	801056c <TIM_OC6_SetConfig+0x78>
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	4a17      	ldr	r2, [pc, #92]	; (80105b4 <TIM_OC6_SetConfig+0xc0>)
 8010558:	4293      	cmp	r3, r2
 801055a:	d007      	beq.n	801056c <TIM_OC6_SetConfig+0x78>
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	4a16      	ldr	r2, [pc, #88]	; (80105b8 <TIM_OC6_SetConfig+0xc4>)
 8010560:	4293      	cmp	r3, r2
 8010562:	d003      	beq.n	801056c <TIM_OC6_SetConfig+0x78>
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	4a15      	ldr	r2, [pc, #84]	; (80105bc <TIM_OC6_SetConfig+0xc8>)
 8010568:	4293      	cmp	r3, r2
 801056a:	d109      	bne.n	8010580 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801056c:	697b      	ldr	r3, [r7, #20]
 801056e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010572:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010574:	683b      	ldr	r3, [r7, #0]
 8010576:	695b      	ldr	r3, [r3, #20]
 8010578:	029b      	lsls	r3, r3, #10
 801057a:	697a      	ldr	r2, [r7, #20]
 801057c:	4313      	orrs	r3, r2
 801057e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	697a      	ldr	r2, [r7, #20]
 8010584:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	68fa      	ldr	r2, [r7, #12]
 801058a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801058c:	683b      	ldr	r3, [r7, #0]
 801058e:	685a      	ldr	r2, [r3, #4]
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	693a      	ldr	r2, [r7, #16]
 8010598:	621a      	str	r2, [r3, #32]
}
 801059a:	bf00      	nop
 801059c:	371c      	adds	r7, #28
 801059e:	46bd      	mov	sp, r7
 80105a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a4:	4770      	bx	lr
 80105a6:	bf00      	nop
 80105a8:	feff8fff 	.word	0xfeff8fff
 80105ac:	40010000 	.word	0x40010000
 80105b0:	40010400 	.word	0x40010400
 80105b4:	40014000 	.word	0x40014000
 80105b8:	40014400 	.word	0x40014400
 80105bc:	40014800 	.word	0x40014800

080105c0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80105c0:	b580      	push	{r7, lr}
 80105c2:	b086      	sub	sp, #24
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	6078      	str	r0, [r7, #4]
 80105c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80105ca:	2300      	movs	r3, #0
 80105cc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	689b      	ldr	r3, [r3, #8]
 80105d4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80105d6:	693a      	ldr	r2, [r7, #16]
 80105d8:	4b65      	ldr	r3, [pc, #404]	; (8010770 <TIM_SlaveTimer_SetConfig+0x1b0>)
 80105da:	4013      	ands	r3, r2
 80105dc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80105de:	683b      	ldr	r3, [r7, #0]
 80105e0:	685b      	ldr	r3, [r3, #4]
 80105e2:	693a      	ldr	r2, [r7, #16]
 80105e4:	4313      	orrs	r3, r2
 80105e6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80105e8:	693a      	ldr	r2, [r7, #16]
 80105ea:	4b62      	ldr	r3, [pc, #392]	; (8010774 <TIM_SlaveTimer_SetConfig+0x1b4>)
 80105ec:	4013      	ands	r3, r2
 80105ee:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80105f0:	683b      	ldr	r3, [r7, #0]
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	693a      	ldr	r2, [r7, #16]
 80105f6:	4313      	orrs	r3, r2
 80105f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	693a      	ldr	r2, [r7, #16]
 8010600:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8010602:	683b      	ldr	r3, [r7, #0]
 8010604:	685b      	ldr	r3, [r3, #4]
 8010606:	4a5c      	ldr	r2, [pc, #368]	; (8010778 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8010608:	4293      	cmp	r3, r2
 801060a:	f000 80ab 	beq.w	8010764 <TIM_SlaveTimer_SetConfig+0x1a4>
 801060e:	4a5a      	ldr	r2, [pc, #360]	; (8010778 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8010610:	4293      	cmp	r3, r2
 8010612:	f200 80a4 	bhi.w	801075e <TIM_SlaveTimer_SetConfig+0x19e>
 8010616:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801061a:	f000 80a3 	beq.w	8010764 <TIM_SlaveTimer_SetConfig+0x1a4>
 801061e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010622:	f200 809c 	bhi.w	801075e <TIM_SlaveTimer_SetConfig+0x19e>
 8010626:	4a55      	ldr	r2, [pc, #340]	; (801077c <TIM_SlaveTimer_SetConfig+0x1bc>)
 8010628:	4293      	cmp	r3, r2
 801062a:	f000 809b 	beq.w	8010764 <TIM_SlaveTimer_SetConfig+0x1a4>
 801062e:	4a53      	ldr	r2, [pc, #332]	; (801077c <TIM_SlaveTimer_SetConfig+0x1bc>)
 8010630:	4293      	cmp	r3, r2
 8010632:	f200 8094 	bhi.w	801075e <TIM_SlaveTimer_SetConfig+0x19e>
 8010636:	4a52      	ldr	r2, [pc, #328]	; (8010780 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8010638:	4293      	cmp	r3, r2
 801063a:	f000 8093 	beq.w	8010764 <TIM_SlaveTimer_SetConfig+0x1a4>
 801063e:	4a50      	ldr	r2, [pc, #320]	; (8010780 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8010640:	4293      	cmp	r3, r2
 8010642:	f200 808c 	bhi.w	801075e <TIM_SlaveTimer_SetConfig+0x19e>
 8010646:	4a4f      	ldr	r2, [pc, #316]	; (8010784 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8010648:	4293      	cmp	r3, r2
 801064a:	f000 808b 	beq.w	8010764 <TIM_SlaveTimer_SetConfig+0x1a4>
 801064e:	4a4d      	ldr	r2, [pc, #308]	; (8010784 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8010650:	4293      	cmp	r3, r2
 8010652:	f200 8084 	bhi.w	801075e <TIM_SlaveTimer_SetConfig+0x19e>
 8010656:	4a4c      	ldr	r2, [pc, #304]	; (8010788 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8010658:	4293      	cmp	r3, r2
 801065a:	f000 8083 	beq.w	8010764 <TIM_SlaveTimer_SetConfig+0x1a4>
 801065e:	4a4a      	ldr	r2, [pc, #296]	; (8010788 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8010660:	4293      	cmp	r3, r2
 8010662:	d87c      	bhi.n	801075e <TIM_SlaveTimer_SetConfig+0x19e>
 8010664:	4a49      	ldr	r2, [pc, #292]	; (801078c <TIM_SlaveTimer_SetConfig+0x1cc>)
 8010666:	4293      	cmp	r3, r2
 8010668:	d07c      	beq.n	8010764 <TIM_SlaveTimer_SetConfig+0x1a4>
 801066a:	4a48      	ldr	r2, [pc, #288]	; (801078c <TIM_SlaveTimer_SetConfig+0x1cc>)
 801066c:	4293      	cmp	r3, r2
 801066e:	d876      	bhi.n	801075e <TIM_SlaveTimer_SetConfig+0x19e>
 8010670:	4a47      	ldr	r2, [pc, #284]	; (8010790 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8010672:	4293      	cmp	r3, r2
 8010674:	d076      	beq.n	8010764 <TIM_SlaveTimer_SetConfig+0x1a4>
 8010676:	4a46      	ldr	r2, [pc, #280]	; (8010790 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8010678:	4293      	cmp	r3, r2
 801067a:	d870      	bhi.n	801075e <TIM_SlaveTimer_SetConfig+0x19e>
 801067c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8010680:	d070      	beq.n	8010764 <TIM_SlaveTimer_SetConfig+0x1a4>
 8010682:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8010686:	d86a      	bhi.n	801075e <TIM_SlaveTimer_SetConfig+0x19e>
 8010688:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801068c:	d06a      	beq.n	8010764 <TIM_SlaveTimer_SetConfig+0x1a4>
 801068e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010692:	d864      	bhi.n	801075e <TIM_SlaveTimer_SetConfig+0x19e>
 8010694:	2b70      	cmp	r3, #112	; 0x70
 8010696:	d01a      	beq.n	80106ce <TIM_SlaveTimer_SetConfig+0x10e>
 8010698:	2b70      	cmp	r3, #112	; 0x70
 801069a:	d860      	bhi.n	801075e <TIM_SlaveTimer_SetConfig+0x19e>
 801069c:	2b60      	cmp	r3, #96	; 0x60
 801069e:	d054      	beq.n	801074a <TIM_SlaveTimer_SetConfig+0x18a>
 80106a0:	2b60      	cmp	r3, #96	; 0x60
 80106a2:	d85c      	bhi.n	801075e <TIM_SlaveTimer_SetConfig+0x19e>
 80106a4:	2b50      	cmp	r3, #80	; 0x50
 80106a6:	d046      	beq.n	8010736 <TIM_SlaveTimer_SetConfig+0x176>
 80106a8:	2b50      	cmp	r3, #80	; 0x50
 80106aa:	d858      	bhi.n	801075e <TIM_SlaveTimer_SetConfig+0x19e>
 80106ac:	2b40      	cmp	r3, #64	; 0x40
 80106ae:	d019      	beq.n	80106e4 <TIM_SlaveTimer_SetConfig+0x124>
 80106b0:	2b40      	cmp	r3, #64	; 0x40
 80106b2:	d854      	bhi.n	801075e <TIM_SlaveTimer_SetConfig+0x19e>
 80106b4:	2b30      	cmp	r3, #48	; 0x30
 80106b6:	d055      	beq.n	8010764 <TIM_SlaveTimer_SetConfig+0x1a4>
 80106b8:	2b30      	cmp	r3, #48	; 0x30
 80106ba:	d850      	bhi.n	801075e <TIM_SlaveTimer_SetConfig+0x19e>
 80106bc:	2b20      	cmp	r3, #32
 80106be:	d051      	beq.n	8010764 <TIM_SlaveTimer_SetConfig+0x1a4>
 80106c0:	2b20      	cmp	r3, #32
 80106c2:	d84c      	bhi.n	801075e <TIM_SlaveTimer_SetConfig+0x19e>
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d04d      	beq.n	8010764 <TIM_SlaveTimer_SetConfig+0x1a4>
 80106c8:	2b10      	cmp	r3, #16
 80106ca:	d04b      	beq.n	8010764 <TIM_SlaveTimer_SetConfig+0x1a4>
 80106cc:	e047      	b.n	801075e <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80106d2:	683b      	ldr	r3, [r7, #0]
 80106d4:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80106d6:	683b      	ldr	r3, [r7, #0]
 80106d8:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80106da:	683b      	ldr	r3, [r7, #0]
 80106dc:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80106de:	f000 f9e2 	bl	8010aa6 <TIM_ETR_SetConfig>
      break;
 80106e2:	e040      	b.n	8010766 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80106e4:	683b      	ldr	r3, [r7, #0]
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	2b05      	cmp	r3, #5
 80106ea:	d101      	bne.n	80106f0 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 80106ec:	2301      	movs	r3, #1
 80106ee:	e03b      	b.n	8010768 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	6a1b      	ldr	r3, [r3, #32]
 80106f6:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	6a1a      	ldr	r2, [r3, #32]
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	f022 0201 	bic.w	r2, r2, #1
 8010706:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	699b      	ldr	r3, [r3, #24]
 801070e:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010710:	68bb      	ldr	r3, [r7, #8]
 8010712:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010716:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8010718:	683b      	ldr	r3, [r7, #0]
 801071a:	691b      	ldr	r3, [r3, #16]
 801071c:	011b      	lsls	r3, r3, #4
 801071e:	68ba      	ldr	r2, [r7, #8]
 8010720:	4313      	orrs	r3, r2
 8010722:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	68ba      	ldr	r2, [r7, #8]
 801072a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	68fa      	ldr	r2, [r7, #12]
 8010732:	621a      	str	r2, [r3, #32]
      break;
 8010734:	e017      	b.n	8010766 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 801073a:	683b      	ldr	r3, [r7, #0]
 801073c:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 801073e:	683b      	ldr	r3, [r7, #0]
 8010740:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010742:	461a      	mov	r2, r3
 8010744:	f000 f89a 	bl	801087c <TIM_TI1_ConfigInputStage>
      break;
 8010748:	e00d      	b.n	8010766 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 801074e:	683b      	ldr	r3, [r7, #0]
 8010750:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8010752:	683b      	ldr	r3, [r7, #0]
 8010754:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010756:	461a      	mov	r2, r3
 8010758:	f000 f8fc 	bl	8010954 <TIM_TI2_ConfigInputStage>
      break;
 801075c:	e003      	b.n	8010766 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 801075e:	2301      	movs	r3, #1
 8010760:	75fb      	strb	r3, [r7, #23]
      break;
 8010762:	e000      	b.n	8010766 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 8010764:	bf00      	nop
  }

  return status;
 8010766:	7dfb      	ldrb	r3, [r7, #23]
}
 8010768:	4618      	mov	r0, r3
 801076a:	3718      	adds	r7, #24
 801076c:	46bd      	mov	sp, r7
 801076e:	bd80      	pop	{r7, pc}
 8010770:	ffcfff8f 	.word	0xffcfff8f
 8010774:	fffefff8 	.word	0xfffefff8
 8010778:	00200010 	.word	0x00200010
 801077c:	00100070 	.word	0x00100070
 8010780:	00100060 	.word	0x00100060
 8010784:	00100050 	.word	0x00100050
 8010788:	00100040 	.word	0x00100040
 801078c:	00100030 	.word	0x00100030
 8010790:	00100020 	.word	0x00100020

08010794 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8010794:	b480      	push	{r7}
 8010796:	b087      	sub	sp, #28
 8010798:	af00      	add	r7, sp, #0
 801079a:	60f8      	str	r0, [r7, #12]
 801079c:	60b9      	str	r1, [r7, #8]
 801079e:	607a      	str	r2, [r7, #4]
 80107a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	6a1b      	ldr	r3, [r3, #32]
 80107a6:	f023 0201 	bic.w	r2, r3, #1
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	699b      	ldr	r3, [r3, #24]
 80107b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	6a1b      	ldr	r3, [r3, #32]
 80107b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	4a28      	ldr	r2, [pc, #160]	; (8010860 <TIM_TI1_SetConfig+0xcc>)
 80107be:	4293      	cmp	r3, r2
 80107c0:	d01b      	beq.n	80107fa <TIM_TI1_SetConfig+0x66>
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80107c8:	d017      	beq.n	80107fa <TIM_TI1_SetConfig+0x66>
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	4a25      	ldr	r2, [pc, #148]	; (8010864 <TIM_TI1_SetConfig+0xd0>)
 80107ce:	4293      	cmp	r3, r2
 80107d0:	d013      	beq.n	80107fa <TIM_TI1_SetConfig+0x66>
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	4a24      	ldr	r2, [pc, #144]	; (8010868 <TIM_TI1_SetConfig+0xd4>)
 80107d6:	4293      	cmp	r3, r2
 80107d8:	d00f      	beq.n	80107fa <TIM_TI1_SetConfig+0x66>
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	4a23      	ldr	r2, [pc, #140]	; (801086c <TIM_TI1_SetConfig+0xd8>)
 80107de:	4293      	cmp	r3, r2
 80107e0:	d00b      	beq.n	80107fa <TIM_TI1_SetConfig+0x66>
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	4a22      	ldr	r2, [pc, #136]	; (8010870 <TIM_TI1_SetConfig+0xdc>)
 80107e6:	4293      	cmp	r3, r2
 80107e8:	d007      	beq.n	80107fa <TIM_TI1_SetConfig+0x66>
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	4a21      	ldr	r2, [pc, #132]	; (8010874 <TIM_TI1_SetConfig+0xe0>)
 80107ee:	4293      	cmp	r3, r2
 80107f0:	d003      	beq.n	80107fa <TIM_TI1_SetConfig+0x66>
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	4a20      	ldr	r2, [pc, #128]	; (8010878 <TIM_TI1_SetConfig+0xe4>)
 80107f6:	4293      	cmp	r3, r2
 80107f8:	d101      	bne.n	80107fe <TIM_TI1_SetConfig+0x6a>
 80107fa:	2301      	movs	r3, #1
 80107fc:	e000      	b.n	8010800 <TIM_TI1_SetConfig+0x6c>
 80107fe:	2300      	movs	r3, #0
 8010800:	2b00      	cmp	r3, #0
 8010802:	d008      	beq.n	8010816 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8010804:	697b      	ldr	r3, [r7, #20]
 8010806:	f023 0303 	bic.w	r3, r3, #3
 801080a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 801080c:	697a      	ldr	r2, [r7, #20]
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	4313      	orrs	r3, r2
 8010812:	617b      	str	r3, [r7, #20]
 8010814:	e003      	b.n	801081e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8010816:	697b      	ldr	r3, [r7, #20]
 8010818:	f043 0301 	orr.w	r3, r3, #1
 801081c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801081e:	697b      	ldr	r3, [r7, #20]
 8010820:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010824:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8010826:	683b      	ldr	r3, [r7, #0]
 8010828:	011b      	lsls	r3, r3, #4
 801082a:	b2db      	uxtb	r3, r3
 801082c:	697a      	ldr	r2, [r7, #20]
 801082e:	4313      	orrs	r3, r2
 8010830:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010832:	693b      	ldr	r3, [r7, #16]
 8010834:	f023 030a 	bic.w	r3, r3, #10
 8010838:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 801083a:	68bb      	ldr	r3, [r7, #8]
 801083c:	f003 030a 	and.w	r3, r3, #10
 8010840:	693a      	ldr	r2, [r7, #16]
 8010842:	4313      	orrs	r3, r2
 8010844:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	697a      	ldr	r2, [r7, #20]
 801084a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	693a      	ldr	r2, [r7, #16]
 8010850:	621a      	str	r2, [r3, #32]
}
 8010852:	bf00      	nop
 8010854:	371c      	adds	r7, #28
 8010856:	46bd      	mov	sp, r7
 8010858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801085c:	4770      	bx	lr
 801085e:	bf00      	nop
 8010860:	40010000 	.word	0x40010000
 8010864:	40000400 	.word	0x40000400
 8010868:	40000800 	.word	0x40000800
 801086c:	40000c00 	.word	0x40000c00
 8010870:	40010400 	.word	0x40010400
 8010874:	40001800 	.word	0x40001800
 8010878:	40014000 	.word	0x40014000

0801087c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801087c:	b480      	push	{r7}
 801087e:	b087      	sub	sp, #28
 8010880:	af00      	add	r7, sp, #0
 8010882:	60f8      	str	r0, [r7, #12]
 8010884:	60b9      	str	r1, [r7, #8]
 8010886:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	6a1b      	ldr	r3, [r3, #32]
 801088c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	6a1b      	ldr	r3, [r3, #32]
 8010892:	f023 0201 	bic.w	r2, r3, #1
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	699b      	ldr	r3, [r3, #24]
 801089e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80108a0:	693b      	ldr	r3, [r7, #16]
 80108a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80108a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	011b      	lsls	r3, r3, #4
 80108ac:	693a      	ldr	r2, [r7, #16]
 80108ae:	4313      	orrs	r3, r2
 80108b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80108b2:	697b      	ldr	r3, [r7, #20]
 80108b4:	f023 030a 	bic.w	r3, r3, #10
 80108b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80108ba:	697a      	ldr	r2, [r7, #20]
 80108bc:	68bb      	ldr	r3, [r7, #8]
 80108be:	4313      	orrs	r3, r2
 80108c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	693a      	ldr	r2, [r7, #16]
 80108c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	697a      	ldr	r2, [r7, #20]
 80108cc:	621a      	str	r2, [r3, #32]
}
 80108ce:	bf00      	nop
 80108d0:	371c      	adds	r7, #28
 80108d2:	46bd      	mov	sp, r7
 80108d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d8:	4770      	bx	lr

080108da <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80108da:	b480      	push	{r7}
 80108dc:	b087      	sub	sp, #28
 80108de:	af00      	add	r7, sp, #0
 80108e0:	60f8      	str	r0, [r7, #12]
 80108e2:	60b9      	str	r1, [r7, #8]
 80108e4:	607a      	str	r2, [r7, #4]
 80108e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	6a1b      	ldr	r3, [r3, #32]
 80108ec:	f023 0210 	bic.w	r2, r3, #16
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	699b      	ldr	r3, [r3, #24]
 80108f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	6a1b      	ldr	r3, [r3, #32]
 80108fe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8010900:	697b      	ldr	r3, [r7, #20]
 8010902:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010906:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	021b      	lsls	r3, r3, #8
 801090c:	697a      	ldr	r2, [r7, #20]
 801090e:	4313      	orrs	r3, r2
 8010910:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010912:	697b      	ldr	r3, [r7, #20]
 8010914:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010918:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 801091a:	683b      	ldr	r3, [r7, #0]
 801091c:	031b      	lsls	r3, r3, #12
 801091e:	b29b      	uxth	r3, r3
 8010920:	697a      	ldr	r2, [r7, #20]
 8010922:	4313      	orrs	r3, r2
 8010924:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010926:	693b      	ldr	r3, [r7, #16]
 8010928:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801092c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 801092e:	68bb      	ldr	r3, [r7, #8]
 8010930:	011b      	lsls	r3, r3, #4
 8010932:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8010936:	693a      	ldr	r2, [r7, #16]
 8010938:	4313      	orrs	r3, r2
 801093a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	697a      	ldr	r2, [r7, #20]
 8010940:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	693a      	ldr	r2, [r7, #16]
 8010946:	621a      	str	r2, [r3, #32]
}
 8010948:	bf00      	nop
 801094a:	371c      	adds	r7, #28
 801094c:	46bd      	mov	sp, r7
 801094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010952:	4770      	bx	lr

08010954 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010954:	b480      	push	{r7}
 8010956:	b087      	sub	sp, #28
 8010958:	af00      	add	r7, sp, #0
 801095a:	60f8      	str	r0, [r7, #12]
 801095c:	60b9      	str	r1, [r7, #8]
 801095e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	6a1b      	ldr	r3, [r3, #32]
 8010964:	f023 0210 	bic.w	r2, r3, #16
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	699b      	ldr	r3, [r3, #24]
 8010970:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	6a1b      	ldr	r3, [r3, #32]
 8010976:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010978:	697b      	ldr	r3, [r7, #20]
 801097a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801097e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	031b      	lsls	r3, r3, #12
 8010984:	697a      	ldr	r2, [r7, #20]
 8010986:	4313      	orrs	r3, r2
 8010988:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801098a:	693b      	ldr	r3, [r7, #16]
 801098c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010990:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010992:	68bb      	ldr	r3, [r7, #8]
 8010994:	011b      	lsls	r3, r3, #4
 8010996:	693a      	ldr	r2, [r7, #16]
 8010998:	4313      	orrs	r3, r2
 801099a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	697a      	ldr	r2, [r7, #20]
 80109a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	693a      	ldr	r2, [r7, #16]
 80109a6:	621a      	str	r2, [r3, #32]
}
 80109a8:	bf00      	nop
 80109aa:	371c      	adds	r7, #28
 80109ac:	46bd      	mov	sp, r7
 80109ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b2:	4770      	bx	lr

080109b4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80109b4:	b480      	push	{r7}
 80109b6:	b087      	sub	sp, #28
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	60f8      	str	r0, [r7, #12]
 80109bc:	60b9      	str	r1, [r7, #8]
 80109be:	607a      	str	r2, [r7, #4]
 80109c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	6a1b      	ldr	r3, [r3, #32]
 80109c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	69db      	ldr	r3, [r3, #28]
 80109d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	6a1b      	ldr	r3, [r3, #32]
 80109d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80109da:	697b      	ldr	r3, [r7, #20]
 80109dc:	f023 0303 	bic.w	r3, r3, #3
 80109e0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80109e2:	697a      	ldr	r2, [r7, #20]
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	4313      	orrs	r3, r2
 80109e8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80109ea:	697b      	ldr	r3, [r7, #20]
 80109ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80109f0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80109f2:	683b      	ldr	r3, [r7, #0]
 80109f4:	011b      	lsls	r3, r3, #4
 80109f6:	b2db      	uxtb	r3, r3
 80109f8:	697a      	ldr	r2, [r7, #20]
 80109fa:	4313      	orrs	r3, r2
 80109fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80109fe:	693b      	ldr	r3, [r7, #16]
 8010a00:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8010a04:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8010a06:	68bb      	ldr	r3, [r7, #8]
 8010a08:	021b      	lsls	r3, r3, #8
 8010a0a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8010a0e:	693a      	ldr	r2, [r7, #16]
 8010a10:	4313      	orrs	r3, r2
 8010a12:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	697a      	ldr	r2, [r7, #20]
 8010a18:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	693a      	ldr	r2, [r7, #16]
 8010a1e:	621a      	str	r2, [r3, #32]
}
 8010a20:	bf00      	nop
 8010a22:	371c      	adds	r7, #28
 8010a24:	46bd      	mov	sp, r7
 8010a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a2a:	4770      	bx	lr

08010a2c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8010a2c:	b480      	push	{r7}
 8010a2e:	b087      	sub	sp, #28
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	60f8      	str	r0, [r7, #12]
 8010a34:	60b9      	str	r1, [r7, #8]
 8010a36:	607a      	str	r2, [r7, #4]
 8010a38:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	6a1b      	ldr	r3, [r3, #32]
 8010a3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	69db      	ldr	r3, [r3, #28]
 8010a4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	6a1b      	ldr	r3, [r3, #32]
 8010a50:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8010a52:	697b      	ldr	r3, [r7, #20]
 8010a54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010a58:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	021b      	lsls	r3, r3, #8
 8010a5e:	697a      	ldr	r2, [r7, #20]
 8010a60:	4313      	orrs	r3, r2
 8010a62:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8010a64:	697b      	ldr	r3, [r7, #20]
 8010a66:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010a6a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8010a6c:	683b      	ldr	r3, [r7, #0]
 8010a6e:	031b      	lsls	r3, r3, #12
 8010a70:	b29b      	uxth	r3, r3
 8010a72:	697a      	ldr	r2, [r7, #20]
 8010a74:	4313      	orrs	r3, r2
 8010a76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8010a78:	693b      	ldr	r3, [r7, #16]
 8010a7a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8010a7e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8010a80:	68bb      	ldr	r3, [r7, #8]
 8010a82:	031b      	lsls	r3, r3, #12
 8010a84:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8010a88:	693a      	ldr	r2, [r7, #16]
 8010a8a:	4313      	orrs	r3, r2
 8010a8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	697a      	ldr	r2, [r7, #20]
 8010a92:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	693a      	ldr	r2, [r7, #16]
 8010a98:	621a      	str	r2, [r3, #32]
}
 8010a9a:	bf00      	nop
 8010a9c:	371c      	adds	r7, #28
 8010a9e:	46bd      	mov	sp, r7
 8010aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa4:	4770      	bx	lr

08010aa6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010aa6:	b480      	push	{r7}
 8010aa8:	b087      	sub	sp, #28
 8010aaa:	af00      	add	r7, sp, #0
 8010aac:	60f8      	str	r0, [r7, #12]
 8010aae:	60b9      	str	r1, [r7, #8]
 8010ab0:	607a      	str	r2, [r7, #4]
 8010ab2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	689b      	ldr	r3, [r3, #8]
 8010ab8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010aba:	697b      	ldr	r3, [r7, #20]
 8010abc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010ac0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010ac2:	683b      	ldr	r3, [r7, #0]
 8010ac4:	021a      	lsls	r2, r3, #8
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	431a      	orrs	r2, r3
 8010aca:	68bb      	ldr	r3, [r7, #8]
 8010acc:	4313      	orrs	r3, r2
 8010ace:	697a      	ldr	r2, [r7, #20]
 8010ad0:	4313      	orrs	r3, r2
 8010ad2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	697a      	ldr	r2, [r7, #20]
 8010ad8:	609a      	str	r2, [r3, #8]
}
 8010ada:	bf00      	nop
 8010adc:	371c      	adds	r7, #28
 8010ade:	46bd      	mov	sp, r7
 8010ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae4:	4770      	bx	lr

08010ae6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010ae6:	b480      	push	{r7}
 8010ae8:	b087      	sub	sp, #28
 8010aea:	af00      	add	r7, sp, #0
 8010aec:	60f8      	str	r0, [r7, #12]
 8010aee:	60b9      	str	r1, [r7, #8]
 8010af0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010af2:	68bb      	ldr	r3, [r7, #8]
 8010af4:	f003 031f 	and.w	r3, r3, #31
 8010af8:	2201      	movs	r2, #1
 8010afa:	fa02 f303 	lsl.w	r3, r2, r3
 8010afe:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	6a1a      	ldr	r2, [r3, #32]
 8010b04:	697b      	ldr	r3, [r7, #20]
 8010b06:	43db      	mvns	r3, r3
 8010b08:	401a      	ands	r2, r3
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	6a1a      	ldr	r2, [r3, #32]
 8010b12:	68bb      	ldr	r3, [r7, #8]
 8010b14:	f003 031f 	and.w	r3, r3, #31
 8010b18:	6879      	ldr	r1, [r7, #4]
 8010b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8010b1e:	431a      	orrs	r2, r3
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	621a      	str	r2, [r3, #32]
}
 8010b24:	bf00      	nop
 8010b26:	371c      	adds	r7, #28
 8010b28:	46bd      	mov	sp, r7
 8010b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b2e:	4770      	bx	lr

08010b30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010b30:	b480      	push	{r7}
 8010b32:	b085      	sub	sp, #20
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	6078      	str	r0, [r7, #4]
 8010b38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010b40:	2b01      	cmp	r3, #1
 8010b42:	d101      	bne.n	8010b48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010b44:	2302      	movs	r3, #2
 8010b46:	e06d      	b.n	8010c24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	2201      	movs	r2, #1
 8010b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	2202      	movs	r2, #2
 8010b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	685b      	ldr	r3, [r3, #4]
 8010b5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	689b      	ldr	r3, [r3, #8]
 8010b66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	4a30      	ldr	r2, [pc, #192]	; (8010c30 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8010b6e:	4293      	cmp	r3, r2
 8010b70:	d004      	beq.n	8010b7c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	4a2f      	ldr	r2, [pc, #188]	; (8010c34 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8010b78:	4293      	cmp	r3, r2
 8010b7a:	d108      	bne.n	8010b8e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010b82:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010b84:	683b      	ldr	r3, [r7, #0]
 8010b86:	685b      	ldr	r3, [r3, #4]
 8010b88:	68fa      	ldr	r2, [r7, #12]
 8010b8a:	4313      	orrs	r3, r2
 8010b8c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010b94:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010b96:	683b      	ldr	r3, [r7, #0]
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	68fa      	ldr	r2, [r7, #12]
 8010b9c:	4313      	orrs	r3, r2
 8010b9e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	68fa      	ldr	r2, [r7, #12]
 8010ba6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	4a20      	ldr	r2, [pc, #128]	; (8010c30 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8010bae:	4293      	cmp	r3, r2
 8010bb0:	d022      	beq.n	8010bf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010bba:	d01d      	beq.n	8010bf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	4a1d      	ldr	r2, [pc, #116]	; (8010c38 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8010bc2:	4293      	cmp	r3, r2
 8010bc4:	d018      	beq.n	8010bf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	4a1c      	ldr	r2, [pc, #112]	; (8010c3c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8010bcc:	4293      	cmp	r3, r2
 8010bce:	d013      	beq.n	8010bf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	4a1a      	ldr	r2, [pc, #104]	; (8010c40 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8010bd6:	4293      	cmp	r3, r2
 8010bd8:	d00e      	beq.n	8010bf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	4a15      	ldr	r2, [pc, #84]	; (8010c34 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8010be0:	4293      	cmp	r3, r2
 8010be2:	d009      	beq.n	8010bf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	4a16      	ldr	r2, [pc, #88]	; (8010c44 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010bea:	4293      	cmp	r3, r2
 8010bec:	d004      	beq.n	8010bf8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	4a15      	ldr	r2, [pc, #84]	; (8010c48 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010bf4:	4293      	cmp	r3, r2
 8010bf6:	d10c      	bne.n	8010c12 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010bf8:	68bb      	ldr	r3, [r7, #8]
 8010bfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010bfe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010c00:	683b      	ldr	r3, [r7, #0]
 8010c02:	689b      	ldr	r3, [r3, #8]
 8010c04:	68ba      	ldr	r2, [r7, #8]
 8010c06:	4313      	orrs	r3, r2
 8010c08:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	68ba      	ldr	r2, [r7, #8]
 8010c10:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	2201      	movs	r2, #1
 8010c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	2200      	movs	r2, #0
 8010c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010c22:	2300      	movs	r3, #0
}
 8010c24:	4618      	mov	r0, r3
 8010c26:	3714      	adds	r7, #20
 8010c28:	46bd      	mov	sp, r7
 8010c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c2e:	4770      	bx	lr
 8010c30:	40010000 	.word	0x40010000
 8010c34:	40010400 	.word	0x40010400
 8010c38:	40000400 	.word	0x40000400
 8010c3c:	40000800 	.word	0x40000800
 8010c40:	40000c00 	.word	0x40000c00
 8010c44:	40001800 	.word	0x40001800
 8010c48:	40014000 	.word	0x40014000

08010c4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010c4c:	b480      	push	{r7}
 8010c4e:	b083      	sub	sp, #12
 8010c50:	af00      	add	r7, sp, #0
 8010c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010c54:	bf00      	nop
 8010c56:	370c      	adds	r7, #12
 8010c58:	46bd      	mov	sp, r7
 8010c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c5e:	4770      	bx	lr

08010c60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010c60:	b480      	push	{r7}
 8010c62:	b083      	sub	sp, #12
 8010c64:	af00      	add	r7, sp, #0
 8010c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010c68:	bf00      	nop
 8010c6a:	370c      	adds	r7, #12
 8010c6c:	46bd      	mov	sp, r7
 8010c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c72:	4770      	bx	lr

08010c74 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010c74:	b480      	push	{r7}
 8010c76:	b083      	sub	sp, #12
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010c7c:	bf00      	nop
 8010c7e:	370c      	adds	r7, #12
 8010c80:	46bd      	mov	sp, r7
 8010c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c86:	4770      	bx	lr

08010c88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010c88:	b580      	push	{r7, lr}
 8010c8a:	b082      	sub	sp, #8
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d101      	bne.n	8010c9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010c96:	2301      	movs	r3, #1
 8010c98:	e042      	b.n	8010d20 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d106      	bne.n	8010cb2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	2200      	movs	r2, #0
 8010ca8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010cac:	6878      	ldr	r0, [r7, #4]
 8010cae:	f7f3 fce3 	bl	8004678 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	2224      	movs	r2, #36	; 0x24
 8010cb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	681a      	ldr	r2, [r3, #0]
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	f022 0201 	bic.w	r2, r2, #1
 8010cc8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010cca:	6878      	ldr	r0, [r7, #4]
 8010ccc:	f000 fcd2 	bl	8011674 <UART_SetConfig>
 8010cd0:	4603      	mov	r3, r0
 8010cd2:	2b01      	cmp	r3, #1
 8010cd4:	d101      	bne.n	8010cda <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8010cd6:	2301      	movs	r3, #1
 8010cd8:	e022      	b.n	8010d20 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d002      	beq.n	8010ce8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8010ce2:	6878      	ldr	r0, [r7, #4]
 8010ce4:	f001 fa2e 	bl	8012144 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	685a      	ldr	r2, [r3, #4]
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010cf6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	689a      	ldr	r2, [r3, #8]
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010d06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	681a      	ldr	r2, [r3, #0]
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	f042 0201 	orr.w	r2, r2, #1
 8010d16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010d18:	6878      	ldr	r0, [r7, #4]
 8010d1a:	f001 fab5 	bl	8012288 <UART_CheckIdleState>
 8010d1e:	4603      	mov	r3, r0
}
 8010d20:	4618      	mov	r0, r3
 8010d22:	3708      	adds	r7, #8
 8010d24:	46bd      	mov	sp, r7
 8010d26:	bd80      	pop	{r7, pc}

08010d28 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8010d28:	b580      	push	{r7, lr}
 8010d2a:	b08a      	sub	sp, #40	; 0x28
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	60f8      	str	r0, [r7, #12]
 8010d30:	60b9      	str	r1, [r7, #8]
 8010d32:	4613      	mov	r3, r2
 8010d34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010d3c:	2b20      	cmp	r3, #32
 8010d3e:	d167      	bne.n	8010e10 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8010d40:	68bb      	ldr	r3, [r7, #8]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d002      	beq.n	8010d4c <HAL_UART_Transmit_DMA+0x24>
 8010d46:	88fb      	ldrh	r3, [r7, #6]
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d101      	bne.n	8010d50 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8010d4c:	2301      	movs	r3, #1
 8010d4e:	e060      	b.n	8010e12 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	68ba      	ldr	r2, [r7, #8]
 8010d54:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	88fa      	ldrh	r2, [r7, #6]
 8010d5a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	88fa      	ldrh	r2, [r7, #6]
 8010d62:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	2200      	movs	r2, #0
 8010d6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	2221      	movs	r2, #33	; 0x21
 8010d72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d028      	beq.n	8010dd0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010d82:	4a26      	ldr	r2, [pc, #152]	; (8010e1c <HAL_UART_Transmit_DMA+0xf4>)
 8010d84:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010d8a:	4a25      	ldr	r2, [pc, #148]	; (8010e20 <HAL_UART_Transmit_DMA+0xf8>)
 8010d8c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010d92:	4a24      	ldr	r2, [pc, #144]	; (8010e24 <HAL_UART_Transmit_DMA+0xfc>)
 8010d94:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010da6:	4619      	mov	r1, r3
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	3328      	adds	r3, #40	; 0x28
 8010dae:	461a      	mov	r2, r3
 8010db0:	88fb      	ldrh	r3, [r7, #6]
 8010db2:	f7f6 fa47 	bl	8007244 <HAL_DMA_Start_IT>
 8010db6:	4603      	mov	r3, r0
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d009      	beq.n	8010dd0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	2210      	movs	r2, #16
 8010dc0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	2220      	movs	r2, #32
 8010dc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8010dcc:	2301      	movs	r3, #1
 8010dce:	e020      	b.n	8010e12 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	2240      	movs	r2, #64	; 0x40
 8010dd6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	3308      	adds	r3, #8
 8010dde:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010de0:	697b      	ldr	r3, [r7, #20]
 8010de2:	e853 3f00 	ldrex	r3, [r3]
 8010de6:	613b      	str	r3, [r7, #16]
   return(result);
 8010de8:	693b      	ldr	r3, [r7, #16]
 8010dea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010dee:	627b      	str	r3, [r7, #36]	; 0x24
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	3308      	adds	r3, #8
 8010df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010df8:	623a      	str	r2, [r7, #32]
 8010dfa:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dfc:	69f9      	ldr	r1, [r7, #28]
 8010dfe:	6a3a      	ldr	r2, [r7, #32]
 8010e00:	e841 2300 	strex	r3, r2, [r1]
 8010e04:	61bb      	str	r3, [r7, #24]
   return(result);
 8010e06:	69bb      	ldr	r3, [r7, #24]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d1e5      	bne.n	8010dd8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8010e0c:	2300      	movs	r3, #0
 8010e0e:	e000      	b.n	8010e12 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8010e10:	2302      	movs	r3, #2
  }
}
 8010e12:	4618      	mov	r0, r3
 8010e14:	3728      	adds	r7, #40	; 0x28
 8010e16:	46bd      	mov	sp, r7
 8010e18:	bd80      	pop	{r7, pc}
 8010e1a:	bf00      	nop
 8010e1c:	08012749 	.word	0x08012749
 8010e20:	080127df 	.word	0x080127df
 8010e24:	08012961 	.word	0x08012961

08010e28 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010e28:	b580      	push	{r7, lr}
 8010e2a:	b08a      	sub	sp, #40	; 0x28
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	60f8      	str	r0, [r7, #12]
 8010e30:	60b9      	str	r1, [r7, #8]
 8010e32:	4613      	mov	r3, r2
 8010e34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010e3c:	2b20      	cmp	r3, #32
 8010e3e:	d137      	bne.n	8010eb0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8010e40:	68bb      	ldr	r3, [r7, #8]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d002      	beq.n	8010e4c <HAL_UART_Receive_DMA+0x24>
 8010e46:	88fb      	ldrh	r3, [r7, #6]
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d101      	bne.n	8010e50 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8010e4c:	2301      	movs	r3, #1
 8010e4e:	e030      	b.n	8010eb2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	2200      	movs	r2, #0
 8010e54:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	4a18      	ldr	r2, [pc, #96]	; (8010ebc <HAL_UART_Receive_DMA+0x94>)
 8010e5c:	4293      	cmp	r3, r2
 8010e5e:	d01f      	beq.n	8010ea0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	685b      	ldr	r3, [r3, #4]
 8010e66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d018      	beq.n	8010ea0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e74:	697b      	ldr	r3, [r7, #20]
 8010e76:	e853 3f00 	ldrex	r3, [r3]
 8010e7a:	613b      	str	r3, [r7, #16]
   return(result);
 8010e7c:	693b      	ldr	r3, [r7, #16]
 8010e7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8010e82:	627b      	str	r3, [r7, #36]	; 0x24
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	461a      	mov	r2, r3
 8010e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e8c:	623b      	str	r3, [r7, #32]
 8010e8e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e90:	69f9      	ldr	r1, [r7, #28]
 8010e92:	6a3a      	ldr	r2, [r7, #32]
 8010e94:	e841 2300 	strex	r3, r2, [r1]
 8010e98:	61bb      	str	r3, [r7, #24]
   return(result);
 8010e9a:	69bb      	ldr	r3, [r7, #24]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d1e6      	bne.n	8010e6e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8010ea0:	88fb      	ldrh	r3, [r7, #6]
 8010ea2:	461a      	mov	r2, r3
 8010ea4:	68b9      	ldr	r1, [r7, #8]
 8010ea6:	68f8      	ldr	r0, [r7, #12]
 8010ea8:	f001 fb00 	bl	80124ac <UART_Start_Receive_DMA>
 8010eac:	4603      	mov	r3, r0
 8010eae:	e000      	b.n	8010eb2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8010eb0:	2302      	movs	r3, #2
  }
}
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	3728      	adds	r7, #40	; 0x28
 8010eb6:	46bd      	mov	sp, r7
 8010eb8:	bd80      	pop	{r7, pc}
 8010eba:	bf00      	nop
 8010ebc:	58000c00 	.word	0x58000c00

08010ec0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	b0ba      	sub	sp, #232	; 0xe8
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	69db      	ldr	r3, [r3, #28]
 8010ece:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	689b      	ldr	r3, [r3, #8]
 8010ee2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010ee6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8010eea:	f640 030f 	movw	r3, #2063	; 0x80f
 8010eee:	4013      	ands	r3, r2
 8010ef0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8010ef4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d11b      	bne.n	8010f34 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010f00:	f003 0320 	and.w	r3, r3, #32
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d015      	beq.n	8010f34 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010f0c:	f003 0320 	and.w	r3, r3, #32
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d105      	bne.n	8010f20 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010f14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d009      	beq.n	8010f34 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	f000 8377 	beq.w	8011618 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f2e:	6878      	ldr	r0, [r7, #4]
 8010f30:	4798      	blx	r3
      }
      return;
 8010f32:	e371      	b.n	8011618 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010f34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	f000 8123 	beq.w	8011184 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8010f3e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010f42:	4b8d      	ldr	r3, [pc, #564]	; (8011178 <HAL_UART_IRQHandler+0x2b8>)
 8010f44:	4013      	ands	r3, r2
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d106      	bne.n	8010f58 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8010f4a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8010f4e:	4b8b      	ldr	r3, [pc, #556]	; (801117c <HAL_UART_IRQHandler+0x2bc>)
 8010f50:	4013      	ands	r3, r2
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	f000 8116 	beq.w	8011184 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010f5c:	f003 0301 	and.w	r3, r3, #1
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d011      	beq.n	8010f88 <HAL_UART_IRQHandler+0xc8>
 8010f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d00b      	beq.n	8010f88 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	2201      	movs	r2, #1
 8010f76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010f7e:	f043 0201 	orr.w	r2, r3, #1
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010f88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010f8c:	f003 0302 	and.w	r3, r3, #2
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d011      	beq.n	8010fb8 <HAL_UART_IRQHandler+0xf8>
 8010f94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010f98:	f003 0301 	and.w	r3, r3, #1
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d00b      	beq.n	8010fb8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	2202      	movs	r2, #2
 8010fa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010fae:	f043 0204 	orr.w	r2, r3, #4
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010fbc:	f003 0304 	and.w	r3, r3, #4
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d011      	beq.n	8010fe8 <HAL_UART_IRQHandler+0x128>
 8010fc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010fc8:	f003 0301 	and.w	r3, r3, #1
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d00b      	beq.n	8010fe8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	2204      	movs	r2, #4
 8010fd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010fde:	f043 0202 	orr.w	r2, r3, #2
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010fec:	f003 0308 	and.w	r3, r3, #8
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d017      	beq.n	8011024 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010ff8:	f003 0320 	and.w	r3, r3, #32
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d105      	bne.n	801100c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8011000:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8011004:	4b5c      	ldr	r3, [pc, #368]	; (8011178 <HAL_UART_IRQHandler+0x2b8>)
 8011006:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8011008:	2b00      	cmp	r3, #0
 801100a:	d00b      	beq.n	8011024 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	2208      	movs	r2, #8
 8011012:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801101a:	f043 0208 	orr.w	r2, r3, #8
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8011024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011028:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801102c:	2b00      	cmp	r3, #0
 801102e:	d012      	beq.n	8011056 <HAL_UART_IRQHandler+0x196>
 8011030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011034:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011038:	2b00      	cmp	r3, #0
 801103a:	d00c      	beq.n	8011056 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011044:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801104c:	f043 0220 	orr.w	r2, r3, #32
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801105c:	2b00      	cmp	r3, #0
 801105e:	f000 82dd 	beq.w	801161c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8011062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011066:	f003 0320 	and.w	r3, r3, #32
 801106a:	2b00      	cmp	r3, #0
 801106c:	d013      	beq.n	8011096 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801106e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011072:	f003 0320 	and.w	r3, r3, #32
 8011076:	2b00      	cmp	r3, #0
 8011078:	d105      	bne.n	8011086 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801107a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801107e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011082:	2b00      	cmp	r3, #0
 8011084:	d007      	beq.n	8011096 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801108a:	2b00      	cmp	r3, #0
 801108c:	d003      	beq.n	8011096 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011092:	6878      	ldr	r0, [r7, #4]
 8011094:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801109c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	689b      	ldr	r3, [r3, #8]
 80110a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80110aa:	2b40      	cmp	r3, #64	; 0x40
 80110ac:	d005      	beq.n	80110ba <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80110ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80110b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d054      	beq.n	8011164 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80110ba:	6878      	ldr	r0, [r7, #4]
 80110bc:	f001 fade 	bl	801267c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	689b      	ldr	r3, [r3, #8]
 80110c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80110ca:	2b40      	cmp	r3, #64	; 0x40
 80110cc:	d146      	bne.n	801115c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	3308      	adds	r3, #8
 80110d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80110dc:	e853 3f00 	ldrex	r3, [r3]
 80110e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80110e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80110e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80110ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	3308      	adds	r3, #8
 80110f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80110fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80110fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011102:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8011106:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801110a:	e841 2300 	strex	r3, r2, [r1]
 801110e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8011112:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011116:	2b00      	cmp	r3, #0
 8011118:	d1d9      	bne.n	80110ce <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011120:	2b00      	cmp	r3, #0
 8011122:	d017      	beq.n	8011154 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801112a:	4a15      	ldr	r2, [pc, #84]	; (8011180 <HAL_UART_IRQHandler+0x2c0>)
 801112c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011134:	4618      	mov	r0, r3
 8011136:	f7f6 fe0d 	bl	8007d54 <HAL_DMA_Abort_IT>
 801113a:	4603      	mov	r3, r0
 801113c:	2b00      	cmp	r3, #0
 801113e:	d019      	beq.n	8011174 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011148:	687a      	ldr	r2, [r7, #4]
 801114a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 801114e:	4610      	mov	r0, r2
 8011150:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011152:	e00f      	b.n	8011174 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8011154:	6878      	ldr	r0, [r7, #4]
 8011156:	f7f2 fb9f 	bl	8003898 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801115a:	e00b      	b.n	8011174 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801115c:	6878      	ldr	r0, [r7, #4]
 801115e:	f7f2 fb9b 	bl	8003898 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011162:	e007      	b.n	8011174 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8011164:	6878      	ldr	r0, [r7, #4]
 8011166:	f7f2 fb97 	bl	8003898 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	2200      	movs	r2, #0
 801116e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8011172:	e253      	b.n	801161c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011174:	bf00      	nop
    return;
 8011176:	e251      	b.n	801161c <HAL_UART_IRQHandler+0x75c>
 8011178:	10000001 	.word	0x10000001
 801117c:	04000120 	.word	0x04000120
 8011180:	080129e1 	.word	0x080129e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011188:	2b01      	cmp	r3, #1
 801118a:	f040 81e7 	bne.w	801155c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801118e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011192:	f003 0310 	and.w	r3, r3, #16
 8011196:	2b00      	cmp	r3, #0
 8011198:	f000 81e0 	beq.w	801155c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801119c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80111a0:	f003 0310 	and.w	r3, r3, #16
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	f000 81d9 	beq.w	801155c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	2210      	movs	r2, #16
 80111b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	689b      	ldr	r3, [r3, #8]
 80111b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80111bc:	2b40      	cmp	r3, #64	; 0x40
 80111be:	f040 8151 	bne.w	8011464 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	4a96      	ldr	r2, [pc, #600]	; (8011424 <HAL_UART_IRQHandler+0x564>)
 80111cc:	4293      	cmp	r3, r2
 80111ce:	d068      	beq.n	80112a2 <HAL_UART_IRQHandler+0x3e2>
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	4a93      	ldr	r2, [pc, #588]	; (8011428 <HAL_UART_IRQHandler+0x568>)
 80111da:	4293      	cmp	r3, r2
 80111dc:	d061      	beq.n	80112a2 <HAL_UART_IRQHandler+0x3e2>
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	4a91      	ldr	r2, [pc, #580]	; (801142c <HAL_UART_IRQHandler+0x56c>)
 80111e8:	4293      	cmp	r3, r2
 80111ea:	d05a      	beq.n	80112a2 <HAL_UART_IRQHandler+0x3e2>
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	4a8e      	ldr	r2, [pc, #568]	; (8011430 <HAL_UART_IRQHandler+0x570>)
 80111f6:	4293      	cmp	r3, r2
 80111f8:	d053      	beq.n	80112a2 <HAL_UART_IRQHandler+0x3e2>
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	4a8c      	ldr	r2, [pc, #560]	; (8011434 <HAL_UART_IRQHandler+0x574>)
 8011204:	4293      	cmp	r3, r2
 8011206:	d04c      	beq.n	80112a2 <HAL_UART_IRQHandler+0x3e2>
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	4a89      	ldr	r2, [pc, #548]	; (8011438 <HAL_UART_IRQHandler+0x578>)
 8011212:	4293      	cmp	r3, r2
 8011214:	d045      	beq.n	80112a2 <HAL_UART_IRQHandler+0x3e2>
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	4a87      	ldr	r2, [pc, #540]	; (801143c <HAL_UART_IRQHandler+0x57c>)
 8011220:	4293      	cmp	r3, r2
 8011222:	d03e      	beq.n	80112a2 <HAL_UART_IRQHandler+0x3e2>
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	4a84      	ldr	r2, [pc, #528]	; (8011440 <HAL_UART_IRQHandler+0x580>)
 801122e:	4293      	cmp	r3, r2
 8011230:	d037      	beq.n	80112a2 <HAL_UART_IRQHandler+0x3e2>
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	4a82      	ldr	r2, [pc, #520]	; (8011444 <HAL_UART_IRQHandler+0x584>)
 801123c:	4293      	cmp	r3, r2
 801123e:	d030      	beq.n	80112a2 <HAL_UART_IRQHandler+0x3e2>
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	4a7f      	ldr	r2, [pc, #508]	; (8011448 <HAL_UART_IRQHandler+0x588>)
 801124a:	4293      	cmp	r3, r2
 801124c:	d029      	beq.n	80112a2 <HAL_UART_IRQHandler+0x3e2>
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	4a7d      	ldr	r2, [pc, #500]	; (801144c <HAL_UART_IRQHandler+0x58c>)
 8011258:	4293      	cmp	r3, r2
 801125a:	d022      	beq.n	80112a2 <HAL_UART_IRQHandler+0x3e2>
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	4a7a      	ldr	r2, [pc, #488]	; (8011450 <HAL_UART_IRQHandler+0x590>)
 8011266:	4293      	cmp	r3, r2
 8011268:	d01b      	beq.n	80112a2 <HAL_UART_IRQHandler+0x3e2>
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	4a78      	ldr	r2, [pc, #480]	; (8011454 <HAL_UART_IRQHandler+0x594>)
 8011274:	4293      	cmp	r3, r2
 8011276:	d014      	beq.n	80112a2 <HAL_UART_IRQHandler+0x3e2>
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	4a75      	ldr	r2, [pc, #468]	; (8011458 <HAL_UART_IRQHandler+0x598>)
 8011282:	4293      	cmp	r3, r2
 8011284:	d00d      	beq.n	80112a2 <HAL_UART_IRQHandler+0x3e2>
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	4a73      	ldr	r2, [pc, #460]	; (801145c <HAL_UART_IRQHandler+0x59c>)
 8011290:	4293      	cmp	r3, r2
 8011292:	d006      	beq.n	80112a2 <HAL_UART_IRQHandler+0x3e2>
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	4a70      	ldr	r2, [pc, #448]	; (8011460 <HAL_UART_IRQHandler+0x5a0>)
 801129e:	4293      	cmp	r3, r2
 80112a0:	d106      	bne.n	80112b0 <HAL_UART_IRQHandler+0x3f0>
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	685b      	ldr	r3, [r3, #4]
 80112ac:	b29b      	uxth	r3, r3
 80112ae:	e005      	b.n	80112bc <HAL_UART_IRQHandler+0x3fc>
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	685b      	ldr	r3, [r3, #4]
 80112ba:	b29b      	uxth	r3, r3
 80112bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80112c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	f000 81ab 	beq.w	8011620 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80112d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80112d4:	429a      	cmp	r2, r3
 80112d6:	f080 81a3 	bcs.w	8011620 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80112e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80112ea:	69db      	ldr	r3, [r3, #28]
 80112ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80112f0:	f000 8087 	beq.w	8011402 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011300:	e853 3f00 	ldrex	r3, [r3]
 8011304:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8011308:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801130c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011310:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	461a      	mov	r2, r3
 801131a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801131e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011322:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011326:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801132a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801132e:	e841 2300 	strex	r3, r2, [r1]
 8011332:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8011336:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801133a:	2b00      	cmp	r3, #0
 801133c:	d1da      	bne.n	80112f4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	3308      	adds	r3, #8
 8011344:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011346:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011348:	e853 3f00 	ldrex	r3, [r3]
 801134c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801134e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011350:	f023 0301 	bic.w	r3, r3, #1
 8011354:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	3308      	adds	r3, #8
 801135e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8011362:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8011366:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011368:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801136a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801136e:	e841 2300 	strex	r3, r2, [r1]
 8011372:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8011374:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011376:	2b00      	cmp	r3, #0
 8011378:	d1e1      	bne.n	801133e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	3308      	adds	r3, #8
 8011380:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011382:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011384:	e853 3f00 	ldrex	r3, [r3]
 8011388:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801138a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801138c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011390:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	3308      	adds	r3, #8
 801139a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801139e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80113a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80113a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80113a6:	e841 2300 	strex	r3, r2, [r1]
 80113aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80113ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d1e3      	bne.n	801137a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	2220      	movs	r2, #32
 80113b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	2200      	movs	r2, #0
 80113be:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113c8:	e853 3f00 	ldrex	r3, [r3]
 80113cc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80113ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80113d0:	f023 0310 	bic.w	r3, r3, #16
 80113d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	461a      	mov	r2, r3
 80113de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80113e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80113e4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80113e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80113ea:	e841 2300 	strex	r3, r2, [r1]
 80113ee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80113f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d1e4      	bne.n	80113c0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80113fc:	4618      	mov	r0, r3
 80113fe:	f7f6 f98b 	bl	8007718 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	2202      	movs	r2, #2
 8011406:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011414:	b29b      	uxth	r3, r3
 8011416:	1ad3      	subs	r3, r2, r3
 8011418:	b29b      	uxth	r3, r3
 801141a:	4619      	mov	r1, r3
 801141c:	6878      	ldr	r0, [r7, #4]
 801141e:	f000 f91d 	bl	801165c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8011422:	e0fd      	b.n	8011620 <HAL_UART_IRQHandler+0x760>
 8011424:	40020010 	.word	0x40020010
 8011428:	40020028 	.word	0x40020028
 801142c:	40020040 	.word	0x40020040
 8011430:	40020058 	.word	0x40020058
 8011434:	40020070 	.word	0x40020070
 8011438:	40020088 	.word	0x40020088
 801143c:	400200a0 	.word	0x400200a0
 8011440:	400200b8 	.word	0x400200b8
 8011444:	40020410 	.word	0x40020410
 8011448:	40020428 	.word	0x40020428
 801144c:	40020440 	.word	0x40020440
 8011450:	40020458 	.word	0x40020458
 8011454:	40020470 	.word	0x40020470
 8011458:	40020488 	.word	0x40020488
 801145c:	400204a0 	.word	0x400204a0
 8011460:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011470:	b29b      	uxth	r3, r3
 8011472:	1ad3      	subs	r3, r2, r3
 8011474:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801147e:	b29b      	uxth	r3, r3
 8011480:	2b00      	cmp	r3, #0
 8011482:	f000 80cf 	beq.w	8011624 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8011486:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801148a:	2b00      	cmp	r3, #0
 801148c:	f000 80ca 	beq.w	8011624 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011498:	e853 3f00 	ldrex	r3, [r3]
 801149c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801149e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80114a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	461a      	mov	r2, r3
 80114ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80114b2:	647b      	str	r3, [r7, #68]	; 0x44
 80114b4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80114b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80114ba:	e841 2300 	strex	r3, r2, [r1]
 80114be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80114c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d1e4      	bne.n	8011490 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	3308      	adds	r3, #8
 80114cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114d0:	e853 3f00 	ldrex	r3, [r3]
 80114d4:	623b      	str	r3, [r7, #32]
   return(result);
 80114d6:	6a3a      	ldr	r2, [r7, #32]
 80114d8:	4b55      	ldr	r3, [pc, #340]	; (8011630 <HAL_UART_IRQHandler+0x770>)
 80114da:	4013      	ands	r3, r2
 80114dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	3308      	adds	r3, #8
 80114e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80114ea:	633a      	str	r2, [r7, #48]	; 0x30
 80114ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80114f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80114f2:	e841 2300 	strex	r3, r2, [r1]
 80114f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80114f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d1e3      	bne.n	80114c6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	2220      	movs	r2, #32
 8011502:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	2200      	movs	r2, #0
 801150a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	2200      	movs	r2, #0
 8011510:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011518:	693b      	ldr	r3, [r7, #16]
 801151a:	e853 3f00 	ldrex	r3, [r3]
 801151e:	60fb      	str	r3, [r7, #12]
   return(result);
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	f023 0310 	bic.w	r3, r3, #16
 8011526:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	461a      	mov	r2, r3
 8011530:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011534:	61fb      	str	r3, [r7, #28]
 8011536:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011538:	69b9      	ldr	r1, [r7, #24]
 801153a:	69fa      	ldr	r2, [r7, #28]
 801153c:	e841 2300 	strex	r3, r2, [r1]
 8011540:	617b      	str	r3, [r7, #20]
   return(result);
 8011542:	697b      	ldr	r3, [r7, #20]
 8011544:	2b00      	cmp	r3, #0
 8011546:	d1e4      	bne.n	8011512 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	2202      	movs	r2, #2
 801154c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801154e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8011552:	4619      	mov	r1, r3
 8011554:	6878      	ldr	r0, [r7, #4]
 8011556:	f000 f881 	bl	801165c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801155a:	e063      	b.n	8011624 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801155c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011560:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011564:	2b00      	cmp	r3, #0
 8011566:	d00e      	beq.n	8011586 <HAL_UART_IRQHandler+0x6c6>
 8011568:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801156c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011570:	2b00      	cmp	r3, #0
 8011572:	d008      	beq.n	8011586 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801157c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801157e:	6878      	ldr	r0, [r7, #4]
 8011580:	f001 fa6f 	bl	8012a62 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011584:	e051      	b.n	801162a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8011586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801158a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801158e:	2b00      	cmp	r3, #0
 8011590:	d014      	beq.n	80115bc <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8011592:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801159a:	2b00      	cmp	r3, #0
 801159c:	d105      	bne.n	80115aa <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801159e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80115a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d008      	beq.n	80115bc <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d03a      	beq.n	8011628 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80115b6:	6878      	ldr	r0, [r7, #4]
 80115b8:	4798      	blx	r3
    }
    return;
 80115ba:	e035      	b.n	8011628 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80115bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80115c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d009      	beq.n	80115dc <HAL_UART_IRQHandler+0x71c>
 80115c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80115cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d003      	beq.n	80115dc <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80115d4:	6878      	ldr	r0, [r7, #4]
 80115d6:	f001 fa19 	bl	8012a0c <UART_EndTransmit_IT>
    return;
 80115da:	e026      	b.n	801162a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80115dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80115e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d009      	beq.n	80115fc <HAL_UART_IRQHandler+0x73c>
 80115e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80115ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d003      	beq.n	80115fc <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80115f4:	6878      	ldr	r0, [r7, #4]
 80115f6:	f001 fa48 	bl	8012a8a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80115fa:	e016      	b.n	801162a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80115fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011600:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011604:	2b00      	cmp	r3, #0
 8011606:	d010      	beq.n	801162a <HAL_UART_IRQHandler+0x76a>
 8011608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801160c:	2b00      	cmp	r3, #0
 801160e:	da0c      	bge.n	801162a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8011610:	6878      	ldr	r0, [r7, #4]
 8011612:	f001 fa30 	bl	8012a76 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011616:	e008      	b.n	801162a <HAL_UART_IRQHandler+0x76a>
      return;
 8011618:	bf00      	nop
 801161a:	e006      	b.n	801162a <HAL_UART_IRQHandler+0x76a>
    return;
 801161c:	bf00      	nop
 801161e:	e004      	b.n	801162a <HAL_UART_IRQHandler+0x76a>
      return;
 8011620:	bf00      	nop
 8011622:	e002      	b.n	801162a <HAL_UART_IRQHandler+0x76a>
      return;
 8011624:	bf00      	nop
 8011626:	e000      	b.n	801162a <HAL_UART_IRQHandler+0x76a>
    return;
 8011628:	bf00      	nop
  }
}
 801162a:	37e8      	adds	r7, #232	; 0xe8
 801162c:	46bd      	mov	sp, r7
 801162e:	bd80      	pop	{r7, pc}
 8011630:	effffffe 	.word	0xeffffffe

08011634 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8011634:	b480      	push	{r7}
 8011636:	b083      	sub	sp, #12
 8011638:	af00      	add	r7, sp, #0
 801163a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801163c:	bf00      	nop
 801163e:	370c      	adds	r7, #12
 8011640:	46bd      	mov	sp, r7
 8011642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011646:	4770      	bx	lr

08011648 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8011648:	b480      	push	{r7}
 801164a:	b083      	sub	sp, #12
 801164c:	af00      	add	r7, sp, #0
 801164e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8011650:	bf00      	nop
 8011652:	370c      	adds	r7, #12
 8011654:	46bd      	mov	sp, r7
 8011656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801165a:	4770      	bx	lr

0801165c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801165c:	b480      	push	{r7}
 801165e:	b083      	sub	sp, #12
 8011660:	af00      	add	r7, sp, #0
 8011662:	6078      	str	r0, [r7, #4]
 8011664:	460b      	mov	r3, r1
 8011666:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011668:	bf00      	nop
 801166a:	370c      	adds	r7, #12
 801166c:	46bd      	mov	sp, r7
 801166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011672:	4770      	bx	lr

08011674 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011674:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011678:	b092      	sub	sp, #72	; 0x48
 801167a:	af00      	add	r7, sp, #0
 801167c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801167e:	2300      	movs	r3, #0
 8011680:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011684:	697b      	ldr	r3, [r7, #20]
 8011686:	689a      	ldr	r2, [r3, #8]
 8011688:	697b      	ldr	r3, [r7, #20]
 801168a:	691b      	ldr	r3, [r3, #16]
 801168c:	431a      	orrs	r2, r3
 801168e:	697b      	ldr	r3, [r7, #20]
 8011690:	695b      	ldr	r3, [r3, #20]
 8011692:	431a      	orrs	r2, r3
 8011694:	697b      	ldr	r3, [r7, #20]
 8011696:	69db      	ldr	r3, [r3, #28]
 8011698:	4313      	orrs	r3, r2
 801169a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801169c:	697b      	ldr	r3, [r7, #20]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	681a      	ldr	r2, [r3, #0]
 80116a2:	4bbe      	ldr	r3, [pc, #760]	; (801199c <UART_SetConfig+0x328>)
 80116a4:	4013      	ands	r3, r2
 80116a6:	697a      	ldr	r2, [r7, #20]
 80116a8:	6812      	ldr	r2, [r2, #0]
 80116aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80116ac:	430b      	orrs	r3, r1
 80116ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80116b0:	697b      	ldr	r3, [r7, #20]
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	685b      	ldr	r3, [r3, #4]
 80116b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80116ba:	697b      	ldr	r3, [r7, #20]
 80116bc:	68da      	ldr	r2, [r3, #12]
 80116be:	697b      	ldr	r3, [r7, #20]
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	430a      	orrs	r2, r1
 80116c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80116c6:	697b      	ldr	r3, [r7, #20]
 80116c8:	699b      	ldr	r3, [r3, #24]
 80116ca:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80116cc:	697b      	ldr	r3, [r7, #20]
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	4ab3      	ldr	r2, [pc, #716]	; (80119a0 <UART_SetConfig+0x32c>)
 80116d2:	4293      	cmp	r3, r2
 80116d4:	d004      	beq.n	80116e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80116d6:	697b      	ldr	r3, [r7, #20]
 80116d8:	6a1b      	ldr	r3, [r3, #32]
 80116da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80116dc:	4313      	orrs	r3, r2
 80116de:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80116e0:	697b      	ldr	r3, [r7, #20]
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	689a      	ldr	r2, [r3, #8]
 80116e6:	4baf      	ldr	r3, [pc, #700]	; (80119a4 <UART_SetConfig+0x330>)
 80116e8:	4013      	ands	r3, r2
 80116ea:	697a      	ldr	r2, [r7, #20]
 80116ec:	6812      	ldr	r2, [r2, #0]
 80116ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80116f0:	430b      	orrs	r3, r1
 80116f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80116f4:	697b      	ldr	r3, [r7, #20]
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116fa:	f023 010f 	bic.w	r1, r3, #15
 80116fe:	697b      	ldr	r3, [r7, #20]
 8011700:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011702:	697b      	ldr	r3, [r7, #20]
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	430a      	orrs	r2, r1
 8011708:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801170a:	697b      	ldr	r3, [r7, #20]
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	4aa6      	ldr	r2, [pc, #664]	; (80119a8 <UART_SetConfig+0x334>)
 8011710:	4293      	cmp	r3, r2
 8011712:	d177      	bne.n	8011804 <UART_SetConfig+0x190>
 8011714:	4ba5      	ldr	r3, [pc, #660]	; (80119ac <UART_SetConfig+0x338>)
 8011716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011718:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801171c:	2b28      	cmp	r3, #40	; 0x28
 801171e:	d86d      	bhi.n	80117fc <UART_SetConfig+0x188>
 8011720:	a201      	add	r2, pc, #4	; (adr r2, 8011728 <UART_SetConfig+0xb4>)
 8011722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011726:	bf00      	nop
 8011728:	080117cd 	.word	0x080117cd
 801172c:	080117fd 	.word	0x080117fd
 8011730:	080117fd 	.word	0x080117fd
 8011734:	080117fd 	.word	0x080117fd
 8011738:	080117fd 	.word	0x080117fd
 801173c:	080117fd 	.word	0x080117fd
 8011740:	080117fd 	.word	0x080117fd
 8011744:	080117fd 	.word	0x080117fd
 8011748:	080117d5 	.word	0x080117d5
 801174c:	080117fd 	.word	0x080117fd
 8011750:	080117fd 	.word	0x080117fd
 8011754:	080117fd 	.word	0x080117fd
 8011758:	080117fd 	.word	0x080117fd
 801175c:	080117fd 	.word	0x080117fd
 8011760:	080117fd 	.word	0x080117fd
 8011764:	080117fd 	.word	0x080117fd
 8011768:	080117dd 	.word	0x080117dd
 801176c:	080117fd 	.word	0x080117fd
 8011770:	080117fd 	.word	0x080117fd
 8011774:	080117fd 	.word	0x080117fd
 8011778:	080117fd 	.word	0x080117fd
 801177c:	080117fd 	.word	0x080117fd
 8011780:	080117fd 	.word	0x080117fd
 8011784:	080117fd 	.word	0x080117fd
 8011788:	080117e5 	.word	0x080117e5
 801178c:	080117fd 	.word	0x080117fd
 8011790:	080117fd 	.word	0x080117fd
 8011794:	080117fd 	.word	0x080117fd
 8011798:	080117fd 	.word	0x080117fd
 801179c:	080117fd 	.word	0x080117fd
 80117a0:	080117fd 	.word	0x080117fd
 80117a4:	080117fd 	.word	0x080117fd
 80117a8:	080117ed 	.word	0x080117ed
 80117ac:	080117fd 	.word	0x080117fd
 80117b0:	080117fd 	.word	0x080117fd
 80117b4:	080117fd 	.word	0x080117fd
 80117b8:	080117fd 	.word	0x080117fd
 80117bc:	080117fd 	.word	0x080117fd
 80117c0:	080117fd 	.word	0x080117fd
 80117c4:	080117fd 	.word	0x080117fd
 80117c8:	080117f5 	.word	0x080117f5
 80117cc:	2301      	movs	r3, #1
 80117ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117d2:	e222      	b.n	8011c1a <UART_SetConfig+0x5a6>
 80117d4:	2304      	movs	r3, #4
 80117d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117da:	e21e      	b.n	8011c1a <UART_SetConfig+0x5a6>
 80117dc:	2308      	movs	r3, #8
 80117de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117e2:	e21a      	b.n	8011c1a <UART_SetConfig+0x5a6>
 80117e4:	2310      	movs	r3, #16
 80117e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117ea:	e216      	b.n	8011c1a <UART_SetConfig+0x5a6>
 80117ec:	2320      	movs	r3, #32
 80117ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117f2:	e212      	b.n	8011c1a <UART_SetConfig+0x5a6>
 80117f4:	2340      	movs	r3, #64	; 0x40
 80117f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117fa:	e20e      	b.n	8011c1a <UART_SetConfig+0x5a6>
 80117fc:	2380      	movs	r3, #128	; 0x80
 80117fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011802:	e20a      	b.n	8011c1a <UART_SetConfig+0x5a6>
 8011804:	697b      	ldr	r3, [r7, #20]
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	4a69      	ldr	r2, [pc, #420]	; (80119b0 <UART_SetConfig+0x33c>)
 801180a:	4293      	cmp	r3, r2
 801180c:	d130      	bne.n	8011870 <UART_SetConfig+0x1fc>
 801180e:	4b67      	ldr	r3, [pc, #412]	; (80119ac <UART_SetConfig+0x338>)
 8011810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011812:	f003 0307 	and.w	r3, r3, #7
 8011816:	2b05      	cmp	r3, #5
 8011818:	d826      	bhi.n	8011868 <UART_SetConfig+0x1f4>
 801181a:	a201      	add	r2, pc, #4	; (adr r2, 8011820 <UART_SetConfig+0x1ac>)
 801181c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011820:	08011839 	.word	0x08011839
 8011824:	08011841 	.word	0x08011841
 8011828:	08011849 	.word	0x08011849
 801182c:	08011851 	.word	0x08011851
 8011830:	08011859 	.word	0x08011859
 8011834:	08011861 	.word	0x08011861
 8011838:	2300      	movs	r3, #0
 801183a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801183e:	e1ec      	b.n	8011c1a <UART_SetConfig+0x5a6>
 8011840:	2304      	movs	r3, #4
 8011842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011846:	e1e8      	b.n	8011c1a <UART_SetConfig+0x5a6>
 8011848:	2308      	movs	r3, #8
 801184a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801184e:	e1e4      	b.n	8011c1a <UART_SetConfig+0x5a6>
 8011850:	2310      	movs	r3, #16
 8011852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011856:	e1e0      	b.n	8011c1a <UART_SetConfig+0x5a6>
 8011858:	2320      	movs	r3, #32
 801185a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801185e:	e1dc      	b.n	8011c1a <UART_SetConfig+0x5a6>
 8011860:	2340      	movs	r3, #64	; 0x40
 8011862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011866:	e1d8      	b.n	8011c1a <UART_SetConfig+0x5a6>
 8011868:	2380      	movs	r3, #128	; 0x80
 801186a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801186e:	e1d4      	b.n	8011c1a <UART_SetConfig+0x5a6>
 8011870:	697b      	ldr	r3, [r7, #20]
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	4a4f      	ldr	r2, [pc, #316]	; (80119b4 <UART_SetConfig+0x340>)
 8011876:	4293      	cmp	r3, r2
 8011878:	d130      	bne.n	80118dc <UART_SetConfig+0x268>
 801187a:	4b4c      	ldr	r3, [pc, #304]	; (80119ac <UART_SetConfig+0x338>)
 801187c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801187e:	f003 0307 	and.w	r3, r3, #7
 8011882:	2b05      	cmp	r3, #5
 8011884:	d826      	bhi.n	80118d4 <UART_SetConfig+0x260>
 8011886:	a201      	add	r2, pc, #4	; (adr r2, 801188c <UART_SetConfig+0x218>)
 8011888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801188c:	080118a5 	.word	0x080118a5
 8011890:	080118ad 	.word	0x080118ad
 8011894:	080118b5 	.word	0x080118b5
 8011898:	080118bd 	.word	0x080118bd
 801189c:	080118c5 	.word	0x080118c5
 80118a0:	080118cd 	.word	0x080118cd
 80118a4:	2300      	movs	r3, #0
 80118a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118aa:	e1b6      	b.n	8011c1a <UART_SetConfig+0x5a6>
 80118ac:	2304      	movs	r3, #4
 80118ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118b2:	e1b2      	b.n	8011c1a <UART_SetConfig+0x5a6>
 80118b4:	2308      	movs	r3, #8
 80118b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118ba:	e1ae      	b.n	8011c1a <UART_SetConfig+0x5a6>
 80118bc:	2310      	movs	r3, #16
 80118be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118c2:	e1aa      	b.n	8011c1a <UART_SetConfig+0x5a6>
 80118c4:	2320      	movs	r3, #32
 80118c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118ca:	e1a6      	b.n	8011c1a <UART_SetConfig+0x5a6>
 80118cc:	2340      	movs	r3, #64	; 0x40
 80118ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118d2:	e1a2      	b.n	8011c1a <UART_SetConfig+0x5a6>
 80118d4:	2380      	movs	r3, #128	; 0x80
 80118d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118da:	e19e      	b.n	8011c1a <UART_SetConfig+0x5a6>
 80118dc:	697b      	ldr	r3, [r7, #20]
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	4a35      	ldr	r2, [pc, #212]	; (80119b8 <UART_SetConfig+0x344>)
 80118e2:	4293      	cmp	r3, r2
 80118e4:	d130      	bne.n	8011948 <UART_SetConfig+0x2d4>
 80118e6:	4b31      	ldr	r3, [pc, #196]	; (80119ac <UART_SetConfig+0x338>)
 80118e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80118ea:	f003 0307 	and.w	r3, r3, #7
 80118ee:	2b05      	cmp	r3, #5
 80118f0:	d826      	bhi.n	8011940 <UART_SetConfig+0x2cc>
 80118f2:	a201      	add	r2, pc, #4	; (adr r2, 80118f8 <UART_SetConfig+0x284>)
 80118f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118f8:	08011911 	.word	0x08011911
 80118fc:	08011919 	.word	0x08011919
 8011900:	08011921 	.word	0x08011921
 8011904:	08011929 	.word	0x08011929
 8011908:	08011931 	.word	0x08011931
 801190c:	08011939 	.word	0x08011939
 8011910:	2300      	movs	r3, #0
 8011912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011916:	e180      	b.n	8011c1a <UART_SetConfig+0x5a6>
 8011918:	2304      	movs	r3, #4
 801191a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801191e:	e17c      	b.n	8011c1a <UART_SetConfig+0x5a6>
 8011920:	2308      	movs	r3, #8
 8011922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011926:	e178      	b.n	8011c1a <UART_SetConfig+0x5a6>
 8011928:	2310      	movs	r3, #16
 801192a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801192e:	e174      	b.n	8011c1a <UART_SetConfig+0x5a6>
 8011930:	2320      	movs	r3, #32
 8011932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011936:	e170      	b.n	8011c1a <UART_SetConfig+0x5a6>
 8011938:	2340      	movs	r3, #64	; 0x40
 801193a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801193e:	e16c      	b.n	8011c1a <UART_SetConfig+0x5a6>
 8011940:	2380      	movs	r3, #128	; 0x80
 8011942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011946:	e168      	b.n	8011c1a <UART_SetConfig+0x5a6>
 8011948:	697b      	ldr	r3, [r7, #20]
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	4a1b      	ldr	r2, [pc, #108]	; (80119bc <UART_SetConfig+0x348>)
 801194e:	4293      	cmp	r3, r2
 8011950:	d142      	bne.n	80119d8 <UART_SetConfig+0x364>
 8011952:	4b16      	ldr	r3, [pc, #88]	; (80119ac <UART_SetConfig+0x338>)
 8011954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011956:	f003 0307 	and.w	r3, r3, #7
 801195a:	2b05      	cmp	r3, #5
 801195c:	d838      	bhi.n	80119d0 <UART_SetConfig+0x35c>
 801195e:	a201      	add	r2, pc, #4	; (adr r2, 8011964 <UART_SetConfig+0x2f0>)
 8011960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011964:	0801197d 	.word	0x0801197d
 8011968:	08011985 	.word	0x08011985
 801196c:	0801198d 	.word	0x0801198d
 8011970:	08011995 	.word	0x08011995
 8011974:	080119c1 	.word	0x080119c1
 8011978:	080119c9 	.word	0x080119c9
 801197c:	2300      	movs	r3, #0
 801197e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011982:	e14a      	b.n	8011c1a <UART_SetConfig+0x5a6>
 8011984:	2304      	movs	r3, #4
 8011986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801198a:	e146      	b.n	8011c1a <UART_SetConfig+0x5a6>
 801198c:	2308      	movs	r3, #8
 801198e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011992:	e142      	b.n	8011c1a <UART_SetConfig+0x5a6>
 8011994:	2310      	movs	r3, #16
 8011996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801199a:	e13e      	b.n	8011c1a <UART_SetConfig+0x5a6>
 801199c:	cfff69f3 	.word	0xcfff69f3
 80119a0:	58000c00 	.word	0x58000c00
 80119a4:	11fff4ff 	.word	0x11fff4ff
 80119a8:	40011000 	.word	0x40011000
 80119ac:	58024400 	.word	0x58024400
 80119b0:	40004400 	.word	0x40004400
 80119b4:	40004800 	.word	0x40004800
 80119b8:	40004c00 	.word	0x40004c00
 80119bc:	40005000 	.word	0x40005000
 80119c0:	2320      	movs	r3, #32
 80119c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80119c6:	e128      	b.n	8011c1a <UART_SetConfig+0x5a6>
 80119c8:	2340      	movs	r3, #64	; 0x40
 80119ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80119ce:	e124      	b.n	8011c1a <UART_SetConfig+0x5a6>
 80119d0:	2380      	movs	r3, #128	; 0x80
 80119d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80119d6:	e120      	b.n	8011c1a <UART_SetConfig+0x5a6>
 80119d8:	697b      	ldr	r3, [r7, #20]
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	4acb      	ldr	r2, [pc, #812]	; (8011d0c <UART_SetConfig+0x698>)
 80119de:	4293      	cmp	r3, r2
 80119e0:	d176      	bne.n	8011ad0 <UART_SetConfig+0x45c>
 80119e2:	4bcb      	ldr	r3, [pc, #812]	; (8011d10 <UART_SetConfig+0x69c>)
 80119e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80119e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80119ea:	2b28      	cmp	r3, #40	; 0x28
 80119ec:	d86c      	bhi.n	8011ac8 <UART_SetConfig+0x454>
 80119ee:	a201      	add	r2, pc, #4	; (adr r2, 80119f4 <UART_SetConfig+0x380>)
 80119f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119f4:	08011a99 	.word	0x08011a99
 80119f8:	08011ac9 	.word	0x08011ac9
 80119fc:	08011ac9 	.word	0x08011ac9
 8011a00:	08011ac9 	.word	0x08011ac9
 8011a04:	08011ac9 	.word	0x08011ac9
 8011a08:	08011ac9 	.word	0x08011ac9
 8011a0c:	08011ac9 	.word	0x08011ac9
 8011a10:	08011ac9 	.word	0x08011ac9
 8011a14:	08011aa1 	.word	0x08011aa1
 8011a18:	08011ac9 	.word	0x08011ac9
 8011a1c:	08011ac9 	.word	0x08011ac9
 8011a20:	08011ac9 	.word	0x08011ac9
 8011a24:	08011ac9 	.word	0x08011ac9
 8011a28:	08011ac9 	.word	0x08011ac9
 8011a2c:	08011ac9 	.word	0x08011ac9
 8011a30:	08011ac9 	.word	0x08011ac9
 8011a34:	08011aa9 	.word	0x08011aa9
 8011a38:	08011ac9 	.word	0x08011ac9
 8011a3c:	08011ac9 	.word	0x08011ac9
 8011a40:	08011ac9 	.word	0x08011ac9
 8011a44:	08011ac9 	.word	0x08011ac9
 8011a48:	08011ac9 	.word	0x08011ac9
 8011a4c:	08011ac9 	.word	0x08011ac9
 8011a50:	08011ac9 	.word	0x08011ac9
 8011a54:	08011ab1 	.word	0x08011ab1
 8011a58:	08011ac9 	.word	0x08011ac9
 8011a5c:	08011ac9 	.word	0x08011ac9
 8011a60:	08011ac9 	.word	0x08011ac9
 8011a64:	08011ac9 	.word	0x08011ac9
 8011a68:	08011ac9 	.word	0x08011ac9
 8011a6c:	08011ac9 	.word	0x08011ac9
 8011a70:	08011ac9 	.word	0x08011ac9
 8011a74:	08011ab9 	.word	0x08011ab9
 8011a78:	08011ac9 	.word	0x08011ac9
 8011a7c:	08011ac9 	.word	0x08011ac9
 8011a80:	08011ac9 	.word	0x08011ac9
 8011a84:	08011ac9 	.word	0x08011ac9
 8011a88:	08011ac9 	.word	0x08011ac9
 8011a8c:	08011ac9 	.word	0x08011ac9
 8011a90:	08011ac9 	.word	0x08011ac9
 8011a94:	08011ac1 	.word	0x08011ac1
 8011a98:	2301      	movs	r3, #1
 8011a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a9e:	e0bc      	b.n	8011c1a <UART_SetConfig+0x5a6>
 8011aa0:	2304      	movs	r3, #4
 8011aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011aa6:	e0b8      	b.n	8011c1a <UART_SetConfig+0x5a6>
 8011aa8:	2308      	movs	r3, #8
 8011aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011aae:	e0b4      	b.n	8011c1a <UART_SetConfig+0x5a6>
 8011ab0:	2310      	movs	r3, #16
 8011ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ab6:	e0b0      	b.n	8011c1a <UART_SetConfig+0x5a6>
 8011ab8:	2320      	movs	r3, #32
 8011aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011abe:	e0ac      	b.n	8011c1a <UART_SetConfig+0x5a6>
 8011ac0:	2340      	movs	r3, #64	; 0x40
 8011ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ac6:	e0a8      	b.n	8011c1a <UART_SetConfig+0x5a6>
 8011ac8:	2380      	movs	r3, #128	; 0x80
 8011aca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ace:	e0a4      	b.n	8011c1a <UART_SetConfig+0x5a6>
 8011ad0:	697b      	ldr	r3, [r7, #20]
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	4a8f      	ldr	r2, [pc, #572]	; (8011d14 <UART_SetConfig+0x6a0>)
 8011ad6:	4293      	cmp	r3, r2
 8011ad8:	d130      	bne.n	8011b3c <UART_SetConfig+0x4c8>
 8011ada:	4b8d      	ldr	r3, [pc, #564]	; (8011d10 <UART_SetConfig+0x69c>)
 8011adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011ade:	f003 0307 	and.w	r3, r3, #7
 8011ae2:	2b05      	cmp	r3, #5
 8011ae4:	d826      	bhi.n	8011b34 <UART_SetConfig+0x4c0>
 8011ae6:	a201      	add	r2, pc, #4	; (adr r2, 8011aec <UART_SetConfig+0x478>)
 8011ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011aec:	08011b05 	.word	0x08011b05
 8011af0:	08011b0d 	.word	0x08011b0d
 8011af4:	08011b15 	.word	0x08011b15
 8011af8:	08011b1d 	.word	0x08011b1d
 8011afc:	08011b25 	.word	0x08011b25
 8011b00:	08011b2d 	.word	0x08011b2d
 8011b04:	2300      	movs	r3, #0
 8011b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b0a:	e086      	b.n	8011c1a <UART_SetConfig+0x5a6>
 8011b0c:	2304      	movs	r3, #4
 8011b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b12:	e082      	b.n	8011c1a <UART_SetConfig+0x5a6>
 8011b14:	2308      	movs	r3, #8
 8011b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b1a:	e07e      	b.n	8011c1a <UART_SetConfig+0x5a6>
 8011b1c:	2310      	movs	r3, #16
 8011b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b22:	e07a      	b.n	8011c1a <UART_SetConfig+0x5a6>
 8011b24:	2320      	movs	r3, #32
 8011b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b2a:	e076      	b.n	8011c1a <UART_SetConfig+0x5a6>
 8011b2c:	2340      	movs	r3, #64	; 0x40
 8011b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b32:	e072      	b.n	8011c1a <UART_SetConfig+0x5a6>
 8011b34:	2380      	movs	r3, #128	; 0x80
 8011b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b3a:	e06e      	b.n	8011c1a <UART_SetConfig+0x5a6>
 8011b3c:	697b      	ldr	r3, [r7, #20]
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	4a75      	ldr	r2, [pc, #468]	; (8011d18 <UART_SetConfig+0x6a4>)
 8011b42:	4293      	cmp	r3, r2
 8011b44:	d130      	bne.n	8011ba8 <UART_SetConfig+0x534>
 8011b46:	4b72      	ldr	r3, [pc, #456]	; (8011d10 <UART_SetConfig+0x69c>)
 8011b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011b4a:	f003 0307 	and.w	r3, r3, #7
 8011b4e:	2b05      	cmp	r3, #5
 8011b50:	d826      	bhi.n	8011ba0 <UART_SetConfig+0x52c>
 8011b52:	a201      	add	r2, pc, #4	; (adr r2, 8011b58 <UART_SetConfig+0x4e4>)
 8011b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b58:	08011b71 	.word	0x08011b71
 8011b5c:	08011b79 	.word	0x08011b79
 8011b60:	08011b81 	.word	0x08011b81
 8011b64:	08011b89 	.word	0x08011b89
 8011b68:	08011b91 	.word	0x08011b91
 8011b6c:	08011b99 	.word	0x08011b99
 8011b70:	2300      	movs	r3, #0
 8011b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b76:	e050      	b.n	8011c1a <UART_SetConfig+0x5a6>
 8011b78:	2304      	movs	r3, #4
 8011b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b7e:	e04c      	b.n	8011c1a <UART_SetConfig+0x5a6>
 8011b80:	2308      	movs	r3, #8
 8011b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b86:	e048      	b.n	8011c1a <UART_SetConfig+0x5a6>
 8011b88:	2310      	movs	r3, #16
 8011b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b8e:	e044      	b.n	8011c1a <UART_SetConfig+0x5a6>
 8011b90:	2320      	movs	r3, #32
 8011b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b96:	e040      	b.n	8011c1a <UART_SetConfig+0x5a6>
 8011b98:	2340      	movs	r3, #64	; 0x40
 8011b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b9e:	e03c      	b.n	8011c1a <UART_SetConfig+0x5a6>
 8011ba0:	2380      	movs	r3, #128	; 0x80
 8011ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ba6:	e038      	b.n	8011c1a <UART_SetConfig+0x5a6>
 8011ba8:	697b      	ldr	r3, [r7, #20]
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	4a5b      	ldr	r2, [pc, #364]	; (8011d1c <UART_SetConfig+0x6a8>)
 8011bae:	4293      	cmp	r3, r2
 8011bb0:	d130      	bne.n	8011c14 <UART_SetConfig+0x5a0>
 8011bb2:	4b57      	ldr	r3, [pc, #348]	; (8011d10 <UART_SetConfig+0x69c>)
 8011bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011bb6:	f003 0307 	and.w	r3, r3, #7
 8011bba:	2b05      	cmp	r3, #5
 8011bbc:	d826      	bhi.n	8011c0c <UART_SetConfig+0x598>
 8011bbe:	a201      	add	r2, pc, #4	; (adr r2, 8011bc4 <UART_SetConfig+0x550>)
 8011bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bc4:	08011bdd 	.word	0x08011bdd
 8011bc8:	08011be5 	.word	0x08011be5
 8011bcc:	08011bed 	.word	0x08011bed
 8011bd0:	08011bf5 	.word	0x08011bf5
 8011bd4:	08011bfd 	.word	0x08011bfd
 8011bd8:	08011c05 	.word	0x08011c05
 8011bdc:	2302      	movs	r3, #2
 8011bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011be2:	e01a      	b.n	8011c1a <UART_SetConfig+0x5a6>
 8011be4:	2304      	movs	r3, #4
 8011be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011bea:	e016      	b.n	8011c1a <UART_SetConfig+0x5a6>
 8011bec:	2308      	movs	r3, #8
 8011bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011bf2:	e012      	b.n	8011c1a <UART_SetConfig+0x5a6>
 8011bf4:	2310      	movs	r3, #16
 8011bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011bfa:	e00e      	b.n	8011c1a <UART_SetConfig+0x5a6>
 8011bfc:	2320      	movs	r3, #32
 8011bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c02:	e00a      	b.n	8011c1a <UART_SetConfig+0x5a6>
 8011c04:	2340      	movs	r3, #64	; 0x40
 8011c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c0a:	e006      	b.n	8011c1a <UART_SetConfig+0x5a6>
 8011c0c:	2380      	movs	r3, #128	; 0x80
 8011c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c12:	e002      	b.n	8011c1a <UART_SetConfig+0x5a6>
 8011c14:	2380      	movs	r3, #128	; 0x80
 8011c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011c1a:	697b      	ldr	r3, [r7, #20]
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	4a3f      	ldr	r2, [pc, #252]	; (8011d1c <UART_SetConfig+0x6a8>)
 8011c20:	4293      	cmp	r3, r2
 8011c22:	f040 80f8 	bne.w	8011e16 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011c26:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011c2a:	2b20      	cmp	r3, #32
 8011c2c:	dc46      	bgt.n	8011cbc <UART_SetConfig+0x648>
 8011c2e:	2b02      	cmp	r3, #2
 8011c30:	f2c0 8082 	blt.w	8011d38 <UART_SetConfig+0x6c4>
 8011c34:	3b02      	subs	r3, #2
 8011c36:	2b1e      	cmp	r3, #30
 8011c38:	d87e      	bhi.n	8011d38 <UART_SetConfig+0x6c4>
 8011c3a:	a201      	add	r2, pc, #4	; (adr r2, 8011c40 <UART_SetConfig+0x5cc>)
 8011c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c40:	08011cc3 	.word	0x08011cc3
 8011c44:	08011d39 	.word	0x08011d39
 8011c48:	08011ccb 	.word	0x08011ccb
 8011c4c:	08011d39 	.word	0x08011d39
 8011c50:	08011d39 	.word	0x08011d39
 8011c54:	08011d39 	.word	0x08011d39
 8011c58:	08011cdb 	.word	0x08011cdb
 8011c5c:	08011d39 	.word	0x08011d39
 8011c60:	08011d39 	.word	0x08011d39
 8011c64:	08011d39 	.word	0x08011d39
 8011c68:	08011d39 	.word	0x08011d39
 8011c6c:	08011d39 	.word	0x08011d39
 8011c70:	08011d39 	.word	0x08011d39
 8011c74:	08011d39 	.word	0x08011d39
 8011c78:	08011ceb 	.word	0x08011ceb
 8011c7c:	08011d39 	.word	0x08011d39
 8011c80:	08011d39 	.word	0x08011d39
 8011c84:	08011d39 	.word	0x08011d39
 8011c88:	08011d39 	.word	0x08011d39
 8011c8c:	08011d39 	.word	0x08011d39
 8011c90:	08011d39 	.word	0x08011d39
 8011c94:	08011d39 	.word	0x08011d39
 8011c98:	08011d39 	.word	0x08011d39
 8011c9c:	08011d39 	.word	0x08011d39
 8011ca0:	08011d39 	.word	0x08011d39
 8011ca4:	08011d39 	.word	0x08011d39
 8011ca8:	08011d39 	.word	0x08011d39
 8011cac:	08011d39 	.word	0x08011d39
 8011cb0:	08011d39 	.word	0x08011d39
 8011cb4:	08011d39 	.word	0x08011d39
 8011cb8:	08011d2b 	.word	0x08011d2b
 8011cbc:	2b40      	cmp	r3, #64	; 0x40
 8011cbe:	d037      	beq.n	8011d30 <UART_SetConfig+0x6bc>
 8011cc0:	e03a      	b.n	8011d38 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8011cc2:	f7fb fa4d 	bl	800d160 <HAL_RCCEx_GetD3PCLK1Freq>
 8011cc6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011cc8:	e03c      	b.n	8011d44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011cca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011cce:	4618      	mov	r0, r3
 8011cd0:	f7fb fa5c 	bl	800d18c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011cd8:	e034      	b.n	8011d44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011cda:	f107 0318 	add.w	r3, r7, #24
 8011cde:	4618      	mov	r0, r3
 8011ce0:	f7fb fba8 	bl	800d434 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011ce4:	69fb      	ldr	r3, [r7, #28]
 8011ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011ce8:	e02c      	b.n	8011d44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011cea:	4b09      	ldr	r3, [pc, #36]	; (8011d10 <UART_SetConfig+0x69c>)
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	f003 0320 	and.w	r3, r3, #32
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d016      	beq.n	8011d24 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011cf6:	4b06      	ldr	r3, [pc, #24]	; (8011d10 <UART_SetConfig+0x69c>)
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	08db      	lsrs	r3, r3, #3
 8011cfc:	f003 0303 	and.w	r3, r3, #3
 8011d00:	4a07      	ldr	r2, [pc, #28]	; (8011d20 <UART_SetConfig+0x6ac>)
 8011d02:	fa22 f303 	lsr.w	r3, r2, r3
 8011d06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011d08:	e01c      	b.n	8011d44 <UART_SetConfig+0x6d0>
 8011d0a:	bf00      	nop
 8011d0c:	40011400 	.word	0x40011400
 8011d10:	58024400 	.word	0x58024400
 8011d14:	40007800 	.word	0x40007800
 8011d18:	40007c00 	.word	0x40007c00
 8011d1c:	58000c00 	.word	0x58000c00
 8011d20:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8011d24:	4b9d      	ldr	r3, [pc, #628]	; (8011f9c <UART_SetConfig+0x928>)
 8011d26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d28:	e00c      	b.n	8011d44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011d2a:	4b9d      	ldr	r3, [pc, #628]	; (8011fa0 <UART_SetConfig+0x92c>)
 8011d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d2e:	e009      	b.n	8011d44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011d30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011d34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d36:	e005      	b.n	8011d44 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8011d38:	2300      	movs	r3, #0
 8011d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011d3c:	2301      	movs	r3, #1
 8011d3e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011d42:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	f000 81de 	beq.w	8012108 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011d4c:	697b      	ldr	r3, [r7, #20]
 8011d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d50:	4a94      	ldr	r2, [pc, #592]	; (8011fa4 <UART_SetConfig+0x930>)
 8011d52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011d56:	461a      	mov	r2, r3
 8011d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8011d5e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011d60:	697b      	ldr	r3, [r7, #20]
 8011d62:	685a      	ldr	r2, [r3, #4]
 8011d64:	4613      	mov	r3, r2
 8011d66:	005b      	lsls	r3, r3, #1
 8011d68:	4413      	add	r3, r2
 8011d6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011d6c:	429a      	cmp	r2, r3
 8011d6e:	d305      	bcc.n	8011d7c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011d70:	697b      	ldr	r3, [r7, #20]
 8011d72:	685b      	ldr	r3, [r3, #4]
 8011d74:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011d76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011d78:	429a      	cmp	r2, r3
 8011d7a:	d903      	bls.n	8011d84 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8011d7c:	2301      	movs	r3, #1
 8011d7e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011d82:	e1c1      	b.n	8012108 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d86:	2200      	movs	r2, #0
 8011d88:	60bb      	str	r3, [r7, #8]
 8011d8a:	60fa      	str	r2, [r7, #12]
 8011d8c:	697b      	ldr	r3, [r7, #20]
 8011d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d90:	4a84      	ldr	r2, [pc, #528]	; (8011fa4 <UART_SetConfig+0x930>)
 8011d92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011d96:	b29b      	uxth	r3, r3
 8011d98:	2200      	movs	r2, #0
 8011d9a:	603b      	str	r3, [r7, #0]
 8011d9c:	607a      	str	r2, [r7, #4]
 8011d9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011da2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011da6:	f7ee fa9f 	bl	80002e8 <__aeabi_uldivmod>
 8011daa:	4602      	mov	r2, r0
 8011dac:	460b      	mov	r3, r1
 8011dae:	4610      	mov	r0, r2
 8011db0:	4619      	mov	r1, r3
 8011db2:	f04f 0200 	mov.w	r2, #0
 8011db6:	f04f 0300 	mov.w	r3, #0
 8011dba:	020b      	lsls	r3, r1, #8
 8011dbc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011dc0:	0202      	lsls	r2, r0, #8
 8011dc2:	6979      	ldr	r1, [r7, #20]
 8011dc4:	6849      	ldr	r1, [r1, #4]
 8011dc6:	0849      	lsrs	r1, r1, #1
 8011dc8:	2000      	movs	r0, #0
 8011dca:	460c      	mov	r4, r1
 8011dcc:	4605      	mov	r5, r0
 8011dce:	eb12 0804 	adds.w	r8, r2, r4
 8011dd2:	eb43 0905 	adc.w	r9, r3, r5
 8011dd6:	697b      	ldr	r3, [r7, #20]
 8011dd8:	685b      	ldr	r3, [r3, #4]
 8011dda:	2200      	movs	r2, #0
 8011ddc:	469a      	mov	sl, r3
 8011dde:	4693      	mov	fp, r2
 8011de0:	4652      	mov	r2, sl
 8011de2:	465b      	mov	r3, fp
 8011de4:	4640      	mov	r0, r8
 8011de6:	4649      	mov	r1, r9
 8011de8:	f7ee fa7e 	bl	80002e8 <__aeabi_uldivmod>
 8011dec:	4602      	mov	r2, r0
 8011dee:	460b      	mov	r3, r1
 8011df0:	4613      	mov	r3, r2
 8011df2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011df6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011dfa:	d308      	bcc.n	8011e0e <UART_SetConfig+0x79a>
 8011dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011e02:	d204      	bcs.n	8011e0e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8011e04:	697b      	ldr	r3, [r7, #20]
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011e0a:	60da      	str	r2, [r3, #12]
 8011e0c:	e17c      	b.n	8012108 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8011e0e:	2301      	movs	r3, #1
 8011e10:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011e14:	e178      	b.n	8012108 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011e16:	697b      	ldr	r3, [r7, #20]
 8011e18:	69db      	ldr	r3, [r3, #28]
 8011e1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011e1e:	f040 80c5 	bne.w	8011fac <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8011e22:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011e26:	2b20      	cmp	r3, #32
 8011e28:	dc48      	bgt.n	8011ebc <UART_SetConfig+0x848>
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	db7b      	blt.n	8011f26 <UART_SetConfig+0x8b2>
 8011e2e:	2b20      	cmp	r3, #32
 8011e30:	d879      	bhi.n	8011f26 <UART_SetConfig+0x8b2>
 8011e32:	a201      	add	r2, pc, #4	; (adr r2, 8011e38 <UART_SetConfig+0x7c4>)
 8011e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e38:	08011ec3 	.word	0x08011ec3
 8011e3c:	08011ecb 	.word	0x08011ecb
 8011e40:	08011f27 	.word	0x08011f27
 8011e44:	08011f27 	.word	0x08011f27
 8011e48:	08011ed3 	.word	0x08011ed3
 8011e4c:	08011f27 	.word	0x08011f27
 8011e50:	08011f27 	.word	0x08011f27
 8011e54:	08011f27 	.word	0x08011f27
 8011e58:	08011ee3 	.word	0x08011ee3
 8011e5c:	08011f27 	.word	0x08011f27
 8011e60:	08011f27 	.word	0x08011f27
 8011e64:	08011f27 	.word	0x08011f27
 8011e68:	08011f27 	.word	0x08011f27
 8011e6c:	08011f27 	.word	0x08011f27
 8011e70:	08011f27 	.word	0x08011f27
 8011e74:	08011f27 	.word	0x08011f27
 8011e78:	08011ef3 	.word	0x08011ef3
 8011e7c:	08011f27 	.word	0x08011f27
 8011e80:	08011f27 	.word	0x08011f27
 8011e84:	08011f27 	.word	0x08011f27
 8011e88:	08011f27 	.word	0x08011f27
 8011e8c:	08011f27 	.word	0x08011f27
 8011e90:	08011f27 	.word	0x08011f27
 8011e94:	08011f27 	.word	0x08011f27
 8011e98:	08011f27 	.word	0x08011f27
 8011e9c:	08011f27 	.word	0x08011f27
 8011ea0:	08011f27 	.word	0x08011f27
 8011ea4:	08011f27 	.word	0x08011f27
 8011ea8:	08011f27 	.word	0x08011f27
 8011eac:	08011f27 	.word	0x08011f27
 8011eb0:	08011f27 	.word	0x08011f27
 8011eb4:	08011f27 	.word	0x08011f27
 8011eb8:	08011f19 	.word	0x08011f19
 8011ebc:	2b40      	cmp	r3, #64	; 0x40
 8011ebe:	d02e      	beq.n	8011f1e <UART_SetConfig+0x8aa>
 8011ec0:	e031      	b.n	8011f26 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011ec2:	f7f9 f997 	bl	800b1f4 <HAL_RCC_GetPCLK1Freq>
 8011ec6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011ec8:	e033      	b.n	8011f32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011eca:	f7f9 f9a9 	bl	800b220 <HAL_RCC_GetPCLK2Freq>
 8011ece:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011ed0:	e02f      	b.n	8011f32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011ed2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	f7fb f958 	bl	800d18c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ede:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011ee0:	e027      	b.n	8011f32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011ee2:	f107 0318 	add.w	r3, r7, #24
 8011ee6:	4618      	mov	r0, r3
 8011ee8:	f7fb faa4 	bl	800d434 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011eec:	69fb      	ldr	r3, [r7, #28]
 8011eee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011ef0:	e01f      	b.n	8011f32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011ef2:	4b2d      	ldr	r3, [pc, #180]	; (8011fa8 <UART_SetConfig+0x934>)
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	f003 0320 	and.w	r3, r3, #32
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d009      	beq.n	8011f12 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011efe:	4b2a      	ldr	r3, [pc, #168]	; (8011fa8 <UART_SetConfig+0x934>)
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	08db      	lsrs	r3, r3, #3
 8011f04:	f003 0303 	and.w	r3, r3, #3
 8011f08:	4a24      	ldr	r2, [pc, #144]	; (8011f9c <UART_SetConfig+0x928>)
 8011f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8011f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011f10:	e00f      	b.n	8011f32 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8011f12:	4b22      	ldr	r3, [pc, #136]	; (8011f9c <UART_SetConfig+0x928>)
 8011f14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011f16:	e00c      	b.n	8011f32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011f18:	4b21      	ldr	r3, [pc, #132]	; (8011fa0 <UART_SetConfig+0x92c>)
 8011f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011f1c:	e009      	b.n	8011f32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011f1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011f22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011f24:	e005      	b.n	8011f32 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8011f26:	2300      	movs	r3, #0
 8011f28:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011f2a:	2301      	movs	r3, #1
 8011f2c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011f30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	f000 80e7 	beq.w	8012108 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011f3a:	697b      	ldr	r3, [r7, #20]
 8011f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f3e:	4a19      	ldr	r2, [pc, #100]	; (8011fa4 <UART_SetConfig+0x930>)
 8011f40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011f44:	461a      	mov	r2, r3
 8011f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f48:	fbb3 f3f2 	udiv	r3, r3, r2
 8011f4c:	005a      	lsls	r2, r3, #1
 8011f4e:	697b      	ldr	r3, [r7, #20]
 8011f50:	685b      	ldr	r3, [r3, #4]
 8011f52:	085b      	lsrs	r3, r3, #1
 8011f54:	441a      	add	r2, r3
 8011f56:	697b      	ldr	r3, [r7, #20]
 8011f58:	685b      	ldr	r3, [r3, #4]
 8011f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8011f5e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f62:	2b0f      	cmp	r3, #15
 8011f64:	d916      	bls.n	8011f94 <UART_SetConfig+0x920>
 8011f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011f6c:	d212      	bcs.n	8011f94 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f70:	b29b      	uxth	r3, r3
 8011f72:	f023 030f 	bic.w	r3, r3, #15
 8011f76:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f7a:	085b      	lsrs	r3, r3, #1
 8011f7c:	b29b      	uxth	r3, r3
 8011f7e:	f003 0307 	and.w	r3, r3, #7
 8011f82:	b29a      	uxth	r2, r3
 8011f84:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011f86:	4313      	orrs	r3, r2
 8011f88:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8011f8a:	697b      	ldr	r3, [r7, #20]
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011f90:	60da      	str	r2, [r3, #12]
 8011f92:	e0b9      	b.n	8012108 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011f94:	2301      	movs	r3, #1
 8011f96:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011f9a:	e0b5      	b.n	8012108 <UART_SetConfig+0xa94>
 8011f9c:	03d09000 	.word	0x03d09000
 8011fa0:	003d0900 	.word	0x003d0900
 8011fa4:	08014370 	.word	0x08014370
 8011fa8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8011fac:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011fb0:	2b20      	cmp	r3, #32
 8011fb2:	dc49      	bgt.n	8012048 <UART_SetConfig+0x9d4>
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	db7c      	blt.n	80120b2 <UART_SetConfig+0xa3e>
 8011fb8:	2b20      	cmp	r3, #32
 8011fba:	d87a      	bhi.n	80120b2 <UART_SetConfig+0xa3e>
 8011fbc:	a201      	add	r2, pc, #4	; (adr r2, 8011fc4 <UART_SetConfig+0x950>)
 8011fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fc2:	bf00      	nop
 8011fc4:	0801204f 	.word	0x0801204f
 8011fc8:	08012057 	.word	0x08012057
 8011fcc:	080120b3 	.word	0x080120b3
 8011fd0:	080120b3 	.word	0x080120b3
 8011fd4:	0801205f 	.word	0x0801205f
 8011fd8:	080120b3 	.word	0x080120b3
 8011fdc:	080120b3 	.word	0x080120b3
 8011fe0:	080120b3 	.word	0x080120b3
 8011fe4:	0801206f 	.word	0x0801206f
 8011fe8:	080120b3 	.word	0x080120b3
 8011fec:	080120b3 	.word	0x080120b3
 8011ff0:	080120b3 	.word	0x080120b3
 8011ff4:	080120b3 	.word	0x080120b3
 8011ff8:	080120b3 	.word	0x080120b3
 8011ffc:	080120b3 	.word	0x080120b3
 8012000:	080120b3 	.word	0x080120b3
 8012004:	0801207f 	.word	0x0801207f
 8012008:	080120b3 	.word	0x080120b3
 801200c:	080120b3 	.word	0x080120b3
 8012010:	080120b3 	.word	0x080120b3
 8012014:	080120b3 	.word	0x080120b3
 8012018:	080120b3 	.word	0x080120b3
 801201c:	080120b3 	.word	0x080120b3
 8012020:	080120b3 	.word	0x080120b3
 8012024:	080120b3 	.word	0x080120b3
 8012028:	080120b3 	.word	0x080120b3
 801202c:	080120b3 	.word	0x080120b3
 8012030:	080120b3 	.word	0x080120b3
 8012034:	080120b3 	.word	0x080120b3
 8012038:	080120b3 	.word	0x080120b3
 801203c:	080120b3 	.word	0x080120b3
 8012040:	080120b3 	.word	0x080120b3
 8012044:	080120a5 	.word	0x080120a5
 8012048:	2b40      	cmp	r3, #64	; 0x40
 801204a:	d02e      	beq.n	80120aa <UART_SetConfig+0xa36>
 801204c:	e031      	b.n	80120b2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801204e:	f7f9 f8d1 	bl	800b1f4 <HAL_RCC_GetPCLK1Freq>
 8012052:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012054:	e033      	b.n	80120be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012056:	f7f9 f8e3 	bl	800b220 <HAL_RCC_GetPCLK2Freq>
 801205a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801205c:	e02f      	b.n	80120be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801205e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012062:	4618      	mov	r0, r3
 8012064:	f7fb f892 	bl	800d18c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801206a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801206c:	e027      	b.n	80120be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801206e:	f107 0318 	add.w	r3, r7, #24
 8012072:	4618      	mov	r0, r3
 8012074:	f7fb f9de 	bl	800d434 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012078:	69fb      	ldr	r3, [r7, #28]
 801207a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801207c:	e01f      	b.n	80120be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801207e:	4b2d      	ldr	r3, [pc, #180]	; (8012134 <UART_SetConfig+0xac0>)
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	f003 0320 	and.w	r3, r3, #32
 8012086:	2b00      	cmp	r3, #0
 8012088:	d009      	beq.n	801209e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801208a:	4b2a      	ldr	r3, [pc, #168]	; (8012134 <UART_SetConfig+0xac0>)
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	08db      	lsrs	r3, r3, #3
 8012090:	f003 0303 	and.w	r3, r3, #3
 8012094:	4a28      	ldr	r2, [pc, #160]	; (8012138 <UART_SetConfig+0xac4>)
 8012096:	fa22 f303 	lsr.w	r3, r2, r3
 801209a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801209c:	e00f      	b.n	80120be <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 801209e:	4b26      	ldr	r3, [pc, #152]	; (8012138 <UART_SetConfig+0xac4>)
 80120a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80120a2:	e00c      	b.n	80120be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80120a4:	4b25      	ldr	r3, [pc, #148]	; (801213c <UART_SetConfig+0xac8>)
 80120a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80120a8:	e009      	b.n	80120be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80120aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80120ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80120b0:	e005      	b.n	80120be <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80120b2:	2300      	movs	r3, #0
 80120b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80120b6:	2301      	movs	r3, #1
 80120b8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80120bc:	bf00      	nop
    }

    if (pclk != 0U)
 80120be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d021      	beq.n	8012108 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80120c4:	697b      	ldr	r3, [r7, #20]
 80120c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120c8:	4a1d      	ldr	r2, [pc, #116]	; (8012140 <UART_SetConfig+0xacc>)
 80120ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80120ce:	461a      	mov	r2, r3
 80120d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80120d6:	697b      	ldr	r3, [r7, #20]
 80120d8:	685b      	ldr	r3, [r3, #4]
 80120da:	085b      	lsrs	r3, r3, #1
 80120dc:	441a      	add	r2, r3
 80120de:	697b      	ldr	r3, [r7, #20]
 80120e0:	685b      	ldr	r3, [r3, #4]
 80120e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80120e6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80120e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120ea:	2b0f      	cmp	r3, #15
 80120ec:	d909      	bls.n	8012102 <UART_SetConfig+0xa8e>
 80120ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80120f4:	d205      	bcs.n	8012102 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80120f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120f8:	b29a      	uxth	r2, r3
 80120fa:	697b      	ldr	r3, [r7, #20]
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	60da      	str	r2, [r3, #12]
 8012100:	e002      	b.n	8012108 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8012102:	2301      	movs	r3, #1
 8012104:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8012108:	697b      	ldr	r3, [r7, #20]
 801210a:	2201      	movs	r2, #1
 801210c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8012110:	697b      	ldr	r3, [r7, #20]
 8012112:	2201      	movs	r2, #1
 8012114:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8012118:	697b      	ldr	r3, [r7, #20]
 801211a:	2200      	movs	r2, #0
 801211c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 801211e:	697b      	ldr	r3, [r7, #20]
 8012120:	2200      	movs	r2, #0
 8012122:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8012124:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8012128:	4618      	mov	r0, r3
 801212a:	3748      	adds	r7, #72	; 0x48
 801212c:	46bd      	mov	sp, r7
 801212e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012132:	bf00      	nop
 8012134:	58024400 	.word	0x58024400
 8012138:	03d09000 	.word	0x03d09000
 801213c:	003d0900 	.word	0x003d0900
 8012140:	08014370 	.word	0x08014370

08012144 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8012144:	b480      	push	{r7}
 8012146:	b083      	sub	sp, #12
 8012148:	af00      	add	r7, sp, #0
 801214a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012150:	f003 0301 	and.w	r3, r3, #1
 8012154:	2b00      	cmp	r3, #0
 8012156:	d00a      	beq.n	801216e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	685b      	ldr	r3, [r3, #4]
 801215e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	681b      	ldr	r3, [r3, #0]
 801216a:	430a      	orrs	r2, r1
 801216c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012172:	f003 0302 	and.w	r3, r3, #2
 8012176:	2b00      	cmp	r3, #0
 8012178:	d00a      	beq.n	8012190 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	685b      	ldr	r3, [r3, #4]
 8012180:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	430a      	orrs	r2, r1
 801218e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012194:	f003 0304 	and.w	r3, r3, #4
 8012198:	2b00      	cmp	r3, #0
 801219a:	d00a      	beq.n	80121b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	685b      	ldr	r3, [r3, #4]
 80121a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	430a      	orrs	r2, r1
 80121b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80121b6:	f003 0308 	and.w	r3, r3, #8
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d00a      	beq.n	80121d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	685b      	ldr	r3, [r3, #4]
 80121c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	430a      	orrs	r2, r1
 80121d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80121d8:	f003 0310 	and.w	r3, r3, #16
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d00a      	beq.n	80121f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	689b      	ldr	r3, [r3, #8]
 80121e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	430a      	orrs	r2, r1
 80121f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80121fa:	f003 0320 	and.w	r3, r3, #32
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d00a      	beq.n	8012218 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	689b      	ldr	r3, [r3, #8]
 8012208:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	681b      	ldr	r3, [r3, #0]
 8012214:	430a      	orrs	r2, r1
 8012216:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801221c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012220:	2b00      	cmp	r3, #0
 8012222:	d01a      	beq.n	801225a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	685b      	ldr	r3, [r3, #4]
 801222a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	430a      	orrs	r2, r1
 8012238:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801223e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012242:	d10a      	bne.n	801225a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	685b      	ldr	r3, [r3, #4]
 801224a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	430a      	orrs	r2, r1
 8012258:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801225e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012262:	2b00      	cmp	r3, #0
 8012264:	d00a      	beq.n	801227c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	685b      	ldr	r3, [r3, #4]
 801226c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	430a      	orrs	r2, r1
 801227a:	605a      	str	r2, [r3, #4]
  }
}
 801227c:	bf00      	nop
 801227e:	370c      	adds	r7, #12
 8012280:	46bd      	mov	sp, r7
 8012282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012286:	4770      	bx	lr

08012288 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8012288:	b580      	push	{r7, lr}
 801228a:	b098      	sub	sp, #96	; 0x60
 801228c:	af02      	add	r7, sp, #8
 801228e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	2200      	movs	r2, #0
 8012294:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8012298:	f7f3 fa9e 	bl	80057d8 <HAL_GetTick>
 801229c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	f003 0308 	and.w	r3, r3, #8
 80122a8:	2b08      	cmp	r3, #8
 80122aa:	d12f      	bne.n	801230c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80122ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80122b0:	9300      	str	r3, [sp, #0]
 80122b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80122b4:	2200      	movs	r2, #0
 80122b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80122ba:	6878      	ldr	r0, [r7, #4]
 80122bc:	f000 f88e 	bl	80123dc <UART_WaitOnFlagUntilTimeout>
 80122c0:	4603      	mov	r3, r0
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d022      	beq.n	801230c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122ce:	e853 3f00 	ldrex	r3, [r3]
 80122d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80122d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80122da:	653b      	str	r3, [r7, #80]	; 0x50
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	461a      	mov	r2, r3
 80122e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122e4:	647b      	str	r3, [r7, #68]	; 0x44
 80122e6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80122ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80122ec:	e841 2300 	strex	r3, r2, [r1]
 80122f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80122f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d1e6      	bne.n	80122c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	2220      	movs	r2, #32
 80122fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	2200      	movs	r2, #0
 8012304:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012308:	2303      	movs	r3, #3
 801230a:	e063      	b.n	80123d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	f003 0304 	and.w	r3, r3, #4
 8012316:	2b04      	cmp	r3, #4
 8012318:	d149      	bne.n	80123ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801231a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801231e:	9300      	str	r3, [sp, #0]
 8012320:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012322:	2200      	movs	r2, #0
 8012324:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8012328:	6878      	ldr	r0, [r7, #4]
 801232a:	f000 f857 	bl	80123dc <UART_WaitOnFlagUntilTimeout>
 801232e:	4603      	mov	r3, r0
 8012330:	2b00      	cmp	r3, #0
 8012332:	d03c      	beq.n	80123ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801233c:	e853 3f00 	ldrex	r3, [r3]
 8012340:	623b      	str	r3, [r7, #32]
   return(result);
 8012342:	6a3b      	ldr	r3, [r7, #32]
 8012344:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012348:	64fb      	str	r3, [r7, #76]	; 0x4c
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	461a      	mov	r2, r3
 8012350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012352:	633b      	str	r3, [r7, #48]	; 0x30
 8012354:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012356:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012358:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801235a:	e841 2300 	strex	r3, r2, [r1]
 801235e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012362:	2b00      	cmp	r3, #0
 8012364:	d1e6      	bne.n	8012334 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	3308      	adds	r3, #8
 801236c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801236e:	693b      	ldr	r3, [r7, #16]
 8012370:	e853 3f00 	ldrex	r3, [r3]
 8012374:	60fb      	str	r3, [r7, #12]
   return(result);
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	f023 0301 	bic.w	r3, r3, #1
 801237c:	64bb      	str	r3, [r7, #72]	; 0x48
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	3308      	adds	r3, #8
 8012384:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012386:	61fa      	str	r2, [r7, #28]
 8012388:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801238a:	69b9      	ldr	r1, [r7, #24]
 801238c:	69fa      	ldr	r2, [r7, #28]
 801238e:	e841 2300 	strex	r3, r2, [r1]
 8012392:	617b      	str	r3, [r7, #20]
   return(result);
 8012394:	697b      	ldr	r3, [r7, #20]
 8012396:	2b00      	cmp	r3, #0
 8012398:	d1e5      	bne.n	8012366 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	2220      	movs	r2, #32
 801239e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	2200      	movs	r2, #0
 80123a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80123aa:	2303      	movs	r3, #3
 80123ac:	e012      	b.n	80123d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	2220      	movs	r2, #32
 80123b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	2220      	movs	r2, #32
 80123ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	2200      	movs	r2, #0
 80123c2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	2200      	movs	r2, #0
 80123c8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	2200      	movs	r2, #0
 80123ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80123d2:	2300      	movs	r3, #0
}
 80123d4:	4618      	mov	r0, r3
 80123d6:	3758      	adds	r7, #88	; 0x58
 80123d8:	46bd      	mov	sp, r7
 80123da:	bd80      	pop	{r7, pc}

080123dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80123dc:	b580      	push	{r7, lr}
 80123de:	b084      	sub	sp, #16
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	60f8      	str	r0, [r7, #12]
 80123e4:	60b9      	str	r1, [r7, #8]
 80123e6:	603b      	str	r3, [r7, #0]
 80123e8:	4613      	mov	r3, r2
 80123ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80123ec:	e049      	b.n	8012482 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80123ee:	69bb      	ldr	r3, [r7, #24]
 80123f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80123f4:	d045      	beq.n	8012482 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80123f6:	f7f3 f9ef 	bl	80057d8 <HAL_GetTick>
 80123fa:	4602      	mov	r2, r0
 80123fc:	683b      	ldr	r3, [r7, #0]
 80123fe:	1ad3      	subs	r3, r2, r3
 8012400:	69ba      	ldr	r2, [r7, #24]
 8012402:	429a      	cmp	r2, r3
 8012404:	d302      	bcc.n	801240c <UART_WaitOnFlagUntilTimeout+0x30>
 8012406:	69bb      	ldr	r3, [r7, #24]
 8012408:	2b00      	cmp	r3, #0
 801240a:	d101      	bne.n	8012410 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801240c:	2303      	movs	r3, #3
 801240e:	e048      	b.n	80124a2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	681b      	ldr	r3, [r3, #0]
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	f003 0304 	and.w	r3, r3, #4
 801241a:	2b00      	cmp	r3, #0
 801241c:	d031      	beq.n	8012482 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	69db      	ldr	r3, [r3, #28]
 8012424:	f003 0308 	and.w	r3, r3, #8
 8012428:	2b08      	cmp	r3, #8
 801242a:	d110      	bne.n	801244e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	2208      	movs	r2, #8
 8012432:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8012434:	68f8      	ldr	r0, [r7, #12]
 8012436:	f000 f921 	bl	801267c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	2208      	movs	r2, #8
 801243e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	2200      	movs	r2, #0
 8012446:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 801244a:	2301      	movs	r3, #1
 801244c:	e029      	b.n	80124a2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	69db      	ldr	r3, [r3, #28]
 8012454:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012458:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801245c:	d111      	bne.n	8012482 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012466:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012468:	68f8      	ldr	r0, [r7, #12]
 801246a:	f000 f907 	bl	801267c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	2220      	movs	r2, #32
 8012472:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	2200      	movs	r2, #0
 801247a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 801247e:	2303      	movs	r3, #3
 8012480:	e00f      	b.n	80124a2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	69da      	ldr	r2, [r3, #28]
 8012488:	68bb      	ldr	r3, [r7, #8]
 801248a:	4013      	ands	r3, r2
 801248c:	68ba      	ldr	r2, [r7, #8]
 801248e:	429a      	cmp	r2, r3
 8012490:	bf0c      	ite	eq
 8012492:	2301      	moveq	r3, #1
 8012494:	2300      	movne	r3, #0
 8012496:	b2db      	uxtb	r3, r3
 8012498:	461a      	mov	r2, r3
 801249a:	79fb      	ldrb	r3, [r7, #7]
 801249c:	429a      	cmp	r2, r3
 801249e:	d0a6      	beq.n	80123ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80124a0:	2300      	movs	r3, #0
}
 80124a2:	4618      	mov	r0, r3
 80124a4:	3710      	adds	r7, #16
 80124a6:	46bd      	mov	sp, r7
 80124a8:	bd80      	pop	{r7, pc}
	...

080124ac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80124ac:	b580      	push	{r7, lr}
 80124ae:	b096      	sub	sp, #88	; 0x58
 80124b0:	af00      	add	r7, sp, #0
 80124b2:	60f8      	str	r0, [r7, #12]
 80124b4:	60b9      	str	r1, [r7, #8]
 80124b6:	4613      	mov	r3, r2
 80124b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	68ba      	ldr	r2, [r7, #8]
 80124be:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	88fa      	ldrh	r2, [r7, #6]
 80124c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	2200      	movs	r2, #0
 80124cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	2222      	movs	r2, #34	; 0x22
 80124d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d02d      	beq.n	801253e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80124e8:	4a40      	ldr	r2, [pc, #256]	; (80125ec <UART_Start_Receive_DMA+0x140>)
 80124ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80124f2:	4a3f      	ldr	r2, [pc, #252]	; (80125f0 <UART_Start_Receive_DMA+0x144>)
 80124f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80124fc:	4a3d      	ldr	r2, [pc, #244]	; (80125f4 <UART_Start_Receive_DMA+0x148>)
 80124fe:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012506:	2200      	movs	r2, #0
 8012508:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	3324      	adds	r3, #36	; 0x24
 8012516:	4619      	mov	r1, r3
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801251c:	461a      	mov	r2, r3
 801251e:	88fb      	ldrh	r3, [r7, #6]
 8012520:	f7f4 fe90 	bl	8007244 <HAL_DMA_Start_IT>
 8012524:	4603      	mov	r3, r0
 8012526:	2b00      	cmp	r3, #0
 8012528:	d009      	beq.n	801253e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	2210      	movs	r2, #16
 801252e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	2220      	movs	r2, #32
 8012536:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 801253a:	2301      	movs	r3, #1
 801253c:	e051      	b.n	80125e2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	691b      	ldr	r3, [r3, #16]
 8012542:	2b00      	cmp	r3, #0
 8012544:	d018      	beq.n	8012578 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801254c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801254e:	e853 3f00 	ldrex	r3, [r3]
 8012552:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801255a:	657b      	str	r3, [r7, #84]	; 0x54
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	461a      	mov	r2, r3
 8012562:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012564:	64bb      	str	r3, [r7, #72]	; 0x48
 8012566:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012568:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801256a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801256c:	e841 2300 	strex	r3, r2, [r1]
 8012570:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8012572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012574:	2b00      	cmp	r3, #0
 8012576:	d1e6      	bne.n	8012546 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	3308      	adds	r3, #8
 801257e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012582:	e853 3f00 	ldrex	r3, [r3]
 8012586:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801258a:	f043 0301 	orr.w	r3, r3, #1
 801258e:	653b      	str	r3, [r7, #80]	; 0x50
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	3308      	adds	r3, #8
 8012596:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012598:	637a      	str	r2, [r7, #52]	; 0x34
 801259a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801259c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801259e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80125a0:	e841 2300 	strex	r3, r2, [r1]
 80125a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80125a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d1e5      	bne.n	8012578 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80125ac:	68fb      	ldr	r3, [r7, #12]
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	3308      	adds	r3, #8
 80125b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125b4:	697b      	ldr	r3, [r7, #20]
 80125b6:	e853 3f00 	ldrex	r3, [r3]
 80125ba:	613b      	str	r3, [r7, #16]
   return(result);
 80125bc:	693b      	ldr	r3, [r7, #16]
 80125be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80125c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	3308      	adds	r3, #8
 80125ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80125cc:	623a      	str	r2, [r7, #32]
 80125ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125d0:	69f9      	ldr	r1, [r7, #28]
 80125d2:	6a3a      	ldr	r2, [r7, #32]
 80125d4:	e841 2300 	strex	r3, r2, [r1]
 80125d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80125da:	69bb      	ldr	r3, [r7, #24]
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d1e5      	bne.n	80125ac <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80125e0:	2300      	movs	r3, #0
}
 80125e2:	4618      	mov	r0, r3
 80125e4:	3758      	adds	r7, #88	; 0x58
 80125e6:	46bd      	mov	sp, r7
 80125e8:	bd80      	pop	{r7, pc}
 80125ea:	bf00      	nop
 80125ec:	080127fb 	.word	0x080127fb
 80125f0:	08012923 	.word	0x08012923
 80125f4:	08012961 	.word	0x08012961

080125f8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80125f8:	b480      	push	{r7}
 80125fa:	b08f      	sub	sp, #60	; 0x3c
 80125fc:	af00      	add	r7, sp, #0
 80125fe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012606:	6a3b      	ldr	r3, [r7, #32]
 8012608:	e853 3f00 	ldrex	r3, [r3]
 801260c:	61fb      	str	r3, [r7, #28]
   return(result);
 801260e:	69fb      	ldr	r3, [r7, #28]
 8012610:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8012614:	637b      	str	r3, [r7, #52]	; 0x34
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	461a      	mov	r2, r3
 801261c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801261e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012620:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012622:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012624:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012626:	e841 2300 	strex	r3, r2, [r1]
 801262a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801262e:	2b00      	cmp	r3, #0
 8012630:	d1e6      	bne.n	8012600 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	3308      	adds	r3, #8
 8012638:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	e853 3f00 	ldrex	r3, [r3]
 8012640:	60bb      	str	r3, [r7, #8]
   return(result);
 8012642:	68bb      	ldr	r3, [r7, #8]
 8012644:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8012648:	633b      	str	r3, [r7, #48]	; 0x30
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	3308      	adds	r3, #8
 8012650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012652:	61ba      	str	r2, [r7, #24]
 8012654:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012656:	6979      	ldr	r1, [r7, #20]
 8012658:	69ba      	ldr	r2, [r7, #24]
 801265a:	e841 2300 	strex	r3, r2, [r1]
 801265e:	613b      	str	r3, [r7, #16]
   return(result);
 8012660:	693b      	ldr	r3, [r7, #16]
 8012662:	2b00      	cmp	r3, #0
 8012664:	d1e5      	bne.n	8012632 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	2220      	movs	r2, #32
 801266a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 801266e:	bf00      	nop
 8012670:	373c      	adds	r7, #60	; 0x3c
 8012672:	46bd      	mov	sp, r7
 8012674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012678:	4770      	bx	lr
	...

0801267c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801267c:	b480      	push	{r7}
 801267e:	b095      	sub	sp, #84	; 0x54
 8012680:	af00      	add	r7, sp, #0
 8012682:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801268a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801268c:	e853 3f00 	ldrex	r3, [r3]
 8012690:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012694:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012698:	64fb      	str	r3, [r7, #76]	; 0x4c
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	461a      	mov	r2, r3
 80126a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126a2:	643b      	str	r3, [r7, #64]	; 0x40
 80126a4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80126a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80126a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80126aa:	e841 2300 	strex	r3, r2, [r1]
 80126ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80126b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d1e6      	bne.n	8012684 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	3308      	adds	r3, #8
 80126bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126be:	6a3b      	ldr	r3, [r7, #32]
 80126c0:	e853 3f00 	ldrex	r3, [r3]
 80126c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80126c6:	69fa      	ldr	r2, [r7, #28]
 80126c8:	4b1e      	ldr	r3, [pc, #120]	; (8012744 <UART_EndRxTransfer+0xc8>)
 80126ca:	4013      	ands	r3, r2
 80126cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	3308      	adds	r3, #8
 80126d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80126d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80126d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80126da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80126dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80126de:	e841 2300 	strex	r3, r2, [r1]
 80126e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80126e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d1e5      	bne.n	80126b6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80126ee:	2b01      	cmp	r3, #1
 80126f0:	d118      	bne.n	8012724 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	e853 3f00 	ldrex	r3, [r3]
 80126fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8012700:	68bb      	ldr	r3, [r7, #8]
 8012702:	f023 0310 	bic.w	r3, r3, #16
 8012706:	647b      	str	r3, [r7, #68]	; 0x44
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	461a      	mov	r2, r3
 801270e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012710:	61bb      	str	r3, [r7, #24]
 8012712:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012714:	6979      	ldr	r1, [r7, #20]
 8012716:	69ba      	ldr	r2, [r7, #24]
 8012718:	e841 2300 	strex	r3, r2, [r1]
 801271c:	613b      	str	r3, [r7, #16]
   return(result);
 801271e:	693b      	ldr	r3, [r7, #16]
 8012720:	2b00      	cmp	r3, #0
 8012722:	d1e6      	bne.n	80126f2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	2220      	movs	r2, #32
 8012728:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	2200      	movs	r2, #0
 8012730:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	2200      	movs	r2, #0
 8012736:	675a      	str	r2, [r3, #116]	; 0x74
}
 8012738:	bf00      	nop
 801273a:	3754      	adds	r7, #84	; 0x54
 801273c:	46bd      	mov	sp, r7
 801273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012742:	4770      	bx	lr
 8012744:	effffffe 	.word	0xeffffffe

08012748 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8012748:	b580      	push	{r7, lr}
 801274a:	b090      	sub	sp, #64	; 0x40
 801274c:	af00      	add	r7, sp, #0
 801274e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012754:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	69db      	ldr	r3, [r3, #28]
 801275a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801275e:	d037      	beq.n	80127d0 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8012760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012762:	2200      	movs	r2, #0
 8012764:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8012768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	3308      	adds	r3, #8
 801276e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012772:	e853 3f00 	ldrex	r3, [r3]
 8012776:	623b      	str	r3, [r7, #32]
   return(result);
 8012778:	6a3b      	ldr	r3, [r7, #32]
 801277a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801277e:	63bb      	str	r3, [r7, #56]	; 0x38
 8012780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	3308      	adds	r3, #8
 8012786:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012788:	633a      	str	r2, [r7, #48]	; 0x30
 801278a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801278c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801278e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012790:	e841 2300 	strex	r3, r2, [r1]
 8012794:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012798:	2b00      	cmp	r3, #0
 801279a:	d1e5      	bne.n	8012768 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801279c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127a2:	693b      	ldr	r3, [r7, #16]
 80127a4:	e853 3f00 	ldrex	r3, [r3]
 80127a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80127b0:	637b      	str	r3, [r7, #52]	; 0x34
 80127b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	461a      	mov	r2, r3
 80127b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127ba:	61fb      	str	r3, [r7, #28]
 80127bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127be:	69b9      	ldr	r1, [r7, #24]
 80127c0:	69fa      	ldr	r2, [r7, #28]
 80127c2:	e841 2300 	strex	r3, r2, [r1]
 80127c6:	617b      	str	r3, [r7, #20]
   return(result);
 80127c8:	697b      	ldr	r3, [r7, #20]
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d1e6      	bne.n	801279c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80127ce:	e002      	b.n	80127d6 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 80127d0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80127d2:	f7f1 f819 	bl	8003808 <HAL_UART_TxCpltCallback>
}
 80127d6:	bf00      	nop
 80127d8:	3740      	adds	r7, #64	; 0x40
 80127da:	46bd      	mov	sp, r7
 80127dc:	bd80      	pop	{r7, pc}

080127de <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80127de:	b580      	push	{r7, lr}
 80127e0:	b084      	sub	sp, #16
 80127e2:	af00      	add	r7, sp, #0
 80127e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80127ea:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80127ec:	68f8      	ldr	r0, [r7, #12]
 80127ee:	f7fe ff21 	bl	8011634 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80127f2:	bf00      	nop
 80127f4:	3710      	adds	r7, #16
 80127f6:	46bd      	mov	sp, r7
 80127f8:	bd80      	pop	{r7, pc}

080127fa <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80127fa:	b580      	push	{r7, lr}
 80127fc:	b09c      	sub	sp, #112	; 0x70
 80127fe:	af00      	add	r7, sp, #0
 8012800:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012806:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	69db      	ldr	r3, [r3, #28]
 801280c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012810:	d071      	beq.n	80128f6 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8012812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012814:	2200      	movs	r2, #0
 8012816:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801281a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012822:	e853 3f00 	ldrex	r3, [r3]
 8012826:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012828:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801282a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801282e:	66bb      	str	r3, [r7, #104]	; 0x68
 8012830:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	461a      	mov	r2, r3
 8012836:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012838:	65bb      	str	r3, [r7, #88]	; 0x58
 801283a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801283c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801283e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012840:	e841 2300 	strex	r3, r2, [r1]
 8012844:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012846:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012848:	2b00      	cmp	r3, #0
 801284a:	d1e6      	bne.n	801281a <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801284c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	3308      	adds	r3, #8
 8012852:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012856:	e853 3f00 	ldrex	r3, [r3]
 801285a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801285c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801285e:	f023 0301 	bic.w	r3, r3, #1
 8012862:	667b      	str	r3, [r7, #100]	; 0x64
 8012864:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012866:	681b      	ldr	r3, [r3, #0]
 8012868:	3308      	adds	r3, #8
 801286a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801286c:	647a      	str	r2, [r7, #68]	; 0x44
 801286e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012870:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012872:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012874:	e841 2300 	strex	r3, r2, [r1]
 8012878:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801287a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801287c:	2b00      	cmp	r3, #0
 801287e:	d1e5      	bne.n	801284c <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	3308      	adds	r3, #8
 8012886:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801288a:	e853 3f00 	ldrex	r3, [r3]
 801288e:	623b      	str	r3, [r7, #32]
   return(result);
 8012890:	6a3b      	ldr	r3, [r7, #32]
 8012892:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012896:	663b      	str	r3, [r7, #96]	; 0x60
 8012898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	3308      	adds	r3, #8
 801289e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80128a0:	633a      	str	r2, [r7, #48]	; 0x30
 80128a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80128a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80128a8:	e841 2300 	strex	r3, r2, [r1]
 80128ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80128ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d1e5      	bne.n	8012880 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80128b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80128b6:	2220      	movs	r2, #32
 80128b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80128bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80128be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80128c0:	2b01      	cmp	r3, #1
 80128c2:	d118      	bne.n	80128f6 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80128c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80128c6:	681b      	ldr	r3, [r3, #0]
 80128c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128ca:	693b      	ldr	r3, [r7, #16]
 80128cc:	e853 3f00 	ldrex	r3, [r3]
 80128d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80128d2:	68fb      	ldr	r3, [r7, #12]
 80128d4:	f023 0310 	bic.w	r3, r3, #16
 80128d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80128da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	461a      	mov	r2, r3
 80128e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80128e2:	61fb      	str	r3, [r7, #28]
 80128e4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128e6:	69b9      	ldr	r1, [r7, #24]
 80128e8:	69fa      	ldr	r2, [r7, #28]
 80128ea:	e841 2300 	strex	r3, r2, [r1]
 80128ee:	617b      	str	r3, [r7, #20]
   return(result);
 80128f0:	697b      	ldr	r3, [r7, #20]
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d1e6      	bne.n	80128c4 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80128f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80128f8:	2200      	movs	r2, #0
 80128fa:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80128fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80128fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012900:	2b01      	cmp	r3, #1
 8012902:	d107      	bne.n	8012914 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012906:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801290a:	4619      	mov	r1, r3
 801290c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801290e:	f7fe fea5 	bl	801165c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8012912:	e002      	b.n	801291a <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8012914:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8012916:	f7f0 ff8f 	bl	8003838 <HAL_UART_RxCpltCallback>
}
 801291a:	bf00      	nop
 801291c:	3770      	adds	r7, #112	; 0x70
 801291e:	46bd      	mov	sp, r7
 8012920:	bd80      	pop	{r7, pc}

08012922 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012922:	b580      	push	{r7, lr}
 8012924:	b084      	sub	sp, #16
 8012926:	af00      	add	r7, sp, #0
 8012928:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801292e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	2201      	movs	r2, #1
 8012934:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801293a:	2b01      	cmp	r3, #1
 801293c:	d109      	bne.n	8012952 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012944:	085b      	lsrs	r3, r3, #1
 8012946:	b29b      	uxth	r3, r3
 8012948:	4619      	mov	r1, r3
 801294a:	68f8      	ldr	r0, [r7, #12]
 801294c:	f7fe fe86 	bl	801165c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8012950:	e002      	b.n	8012958 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8012952:	68f8      	ldr	r0, [r7, #12]
 8012954:	f7fe fe78 	bl	8011648 <HAL_UART_RxHalfCpltCallback>
}
 8012958:	bf00      	nop
 801295a:	3710      	adds	r7, #16
 801295c:	46bd      	mov	sp, r7
 801295e:	bd80      	pop	{r7, pc}

08012960 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8012960:	b580      	push	{r7, lr}
 8012962:	b086      	sub	sp, #24
 8012964:	af00      	add	r7, sp, #0
 8012966:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801296c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801296e:	697b      	ldr	r3, [r7, #20]
 8012970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012974:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8012976:	697b      	ldr	r3, [r7, #20]
 8012978:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801297c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801297e:	697b      	ldr	r3, [r7, #20]
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	689b      	ldr	r3, [r3, #8]
 8012984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012988:	2b80      	cmp	r3, #128	; 0x80
 801298a:	d109      	bne.n	80129a0 <UART_DMAError+0x40>
 801298c:	693b      	ldr	r3, [r7, #16]
 801298e:	2b21      	cmp	r3, #33	; 0x21
 8012990:	d106      	bne.n	80129a0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8012992:	697b      	ldr	r3, [r7, #20]
 8012994:	2200      	movs	r2, #0
 8012996:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 801299a:	6978      	ldr	r0, [r7, #20]
 801299c:	f7ff fe2c 	bl	80125f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80129a0:	697b      	ldr	r3, [r7, #20]
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	689b      	ldr	r3, [r3, #8]
 80129a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80129aa:	2b40      	cmp	r3, #64	; 0x40
 80129ac:	d109      	bne.n	80129c2 <UART_DMAError+0x62>
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	2b22      	cmp	r3, #34	; 0x22
 80129b2:	d106      	bne.n	80129c2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80129b4:	697b      	ldr	r3, [r7, #20]
 80129b6:	2200      	movs	r2, #0
 80129b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80129bc:	6978      	ldr	r0, [r7, #20]
 80129be:	f7ff fe5d 	bl	801267c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80129c2:	697b      	ldr	r3, [r7, #20]
 80129c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80129c8:	f043 0210 	orr.w	r2, r3, #16
 80129cc:	697b      	ldr	r3, [r7, #20]
 80129ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80129d2:	6978      	ldr	r0, [r7, #20]
 80129d4:	f7f0 ff60 	bl	8003898 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80129d8:	bf00      	nop
 80129da:	3718      	adds	r7, #24
 80129dc:	46bd      	mov	sp, r7
 80129de:	bd80      	pop	{r7, pc}

080129e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80129e0:	b580      	push	{r7, lr}
 80129e2:	b084      	sub	sp, #16
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80129ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	2200      	movs	r2, #0
 80129f2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80129f6:	68fb      	ldr	r3, [r7, #12]
 80129f8:	2200      	movs	r2, #0
 80129fa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80129fe:	68f8      	ldr	r0, [r7, #12]
 8012a00:	f7f0 ff4a 	bl	8003898 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012a04:	bf00      	nop
 8012a06:	3710      	adds	r7, #16
 8012a08:	46bd      	mov	sp, r7
 8012a0a:	bd80      	pop	{r7, pc}

08012a0c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012a0c:	b580      	push	{r7, lr}
 8012a0e:	b088      	sub	sp, #32
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a1a:	68fb      	ldr	r3, [r7, #12]
 8012a1c:	e853 3f00 	ldrex	r3, [r3]
 8012a20:	60bb      	str	r3, [r7, #8]
   return(result);
 8012a22:	68bb      	ldr	r3, [r7, #8]
 8012a24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012a28:	61fb      	str	r3, [r7, #28]
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	461a      	mov	r2, r3
 8012a30:	69fb      	ldr	r3, [r7, #28]
 8012a32:	61bb      	str	r3, [r7, #24]
 8012a34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a36:	6979      	ldr	r1, [r7, #20]
 8012a38:	69ba      	ldr	r2, [r7, #24]
 8012a3a:	e841 2300 	strex	r3, r2, [r1]
 8012a3e:	613b      	str	r3, [r7, #16]
   return(result);
 8012a40:	693b      	ldr	r3, [r7, #16]
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d1e6      	bne.n	8012a14 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	2220      	movs	r2, #32
 8012a4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	2200      	movs	r2, #0
 8012a52:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8012a54:	6878      	ldr	r0, [r7, #4]
 8012a56:	f7f0 fed7 	bl	8003808 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012a5a:	bf00      	nop
 8012a5c:	3720      	adds	r7, #32
 8012a5e:	46bd      	mov	sp, r7
 8012a60:	bd80      	pop	{r7, pc}

08012a62 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012a62:	b480      	push	{r7}
 8012a64:	b083      	sub	sp, #12
 8012a66:	af00      	add	r7, sp, #0
 8012a68:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012a6a:	bf00      	nop
 8012a6c:	370c      	adds	r7, #12
 8012a6e:	46bd      	mov	sp, r7
 8012a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a74:	4770      	bx	lr

08012a76 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012a76:	b480      	push	{r7}
 8012a78:	b083      	sub	sp, #12
 8012a7a:	af00      	add	r7, sp, #0
 8012a7c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012a7e:	bf00      	nop
 8012a80:	370c      	adds	r7, #12
 8012a82:	46bd      	mov	sp, r7
 8012a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a88:	4770      	bx	lr

08012a8a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8012a8a:	b480      	push	{r7}
 8012a8c:	b083      	sub	sp, #12
 8012a8e:	af00      	add	r7, sp, #0
 8012a90:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012a92:	bf00      	nop
 8012a94:	370c      	adds	r7, #12
 8012a96:	46bd      	mov	sp, r7
 8012a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a9c:	4770      	bx	lr

08012a9e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012a9e:	b480      	push	{r7}
 8012aa0:	b085      	sub	sp, #20
 8012aa2:	af00      	add	r7, sp, #0
 8012aa4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012aac:	2b01      	cmp	r3, #1
 8012aae:	d101      	bne.n	8012ab4 <HAL_UARTEx_DisableFifoMode+0x16>
 8012ab0:	2302      	movs	r3, #2
 8012ab2:	e027      	b.n	8012b04 <HAL_UARTEx_DisableFifoMode+0x66>
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	2201      	movs	r2, #1
 8012ab8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	2224      	movs	r2, #36	; 0x24
 8012ac0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	681b      	ldr	r3, [r3, #0]
 8012aca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	681a      	ldr	r2, [r3, #0]
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	f022 0201 	bic.w	r2, r2, #1
 8012ada:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012ae2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	2200      	movs	r2, #0
 8012ae8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	68fa      	ldr	r2, [r7, #12]
 8012af0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	2220      	movs	r2, #32
 8012af6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	2200      	movs	r2, #0
 8012afe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012b02:	2300      	movs	r3, #0
}
 8012b04:	4618      	mov	r0, r3
 8012b06:	3714      	adds	r7, #20
 8012b08:	46bd      	mov	sp, r7
 8012b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b0e:	4770      	bx	lr

08012b10 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012b10:	b580      	push	{r7, lr}
 8012b12:	b084      	sub	sp, #16
 8012b14:	af00      	add	r7, sp, #0
 8012b16:	6078      	str	r0, [r7, #4]
 8012b18:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012b20:	2b01      	cmp	r3, #1
 8012b22:	d101      	bne.n	8012b28 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012b24:	2302      	movs	r3, #2
 8012b26:	e02d      	b.n	8012b84 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	2201      	movs	r2, #1
 8012b2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	2224      	movs	r2, #36	; 0x24
 8012b34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	681a      	ldr	r2, [r3, #0]
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	f022 0201 	bic.w	r2, r2, #1
 8012b4e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	689b      	ldr	r3, [r3, #8]
 8012b56:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	683a      	ldr	r2, [r7, #0]
 8012b60:	430a      	orrs	r2, r1
 8012b62:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012b64:	6878      	ldr	r0, [r7, #4]
 8012b66:	f000 f84f 	bl	8012c08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	681b      	ldr	r3, [r3, #0]
 8012b6e:	68fa      	ldr	r2, [r7, #12]
 8012b70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	2220      	movs	r2, #32
 8012b76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	2200      	movs	r2, #0
 8012b7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012b82:	2300      	movs	r3, #0
}
 8012b84:	4618      	mov	r0, r3
 8012b86:	3710      	adds	r7, #16
 8012b88:	46bd      	mov	sp, r7
 8012b8a:	bd80      	pop	{r7, pc}

08012b8c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012b8c:	b580      	push	{r7, lr}
 8012b8e:	b084      	sub	sp, #16
 8012b90:	af00      	add	r7, sp, #0
 8012b92:	6078      	str	r0, [r7, #4]
 8012b94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012b9c:	2b01      	cmp	r3, #1
 8012b9e:	d101      	bne.n	8012ba4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012ba0:	2302      	movs	r3, #2
 8012ba2:	e02d      	b.n	8012c00 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	2201      	movs	r2, #1
 8012ba8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	2224      	movs	r2, #36	; 0x24
 8012bb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	681a      	ldr	r2, [r3, #0]
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	f022 0201 	bic.w	r2, r2, #1
 8012bca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	689b      	ldr	r3, [r3, #8]
 8012bd2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	683a      	ldr	r2, [r7, #0]
 8012bdc:	430a      	orrs	r2, r1
 8012bde:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012be0:	6878      	ldr	r0, [r7, #4]
 8012be2:	f000 f811 	bl	8012c08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	68fa      	ldr	r2, [r7, #12]
 8012bec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	2220      	movs	r2, #32
 8012bf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	2200      	movs	r2, #0
 8012bfa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012bfe:	2300      	movs	r3, #0
}
 8012c00:	4618      	mov	r0, r3
 8012c02:	3710      	adds	r7, #16
 8012c04:	46bd      	mov	sp, r7
 8012c06:	bd80      	pop	{r7, pc}

08012c08 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012c08:	b480      	push	{r7}
 8012c0a:	b085      	sub	sp, #20
 8012c0c:	af00      	add	r7, sp, #0
 8012c0e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d108      	bne.n	8012c2a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	2201      	movs	r2, #1
 8012c1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	2201      	movs	r2, #1
 8012c24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012c28:	e031      	b.n	8012c8e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012c2a:	2310      	movs	r3, #16
 8012c2c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012c2e:	2310      	movs	r3, #16
 8012c30:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	681b      	ldr	r3, [r3, #0]
 8012c36:	689b      	ldr	r3, [r3, #8]
 8012c38:	0e5b      	lsrs	r3, r3, #25
 8012c3a:	b2db      	uxtb	r3, r3
 8012c3c:	f003 0307 	and.w	r3, r3, #7
 8012c40:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	689b      	ldr	r3, [r3, #8]
 8012c48:	0f5b      	lsrs	r3, r3, #29
 8012c4a:	b2db      	uxtb	r3, r3
 8012c4c:	f003 0307 	and.w	r3, r3, #7
 8012c50:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012c52:	7bbb      	ldrb	r3, [r7, #14]
 8012c54:	7b3a      	ldrb	r2, [r7, #12]
 8012c56:	4911      	ldr	r1, [pc, #68]	; (8012c9c <UARTEx_SetNbDataToProcess+0x94>)
 8012c58:	5c8a      	ldrb	r2, [r1, r2]
 8012c5a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012c5e:	7b3a      	ldrb	r2, [r7, #12]
 8012c60:	490f      	ldr	r1, [pc, #60]	; (8012ca0 <UARTEx_SetNbDataToProcess+0x98>)
 8012c62:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012c64:	fb93 f3f2 	sdiv	r3, r3, r2
 8012c68:	b29a      	uxth	r2, r3
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012c70:	7bfb      	ldrb	r3, [r7, #15]
 8012c72:	7b7a      	ldrb	r2, [r7, #13]
 8012c74:	4909      	ldr	r1, [pc, #36]	; (8012c9c <UARTEx_SetNbDataToProcess+0x94>)
 8012c76:	5c8a      	ldrb	r2, [r1, r2]
 8012c78:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012c7c:	7b7a      	ldrb	r2, [r7, #13]
 8012c7e:	4908      	ldr	r1, [pc, #32]	; (8012ca0 <UARTEx_SetNbDataToProcess+0x98>)
 8012c80:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012c82:	fb93 f3f2 	sdiv	r3, r3, r2
 8012c86:	b29a      	uxth	r2, r3
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8012c8e:	bf00      	nop
 8012c90:	3714      	adds	r7, #20
 8012c92:	46bd      	mov	sp, r7
 8012c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c98:	4770      	bx	lr
 8012c9a:	bf00      	nop
 8012c9c:	08014388 	.word	0x08014388
 8012ca0:	08014390 	.word	0x08014390

08012ca4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8012ca4:	b084      	sub	sp, #16
 8012ca6:	b480      	push	{r7}
 8012ca8:	b085      	sub	sp, #20
 8012caa:	af00      	add	r7, sp, #0
 8012cac:	6078      	str	r0, [r7, #4]
 8012cae:	f107 001c 	add.w	r0, r7, #28
 8012cb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8012cb6:	2300      	movs	r3, #0
 8012cb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8012cba:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8012cbc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8012cbe:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8012cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8012cc2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8012cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8012cc6:	431a      	orrs	r2, r3
             Init.ClockDiv
 8012cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8012cca:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8012ccc:	68fa      	ldr	r2, [r7, #12]
 8012cce:	4313      	orrs	r3, r2
 8012cd0:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	685a      	ldr	r2, [r3, #4]
 8012cd6:	4b07      	ldr	r3, [pc, #28]	; (8012cf4 <SDMMC_Init+0x50>)
 8012cd8:	4013      	ands	r3, r2
 8012cda:	68fa      	ldr	r2, [r7, #12]
 8012cdc:	431a      	orrs	r2, r3
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8012ce2:	2300      	movs	r3, #0
}
 8012ce4:	4618      	mov	r0, r3
 8012ce6:	3714      	adds	r7, #20
 8012ce8:	46bd      	mov	sp, r7
 8012cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cee:	b004      	add	sp, #16
 8012cf0:	4770      	bx	lr
 8012cf2:	bf00      	nop
 8012cf4:	ffc02c00 	.word	0xffc02c00

08012cf8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8012cf8:	b480      	push	{r7}
 8012cfa:	b083      	sub	sp, #12
 8012cfc:	af00      	add	r7, sp, #0
 8012cfe:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8012d06:	4618      	mov	r0, r3
 8012d08:	370c      	adds	r7, #12
 8012d0a:	46bd      	mov	sp, r7
 8012d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d10:	4770      	bx	lr

08012d12 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8012d12:	b480      	push	{r7}
 8012d14:	b083      	sub	sp, #12
 8012d16:	af00      	add	r7, sp, #0
 8012d18:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	f043 0203 	orr.w	r2, r3, #3
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8012d26:	2300      	movs	r3, #0
}
 8012d28:	4618      	mov	r0, r3
 8012d2a:	370c      	adds	r7, #12
 8012d2c:	46bd      	mov	sp, r7
 8012d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d32:	4770      	bx	lr

08012d34 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8012d34:	b480      	push	{r7}
 8012d36:	b083      	sub	sp, #12
 8012d38:	af00      	add	r7, sp, #0
 8012d3a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	f003 0303 	and.w	r3, r3, #3
}
 8012d44:	4618      	mov	r0, r3
 8012d46:	370c      	adds	r7, #12
 8012d48:	46bd      	mov	sp, r7
 8012d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d4e:	4770      	bx	lr

08012d50 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8012d50:	b480      	push	{r7}
 8012d52:	b085      	sub	sp, #20
 8012d54:	af00      	add	r7, sp, #0
 8012d56:	6078      	str	r0, [r7, #4]
 8012d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012d5a:	2300      	movs	r3, #0
 8012d5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8012d5e:	683b      	ldr	r3, [r7, #0]
 8012d60:	681a      	ldr	r2, [r3, #0]
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012d66:	683b      	ldr	r3, [r7, #0]
 8012d68:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8012d6a:	683b      	ldr	r3, [r7, #0]
 8012d6c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012d6e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8012d70:	683b      	ldr	r3, [r7, #0]
 8012d72:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8012d74:	431a      	orrs	r2, r3
                       Command->CPSM);
 8012d76:	683b      	ldr	r3, [r7, #0]
 8012d78:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8012d7a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012d7c:	68fa      	ldr	r2, [r7, #12]
 8012d7e:	4313      	orrs	r3, r2
 8012d80:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	68da      	ldr	r2, [r3, #12]
 8012d86:	4b06      	ldr	r3, [pc, #24]	; (8012da0 <SDMMC_SendCommand+0x50>)
 8012d88:	4013      	ands	r3, r2
 8012d8a:	68fa      	ldr	r2, [r7, #12]
 8012d8c:	431a      	orrs	r2, r3
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012d92:	2300      	movs	r3, #0
}
 8012d94:	4618      	mov	r0, r3
 8012d96:	3714      	adds	r7, #20
 8012d98:	46bd      	mov	sp, r7
 8012d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d9e:	4770      	bx	lr
 8012da0:	fffee0c0 	.word	0xfffee0c0

08012da4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8012da4:	b480      	push	{r7}
 8012da6:	b083      	sub	sp, #12
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	691b      	ldr	r3, [r3, #16]
 8012db0:	b2db      	uxtb	r3, r3
}
 8012db2:	4618      	mov	r0, r3
 8012db4:	370c      	adds	r7, #12
 8012db6:	46bd      	mov	sp, r7
 8012db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dbc:	4770      	bx	lr

08012dbe <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8012dbe:	b480      	push	{r7}
 8012dc0:	b085      	sub	sp, #20
 8012dc2:	af00      	add	r7, sp, #0
 8012dc4:	6078      	str	r0, [r7, #4]
 8012dc6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	3314      	adds	r3, #20
 8012dcc:	461a      	mov	r2, r3
 8012dce:	683b      	ldr	r3, [r7, #0]
 8012dd0:	4413      	add	r3, r2
 8012dd2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	681b      	ldr	r3, [r3, #0]
}
 8012dd8:	4618      	mov	r0, r3
 8012dda:	3714      	adds	r7, #20
 8012ddc:	46bd      	mov	sp, r7
 8012dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012de2:	4770      	bx	lr

08012de4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8012de4:	b480      	push	{r7}
 8012de6:	b085      	sub	sp, #20
 8012de8:	af00      	add	r7, sp, #0
 8012dea:	6078      	str	r0, [r7, #4]
 8012dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012dee:	2300      	movs	r3, #0
 8012df0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8012df2:	683b      	ldr	r3, [r7, #0]
 8012df4:	681a      	ldr	r2, [r3, #0]
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8012dfa:	683b      	ldr	r3, [r7, #0]
 8012dfc:	685a      	ldr	r2, [r3, #4]
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012e02:	683b      	ldr	r3, [r7, #0]
 8012e04:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8012e06:	683b      	ldr	r3, [r7, #0]
 8012e08:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012e0a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8012e0c:	683b      	ldr	r3, [r7, #0]
 8012e0e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8012e10:	431a      	orrs	r2, r3
                       Data->DPSM);
 8012e12:	683b      	ldr	r3, [r7, #0]
 8012e14:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8012e16:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012e18:	68fa      	ldr	r2, [r7, #12]
 8012e1a:	4313      	orrs	r3, r2
 8012e1c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e22:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	431a      	orrs	r2, r3
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8012e2e:	2300      	movs	r3, #0

}
 8012e30:	4618      	mov	r0, r3
 8012e32:	3714      	adds	r7, #20
 8012e34:	46bd      	mov	sp, r7
 8012e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e3a:	4770      	bx	lr

08012e3c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8012e3c:	b580      	push	{r7, lr}
 8012e3e:	b088      	sub	sp, #32
 8012e40:	af00      	add	r7, sp, #0
 8012e42:	6078      	str	r0, [r7, #4]
 8012e44:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8012e46:	683b      	ldr	r3, [r7, #0]
 8012e48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8012e4a:	2310      	movs	r3, #16
 8012e4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012e4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012e52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012e54:	2300      	movs	r3, #0
 8012e56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012e58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012e5c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012e5e:	f107 0308 	add.w	r3, r7, #8
 8012e62:	4619      	mov	r1, r3
 8012e64:	6878      	ldr	r0, [r7, #4]
 8012e66:	f7ff ff73 	bl	8012d50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8012e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8012e6e:	2110      	movs	r1, #16
 8012e70:	6878      	ldr	r0, [r7, #4]
 8012e72:	f000 f995 	bl	80131a0 <SDMMC_GetCmdResp1>
 8012e76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012e78:	69fb      	ldr	r3, [r7, #28]
}
 8012e7a:	4618      	mov	r0, r3
 8012e7c:	3720      	adds	r7, #32
 8012e7e:	46bd      	mov	sp, r7
 8012e80:	bd80      	pop	{r7, pc}

08012e82 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8012e82:	b580      	push	{r7, lr}
 8012e84:	b088      	sub	sp, #32
 8012e86:	af00      	add	r7, sp, #0
 8012e88:	6078      	str	r0, [r7, #4]
 8012e8a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8012e8c:	683b      	ldr	r3, [r7, #0]
 8012e8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8012e90:	2307      	movs	r3, #7
 8012e92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012e94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012e98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012e9a:	2300      	movs	r3, #0
 8012e9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012e9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012ea2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012ea4:	f107 0308 	add.w	r3, r7, #8
 8012ea8:	4619      	mov	r1, r3
 8012eaa:	6878      	ldr	r0, [r7, #4]
 8012eac:	f7ff ff50 	bl	8012d50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8012eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8012eb4:	2107      	movs	r1, #7
 8012eb6:	6878      	ldr	r0, [r7, #4]
 8012eb8:	f000 f972 	bl	80131a0 <SDMMC_GetCmdResp1>
 8012ebc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012ebe:	69fb      	ldr	r3, [r7, #28]
}
 8012ec0:	4618      	mov	r0, r3
 8012ec2:	3720      	adds	r7, #32
 8012ec4:	46bd      	mov	sp, r7
 8012ec6:	bd80      	pop	{r7, pc}

08012ec8 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8012ec8:	b580      	push	{r7, lr}
 8012eca:	b088      	sub	sp, #32
 8012ecc:	af00      	add	r7, sp, #0
 8012ece:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8012ed0:	2300      	movs	r3, #0
 8012ed2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8012ed4:	2300      	movs	r3, #0
 8012ed6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8012ed8:	2300      	movs	r3, #0
 8012eda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012edc:	2300      	movs	r3, #0
 8012ede:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012ee0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012ee4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012ee6:	f107 0308 	add.w	r3, r7, #8
 8012eea:	4619      	mov	r1, r3
 8012eec:	6878      	ldr	r0, [r7, #4]
 8012eee:	f7ff ff2f 	bl	8012d50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8012ef2:	6878      	ldr	r0, [r7, #4]
 8012ef4:	f000 fb96 	bl	8013624 <SDMMC_GetCmdError>
 8012ef8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012efa:	69fb      	ldr	r3, [r7, #28]
}
 8012efc:	4618      	mov	r0, r3
 8012efe:	3720      	adds	r7, #32
 8012f00:	46bd      	mov	sp, r7
 8012f02:	bd80      	pop	{r7, pc}

08012f04 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8012f04:	b580      	push	{r7, lr}
 8012f06:	b088      	sub	sp, #32
 8012f08:	af00      	add	r7, sp, #0
 8012f0a:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8012f0c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8012f10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8012f12:	2308      	movs	r3, #8
 8012f14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012f16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012f1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012f1c:	2300      	movs	r3, #0
 8012f1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012f20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012f24:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012f26:	f107 0308 	add.w	r3, r7, #8
 8012f2a:	4619      	mov	r1, r3
 8012f2c:	6878      	ldr	r0, [r7, #4]
 8012f2e:	f7ff ff0f 	bl	8012d50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8012f32:	6878      	ldr	r0, [r7, #4]
 8012f34:	f000 fb28 	bl	8013588 <SDMMC_GetCmdResp7>
 8012f38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012f3a:	69fb      	ldr	r3, [r7, #28]
}
 8012f3c:	4618      	mov	r0, r3
 8012f3e:	3720      	adds	r7, #32
 8012f40:	46bd      	mov	sp, r7
 8012f42:	bd80      	pop	{r7, pc}

08012f44 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012f44:	b580      	push	{r7, lr}
 8012f46:	b088      	sub	sp, #32
 8012f48:	af00      	add	r7, sp, #0
 8012f4a:	6078      	str	r0, [r7, #4]
 8012f4c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8012f4e:	683b      	ldr	r3, [r7, #0]
 8012f50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8012f52:	2337      	movs	r3, #55	; 0x37
 8012f54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012f56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012f5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012f5c:	2300      	movs	r3, #0
 8012f5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012f60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012f64:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012f66:	f107 0308 	add.w	r3, r7, #8
 8012f6a:	4619      	mov	r1, r3
 8012f6c:	6878      	ldr	r0, [r7, #4]
 8012f6e:	f7ff feef 	bl	8012d50 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8012f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8012f76:	2137      	movs	r1, #55	; 0x37
 8012f78:	6878      	ldr	r0, [r7, #4]
 8012f7a:	f000 f911 	bl	80131a0 <SDMMC_GetCmdResp1>
 8012f7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012f80:	69fb      	ldr	r3, [r7, #28]
}
 8012f82:	4618      	mov	r0, r3
 8012f84:	3720      	adds	r7, #32
 8012f86:	46bd      	mov	sp, r7
 8012f88:	bd80      	pop	{r7, pc}

08012f8a <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012f8a:	b580      	push	{r7, lr}
 8012f8c:	b088      	sub	sp, #32
 8012f8e:	af00      	add	r7, sp, #0
 8012f90:	6078      	str	r0, [r7, #4]
 8012f92:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8012f94:	683b      	ldr	r3, [r7, #0]
 8012f96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8012f98:	2329      	movs	r3, #41	; 0x29
 8012f9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012f9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012fa0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012fa2:	2300      	movs	r3, #0
 8012fa4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012faa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012fac:	f107 0308 	add.w	r3, r7, #8
 8012fb0:	4619      	mov	r1, r3
 8012fb2:	6878      	ldr	r0, [r7, #4]
 8012fb4:	f7ff fecc 	bl	8012d50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8012fb8:	6878      	ldr	r0, [r7, #4]
 8012fba:	f000 fa2d 	bl	8013418 <SDMMC_GetCmdResp3>
 8012fbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012fc0:	69fb      	ldr	r3, [r7, #28]
}
 8012fc2:	4618      	mov	r0, r3
 8012fc4:	3720      	adds	r7, #32
 8012fc6:	46bd      	mov	sp, r7
 8012fc8:	bd80      	pop	{r7, pc}

08012fca <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8012fca:	b580      	push	{r7, lr}
 8012fcc:	b088      	sub	sp, #32
 8012fce:	af00      	add	r7, sp, #0
 8012fd0:	6078      	str	r0, [r7, #4]
 8012fd2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8012fd4:	683b      	ldr	r3, [r7, #0]
 8012fd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8012fd8:	2306      	movs	r3, #6
 8012fda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012fdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012fe0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012fe6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012fea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012fec:	f107 0308 	add.w	r3, r7, #8
 8012ff0:	4619      	mov	r1, r3
 8012ff2:	6878      	ldr	r0, [r7, #4]
 8012ff4:	f7ff feac 	bl	8012d50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8012ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8012ffc:	2106      	movs	r1, #6
 8012ffe:	6878      	ldr	r0, [r7, #4]
 8013000:	f000 f8ce 	bl	80131a0 <SDMMC_GetCmdResp1>
 8013004:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013006:	69fb      	ldr	r3, [r7, #28]
}
 8013008:	4618      	mov	r0, r3
 801300a:	3720      	adds	r7, #32
 801300c:	46bd      	mov	sp, r7
 801300e:	bd80      	pop	{r7, pc}

08013010 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8013010:	b580      	push	{r7, lr}
 8013012:	b088      	sub	sp, #32
 8013014:	af00      	add	r7, sp, #0
 8013016:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8013018:	2300      	movs	r3, #0
 801301a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801301c:	2333      	movs	r3, #51	; 0x33
 801301e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013020:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013024:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013026:	2300      	movs	r3, #0
 8013028:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801302a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801302e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013030:	f107 0308 	add.w	r3, r7, #8
 8013034:	4619      	mov	r1, r3
 8013036:	6878      	ldr	r0, [r7, #4]
 8013038:	f7ff fe8a 	bl	8012d50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 801303c:	f241 3288 	movw	r2, #5000	; 0x1388
 8013040:	2133      	movs	r1, #51	; 0x33
 8013042:	6878      	ldr	r0, [r7, #4]
 8013044:	f000 f8ac 	bl	80131a0 <SDMMC_GetCmdResp1>
 8013048:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801304a:	69fb      	ldr	r3, [r7, #28]
}
 801304c:	4618      	mov	r0, r3
 801304e:	3720      	adds	r7, #32
 8013050:	46bd      	mov	sp, r7
 8013052:	bd80      	pop	{r7, pc}

08013054 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8013054:	b580      	push	{r7, lr}
 8013056:	b088      	sub	sp, #32
 8013058:	af00      	add	r7, sp, #0
 801305a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 801305c:	2300      	movs	r3, #0
 801305e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8013060:	2302      	movs	r3, #2
 8013062:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8013064:	f44f 7340 	mov.w	r3, #768	; 0x300
 8013068:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801306a:	2300      	movs	r3, #0
 801306c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801306e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013072:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013074:	f107 0308 	add.w	r3, r7, #8
 8013078:	4619      	mov	r1, r3
 801307a:	6878      	ldr	r0, [r7, #4]
 801307c:	f7ff fe68 	bl	8012d50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8013080:	6878      	ldr	r0, [r7, #4]
 8013082:	f000 f97f 	bl	8013384 <SDMMC_GetCmdResp2>
 8013086:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013088:	69fb      	ldr	r3, [r7, #28]
}
 801308a:	4618      	mov	r0, r3
 801308c:	3720      	adds	r7, #32
 801308e:	46bd      	mov	sp, r7
 8013090:	bd80      	pop	{r7, pc}

08013092 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8013092:	b580      	push	{r7, lr}
 8013094:	b088      	sub	sp, #32
 8013096:	af00      	add	r7, sp, #0
 8013098:	6078      	str	r0, [r7, #4]
 801309a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801309c:	683b      	ldr	r3, [r7, #0]
 801309e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80130a0:	2309      	movs	r3, #9
 80130a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80130a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80130a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80130aa:	2300      	movs	r3, #0
 80130ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80130ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80130b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80130b4:	f107 0308 	add.w	r3, r7, #8
 80130b8:	4619      	mov	r1, r3
 80130ba:	6878      	ldr	r0, [r7, #4]
 80130bc:	f7ff fe48 	bl	8012d50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80130c0:	6878      	ldr	r0, [r7, #4]
 80130c2:	f000 f95f 	bl	8013384 <SDMMC_GetCmdResp2>
 80130c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80130c8:	69fb      	ldr	r3, [r7, #28]
}
 80130ca:	4618      	mov	r0, r3
 80130cc:	3720      	adds	r7, #32
 80130ce:	46bd      	mov	sp, r7
 80130d0:	bd80      	pop	{r7, pc}

080130d2 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80130d2:	b580      	push	{r7, lr}
 80130d4:	b088      	sub	sp, #32
 80130d6:	af00      	add	r7, sp, #0
 80130d8:	6078      	str	r0, [r7, #4]
 80130da:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80130dc:	2300      	movs	r3, #0
 80130de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80130e0:	2303      	movs	r3, #3
 80130e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80130e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80130e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80130ea:	2300      	movs	r3, #0
 80130ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80130ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80130f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80130f4:	f107 0308 	add.w	r3, r7, #8
 80130f8:	4619      	mov	r1, r3
 80130fa:	6878      	ldr	r0, [r7, #4]
 80130fc:	f7ff fe28 	bl	8012d50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8013100:	683a      	ldr	r2, [r7, #0]
 8013102:	2103      	movs	r1, #3
 8013104:	6878      	ldr	r0, [r7, #4]
 8013106:	f000 f9c7 	bl	8013498 <SDMMC_GetCmdResp6>
 801310a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801310c:	69fb      	ldr	r3, [r7, #28]
}
 801310e:	4618      	mov	r0, r3
 8013110:	3720      	adds	r7, #32
 8013112:	46bd      	mov	sp, r7
 8013114:	bd80      	pop	{r7, pc}

08013116 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8013116:	b580      	push	{r7, lr}
 8013118:	b088      	sub	sp, #32
 801311a:	af00      	add	r7, sp, #0
 801311c:	6078      	str	r0, [r7, #4]
 801311e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8013120:	683b      	ldr	r3, [r7, #0]
 8013122:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8013124:	230d      	movs	r3, #13
 8013126:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013128:	f44f 7380 	mov.w	r3, #256	; 0x100
 801312c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801312e:	2300      	movs	r3, #0
 8013130:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013132:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013136:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013138:	f107 0308 	add.w	r3, r7, #8
 801313c:	4619      	mov	r1, r3
 801313e:	6878      	ldr	r0, [r7, #4]
 8013140:	f7ff fe06 	bl	8012d50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8013144:	f241 3288 	movw	r2, #5000	; 0x1388
 8013148:	210d      	movs	r1, #13
 801314a:	6878      	ldr	r0, [r7, #4]
 801314c:	f000 f828 	bl	80131a0 <SDMMC_GetCmdResp1>
 8013150:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013152:	69fb      	ldr	r3, [r7, #28]
}
 8013154:	4618      	mov	r0, r3
 8013156:	3720      	adds	r7, #32
 8013158:	46bd      	mov	sp, r7
 801315a:	bd80      	pop	{r7, pc}

0801315c <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 801315c:	b580      	push	{r7, lr}
 801315e:	b088      	sub	sp, #32
 8013160:	af00      	add	r7, sp, #0
 8013162:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8013164:	2300      	movs	r3, #0
 8013166:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8013168:	230d      	movs	r3, #13
 801316a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801316c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013170:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013172:	2300      	movs	r3, #0
 8013174:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013176:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801317a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801317c:	f107 0308 	add.w	r3, r7, #8
 8013180:	4619      	mov	r1, r3
 8013182:	6878      	ldr	r0, [r7, #4]
 8013184:	f7ff fde4 	bl	8012d50 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8013188:	f241 3288 	movw	r2, #5000	; 0x1388
 801318c:	210d      	movs	r1, #13
 801318e:	6878      	ldr	r0, [r7, #4]
 8013190:	f000 f806 	bl	80131a0 <SDMMC_GetCmdResp1>
 8013194:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013196:	69fb      	ldr	r3, [r7, #28]
}
 8013198:	4618      	mov	r0, r3
 801319a:	3720      	adds	r7, #32
 801319c:	46bd      	mov	sp, r7
 801319e:	bd80      	pop	{r7, pc}

080131a0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80131a0:	b580      	push	{r7, lr}
 80131a2:	b088      	sub	sp, #32
 80131a4:	af00      	add	r7, sp, #0
 80131a6:	60f8      	str	r0, [r7, #12]
 80131a8:	460b      	mov	r3, r1
 80131aa:	607a      	str	r2, [r7, #4]
 80131ac:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80131ae:	4b70      	ldr	r3, [pc, #448]	; (8013370 <SDMMC_GetCmdResp1+0x1d0>)
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	4a70      	ldr	r2, [pc, #448]	; (8013374 <SDMMC_GetCmdResp1+0x1d4>)
 80131b4:	fba2 2303 	umull	r2, r3, r2, r3
 80131b8:	0a5a      	lsrs	r2, r3, #9
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	fb02 f303 	mul.w	r3, r2, r3
 80131c0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80131c2:	69fb      	ldr	r3, [r7, #28]
 80131c4:	1e5a      	subs	r2, r3, #1
 80131c6:	61fa      	str	r2, [r7, #28]
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d102      	bne.n	80131d2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80131cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80131d0:	e0c9      	b.n	8013366 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80131d6:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80131d8:	69ba      	ldr	r2, [r7, #24]
 80131da:	4b67      	ldr	r3, [pc, #412]	; (8013378 <SDMMC_GetCmdResp1+0x1d8>)
 80131dc:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d0ef      	beq.n	80131c2 <SDMMC_GetCmdResp1+0x22>
 80131e2:	69bb      	ldr	r3, [r7, #24]
 80131e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d1ea      	bne.n	80131c2 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80131f0:	f003 0304 	and.w	r3, r3, #4
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d004      	beq.n	8013202 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	2204      	movs	r2, #4
 80131fc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80131fe:	2304      	movs	r3, #4
 8013200:	e0b1      	b.n	8013366 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013202:	68fb      	ldr	r3, [r7, #12]
 8013204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013206:	f003 0301 	and.w	r3, r3, #1
 801320a:	2b00      	cmp	r3, #0
 801320c:	d004      	beq.n	8013218 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801320e:	68fb      	ldr	r3, [r7, #12]
 8013210:	2201      	movs	r2, #1
 8013212:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013214:	2301      	movs	r3, #1
 8013216:	e0a6      	b.n	8013366 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	4a58      	ldr	r2, [pc, #352]	; (801337c <SDMMC_GetCmdResp1+0x1dc>)
 801321c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801321e:	68f8      	ldr	r0, [r7, #12]
 8013220:	f7ff fdc0 	bl	8012da4 <SDMMC_GetCommandResponse>
 8013224:	4603      	mov	r3, r0
 8013226:	461a      	mov	r2, r3
 8013228:	7afb      	ldrb	r3, [r7, #11]
 801322a:	4293      	cmp	r3, r2
 801322c:	d001      	beq.n	8013232 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801322e:	2301      	movs	r3, #1
 8013230:	e099      	b.n	8013366 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8013232:	2100      	movs	r1, #0
 8013234:	68f8      	ldr	r0, [r7, #12]
 8013236:	f7ff fdc2 	bl	8012dbe <SDMMC_GetResponse>
 801323a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 801323c:	697a      	ldr	r2, [r7, #20]
 801323e:	4b50      	ldr	r3, [pc, #320]	; (8013380 <SDMMC_GetCmdResp1+0x1e0>)
 8013240:	4013      	ands	r3, r2
 8013242:	2b00      	cmp	r3, #0
 8013244:	d101      	bne.n	801324a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8013246:	2300      	movs	r3, #0
 8013248:	e08d      	b.n	8013366 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801324a:	697b      	ldr	r3, [r7, #20]
 801324c:	2b00      	cmp	r3, #0
 801324e:	da02      	bge.n	8013256 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8013250:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8013254:	e087      	b.n	8013366 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8013256:	697b      	ldr	r3, [r7, #20]
 8013258:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801325c:	2b00      	cmp	r3, #0
 801325e:	d001      	beq.n	8013264 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8013260:	2340      	movs	r3, #64	; 0x40
 8013262:	e080      	b.n	8013366 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8013264:	697b      	ldr	r3, [r7, #20]
 8013266:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801326a:	2b00      	cmp	r3, #0
 801326c:	d001      	beq.n	8013272 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801326e:	2380      	movs	r3, #128	; 0x80
 8013270:	e079      	b.n	8013366 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8013272:	697b      	ldr	r3, [r7, #20]
 8013274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013278:	2b00      	cmp	r3, #0
 801327a:	d002      	beq.n	8013282 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 801327c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013280:	e071      	b.n	8013366 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8013282:	697b      	ldr	r3, [r7, #20]
 8013284:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8013288:	2b00      	cmp	r3, #0
 801328a:	d002      	beq.n	8013292 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 801328c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013290:	e069      	b.n	8013366 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8013292:	697b      	ldr	r3, [r7, #20]
 8013294:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013298:	2b00      	cmp	r3, #0
 801329a:	d002      	beq.n	80132a2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 801329c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80132a0:	e061      	b.n	8013366 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80132a2:	697b      	ldr	r3, [r7, #20]
 80132a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d002      	beq.n	80132b2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80132ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80132b0:	e059      	b.n	8013366 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80132b2:	697b      	ldr	r3, [r7, #20]
 80132b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d002      	beq.n	80132c2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80132bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80132c0:	e051      	b.n	8013366 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80132c2:	697b      	ldr	r3, [r7, #20]
 80132c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d002      	beq.n	80132d2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80132cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80132d0:	e049      	b.n	8013366 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80132d2:	697b      	ldr	r3, [r7, #20]
 80132d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d002      	beq.n	80132e2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80132dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80132e0:	e041      	b.n	8013366 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80132e2:	697b      	ldr	r3, [r7, #20]
 80132e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d002      	beq.n	80132f2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80132ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80132f0:	e039      	b.n	8013366 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80132f2:	697b      	ldr	r3, [r7, #20]
 80132f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d002      	beq.n	8013302 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80132fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013300:	e031      	b.n	8013366 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8013302:	697b      	ldr	r3, [r7, #20]
 8013304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013308:	2b00      	cmp	r3, #0
 801330a:	d002      	beq.n	8013312 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 801330c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8013310:	e029      	b.n	8013366 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8013312:	697b      	ldr	r3, [r7, #20]
 8013314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013318:	2b00      	cmp	r3, #0
 801331a:	d002      	beq.n	8013322 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 801331c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8013320:	e021      	b.n	8013366 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8013322:	697b      	ldr	r3, [r7, #20]
 8013324:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013328:	2b00      	cmp	r3, #0
 801332a:	d002      	beq.n	8013332 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 801332c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8013330:	e019      	b.n	8013366 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8013332:	697b      	ldr	r3, [r7, #20]
 8013334:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013338:	2b00      	cmp	r3, #0
 801333a:	d002      	beq.n	8013342 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 801333c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8013340:	e011      	b.n	8013366 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8013342:	697b      	ldr	r3, [r7, #20]
 8013344:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013348:	2b00      	cmp	r3, #0
 801334a:	d002      	beq.n	8013352 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 801334c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8013350:	e009      	b.n	8013366 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8013352:	697b      	ldr	r3, [r7, #20]
 8013354:	f003 0308 	and.w	r3, r3, #8
 8013358:	2b00      	cmp	r3, #0
 801335a:	d002      	beq.n	8013362 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 801335c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8013360:	e001      	b.n	8013366 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8013362:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8013366:	4618      	mov	r0, r3
 8013368:	3720      	adds	r7, #32
 801336a:	46bd      	mov	sp, r7
 801336c:	bd80      	pop	{r7, pc}
 801336e:	bf00      	nop
 8013370:	24000000 	.word	0x24000000
 8013374:	10624dd3 	.word	0x10624dd3
 8013378:	00200045 	.word	0x00200045
 801337c:	002000c5 	.word	0x002000c5
 8013380:	fdffe008 	.word	0xfdffe008

08013384 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8013384:	b480      	push	{r7}
 8013386:	b085      	sub	sp, #20
 8013388:	af00      	add	r7, sp, #0
 801338a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801338c:	4b1f      	ldr	r3, [pc, #124]	; (801340c <SDMMC_GetCmdResp2+0x88>)
 801338e:	681b      	ldr	r3, [r3, #0]
 8013390:	4a1f      	ldr	r2, [pc, #124]	; (8013410 <SDMMC_GetCmdResp2+0x8c>)
 8013392:	fba2 2303 	umull	r2, r3, r2, r3
 8013396:	0a5b      	lsrs	r3, r3, #9
 8013398:	f241 3288 	movw	r2, #5000	; 0x1388
 801339c:	fb02 f303 	mul.w	r3, r2, r3
 80133a0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80133a2:	68fb      	ldr	r3, [r7, #12]
 80133a4:	1e5a      	subs	r2, r3, #1
 80133a6:	60fa      	str	r2, [r7, #12]
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d102      	bne.n	80133b2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80133ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80133b0:	e026      	b.n	8013400 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80133b6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80133b8:	68bb      	ldr	r3, [r7, #8]
 80133ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d0ef      	beq.n	80133a2 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80133c2:	68bb      	ldr	r3, [r7, #8]
 80133c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d1ea      	bne.n	80133a2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80133d0:	f003 0304 	and.w	r3, r3, #4
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d004      	beq.n	80133e2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	2204      	movs	r2, #4
 80133dc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80133de:	2304      	movs	r3, #4
 80133e0:	e00e      	b.n	8013400 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80133e6:	f003 0301 	and.w	r3, r3, #1
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d004      	beq.n	80133f8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	2201      	movs	r2, #1
 80133f2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80133f4:	2301      	movs	r3, #1
 80133f6:	e003      	b.n	8013400 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	4a06      	ldr	r2, [pc, #24]	; (8013414 <SDMMC_GetCmdResp2+0x90>)
 80133fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80133fe:	2300      	movs	r3, #0
}
 8013400:	4618      	mov	r0, r3
 8013402:	3714      	adds	r7, #20
 8013404:	46bd      	mov	sp, r7
 8013406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801340a:	4770      	bx	lr
 801340c:	24000000 	.word	0x24000000
 8013410:	10624dd3 	.word	0x10624dd3
 8013414:	002000c5 	.word	0x002000c5

08013418 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8013418:	b480      	push	{r7}
 801341a:	b085      	sub	sp, #20
 801341c:	af00      	add	r7, sp, #0
 801341e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013420:	4b1a      	ldr	r3, [pc, #104]	; (801348c <SDMMC_GetCmdResp3+0x74>)
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	4a1a      	ldr	r2, [pc, #104]	; (8013490 <SDMMC_GetCmdResp3+0x78>)
 8013426:	fba2 2303 	umull	r2, r3, r2, r3
 801342a:	0a5b      	lsrs	r3, r3, #9
 801342c:	f241 3288 	movw	r2, #5000	; 0x1388
 8013430:	fb02 f303 	mul.w	r3, r2, r3
 8013434:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	1e5a      	subs	r2, r3, #1
 801343a:	60fa      	str	r2, [r7, #12]
 801343c:	2b00      	cmp	r3, #0
 801343e:	d102      	bne.n	8013446 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013440:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013444:	e01b      	b.n	801347e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801344a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801344c:	68bb      	ldr	r3, [r7, #8]
 801344e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8013452:	2b00      	cmp	r3, #0
 8013454:	d0ef      	beq.n	8013436 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013456:	68bb      	ldr	r3, [r7, #8]
 8013458:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801345c:	2b00      	cmp	r3, #0
 801345e:	d1ea      	bne.n	8013436 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013464:	f003 0304 	and.w	r3, r3, #4
 8013468:	2b00      	cmp	r3, #0
 801346a:	d004      	beq.n	8013476 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	2204      	movs	r2, #4
 8013470:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013472:	2304      	movs	r3, #4
 8013474:	e003      	b.n	801347e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	4a06      	ldr	r2, [pc, #24]	; (8013494 <SDMMC_GetCmdResp3+0x7c>)
 801347a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801347c:	2300      	movs	r3, #0
}
 801347e:	4618      	mov	r0, r3
 8013480:	3714      	adds	r7, #20
 8013482:	46bd      	mov	sp, r7
 8013484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013488:	4770      	bx	lr
 801348a:	bf00      	nop
 801348c:	24000000 	.word	0x24000000
 8013490:	10624dd3 	.word	0x10624dd3
 8013494:	002000c5 	.word	0x002000c5

08013498 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8013498:	b580      	push	{r7, lr}
 801349a:	b088      	sub	sp, #32
 801349c:	af00      	add	r7, sp, #0
 801349e:	60f8      	str	r0, [r7, #12]
 80134a0:	460b      	mov	r3, r1
 80134a2:	607a      	str	r2, [r7, #4]
 80134a4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80134a6:	4b35      	ldr	r3, [pc, #212]	; (801357c <SDMMC_GetCmdResp6+0xe4>)
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	4a35      	ldr	r2, [pc, #212]	; (8013580 <SDMMC_GetCmdResp6+0xe8>)
 80134ac:	fba2 2303 	umull	r2, r3, r2, r3
 80134b0:	0a5b      	lsrs	r3, r3, #9
 80134b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80134b6:	fb02 f303 	mul.w	r3, r2, r3
 80134ba:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80134bc:	69fb      	ldr	r3, [r7, #28]
 80134be:	1e5a      	subs	r2, r3, #1
 80134c0:	61fa      	str	r2, [r7, #28]
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d102      	bne.n	80134cc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80134c6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80134ca:	e052      	b.n	8013572 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80134d0:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80134d2:	69bb      	ldr	r3, [r7, #24]
 80134d4:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d0ef      	beq.n	80134bc <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80134dc:	69bb      	ldr	r3, [r7, #24]
 80134de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d1ea      	bne.n	80134bc <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80134e6:	68fb      	ldr	r3, [r7, #12]
 80134e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80134ea:	f003 0304 	and.w	r3, r3, #4
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d004      	beq.n	80134fc <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	2204      	movs	r2, #4
 80134f6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80134f8:	2304      	movs	r3, #4
 80134fa:	e03a      	b.n	8013572 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80134fc:	68fb      	ldr	r3, [r7, #12]
 80134fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013500:	f003 0301 	and.w	r3, r3, #1
 8013504:	2b00      	cmp	r3, #0
 8013506:	d004      	beq.n	8013512 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	2201      	movs	r2, #1
 801350c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801350e:	2301      	movs	r3, #1
 8013510:	e02f      	b.n	8013572 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8013512:	68f8      	ldr	r0, [r7, #12]
 8013514:	f7ff fc46 	bl	8012da4 <SDMMC_GetCommandResponse>
 8013518:	4603      	mov	r3, r0
 801351a:	461a      	mov	r2, r3
 801351c:	7afb      	ldrb	r3, [r7, #11]
 801351e:	4293      	cmp	r3, r2
 8013520:	d001      	beq.n	8013526 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013522:	2301      	movs	r3, #1
 8013524:	e025      	b.n	8013572 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	4a16      	ldr	r2, [pc, #88]	; (8013584 <SDMMC_GetCmdResp6+0xec>)
 801352a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801352c:	2100      	movs	r1, #0
 801352e:	68f8      	ldr	r0, [r7, #12]
 8013530:	f7ff fc45 	bl	8012dbe <SDMMC_GetResponse>
 8013534:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8013536:	697b      	ldr	r3, [r7, #20]
 8013538:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 801353c:	2b00      	cmp	r3, #0
 801353e:	d106      	bne.n	801354e <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8013540:	697b      	ldr	r3, [r7, #20]
 8013542:	0c1b      	lsrs	r3, r3, #16
 8013544:	b29a      	uxth	r2, r3
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 801354a:	2300      	movs	r3, #0
 801354c:	e011      	b.n	8013572 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801354e:	697b      	ldr	r3, [r7, #20]
 8013550:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013554:	2b00      	cmp	r3, #0
 8013556:	d002      	beq.n	801355e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8013558:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801355c:	e009      	b.n	8013572 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 801355e:	697b      	ldr	r3, [r7, #20]
 8013560:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013564:	2b00      	cmp	r3, #0
 8013566:	d002      	beq.n	801356e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8013568:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801356c:	e001      	b.n	8013572 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801356e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8013572:	4618      	mov	r0, r3
 8013574:	3720      	adds	r7, #32
 8013576:	46bd      	mov	sp, r7
 8013578:	bd80      	pop	{r7, pc}
 801357a:	bf00      	nop
 801357c:	24000000 	.word	0x24000000
 8013580:	10624dd3 	.word	0x10624dd3
 8013584:	002000c5 	.word	0x002000c5

08013588 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8013588:	b480      	push	{r7}
 801358a:	b085      	sub	sp, #20
 801358c:	af00      	add	r7, sp, #0
 801358e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013590:	4b22      	ldr	r3, [pc, #136]	; (801361c <SDMMC_GetCmdResp7+0x94>)
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	4a22      	ldr	r2, [pc, #136]	; (8013620 <SDMMC_GetCmdResp7+0x98>)
 8013596:	fba2 2303 	umull	r2, r3, r2, r3
 801359a:	0a5b      	lsrs	r3, r3, #9
 801359c:	f241 3288 	movw	r2, #5000	; 0x1388
 80135a0:	fb02 f303 	mul.w	r3, r2, r3
 80135a4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80135a6:	68fb      	ldr	r3, [r7, #12]
 80135a8:	1e5a      	subs	r2, r3, #1
 80135aa:	60fa      	str	r2, [r7, #12]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d102      	bne.n	80135b6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80135b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80135b4:	e02c      	b.n	8013610 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80135ba:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80135bc:	68bb      	ldr	r3, [r7, #8]
 80135be:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d0ef      	beq.n	80135a6 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80135c6:	68bb      	ldr	r3, [r7, #8]
 80135c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d1ea      	bne.n	80135a6 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80135d4:	f003 0304 	and.w	r3, r3, #4
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d004      	beq.n	80135e6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	2204      	movs	r2, #4
 80135e0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80135e2:	2304      	movs	r3, #4
 80135e4:	e014      	b.n	8013610 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80135ea:	f003 0301 	and.w	r3, r3, #1
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d004      	beq.n	80135fc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	2201      	movs	r2, #1
 80135f6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80135f8:	2301      	movs	r3, #1
 80135fa:	e009      	b.n	8013610 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013604:	2b00      	cmp	r3, #0
 8013606:	d002      	beq.n	801360e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	2240      	movs	r2, #64	; 0x40
 801360c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801360e:	2300      	movs	r3, #0

}
 8013610:	4618      	mov	r0, r3
 8013612:	3714      	adds	r7, #20
 8013614:	46bd      	mov	sp, r7
 8013616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801361a:	4770      	bx	lr
 801361c:	24000000 	.word	0x24000000
 8013620:	10624dd3 	.word	0x10624dd3

08013624 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8013624:	b480      	push	{r7}
 8013626:	b085      	sub	sp, #20
 8013628:	af00      	add	r7, sp, #0
 801362a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801362c:	4b11      	ldr	r3, [pc, #68]	; (8013674 <SDMMC_GetCmdError+0x50>)
 801362e:	681b      	ldr	r3, [r3, #0]
 8013630:	4a11      	ldr	r2, [pc, #68]	; (8013678 <SDMMC_GetCmdError+0x54>)
 8013632:	fba2 2303 	umull	r2, r3, r2, r3
 8013636:	0a5b      	lsrs	r3, r3, #9
 8013638:	f241 3288 	movw	r2, #5000	; 0x1388
 801363c:	fb02 f303 	mul.w	r3, r2, r3
 8013640:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8013642:	68fb      	ldr	r3, [r7, #12]
 8013644:	1e5a      	subs	r2, r3, #1
 8013646:	60fa      	str	r2, [r7, #12]
 8013648:	2b00      	cmp	r3, #0
 801364a:	d102      	bne.n	8013652 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801364c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013650:	e009      	b.n	8013666 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801365a:	2b00      	cmp	r3, #0
 801365c:	d0f1      	beq.n	8013642 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	4a06      	ldr	r2, [pc, #24]	; (801367c <SDMMC_GetCmdError+0x58>)
 8013662:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8013664:	2300      	movs	r3, #0
}
 8013666:	4618      	mov	r0, r3
 8013668:	3714      	adds	r7, #20
 801366a:	46bd      	mov	sp, r7
 801366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013670:	4770      	bx	lr
 8013672:	bf00      	nop
 8013674:	24000000 	.word	0x24000000
 8013678:	10624dd3 	.word	0x10624dd3
 801367c:	002000c5 	.word	0x002000c5

08013680 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013680:	b084      	sub	sp, #16
 8013682:	b580      	push	{r7, lr}
 8013684:	b084      	sub	sp, #16
 8013686:	af00      	add	r7, sp, #0
 8013688:	6078      	str	r0, [r7, #4]
 801368a:	f107 001c 	add.w	r0, r7, #28
 801368e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8013692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013694:	2b01      	cmp	r3, #1
 8013696:	d120      	bne.n	80136da <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801369c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	68da      	ldr	r2, [r3, #12]
 80136a8:	4b2a      	ldr	r3, [pc, #168]	; (8013754 <USB_CoreInit+0xd4>)
 80136aa:	4013      	ands	r3, r2
 80136ac:	687a      	ldr	r2, [r7, #4]
 80136ae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	68db      	ldr	r3, [r3, #12]
 80136b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80136bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80136be:	2b01      	cmp	r3, #1
 80136c0:	d105      	bne.n	80136ce <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	68db      	ldr	r3, [r3, #12]
 80136c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80136ce:	6878      	ldr	r0, [r7, #4]
 80136d0:	f000 faac 	bl	8013c2c <USB_CoreReset>
 80136d4:	4603      	mov	r3, r0
 80136d6:	73fb      	strb	r3, [r7, #15]
 80136d8:	e01a      	b.n	8013710 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	68db      	ldr	r3, [r3, #12]
 80136de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80136e6:	6878      	ldr	r0, [r7, #4]
 80136e8:	f000 faa0 	bl	8013c2c <USB_CoreReset>
 80136ec:	4603      	mov	r3, r0
 80136ee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80136f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d106      	bne.n	8013704 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80136fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	639a      	str	r2, [r3, #56]	; 0x38
 8013702:	e005      	b.n	8013710 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013708:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8013710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013712:	2b01      	cmp	r3, #1
 8013714:	d116      	bne.n	8013744 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801371a:	b29a      	uxth	r2, r3
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013724:	4b0c      	ldr	r3, [pc, #48]	; (8013758 <USB_CoreInit+0xd8>)
 8013726:	4313      	orrs	r3, r2
 8013728:	687a      	ldr	r2, [r7, #4]
 801372a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	689b      	ldr	r3, [r3, #8]
 8013730:	f043 0206 	orr.w	r2, r3, #6
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	689b      	ldr	r3, [r3, #8]
 801373c:	f043 0220 	orr.w	r2, r3, #32
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8013744:	7bfb      	ldrb	r3, [r7, #15]
}
 8013746:	4618      	mov	r0, r3
 8013748:	3710      	adds	r7, #16
 801374a:	46bd      	mov	sp, r7
 801374c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013750:	b004      	add	sp, #16
 8013752:	4770      	bx	lr
 8013754:	ffbdffbf 	.word	0xffbdffbf
 8013758:	03ee0000 	.word	0x03ee0000

0801375c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801375c:	b480      	push	{r7}
 801375e:	b083      	sub	sp, #12
 8013760:	af00      	add	r7, sp, #0
 8013762:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	689b      	ldr	r3, [r3, #8]
 8013768:	f023 0201 	bic.w	r2, r3, #1
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013770:	2300      	movs	r3, #0
}
 8013772:	4618      	mov	r0, r3
 8013774:	370c      	adds	r7, #12
 8013776:	46bd      	mov	sp, r7
 8013778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801377c:	4770      	bx	lr

0801377e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801377e:	b580      	push	{r7, lr}
 8013780:	b084      	sub	sp, #16
 8013782:	af00      	add	r7, sp, #0
 8013784:	6078      	str	r0, [r7, #4]
 8013786:	460b      	mov	r3, r1
 8013788:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 801378a:	2300      	movs	r3, #0
 801378c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	68db      	ldr	r3, [r3, #12]
 8013792:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801379a:	78fb      	ldrb	r3, [r7, #3]
 801379c:	2b01      	cmp	r3, #1
 801379e:	d115      	bne.n	80137cc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	68db      	ldr	r3, [r3, #12]
 80137a4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80137ac:	2001      	movs	r0, #1
 80137ae:	f7f2 f81f 	bl	80057f0 <HAL_Delay>
      ms++;
 80137b2:	68fb      	ldr	r3, [r7, #12]
 80137b4:	3301      	adds	r3, #1
 80137b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80137b8:	6878      	ldr	r0, [r7, #4]
 80137ba:	f000 fa29 	bl	8013c10 <USB_GetMode>
 80137be:	4603      	mov	r3, r0
 80137c0:	2b01      	cmp	r3, #1
 80137c2:	d01e      	beq.n	8013802 <USB_SetCurrentMode+0x84>
 80137c4:	68fb      	ldr	r3, [r7, #12]
 80137c6:	2b31      	cmp	r3, #49	; 0x31
 80137c8:	d9f0      	bls.n	80137ac <USB_SetCurrentMode+0x2e>
 80137ca:	e01a      	b.n	8013802 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80137cc:	78fb      	ldrb	r3, [r7, #3]
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d115      	bne.n	80137fe <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	68db      	ldr	r3, [r3, #12]
 80137d6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80137de:	2001      	movs	r0, #1
 80137e0:	f7f2 f806 	bl	80057f0 <HAL_Delay>
      ms++;
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	3301      	adds	r3, #1
 80137e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80137ea:	6878      	ldr	r0, [r7, #4]
 80137ec:	f000 fa10 	bl	8013c10 <USB_GetMode>
 80137f0:	4603      	mov	r3, r0
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d005      	beq.n	8013802 <USB_SetCurrentMode+0x84>
 80137f6:	68fb      	ldr	r3, [r7, #12]
 80137f8:	2b31      	cmp	r3, #49	; 0x31
 80137fa:	d9f0      	bls.n	80137de <USB_SetCurrentMode+0x60>
 80137fc:	e001      	b.n	8013802 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80137fe:	2301      	movs	r3, #1
 8013800:	e005      	b.n	801380e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8013802:	68fb      	ldr	r3, [r7, #12]
 8013804:	2b32      	cmp	r3, #50	; 0x32
 8013806:	d101      	bne.n	801380c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8013808:	2301      	movs	r3, #1
 801380a:	e000      	b.n	801380e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801380c:	2300      	movs	r3, #0
}
 801380e:	4618      	mov	r0, r3
 8013810:	3710      	adds	r7, #16
 8013812:	46bd      	mov	sp, r7
 8013814:	bd80      	pop	{r7, pc}
	...

08013818 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013818:	b084      	sub	sp, #16
 801381a:	b580      	push	{r7, lr}
 801381c:	b086      	sub	sp, #24
 801381e:	af00      	add	r7, sp, #0
 8013820:	6078      	str	r0, [r7, #4]
 8013822:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8013826:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801382a:	2300      	movs	r3, #0
 801382c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8013832:	2300      	movs	r3, #0
 8013834:	613b      	str	r3, [r7, #16]
 8013836:	e009      	b.n	801384c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8013838:	687a      	ldr	r2, [r7, #4]
 801383a:	693b      	ldr	r3, [r7, #16]
 801383c:	3340      	adds	r3, #64	; 0x40
 801383e:	009b      	lsls	r3, r3, #2
 8013840:	4413      	add	r3, r2
 8013842:	2200      	movs	r2, #0
 8013844:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8013846:	693b      	ldr	r3, [r7, #16]
 8013848:	3301      	adds	r3, #1
 801384a:	613b      	str	r3, [r7, #16]
 801384c:	693b      	ldr	r3, [r7, #16]
 801384e:	2b0e      	cmp	r3, #14
 8013850:	d9f2      	bls.n	8013838 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8013852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013854:	2b00      	cmp	r3, #0
 8013856:	d11c      	bne.n	8013892 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801385e:	685b      	ldr	r3, [r3, #4]
 8013860:	68fa      	ldr	r2, [r7, #12]
 8013862:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013866:	f043 0302 	orr.w	r3, r3, #2
 801386a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013870:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	601a      	str	r2, [r3, #0]
 8013890:	e005      	b.n	801389e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013896:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801389e:	68fb      	ldr	r3, [r7, #12]
 80138a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80138a4:	461a      	mov	r2, r3
 80138a6:	2300      	movs	r3, #0
 80138a8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80138b0:	4619      	mov	r1, r3
 80138b2:	68fb      	ldr	r3, [r7, #12]
 80138b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80138b8:	461a      	mov	r2, r3
 80138ba:	680b      	ldr	r3, [r1, #0]
 80138bc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80138be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138c0:	2b01      	cmp	r3, #1
 80138c2:	d10c      	bne.n	80138de <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80138c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	d104      	bne.n	80138d4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80138ca:	2100      	movs	r1, #0
 80138cc:	6878      	ldr	r0, [r7, #4]
 80138ce:	f000 f965 	bl	8013b9c <USB_SetDevSpeed>
 80138d2:	e008      	b.n	80138e6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80138d4:	2101      	movs	r1, #1
 80138d6:	6878      	ldr	r0, [r7, #4]
 80138d8:	f000 f960 	bl	8013b9c <USB_SetDevSpeed>
 80138dc:	e003      	b.n	80138e6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80138de:	2103      	movs	r1, #3
 80138e0:	6878      	ldr	r0, [r7, #4]
 80138e2:	f000 f95b 	bl	8013b9c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80138e6:	2110      	movs	r1, #16
 80138e8:	6878      	ldr	r0, [r7, #4]
 80138ea:	f000 f8f3 	bl	8013ad4 <USB_FlushTxFifo>
 80138ee:	4603      	mov	r3, r0
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d001      	beq.n	80138f8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80138f4:	2301      	movs	r3, #1
 80138f6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80138f8:	6878      	ldr	r0, [r7, #4]
 80138fa:	f000 f91f 	bl	8013b3c <USB_FlushRxFifo>
 80138fe:	4603      	mov	r3, r0
 8013900:	2b00      	cmp	r3, #0
 8013902:	d001      	beq.n	8013908 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8013904:	2301      	movs	r3, #1
 8013906:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801390e:	461a      	mov	r2, r3
 8013910:	2300      	movs	r3, #0
 8013912:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801391a:	461a      	mov	r2, r3
 801391c:	2300      	movs	r3, #0
 801391e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8013920:	68fb      	ldr	r3, [r7, #12]
 8013922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013926:	461a      	mov	r2, r3
 8013928:	2300      	movs	r3, #0
 801392a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801392c:	2300      	movs	r3, #0
 801392e:	613b      	str	r3, [r7, #16]
 8013930:	e043      	b.n	80139ba <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013932:	693b      	ldr	r3, [r7, #16]
 8013934:	015a      	lsls	r2, r3, #5
 8013936:	68fb      	ldr	r3, [r7, #12]
 8013938:	4413      	add	r3, r2
 801393a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013944:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013948:	d118      	bne.n	801397c <USB_DevInit+0x164>
    {
      if (i == 0U)
 801394a:	693b      	ldr	r3, [r7, #16]
 801394c:	2b00      	cmp	r3, #0
 801394e:	d10a      	bne.n	8013966 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8013950:	693b      	ldr	r3, [r7, #16]
 8013952:	015a      	lsls	r2, r3, #5
 8013954:	68fb      	ldr	r3, [r7, #12]
 8013956:	4413      	add	r3, r2
 8013958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801395c:	461a      	mov	r2, r3
 801395e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013962:	6013      	str	r3, [r2, #0]
 8013964:	e013      	b.n	801398e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8013966:	693b      	ldr	r3, [r7, #16]
 8013968:	015a      	lsls	r2, r3, #5
 801396a:	68fb      	ldr	r3, [r7, #12]
 801396c:	4413      	add	r3, r2
 801396e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013972:	461a      	mov	r2, r3
 8013974:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013978:	6013      	str	r3, [r2, #0]
 801397a:	e008      	b.n	801398e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801397c:	693b      	ldr	r3, [r7, #16]
 801397e:	015a      	lsls	r2, r3, #5
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	4413      	add	r3, r2
 8013984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013988:	461a      	mov	r2, r3
 801398a:	2300      	movs	r3, #0
 801398c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801398e:	693b      	ldr	r3, [r7, #16]
 8013990:	015a      	lsls	r2, r3, #5
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	4413      	add	r3, r2
 8013996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801399a:	461a      	mov	r2, r3
 801399c:	2300      	movs	r3, #0
 801399e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80139a0:	693b      	ldr	r3, [r7, #16]
 80139a2:	015a      	lsls	r2, r3, #5
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	4413      	add	r3, r2
 80139a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80139ac:	461a      	mov	r2, r3
 80139ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80139b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80139b4:	693b      	ldr	r3, [r7, #16]
 80139b6:	3301      	adds	r3, #1
 80139b8:	613b      	str	r3, [r7, #16]
 80139ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139bc:	693a      	ldr	r2, [r7, #16]
 80139be:	429a      	cmp	r2, r3
 80139c0:	d3b7      	bcc.n	8013932 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80139c2:	2300      	movs	r3, #0
 80139c4:	613b      	str	r3, [r7, #16]
 80139c6:	e043      	b.n	8013a50 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80139c8:	693b      	ldr	r3, [r7, #16]
 80139ca:	015a      	lsls	r2, r3, #5
 80139cc:	68fb      	ldr	r3, [r7, #12]
 80139ce:	4413      	add	r3, r2
 80139d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80139da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80139de:	d118      	bne.n	8013a12 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80139e0:	693b      	ldr	r3, [r7, #16]
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d10a      	bne.n	80139fc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80139e6:	693b      	ldr	r3, [r7, #16]
 80139e8:	015a      	lsls	r2, r3, #5
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	4413      	add	r3, r2
 80139ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80139f2:	461a      	mov	r2, r3
 80139f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80139f8:	6013      	str	r3, [r2, #0]
 80139fa:	e013      	b.n	8013a24 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80139fc:	693b      	ldr	r3, [r7, #16]
 80139fe:	015a      	lsls	r2, r3, #5
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	4413      	add	r3, r2
 8013a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a08:	461a      	mov	r2, r3
 8013a0a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013a0e:	6013      	str	r3, [r2, #0]
 8013a10:	e008      	b.n	8013a24 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8013a12:	693b      	ldr	r3, [r7, #16]
 8013a14:	015a      	lsls	r2, r3, #5
 8013a16:	68fb      	ldr	r3, [r7, #12]
 8013a18:	4413      	add	r3, r2
 8013a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a1e:	461a      	mov	r2, r3
 8013a20:	2300      	movs	r3, #0
 8013a22:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8013a24:	693b      	ldr	r3, [r7, #16]
 8013a26:	015a      	lsls	r2, r3, #5
 8013a28:	68fb      	ldr	r3, [r7, #12]
 8013a2a:	4413      	add	r3, r2
 8013a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a30:	461a      	mov	r2, r3
 8013a32:	2300      	movs	r3, #0
 8013a34:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8013a36:	693b      	ldr	r3, [r7, #16]
 8013a38:	015a      	lsls	r2, r3, #5
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	4413      	add	r3, r2
 8013a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a42:	461a      	mov	r2, r3
 8013a44:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013a48:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013a4a:	693b      	ldr	r3, [r7, #16]
 8013a4c:	3301      	adds	r3, #1
 8013a4e:	613b      	str	r3, [r7, #16]
 8013a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a52:	693a      	ldr	r2, [r7, #16]
 8013a54:	429a      	cmp	r2, r3
 8013a56:	d3b7      	bcc.n	80139c8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013a5e:	691b      	ldr	r3, [r3, #16]
 8013a60:	68fa      	ldr	r2, [r7, #12]
 8013a62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013a66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013a6a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	2200      	movs	r2, #0
 8013a70:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8013a78:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8013a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d105      	bne.n	8013a8c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	699b      	ldr	r3, [r3, #24]
 8013a84:	f043 0210 	orr.w	r2, r3, #16
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	699a      	ldr	r2, [r3, #24]
 8013a90:	4b0e      	ldr	r3, [pc, #56]	; (8013acc <USB_DevInit+0x2b4>)
 8013a92:	4313      	orrs	r3, r2
 8013a94:	687a      	ldr	r2, [r7, #4]
 8013a96:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8013a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d005      	beq.n	8013aaa <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	699b      	ldr	r3, [r3, #24]
 8013aa2:	f043 0208 	orr.w	r2, r3, #8
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8013aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013aac:	2b01      	cmp	r3, #1
 8013aae:	d105      	bne.n	8013abc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	699a      	ldr	r2, [r3, #24]
 8013ab4:	4b06      	ldr	r3, [pc, #24]	; (8013ad0 <USB_DevInit+0x2b8>)
 8013ab6:	4313      	orrs	r3, r2
 8013ab8:	687a      	ldr	r2, [r7, #4]
 8013aba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8013abc:	7dfb      	ldrb	r3, [r7, #23]
}
 8013abe:	4618      	mov	r0, r3
 8013ac0:	3718      	adds	r7, #24
 8013ac2:	46bd      	mov	sp, r7
 8013ac4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013ac8:	b004      	add	sp, #16
 8013aca:	4770      	bx	lr
 8013acc:	803c3800 	.word	0x803c3800
 8013ad0:	40000004 	.word	0x40000004

08013ad4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8013ad4:	b480      	push	{r7}
 8013ad6:	b085      	sub	sp, #20
 8013ad8:	af00      	add	r7, sp, #0
 8013ada:	6078      	str	r0, [r7, #4]
 8013adc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8013ade:	2300      	movs	r3, #0
 8013ae0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	3301      	adds	r3, #1
 8013ae6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	4a13      	ldr	r2, [pc, #76]	; (8013b38 <USB_FlushTxFifo+0x64>)
 8013aec:	4293      	cmp	r3, r2
 8013aee:	d901      	bls.n	8013af4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8013af0:	2303      	movs	r3, #3
 8013af2:	e01b      	b.n	8013b2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	691b      	ldr	r3, [r3, #16]
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	daf2      	bge.n	8013ae2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8013afc:	2300      	movs	r3, #0
 8013afe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8013b00:	683b      	ldr	r3, [r7, #0]
 8013b02:	019b      	lsls	r3, r3, #6
 8013b04:	f043 0220 	orr.w	r2, r3, #32
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013b0c:	68fb      	ldr	r3, [r7, #12]
 8013b0e:	3301      	adds	r3, #1
 8013b10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	4a08      	ldr	r2, [pc, #32]	; (8013b38 <USB_FlushTxFifo+0x64>)
 8013b16:	4293      	cmp	r3, r2
 8013b18:	d901      	bls.n	8013b1e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8013b1a:	2303      	movs	r3, #3
 8013b1c:	e006      	b.n	8013b2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	691b      	ldr	r3, [r3, #16]
 8013b22:	f003 0320 	and.w	r3, r3, #32
 8013b26:	2b20      	cmp	r3, #32
 8013b28:	d0f0      	beq.n	8013b0c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8013b2a:	2300      	movs	r3, #0
}
 8013b2c:	4618      	mov	r0, r3
 8013b2e:	3714      	adds	r7, #20
 8013b30:	46bd      	mov	sp, r7
 8013b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b36:	4770      	bx	lr
 8013b38:	00030d40 	.word	0x00030d40

08013b3c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8013b3c:	b480      	push	{r7}
 8013b3e:	b085      	sub	sp, #20
 8013b40:	af00      	add	r7, sp, #0
 8013b42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013b44:	2300      	movs	r3, #0
 8013b46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013b48:	68fb      	ldr	r3, [r7, #12]
 8013b4a:	3301      	adds	r3, #1
 8013b4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	4a11      	ldr	r2, [pc, #68]	; (8013b98 <USB_FlushRxFifo+0x5c>)
 8013b52:	4293      	cmp	r3, r2
 8013b54:	d901      	bls.n	8013b5a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8013b56:	2303      	movs	r3, #3
 8013b58:	e018      	b.n	8013b8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	691b      	ldr	r3, [r3, #16]
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	daf2      	bge.n	8013b48 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8013b62:	2300      	movs	r3, #0
 8013b64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	2210      	movs	r2, #16
 8013b6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013b6c:	68fb      	ldr	r3, [r7, #12]
 8013b6e:	3301      	adds	r3, #1
 8013b70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013b72:	68fb      	ldr	r3, [r7, #12]
 8013b74:	4a08      	ldr	r2, [pc, #32]	; (8013b98 <USB_FlushRxFifo+0x5c>)
 8013b76:	4293      	cmp	r3, r2
 8013b78:	d901      	bls.n	8013b7e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8013b7a:	2303      	movs	r3, #3
 8013b7c:	e006      	b.n	8013b8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	691b      	ldr	r3, [r3, #16]
 8013b82:	f003 0310 	and.w	r3, r3, #16
 8013b86:	2b10      	cmp	r3, #16
 8013b88:	d0f0      	beq.n	8013b6c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8013b8a:	2300      	movs	r3, #0
}
 8013b8c:	4618      	mov	r0, r3
 8013b8e:	3714      	adds	r7, #20
 8013b90:	46bd      	mov	sp, r7
 8013b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b96:	4770      	bx	lr
 8013b98:	00030d40 	.word	0x00030d40

08013b9c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8013b9c:	b480      	push	{r7}
 8013b9e:	b085      	sub	sp, #20
 8013ba0:	af00      	add	r7, sp, #0
 8013ba2:	6078      	str	r0, [r7, #4]
 8013ba4:	460b      	mov	r3, r1
 8013ba6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013bb2:	681a      	ldr	r2, [r3, #0]
 8013bb4:	78fb      	ldrb	r3, [r7, #3]
 8013bb6:	68f9      	ldr	r1, [r7, #12]
 8013bb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013bbc:	4313      	orrs	r3, r2
 8013bbe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8013bc0:	2300      	movs	r3, #0
}
 8013bc2:	4618      	mov	r0, r3
 8013bc4:	3714      	adds	r7, #20
 8013bc6:	46bd      	mov	sp, r7
 8013bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bcc:	4770      	bx	lr

08013bce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013bce:	b480      	push	{r7}
 8013bd0:	b085      	sub	sp, #20
 8013bd2:	af00      	add	r7, sp, #0
 8013bd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013bda:	68fb      	ldr	r3, [r7, #12]
 8013bdc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013be0:	681b      	ldr	r3, [r3, #0]
 8013be2:	68fa      	ldr	r2, [r7, #12]
 8013be4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013be8:	f023 0303 	bic.w	r3, r3, #3
 8013bec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013bf4:	685b      	ldr	r3, [r3, #4]
 8013bf6:	68fa      	ldr	r2, [r7, #12]
 8013bf8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013bfc:	f043 0302 	orr.w	r3, r3, #2
 8013c00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013c02:	2300      	movs	r3, #0
}
 8013c04:	4618      	mov	r0, r3
 8013c06:	3714      	adds	r7, #20
 8013c08:	46bd      	mov	sp, r7
 8013c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c0e:	4770      	bx	lr

08013c10 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8013c10:	b480      	push	{r7}
 8013c12:	b083      	sub	sp, #12
 8013c14:	af00      	add	r7, sp, #0
 8013c16:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	695b      	ldr	r3, [r3, #20]
 8013c1c:	f003 0301 	and.w	r3, r3, #1
}
 8013c20:	4618      	mov	r0, r3
 8013c22:	370c      	adds	r7, #12
 8013c24:	46bd      	mov	sp, r7
 8013c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c2a:	4770      	bx	lr

08013c2c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8013c2c:	b480      	push	{r7}
 8013c2e:	b085      	sub	sp, #20
 8013c30:	af00      	add	r7, sp, #0
 8013c32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013c34:	2300      	movs	r3, #0
 8013c36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	3301      	adds	r3, #1
 8013c3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013c3e:	68fb      	ldr	r3, [r7, #12]
 8013c40:	4a13      	ldr	r2, [pc, #76]	; (8013c90 <USB_CoreReset+0x64>)
 8013c42:	4293      	cmp	r3, r2
 8013c44:	d901      	bls.n	8013c4a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8013c46:	2303      	movs	r3, #3
 8013c48:	e01b      	b.n	8013c82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	691b      	ldr	r3, [r3, #16]
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	daf2      	bge.n	8013c38 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8013c52:	2300      	movs	r3, #0
 8013c54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	691b      	ldr	r3, [r3, #16]
 8013c5a:	f043 0201 	orr.w	r2, r3, #1
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013c62:	68fb      	ldr	r3, [r7, #12]
 8013c64:	3301      	adds	r3, #1
 8013c66:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013c68:	68fb      	ldr	r3, [r7, #12]
 8013c6a:	4a09      	ldr	r2, [pc, #36]	; (8013c90 <USB_CoreReset+0x64>)
 8013c6c:	4293      	cmp	r3, r2
 8013c6e:	d901      	bls.n	8013c74 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8013c70:	2303      	movs	r3, #3
 8013c72:	e006      	b.n	8013c82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	691b      	ldr	r3, [r3, #16]
 8013c78:	f003 0301 	and.w	r3, r3, #1
 8013c7c:	2b01      	cmp	r3, #1
 8013c7e:	d0f0      	beq.n	8013c62 <USB_CoreReset+0x36>

  return HAL_OK;
 8013c80:	2300      	movs	r3, #0
}
 8013c82:	4618      	mov	r0, r3
 8013c84:	3714      	adds	r7, #20
 8013c86:	46bd      	mov	sp, r7
 8013c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c8c:	4770      	bx	lr
 8013c8e:	bf00      	nop
 8013c90:	00030d40 	.word	0x00030d40

08013c94 <sbrk_aligned>:
 8013c94:	b570      	push	{r4, r5, r6, lr}
 8013c96:	4e0e      	ldr	r6, [pc, #56]	; (8013cd0 <sbrk_aligned+0x3c>)
 8013c98:	460c      	mov	r4, r1
 8013c9a:	6831      	ldr	r1, [r6, #0]
 8013c9c:	4605      	mov	r5, r0
 8013c9e:	b911      	cbnz	r1, 8013ca6 <sbrk_aligned+0x12>
 8013ca0:	f000 f8e4 	bl	8013e6c <_sbrk_r>
 8013ca4:	6030      	str	r0, [r6, #0]
 8013ca6:	4621      	mov	r1, r4
 8013ca8:	4628      	mov	r0, r5
 8013caa:	f000 f8df 	bl	8013e6c <_sbrk_r>
 8013cae:	1c43      	adds	r3, r0, #1
 8013cb0:	d00a      	beq.n	8013cc8 <sbrk_aligned+0x34>
 8013cb2:	1cc4      	adds	r4, r0, #3
 8013cb4:	f024 0403 	bic.w	r4, r4, #3
 8013cb8:	42a0      	cmp	r0, r4
 8013cba:	d007      	beq.n	8013ccc <sbrk_aligned+0x38>
 8013cbc:	1a21      	subs	r1, r4, r0
 8013cbe:	4628      	mov	r0, r5
 8013cc0:	f000 f8d4 	bl	8013e6c <_sbrk_r>
 8013cc4:	3001      	adds	r0, #1
 8013cc6:	d101      	bne.n	8013ccc <sbrk_aligned+0x38>
 8013cc8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8013ccc:	4620      	mov	r0, r4
 8013cce:	bd70      	pop	{r4, r5, r6, pc}
 8013cd0:	24001900 	.word	0x24001900

08013cd4 <_malloc_r>:
 8013cd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013cd8:	1ccd      	adds	r5, r1, #3
 8013cda:	f025 0503 	bic.w	r5, r5, #3
 8013cde:	3508      	adds	r5, #8
 8013ce0:	2d0c      	cmp	r5, #12
 8013ce2:	bf38      	it	cc
 8013ce4:	250c      	movcc	r5, #12
 8013ce6:	2d00      	cmp	r5, #0
 8013ce8:	4607      	mov	r7, r0
 8013cea:	db01      	blt.n	8013cf0 <_malloc_r+0x1c>
 8013cec:	42a9      	cmp	r1, r5
 8013cee:	d905      	bls.n	8013cfc <_malloc_r+0x28>
 8013cf0:	230c      	movs	r3, #12
 8013cf2:	603b      	str	r3, [r7, #0]
 8013cf4:	2600      	movs	r6, #0
 8013cf6:	4630      	mov	r0, r6
 8013cf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013cfc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8013dd0 <_malloc_r+0xfc>
 8013d00:	f000 f868 	bl	8013dd4 <__malloc_lock>
 8013d04:	f8d8 3000 	ldr.w	r3, [r8]
 8013d08:	461c      	mov	r4, r3
 8013d0a:	bb5c      	cbnz	r4, 8013d64 <_malloc_r+0x90>
 8013d0c:	4629      	mov	r1, r5
 8013d0e:	4638      	mov	r0, r7
 8013d10:	f7ff ffc0 	bl	8013c94 <sbrk_aligned>
 8013d14:	1c43      	adds	r3, r0, #1
 8013d16:	4604      	mov	r4, r0
 8013d18:	d155      	bne.n	8013dc6 <_malloc_r+0xf2>
 8013d1a:	f8d8 4000 	ldr.w	r4, [r8]
 8013d1e:	4626      	mov	r6, r4
 8013d20:	2e00      	cmp	r6, #0
 8013d22:	d145      	bne.n	8013db0 <_malloc_r+0xdc>
 8013d24:	2c00      	cmp	r4, #0
 8013d26:	d048      	beq.n	8013dba <_malloc_r+0xe6>
 8013d28:	6823      	ldr	r3, [r4, #0]
 8013d2a:	4631      	mov	r1, r6
 8013d2c:	4638      	mov	r0, r7
 8013d2e:	eb04 0903 	add.w	r9, r4, r3
 8013d32:	f000 f89b 	bl	8013e6c <_sbrk_r>
 8013d36:	4581      	cmp	r9, r0
 8013d38:	d13f      	bne.n	8013dba <_malloc_r+0xe6>
 8013d3a:	6821      	ldr	r1, [r4, #0]
 8013d3c:	1a6d      	subs	r5, r5, r1
 8013d3e:	4629      	mov	r1, r5
 8013d40:	4638      	mov	r0, r7
 8013d42:	f7ff ffa7 	bl	8013c94 <sbrk_aligned>
 8013d46:	3001      	adds	r0, #1
 8013d48:	d037      	beq.n	8013dba <_malloc_r+0xe6>
 8013d4a:	6823      	ldr	r3, [r4, #0]
 8013d4c:	442b      	add	r3, r5
 8013d4e:	6023      	str	r3, [r4, #0]
 8013d50:	f8d8 3000 	ldr.w	r3, [r8]
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d038      	beq.n	8013dca <_malloc_r+0xf6>
 8013d58:	685a      	ldr	r2, [r3, #4]
 8013d5a:	42a2      	cmp	r2, r4
 8013d5c:	d12b      	bne.n	8013db6 <_malloc_r+0xe2>
 8013d5e:	2200      	movs	r2, #0
 8013d60:	605a      	str	r2, [r3, #4]
 8013d62:	e00f      	b.n	8013d84 <_malloc_r+0xb0>
 8013d64:	6822      	ldr	r2, [r4, #0]
 8013d66:	1b52      	subs	r2, r2, r5
 8013d68:	d41f      	bmi.n	8013daa <_malloc_r+0xd6>
 8013d6a:	2a0b      	cmp	r2, #11
 8013d6c:	d917      	bls.n	8013d9e <_malloc_r+0xca>
 8013d6e:	1961      	adds	r1, r4, r5
 8013d70:	42a3      	cmp	r3, r4
 8013d72:	6025      	str	r5, [r4, #0]
 8013d74:	bf18      	it	ne
 8013d76:	6059      	strne	r1, [r3, #4]
 8013d78:	6863      	ldr	r3, [r4, #4]
 8013d7a:	bf08      	it	eq
 8013d7c:	f8c8 1000 	streq.w	r1, [r8]
 8013d80:	5162      	str	r2, [r4, r5]
 8013d82:	604b      	str	r3, [r1, #4]
 8013d84:	4638      	mov	r0, r7
 8013d86:	f104 060b 	add.w	r6, r4, #11
 8013d8a:	f000 f829 	bl	8013de0 <__malloc_unlock>
 8013d8e:	f026 0607 	bic.w	r6, r6, #7
 8013d92:	1d23      	adds	r3, r4, #4
 8013d94:	1af2      	subs	r2, r6, r3
 8013d96:	d0ae      	beq.n	8013cf6 <_malloc_r+0x22>
 8013d98:	1b9b      	subs	r3, r3, r6
 8013d9a:	50a3      	str	r3, [r4, r2]
 8013d9c:	e7ab      	b.n	8013cf6 <_malloc_r+0x22>
 8013d9e:	42a3      	cmp	r3, r4
 8013da0:	6862      	ldr	r2, [r4, #4]
 8013da2:	d1dd      	bne.n	8013d60 <_malloc_r+0x8c>
 8013da4:	f8c8 2000 	str.w	r2, [r8]
 8013da8:	e7ec      	b.n	8013d84 <_malloc_r+0xb0>
 8013daa:	4623      	mov	r3, r4
 8013dac:	6864      	ldr	r4, [r4, #4]
 8013dae:	e7ac      	b.n	8013d0a <_malloc_r+0x36>
 8013db0:	4634      	mov	r4, r6
 8013db2:	6876      	ldr	r6, [r6, #4]
 8013db4:	e7b4      	b.n	8013d20 <_malloc_r+0x4c>
 8013db6:	4613      	mov	r3, r2
 8013db8:	e7cc      	b.n	8013d54 <_malloc_r+0x80>
 8013dba:	230c      	movs	r3, #12
 8013dbc:	603b      	str	r3, [r7, #0]
 8013dbe:	4638      	mov	r0, r7
 8013dc0:	f000 f80e 	bl	8013de0 <__malloc_unlock>
 8013dc4:	e797      	b.n	8013cf6 <_malloc_r+0x22>
 8013dc6:	6025      	str	r5, [r4, #0]
 8013dc8:	e7dc      	b.n	8013d84 <_malloc_r+0xb0>
 8013dca:	605b      	str	r3, [r3, #4]
 8013dcc:	deff      	udf	#255	; 0xff
 8013dce:	bf00      	nop
 8013dd0:	240018fc 	.word	0x240018fc

08013dd4 <__malloc_lock>:
 8013dd4:	4801      	ldr	r0, [pc, #4]	; (8013ddc <__malloc_lock+0x8>)
 8013dd6:	f000 b883 	b.w	8013ee0 <__retarget_lock_acquire_recursive>
 8013dda:	bf00      	nop
 8013ddc:	24001a40 	.word	0x24001a40

08013de0 <__malloc_unlock>:
 8013de0:	4801      	ldr	r0, [pc, #4]	; (8013de8 <__malloc_unlock+0x8>)
 8013de2:	f000 b87e 	b.w	8013ee2 <__retarget_lock_release_recursive>
 8013de6:	bf00      	nop
 8013de8:	24001a40 	.word	0x24001a40

08013dec <realloc>:
 8013dec:	4b02      	ldr	r3, [pc, #8]	; (8013df8 <realloc+0xc>)
 8013dee:	460a      	mov	r2, r1
 8013df0:	4601      	mov	r1, r0
 8013df2:	6818      	ldr	r0, [r3, #0]
 8013df4:	f000 b802 	b.w	8013dfc <_realloc_r>
 8013df8:	2400005c 	.word	0x2400005c

08013dfc <_realloc_r>:
 8013dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e00:	4680      	mov	r8, r0
 8013e02:	4614      	mov	r4, r2
 8013e04:	460e      	mov	r6, r1
 8013e06:	b921      	cbnz	r1, 8013e12 <_realloc_r+0x16>
 8013e08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013e0c:	4611      	mov	r1, r2
 8013e0e:	f7ff bf61 	b.w	8013cd4 <_malloc_r>
 8013e12:	b92a      	cbnz	r2, 8013e20 <_realloc_r+0x24>
 8013e14:	f000 f874 	bl	8013f00 <_free_r>
 8013e18:	4625      	mov	r5, r4
 8013e1a:	4628      	mov	r0, r5
 8013e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e20:	f000 f8ba 	bl	8013f98 <_malloc_usable_size_r>
 8013e24:	4284      	cmp	r4, r0
 8013e26:	4607      	mov	r7, r0
 8013e28:	d802      	bhi.n	8013e30 <_realloc_r+0x34>
 8013e2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013e2e:	d812      	bhi.n	8013e56 <_realloc_r+0x5a>
 8013e30:	4621      	mov	r1, r4
 8013e32:	4640      	mov	r0, r8
 8013e34:	f7ff ff4e 	bl	8013cd4 <_malloc_r>
 8013e38:	4605      	mov	r5, r0
 8013e3a:	2800      	cmp	r0, #0
 8013e3c:	d0ed      	beq.n	8013e1a <_realloc_r+0x1e>
 8013e3e:	42bc      	cmp	r4, r7
 8013e40:	4622      	mov	r2, r4
 8013e42:	4631      	mov	r1, r6
 8013e44:	bf28      	it	cs
 8013e46:	463a      	movcs	r2, r7
 8013e48:	f000 f84c 	bl	8013ee4 <memcpy>
 8013e4c:	4631      	mov	r1, r6
 8013e4e:	4640      	mov	r0, r8
 8013e50:	f000 f856 	bl	8013f00 <_free_r>
 8013e54:	e7e1      	b.n	8013e1a <_realloc_r+0x1e>
 8013e56:	4635      	mov	r5, r6
 8013e58:	e7df      	b.n	8013e1a <_realloc_r+0x1e>

08013e5a <memset>:
 8013e5a:	4402      	add	r2, r0
 8013e5c:	4603      	mov	r3, r0
 8013e5e:	4293      	cmp	r3, r2
 8013e60:	d100      	bne.n	8013e64 <memset+0xa>
 8013e62:	4770      	bx	lr
 8013e64:	f803 1b01 	strb.w	r1, [r3], #1
 8013e68:	e7f9      	b.n	8013e5e <memset+0x4>
	...

08013e6c <_sbrk_r>:
 8013e6c:	b538      	push	{r3, r4, r5, lr}
 8013e6e:	4d06      	ldr	r5, [pc, #24]	; (8013e88 <_sbrk_r+0x1c>)
 8013e70:	2300      	movs	r3, #0
 8013e72:	4604      	mov	r4, r0
 8013e74:	4608      	mov	r0, r1
 8013e76:	602b      	str	r3, [r5, #0]
 8013e78:	f7f1 fb14 	bl	80054a4 <_sbrk>
 8013e7c:	1c43      	adds	r3, r0, #1
 8013e7e:	d102      	bne.n	8013e86 <_sbrk_r+0x1a>
 8013e80:	682b      	ldr	r3, [r5, #0]
 8013e82:	b103      	cbz	r3, 8013e86 <_sbrk_r+0x1a>
 8013e84:	6023      	str	r3, [r4, #0]
 8013e86:	bd38      	pop	{r3, r4, r5, pc}
 8013e88:	24001a3c 	.word	0x24001a3c

08013e8c <__errno>:
 8013e8c:	4b01      	ldr	r3, [pc, #4]	; (8013e94 <__errno+0x8>)
 8013e8e:	6818      	ldr	r0, [r3, #0]
 8013e90:	4770      	bx	lr
 8013e92:	bf00      	nop
 8013e94:	2400005c 	.word	0x2400005c

08013e98 <__libc_init_array>:
 8013e98:	b570      	push	{r4, r5, r6, lr}
 8013e9a:	4d0d      	ldr	r5, [pc, #52]	; (8013ed0 <__libc_init_array+0x38>)
 8013e9c:	4c0d      	ldr	r4, [pc, #52]	; (8013ed4 <__libc_init_array+0x3c>)
 8013e9e:	1b64      	subs	r4, r4, r5
 8013ea0:	10a4      	asrs	r4, r4, #2
 8013ea2:	2600      	movs	r6, #0
 8013ea4:	42a6      	cmp	r6, r4
 8013ea6:	d109      	bne.n	8013ebc <__libc_init_array+0x24>
 8013ea8:	4d0b      	ldr	r5, [pc, #44]	; (8013ed8 <__libc_init_array+0x40>)
 8013eaa:	4c0c      	ldr	r4, [pc, #48]	; (8013edc <__libc_init_array+0x44>)
 8013eac:	f000 f87c 	bl	8013fa8 <_init>
 8013eb0:	1b64      	subs	r4, r4, r5
 8013eb2:	10a4      	asrs	r4, r4, #2
 8013eb4:	2600      	movs	r6, #0
 8013eb6:	42a6      	cmp	r6, r4
 8013eb8:	d105      	bne.n	8013ec6 <__libc_init_array+0x2e>
 8013eba:	bd70      	pop	{r4, r5, r6, pc}
 8013ebc:	f855 3b04 	ldr.w	r3, [r5], #4
 8013ec0:	4798      	blx	r3
 8013ec2:	3601      	adds	r6, #1
 8013ec4:	e7ee      	b.n	8013ea4 <__libc_init_array+0xc>
 8013ec6:	f855 3b04 	ldr.w	r3, [r5], #4
 8013eca:	4798      	blx	r3
 8013ecc:	3601      	adds	r6, #1
 8013ece:	e7f2      	b.n	8013eb6 <__libc_init_array+0x1e>
 8013ed0:	080143a0 	.word	0x080143a0
 8013ed4:	080143a0 	.word	0x080143a0
 8013ed8:	080143a0 	.word	0x080143a0
 8013edc:	080143a8 	.word	0x080143a8

08013ee0 <__retarget_lock_acquire_recursive>:
 8013ee0:	4770      	bx	lr

08013ee2 <__retarget_lock_release_recursive>:
 8013ee2:	4770      	bx	lr

08013ee4 <memcpy>:
 8013ee4:	440a      	add	r2, r1
 8013ee6:	4291      	cmp	r1, r2
 8013ee8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8013eec:	d100      	bne.n	8013ef0 <memcpy+0xc>
 8013eee:	4770      	bx	lr
 8013ef0:	b510      	push	{r4, lr}
 8013ef2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013ef6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013efa:	4291      	cmp	r1, r2
 8013efc:	d1f9      	bne.n	8013ef2 <memcpy+0xe>
 8013efe:	bd10      	pop	{r4, pc}

08013f00 <_free_r>:
 8013f00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013f02:	2900      	cmp	r1, #0
 8013f04:	d044      	beq.n	8013f90 <_free_r+0x90>
 8013f06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013f0a:	9001      	str	r0, [sp, #4]
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	f1a1 0404 	sub.w	r4, r1, #4
 8013f12:	bfb8      	it	lt
 8013f14:	18e4      	addlt	r4, r4, r3
 8013f16:	f7ff ff5d 	bl	8013dd4 <__malloc_lock>
 8013f1a:	4a1e      	ldr	r2, [pc, #120]	; (8013f94 <_free_r+0x94>)
 8013f1c:	9801      	ldr	r0, [sp, #4]
 8013f1e:	6813      	ldr	r3, [r2, #0]
 8013f20:	b933      	cbnz	r3, 8013f30 <_free_r+0x30>
 8013f22:	6063      	str	r3, [r4, #4]
 8013f24:	6014      	str	r4, [r2, #0]
 8013f26:	b003      	add	sp, #12
 8013f28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013f2c:	f7ff bf58 	b.w	8013de0 <__malloc_unlock>
 8013f30:	42a3      	cmp	r3, r4
 8013f32:	d908      	bls.n	8013f46 <_free_r+0x46>
 8013f34:	6825      	ldr	r5, [r4, #0]
 8013f36:	1961      	adds	r1, r4, r5
 8013f38:	428b      	cmp	r3, r1
 8013f3a:	bf01      	itttt	eq
 8013f3c:	6819      	ldreq	r1, [r3, #0]
 8013f3e:	685b      	ldreq	r3, [r3, #4]
 8013f40:	1949      	addeq	r1, r1, r5
 8013f42:	6021      	streq	r1, [r4, #0]
 8013f44:	e7ed      	b.n	8013f22 <_free_r+0x22>
 8013f46:	461a      	mov	r2, r3
 8013f48:	685b      	ldr	r3, [r3, #4]
 8013f4a:	b10b      	cbz	r3, 8013f50 <_free_r+0x50>
 8013f4c:	42a3      	cmp	r3, r4
 8013f4e:	d9fa      	bls.n	8013f46 <_free_r+0x46>
 8013f50:	6811      	ldr	r1, [r2, #0]
 8013f52:	1855      	adds	r5, r2, r1
 8013f54:	42a5      	cmp	r5, r4
 8013f56:	d10b      	bne.n	8013f70 <_free_r+0x70>
 8013f58:	6824      	ldr	r4, [r4, #0]
 8013f5a:	4421      	add	r1, r4
 8013f5c:	1854      	adds	r4, r2, r1
 8013f5e:	42a3      	cmp	r3, r4
 8013f60:	6011      	str	r1, [r2, #0]
 8013f62:	d1e0      	bne.n	8013f26 <_free_r+0x26>
 8013f64:	681c      	ldr	r4, [r3, #0]
 8013f66:	685b      	ldr	r3, [r3, #4]
 8013f68:	6053      	str	r3, [r2, #4]
 8013f6a:	440c      	add	r4, r1
 8013f6c:	6014      	str	r4, [r2, #0]
 8013f6e:	e7da      	b.n	8013f26 <_free_r+0x26>
 8013f70:	d902      	bls.n	8013f78 <_free_r+0x78>
 8013f72:	230c      	movs	r3, #12
 8013f74:	6003      	str	r3, [r0, #0]
 8013f76:	e7d6      	b.n	8013f26 <_free_r+0x26>
 8013f78:	6825      	ldr	r5, [r4, #0]
 8013f7a:	1961      	adds	r1, r4, r5
 8013f7c:	428b      	cmp	r3, r1
 8013f7e:	bf04      	itt	eq
 8013f80:	6819      	ldreq	r1, [r3, #0]
 8013f82:	685b      	ldreq	r3, [r3, #4]
 8013f84:	6063      	str	r3, [r4, #4]
 8013f86:	bf04      	itt	eq
 8013f88:	1949      	addeq	r1, r1, r5
 8013f8a:	6021      	streq	r1, [r4, #0]
 8013f8c:	6054      	str	r4, [r2, #4]
 8013f8e:	e7ca      	b.n	8013f26 <_free_r+0x26>
 8013f90:	b003      	add	sp, #12
 8013f92:	bd30      	pop	{r4, r5, pc}
 8013f94:	240018fc 	.word	0x240018fc

08013f98 <_malloc_usable_size_r>:
 8013f98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013f9c:	1f18      	subs	r0, r3, #4
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	bfbc      	itt	lt
 8013fa2:	580b      	ldrlt	r3, [r1, r0]
 8013fa4:	18c0      	addlt	r0, r0, r3
 8013fa6:	4770      	bx	lr

08013fa8 <_init>:
 8013fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013faa:	bf00      	nop
 8013fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013fae:	bc08      	pop	{r3}
 8013fb0:	469e      	mov	lr, r3
 8013fb2:	4770      	bx	lr

08013fb4 <_fini>:
 8013fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fb6:	bf00      	nop
 8013fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013fba:	bc08      	pop	{r3}
 8013fbc:	469e      	mov	lr, r3
 8013fbe:	4770      	bx	lr
