
racecar_h743vb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3e4  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800c67c  0800c67c  0001c67c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c6b4  0800c6b4  0001c6b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c6bc  0800c6bc  0001c6bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c6c0  0800c6c0  0001c6c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  0800c6c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000bd0  24000010  0800c6d4  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000be0  0800c6d4  00020be0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 11 .debug_info   00027853  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003de0  00000000  00000000  000478d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002098  00000000  00000000  0004b6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001994  00000000  00000000  0004d750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003c755  00000000  00000000  0004f0e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00029962  00000000  00000000  0008b839  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00185d1a  00000000  00000000  000b519b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000902c  00000000  00000000  0023aeb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006d  00000000  00000000  00243ee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800c664 	.word	0x0800c664

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	0800c664 	.word	0x0800c664

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d8:	f001 febe 	bl	8002358 <HAL_Init>

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005dc:	f000 ff0e 	bl	80013fc <MPU_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f826 	bl	8000630 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005e4:	f000 f89e 	bl	8000724 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 fe22 	bl	8001230 <MX_GPIO_Init>
  MX_TIM2_Init();
 80005ec:	f000 fbfe 	bl	8000dec <MX_TIM2_Init>
  MX_TIM3_Init();
 80005f0:	f000 fc80 	bl	8000ef4 <MX_TIM3_Init>
  MX_ADC1_Init();
 80005f4:	f000 f8c8 	bl	8000788 <MX_ADC1_Init>
  MX_I2C1_Init();
 80005f8:	f000 f93e 	bl	8000878 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 80005fc:	f000 f97c 	bl	80008f8 <MX_LPUART1_UART_Init>
  MX_UART4_Init();
 8000600:	f000 f9c8 	bl	8000994 <MX_UART4_Init>
  MX_UART5_Init();
 8000604:	f000 fa12 	bl	8000a2c <MX_UART5_Init>
  MX_UART7_Init();
 8000608:	f000 fa5c 	bl	8000ac4 <MX_UART7_Init>
  MX_USART3_UART_Init();
 800060c:	f000 faa6 	bl	8000b5c <MX_USART3_UART_Init>
  MX_QUADSPI_Init();
 8000610:	f000 faf0 	bl	8000bf4 <MX_QUADSPI_Init>
  MX_SDMMC1_SD_Init();
 8000614:	f000 fb1a 	bl	8000c4c <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8000618:	f000 fb3c 	bl	8000c94 <MX_SPI1_Init>
  MX_SPI4_Init();
 800061c:	f000 fb90 	bl	8000d40 <MX_SPI4_Init>
  MX_TIM5_Init();
 8000620:	f000 fcce 	bl	8000fc0 <MX_TIM5_Init>
  MX_TIM15_Init();
 8000624:	f000 fd4e 	bl	80010c4 <MX_TIM15_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000628:	f000 fdd0 	bl	80011cc <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800062c:	e7fe      	b.n	800062c <main+0x58>
	...

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b09c      	sub	sp, #112	; 0x70
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800063a:	224c      	movs	r2, #76	; 0x4c
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f00b ffe4 	bl	800c60c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	2220      	movs	r2, #32
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f00b ffde 	bl	800c60c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000650:	2002      	movs	r0, #2
 8000652:	f003 fd6b 	bl	800412c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000656:	2300      	movs	r3, #0
 8000658:	603b      	str	r3, [r7, #0]
 800065a:	4b30      	ldr	r3, [pc, #192]	; (800071c <SystemClock_Config+0xec>)
 800065c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800065e:	4a2f      	ldr	r2, [pc, #188]	; (800071c <SystemClock_Config+0xec>)
 8000660:	f023 0301 	bic.w	r3, r3, #1
 8000664:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000666:	4b2d      	ldr	r3, [pc, #180]	; (800071c <SystemClock_Config+0xec>)
 8000668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	603b      	str	r3, [r7, #0]
 8000670:	4b2b      	ldr	r3, [pc, #172]	; (8000720 <SystemClock_Config+0xf0>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	4a2a      	ldr	r2, [pc, #168]	; (8000720 <SystemClock_Config+0xf0>)
 8000676:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800067a:	6193      	str	r3, [r2, #24]
 800067c:	4b28      	ldr	r3, [pc, #160]	; (8000720 <SystemClock_Config+0xf0>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000684:	603b      	str	r3, [r7, #0]
 8000686:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000688:	bf00      	nop
 800068a:	4b25      	ldr	r3, [pc, #148]	; (8000720 <SystemClock_Config+0xf0>)
 800068c:	699b      	ldr	r3, [r3, #24]
 800068e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000692:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000696:	d1f8      	bne.n	800068a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000698:	2301      	movs	r3, #1
 800069a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800069c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a2:	2302      	movs	r3, #2
 80006a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a6:	2302      	movs	r3, #2
 80006a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80006aa:	2305      	movs	r3, #5
 80006ac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 80006ae:	23a0      	movs	r3, #160	; 0xa0
 80006b0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006b2:	2302      	movs	r3, #2
 80006b4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 20;
 80006b6:	2314      	movs	r3, #20
 80006b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ba:	2302      	movs	r3, #2
 80006bc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80006be:	2308      	movs	r3, #8
 80006c0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006c2:	2300      	movs	r3, #0
 80006c4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ce:	4618      	mov	r0, r3
 80006d0:	f003 fe30 	bl	8004334 <HAL_RCC_OscConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006da:	f000 febb 	bl	8001454 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006de:	233f      	movs	r3, #63	; 0x3f
 80006e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e2:	2303      	movs	r3, #3
 80006e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80006ea:	2308      	movs	r3, #8
 80006ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80006ee:	2340      	movs	r3, #64	; 0x40
 80006f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006f2:	2340      	movs	r3, #64	; 0x40
 80006f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80006f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006fa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80006fc:	2340      	movs	r3, #64	; 0x40
 80006fe:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	2102      	movs	r1, #2
 8000704:	4618      	mov	r0, r3
 8000706:	f004 fa6f 	bl	8004be8 <HAL_RCC_ClockConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000710:	f000 fea0 	bl	8001454 <Error_Handler>
  }
}
 8000714:	bf00      	nop
 8000716:	3770      	adds	r7, #112	; 0x70
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	58000400 	.word	0x58000400
 8000720:	58024800 	.word	0x58024800

08000724 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b0b0      	sub	sp, #192	; 0xc0
 8000728:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800072a:	463b      	mov	r3, r7
 800072c:	22c0      	movs	r2, #192	; 0xc0
 800072e:	2100      	movs	r1, #0
 8000730:	4618      	mov	r0, r3
 8000732:	f00b ff6b 	bl	800c60c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SDMMC;
 8000736:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800073a:	f04f 0300 	mov.w	r3, #0
 800073e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 10;
 8000742:	230a      	movs	r3, #10
 8000744:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 60;
 8000746:	233c      	movs	r3, #60	; 0x3c
 8000748:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800074a:	2302      	movs	r3, #2
 800074c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 800074e:	2304      	movs	r3, #4
 8000750:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000752:	2302      	movs	r3, #2
 8000754:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8000756:	2340      	movs	r3, #64	; 0x40
 8000758:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800075a:	2320      	movs	r3, #32
 800075c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000762:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000766:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000768:	2300      	movs	r3, #0
 800076a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800076e:	463b      	mov	r3, r7
 8000770:	4618      	mov	r0, r3
 8000772:	f004 fdc5 	bl	8005300 <HAL_RCCEx_PeriphCLKConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 800077c:	f000 fe6a 	bl	8001454 <Error_Handler>
  }
}
 8000780:	bf00      	nop
 8000782:	37c0      	adds	r7, #192	; 0xc0
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08a      	sub	sp, #40	; 0x28
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800078e:	f107 031c 	add.w	r3, r7, #28
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800079a:	463b      	mov	r3, r7
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]
 80007a8:	615a      	str	r2, [r3, #20]
 80007aa:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007ac:	4b2f      	ldr	r3, [pc, #188]	; (800086c <MX_ADC1_Init+0xe4>)
 80007ae:	4a30      	ldr	r2, [pc, #192]	; (8000870 <MX_ADC1_Init+0xe8>)
 80007b0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007b2:	4b2e      	ldr	r3, [pc, #184]	; (800086c <MX_ADC1_Init+0xe4>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80007b8:	4b2c      	ldr	r3, [pc, #176]	; (800086c <MX_ADC1_Init+0xe4>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007be:	4b2b      	ldr	r3, [pc, #172]	; (800086c <MX_ADC1_Init+0xe4>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007c4:	4b29      	ldr	r3, [pc, #164]	; (800086c <MX_ADC1_Init+0xe4>)
 80007c6:	2204      	movs	r2, #4
 80007c8:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007ca:	4b28      	ldr	r3, [pc, #160]	; (800086c <MX_ADC1_Init+0xe4>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007d0:	4b26      	ldr	r3, [pc, #152]	; (800086c <MX_ADC1_Init+0xe4>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80007d6:	4b25      	ldr	r3, [pc, #148]	; (800086c <MX_ADC1_Init+0xe4>)
 80007d8:	2201      	movs	r2, #1
 80007da:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007dc:	4b23      	ldr	r3, [pc, #140]	; (800086c <MX_ADC1_Init+0xe4>)
 80007de:	2200      	movs	r2, #0
 80007e0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007e2:	4b22      	ldr	r3, [pc, #136]	; (800086c <MX_ADC1_Init+0xe4>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007e8:	4b20      	ldr	r3, [pc, #128]	; (800086c <MX_ADC1_Init+0xe4>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80007ee:	4b1f      	ldr	r3, [pc, #124]	; (800086c <MX_ADC1_Init+0xe4>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007f4:	4b1d      	ldr	r3, [pc, #116]	; (800086c <MX_ADC1_Init+0xe4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007fa:	4b1c      	ldr	r3, [pc, #112]	; (800086c <MX_ADC1_Init+0xe4>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000800:	4b1a      	ldr	r3, [pc, #104]	; (800086c <MX_ADC1_Init+0xe4>)
 8000802:	2200      	movs	r2, #0
 8000804:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000808:	4818      	ldr	r0, [pc, #96]	; (800086c <MX_ADC1_Init+0xe4>)
 800080a:	f001 fff3 	bl	80027f4 <HAL_ADC_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000814:	f000 fe1e 	bl	8001454 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000818:	2300      	movs	r3, #0
 800081a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800081c:	f107 031c 	add.w	r3, r7, #28
 8000820:	4619      	mov	r1, r3
 8000822:	4812      	ldr	r0, [pc, #72]	; (800086c <MX_ADC1_Init+0xe4>)
 8000824:	f002 fe0a 	bl	800343c <HAL_ADCEx_MultiModeConfigChannel>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800082e:	f000 fe11 	bl	8001454 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000832:	4b10      	ldr	r3, [pc, #64]	; (8000874 <MX_ADC1_Init+0xec>)
 8000834:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000836:	2306      	movs	r3, #6
 8000838:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800083a:	2300      	movs	r3, #0
 800083c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800083e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000842:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000844:	2304      	movs	r3, #4
 8000846:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800084c:	2300      	movs	r3, #0
 800084e:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000850:	463b      	mov	r3, r7
 8000852:	4619      	mov	r1, r3
 8000854:	4805      	ldr	r0, [pc, #20]	; (800086c <MX_ADC1_Init+0xe4>)
 8000856:	f002 f96f 	bl	8002b38 <HAL_ADC_ConfigChannel>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000860:	f000 fdf8 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	3728      	adds	r7, #40	; 0x28
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	2400002c 	.word	0x2400002c
 8000870:	40022000 	.word	0x40022000
 8000874:	0c900008 	.word	0x0c900008

08000878 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800087c:	4b1b      	ldr	r3, [pc, #108]	; (80008ec <MX_I2C1_Init+0x74>)
 800087e:	4a1c      	ldr	r2, [pc, #112]	; (80008f0 <MX_I2C1_Init+0x78>)
 8000880:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C0ECFF;
 8000882:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <MX_I2C1_Init+0x74>)
 8000884:	4a1b      	ldr	r2, [pc, #108]	; (80008f4 <MX_I2C1_Init+0x7c>)
 8000886:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000888:	4b18      	ldr	r3, [pc, #96]	; (80008ec <MX_I2C1_Init+0x74>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800088e:	4b17      	ldr	r3, [pc, #92]	; (80008ec <MX_I2C1_Init+0x74>)
 8000890:	2201      	movs	r2, #1
 8000892:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000894:	4b15      	ldr	r3, [pc, #84]	; (80008ec <MX_I2C1_Init+0x74>)
 8000896:	2200      	movs	r2, #0
 8000898:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800089a:	4b14      	ldr	r3, [pc, #80]	; (80008ec <MX_I2C1_Init+0x74>)
 800089c:	2200      	movs	r2, #0
 800089e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <MX_I2C1_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <MX_I2C1_Init+0x74>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ac:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <MX_I2C1_Init+0x74>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008b2:	480e      	ldr	r0, [pc, #56]	; (80008ec <MX_I2C1_Init+0x74>)
 80008b4:	f003 f9ca 	bl	8003c4c <HAL_I2C_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008be:	f000 fdc9 	bl	8001454 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008c2:	2100      	movs	r1, #0
 80008c4:	4809      	ldr	r0, [pc, #36]	; (80008ec <MX_I2C1_Init+0x74>)
 80008c6:	f003 fa51 	bl	8003d6c <HAL_I2CEx_ConfigAnalogFilter>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008d0:	f000 fdc0 	bl	8001454 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008d4:	2100      	movs	r1, #0
 80008d6:	4805      	ldr	r0, [pc, #20]	; (80008ec <MX_I2C1_Init+0x74>)
 80008d8:	f003 fa93 	bl	8003e02 <HAL_I2CEx_ConfigDigitalFilter>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008e2:	f000 fdb7 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	24000090 	.word	0x24000090
 80008f0:	40005400 	.word	0x40005400
 80008f4:	10c0ecff 	.word	0x10c0ecff

080008f8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80008fc:	4b22      	ldr	r3, [pc, #136]	; (8000988 <MX_LPUART1_UART_Init+0x90>)
 80008fe:	4a23      	ldr	r2, [pc, #140]	; (800098c <MX_LPUART1_UART_Init+0x94>)
 8000900:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000902:	4b21      	ldr	r3, [pc, #132]	; (8000988 <MX_LPUART1_UART_Init+0x90>)
 8000904:	4a22      	ldr	r2, [pc, #136]	; (8000990 <MX_LPUART1_UART_Init+0x98>)
 8000906:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000908:	4b1f      	ldr	r3, [pc, #124]	; (8000988 <MX_LPUART1_UART_Init+0x90>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800090e:	4b1e      	ldr	r3, [pc, #120]	; (8000988 <MX_LPUART1_UART_Init+0x90>)
 8000910:	2200      	movs	r2, #0
 8000912:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000914:	4b1c      	ldr	r3, [pc, #112]	; (8000988 <MX_LPUART1_UART_Init+0x90>)
 8000916:	2200      	movs	r2, #0
 8000918:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800091a:	4b1b      	ldr	r3, [pc, #108]	; (8000988 <MX_LPUART1_UART_Init+0x90>)
 800091c:	220c      	movs	r2, #12
 800091e:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000920:	4b19      	ldr	r3, [pc, #100]	; (8000988 <MX_LPUART1_UART_Init+0x90>)
 8000922:	2200      	movs	r2, #0
 8000924:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000926:	4b18      	ldr	r3, [pc, #96]	; (8000988 <MX_LPUART1_UART_Init+0x90>)
 8000928:	2200      	movs	r2, #0
 800092a:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800092c:	4b16      	ldr	r3, [pc, #88]	; (8000988 <MX_LPUART1_UART_Init+0x90>)
 800092e:	2200      	movs	r2, #0
 8000930:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000932:	4b15      	ldr	r3, [pc, #84]	; (8000988 <MX_LPUART1_UART_Init+0x90>)
 8000934:	2200      	movs	r2, #0
 8000936:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000938:	4b13      	ldr	r3, [pc, #76]	; (8000988 <MX_LPUART1_UART_Init+0x90>)
 800093a:	2200      	movs	r2, #0
 800093c:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800093e:	4812      	ldr	r0, [pc, #72]	; (8000988 <MX_LPUART1_UART_Init+0x90>)
 8000940:	f009 fd96 	bl	800a470 <HAL_UART_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 800094a:	f000 fd83 	bl	8001454 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800094e:	2100      	movs	r1, #0
 8000950:	480d      	ldr	r0, [pc, #52]	; (8000988 <MX_LPUART1_UART_Init+0x90>)
 8000952:	f00a fd98 	bl	800b486 <HAL_UARTEx_SetTxFifoThreshold>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 800095c:	f000 fd7a 	bl	8001454 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000960:	2100      	movs	r1, #0
 8000962:	4809      	ldr	r0, [pc, #36]	; (8000988 <MX_LPUART1_UART_Init+0x90>)
 8000964:	f00a fdcd 	bl	800b502 <HAL_UARTEx_SetRxFifoThreshold>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 800096e:	f000 fd71 	bl	8001454 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000972:	4805      	ldr	r0, [pc, #20]	; (8000988 <MX_LPUART1_UART_Init+0x90>)
 8000974:	f00a fd4e 	bl	800b414 <HAL_UARTEx_DisableFifoMode>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 800097e:	f000 fd69 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	240000e4 	.word	0x240000e4
 800098c:	58000c00 	.word	0x58000c00
 8000990:	00033324 	.word	0x00033324

08000994 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000998:	4b22      	ldr	r3, [pc, #136]	; (8000a24 <MX_UART4_Init+0x90>)
 800099a:	4a23      	ldr	r2, [pc, #140]	; (8000a28 <MX_UART4_Init+0x94>)
 800099c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800099e:	4b21      	ldr	r3, [pc, #132]	; (8000a24 <MX_UART4_Init+0x90>)
 80009a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80009a6:	4b1f      	ldr	r3, [pc, #124]	; (8000a24 <MX_UART4_Init+0x90>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80009ac:	4b1d      	ldr	r3, [pc, #116]	; (8000a24 <MX_UART4_Init+0x90>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80009b2:	4b1c      	ldr	r3, [pc, #112]	; (8000a24 <MX_UART4_Init+0x90>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80009b8:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <MX_UART4_Init+0x90>)
 80009ba:	220c      	movs	r2, #12
 80009bc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009be:	4b19      	ldr	r3, [pc, #100]	; (8000a24 <MX_UART4_Init+0x90>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c4:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <MX_UART4_Init+0x90>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ca:	4b16      	ldr	r3, [pc, #88]	; (8000a24 <MX_UART4_Init+0x90>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009d0:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <MX_UART4_Init+0x90>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d6:	4b13      	ldr	r3, [pc, #76]	; (8000a24 <MX_UART4_Init+0x90>)
 80009d8:	2200      	movs	r2, #0
 80009da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80009dc:	4811      	ldr	r0, [pc, #68]	; (8000a24 <MX_UART4_Init+0x90>)
 80009de:	f009 fd47 	bl	800a470 <HAL_UART_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80009e8:	f000 fd34 	bl	8001454 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ec:	2100      	movs	r1, #0
 80009ee:	480d      	ldr	r0, [pc, #52]	; (8000a24 <MX_UART4_Init+0x90>)
 80009f0:	f00a fd49 	bl	800b486 <HAL_UARTEx_SetTxFifoThreshold>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80009fa:	f000 fd2b 	bl	8001454 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009fe:	2100      	movs	r1, #0
 8000a00:	4808      	ldr	r0, [pc, #32]	; (8000a24 <MX_UART4_Init+0x90>)
 8000a02:	f00a fd7e 	bl	800b502 <HAL_UARTEx_SetRxFifoThreshold>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000a0c:	f000 fd22 	bl	8001454 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000a10:	4804      	ldr	r0, [pc, #16]	; (8000a24 <MX_UART4_Init+0x90>)
 8000a12:	f00a fcff 	bl	800b414 <HAL_UARTEx_DisableFifoMode>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000a1c:	f000 fd1a 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	24000178 	.word	0x24000178
 8000a28:	40004c00 	.word	0x40004c00

08000a2c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000a30:	4b22      	ldr	r3, [pc, #136]	; (8000abc <MX_UART5_Init+0x90>)
 8000a32:	4a23      	ldr	r2, [pc, #140]	; (8000ac0 <MX_UART5_Init+0x94>)
 8000a34:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000a36:	4b21      	ldr	r3, [pc, #132]	; (8000abc <MX_UART5_Init+0x90>)
 8000a38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a3c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3e:	4b1f      	ldr	r3, [pc, #124]	; (8000abc <MX_UART5_Init+0x90>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000a44:	4b1d      	ldr	r3, [pc, #116]	; (8000abc <MX_UART5_Init+0x90>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000a4a:	4b1c      	ldr	r3, [pc, #112]	; (8000abc <MX_UART5_Init+0x90>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000a50:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <MX_UART5_Init+0x90>)
 8000a52:	220c      	movs	r2, #12
 8000a54:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a56:	4b19      	ldr	r3, [pc, #100]	; (8000abc <MX_UART5_Init+0x90>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a5c:	4b17      	ldr	r3, [pc, #92]	; (8000abc <MX_UART5_Init+0x90>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a62:	4b16      	ldr	r3, [pc, #88]	; (8000abc <MX_UART5_Init+0x90>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a68:	4b14      	ldr	r3, [pc, #80]	; (8000abc <MX_UART5_Init+0x90>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a6e:	4b13      	ldr	r3, [pc, #76]	; (8000abc <MX_UART5_Init+0x90>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000a74:	4811      	ldr	r0, [pc, #68]	; (8000abc <MX_UART5_Init+0x90>)
 8000a76:	f009 fcfb 	bl	800a470 <HAL_UART_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000a80:	f000 fce8 	bl	8001454 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a84:	2100      	movs	r1, #0
 8000a86:	480d      	ldr	r0, [pc, #52]	; (8000abc <MX_UART5_Init+0x90>)
 8000a88:	f00a fcfd 	bl	800b486 <HAL_UARTEx_SetTxFifoThreshold>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8000a92:	f000 fcdf 	bl	8001454 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a96:	2100      	movs	r1, #0
 8000a98:	4808      	ldr	r0, [pc, #32]	; (8000abc <MX_UART5_Init+0x90>)
 8000a9a:	f00a fd32 	bl	800b502 <HAL_UARTEx_SetRxFifoThreshold>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8000aa4:	f000 fcd6 	bl	8001454 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8000aa8:	4804      	ldr	r0, [pc, #16]	; (8000abc <MX_UART5_Init+0x90>)
 8000aaa:	f00a fcb3 	bl	800b414 <HAL_UARTEx_DisableFifoMode>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8000ab4:	f000 fcce 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	2400020c 	.word	0x2400020c
 8000ac0:	40005000 	.word	0x40005000

08000ac4 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000ac8:	4b22      	ldr	r3, [pc, #136]	; (8000b54 <MX_UART7_Init+0x90>)
 8000aca:	4a23      	ldr	r2, [pc, #140]	; (8000b58 <MX_UART7_Init+0x94>)
 8000acc:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000ace:	4b21      	ldr	r3, [pc, #132]	; (8000b54 <MX_UART7_Init+0x90>)
 8000ad0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ad4:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad6:	4b1f      	ldr	r3, [pc, #124]	; (8000b54 <MX_UART7_Init+0x90>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000adc:	4b1d      	ldr	r3, [pc, #116]	; (8000b54 <MX_UART7_Init+0x90>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000ae2:	4b1c      	ldr	r3, [pc, #112]	; (8000b54 <MX_UART7_Init+0x90>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000ae8:	4b1a      	ldr	r3, [pc, #104]	; (8000b54 <MX_UART7_Init+0x90>)
 8000aea:	220c      	movs	r2, #12
 8000aec:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aee:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <MX_UART7_Init+0x90>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af4:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <MX_UART7_Init+0x90>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000afa:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <MX_UART7_Init+0x90>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b00:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <MX_UART7_Init+0x90>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b06:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <MX_UART7_Init+0x90>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000b0c:	4811      	ldr	r0, [pc, #68]	; (8000b54 <MX_UART7_Init+0x90>)
 8000b0e:	f009 fcaf 	bl	800a470 <HAL_UART_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8000b18:	f000 fc9c 	bl	8001454 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	480d      	ldr	r0, [pc, #52]	; (8000b54 <MX_UART7_Init+0x90>)
 8000b20:	f00a fcb1 	bl	800b486 <HAL_UARTEx_SetTxFifoThreshold>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8000b2a:	f000 fc93 	bl	8001454 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4808      	ldr	r0, [pc, #32]	; (8000b54 <MX_UART7_Init+0x90>)
 8000b32:	f00a fce6 	bl	800b502 <HAL_UARTEx_SetRxFifoThreshold>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8000b3c:	f000 fc8a 	bl	8001454 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8000b40:	4804      	ldr	r0, [pc, #16]	; (8000b54 <MX_UART7_Init+0x90>)
 8000b42:	f00a fc67 	bl	800b414 <HAL_UARTEx_DisableFifoMode>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8000b4c:	f000 fc82 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	240002a0 	.word	0x240002a0
 8000b58:	40007800 	.word	0x40007800

08000b5c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b60:	4b22      	ldr	r3, [pc, #136]	; (8000bec <MX_USART3_UART_Init+0x90>)
 8000b62:	4a23      	ldr	r2, [pc, #140]	; (8000bf0 <MX_USART3_UART_Init+0x94>)
 8000b64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b66:	4b21      	ldr	r3, [pc, #132]	; (8000bec <MX_USART3_UART_Init+0x90>)
 8000b68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b6e:	4b1f      	ldr	r3, [pc, #124]	; (8000bec <MX_USART3_UART_Init+0x90>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b74:	4b1d      	ldr	r3, [pc, #116]	; (8000bec <MX_USART3_UART_Init+0x90>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b7a:	4b1c      	ldr	r3, [pc, #112]	; (8000bec <MX_USART3_UART_Init+0x90>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b80:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <MX_USART3_UART_Init+0x90>)
 8000b82:	220c      	movs	r2, #12
 8000b84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b86:	4b19      	ldr	r3, [pc, #100]	; (8000bec <MX_USART3_UART_Init+0x90>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b8c:	4b17      	ldr	r3, [pc, #92]	; (8000bec <MX_USART3_UART_Init+0x90>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b92:	4b16      	ldr	r3, [pc, #88]	; (8000bec <MX_USART3_UART_Init+0x90>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b98:	4b14      	ldr	r3, [pc, #80]	; (8000bec <MX_USART3_UART_Init+0x90>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b9e:	4b13      	ldr	r3, [pc, #76]	; (8000bec <MX_USART3_UART_Init+0x90>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ba4:	4811      	ldr	r0, [pc, #68]	; (8000bec <MX_USART3_UART_Init+0x90>)
 8000ba6:	f009 fc63 	bl	800a470 <HAL_UART_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000bb0:	f000 fc50 	bl	8001454 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	480d      	ldr	r0, [pc, #52]	; (8000bec <MX_USART3_UART_Init+0x90>)
 8000bb8:	f00a fc65 	bl	800b486 <HAL_UARTEx_SetTxFifoThreshold>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000bc2:	f000 fc47 	bl	8001454 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4808      	ldr	r0, [pc, #32]	; (8000bec <MX_USART3_UART_Init+0x90>)
 8000bca:	f00a fc9a 	bl	800b502 <HAL_UARTEx_SetRxFifoThreshold>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000bd4:	f000 fc3e 	bl	8001454 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000bd8:	4804      	ldr	r0, [pc, #16]	; (8000bec <MX_USART3_UART_Init+0x90>)
 8000bda:	f00a fc1b 	bl	800b414 <HAL_UARTEx_DisableFifoMode>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000be4:	f000 fc36 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	24000334 	.word	0x24000334
 8000bf0:	40004800 	.word	0x40004800

08000bf4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <MX_QUADSPI_Init+0x50>)
 8000bfa:	4a13      	ldr	r2, [pc, #76]	; (8000c48 <MX_QUADSPI_Init+0x54>)
 8000bfc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000bfe:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <MX_QUADSPI_Init+0x50>)
 8000c00:	22ff      	movs	r2, #255	; 0xff
 8000c02:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000c04:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <MX_QUADSPI_Init+0x50>)
 8000c06:	2201      	movs	r2, #1
 8000c08:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <MX_QUADSPI_Init+0x50>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000c10:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <MX_QUADSPI_Init+0x50>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000c16:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <MX_QUADSPI_Init+0x50>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000c1c:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <MX_QUADSPI_Init+0x50>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000c22:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <MX_QUADSPI_Init+0x50>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <MX_QUADSPI_Init+0x50>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000c2e:	4805      	ldr	r0, [pc, #20]	; (8000c44 <MX_QUADSPI_Init+0x50>)
 8000c30:	f003 fac6 	bl	80041c0 <HAL_QSPI_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000c3a:	f000 fc0b 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	240003c8 	.word	0x240003c8
 8000c48:	52005000 	.word	0x52005000

08000c4c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000c50:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <MX_SDMMC1_SD_Init+0x40>)
 8000c52:	4a0f      	ldr	r2, [pc, #60]	; (8000c90 <MX_SDMMC1_SD_Init+0x44>)
 8000c54:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000c56:	4b0d      	ldr	r3, [pc, #52]	; (8000c8c <MX_SDMMC1_SD_Init+0x40>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000c5c:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <MX_SDMMC1_SD_Init+0x40>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000c62:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <MX_SDMMC1_SD_Init+0x40>)
 8000c64:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c68:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000c6a:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <MX_SDMMC1_SD_Init+0x40>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <MX_SDMMC1_SD_Init+0x40>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000c76:	4805      	ldr	r0, [pc, #20]	; (8000c8c <MX_SDMMC1_SD_Init+0x40>)
 8000c78:	f007 f840 	bl	8007cfc <HAL_SD_Init>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8000c82:	f000 fbe7 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	24000414 	.word	0x24000414
 8000c90:	52007000 	.word	0x52007000

08000c94 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c98:	4b27      	ldr	r3, [pc, #156]	; (8000d38 <MX_SPI1_Init+0xa4>)
 8000c9a:	4a28      	ldr	r2, [pc, #160]	; (8000d3c <MX_SPI1_Init+0xa8>)
 8000c9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c9e:	4b26      	ldr	r3, [pc, #152]	; (8000d38 <MX_SPI1_Init+0xa4>)
 8000ca0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000ca4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ca6:	4b24      	ldr	r3, [pc, #144]	; (8000d38 <MX_SPI1_Init+0xa4>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000cac:	4b22      	ldr	r3, [pc, #136]	; (8000d38 <MX_SPI1_Init+0xa4>)
 8000cae:	2203      	movs	r2, #3
 8000cb0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cb2:	4b21      	ldr	r3, [pc, #132]	; (8000d38 <MX_SPI1_Init+0xa4>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cb8:	4b1f      	ldr	r3, [pc, #124]	; (8000d38 <MX_SPI1_Init+0xa4>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cbe:	4b1e      	ldr	r3, [pc, #120]	; (8000d38 <MX_SPI1_Init+0xa4>)
 8000cc0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000cc4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cc6:	4b1c      	ldr	r3, [pc, #112]	; (8000d38 <MX_SPI1_Init+0xa4>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ccc:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <MX_SPI1_Init+0xa4>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cd2:	4b19      	ldr	r3, [pc, #100]	; (8000d38 <MX_SPI1_Init+0xa4>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cd8:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <MX_SPI1_Init+0xa4>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000cde:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <MX_SPI1_Init+0xa4>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ce4:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <MX_SPI1_Init+0xa4>)
 8000ce6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cea:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000cec:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <MX_SPI1_Init+0xa4>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000cf2:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <MX_SPI1_Init+0xa4>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cf8:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <MX_SPI1_Init+0xa4>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <MX_SPI1_Init+0xa4>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d04:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <MX_SPI1_Init+0xa4>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <MX_SPI1_Init+0xa4>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d10:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <MX_SPI1_Init+0xa4>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d16:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <MX_SPI1_Init+0xa4>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <MX_SPI1_Init+0xa4>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d22:	4805      	ldr	r0, [pc, #20]	; (8000d38 <MX_SPI1_Init+0xa4>)
 8000d24:	f008 f858 	bl	8008dd8 <HAL_SPI_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000d2e:	f000 fb91 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	24000490 	.word	0x24000490
 8000d3c:	40013000 	.word	0x40013000

08000d40 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000d44:	4b27      	ldr	r3, [pc, #156]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000d46:	4a28      	ldr	r2, [pc, #160]	; (8000de8 <MX_SPI4_Init+0xa8>)
 8000d48:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000d4a:	4b26      	ldr	r3, [pc, #152]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000d4c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000d50:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000d52:	4b24      	ldr	r3, [pc, #144]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d58:	4b22      	ldr	r3, [pc, #136]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d5e:	4b21      	ldr	r3, [pc, #132]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d64:	4b1f      	ldr	r3, [pc, #124]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000d6a:	4b1e      	ldr	r3, [pc, #120]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000d6c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000d70:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d72:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d78:	4b1a      	ldr	r3, [pc, #104]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d7e:	4b19      	ldr	r3, [pc, #100]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d84:	4b17      	ldr	r3, [pc, #92]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000d8a:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d90:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000d92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d96:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d9e:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000da4:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000daa:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000db6:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000dbc:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000dc2:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000dce:	4805      	ldr	r0, [pc, #20]	; (8000de4 <MX_SPI4_Init+0xa4>)
 8000dd0:	f008 f802 	bl	8008dd8 <HAL_SPI_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8000dda:	f000 fb3b 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	24000518 	.word	0x24000518
 8000de8:	40013400 	.word	0x40013400

08000dec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08a      	sub	sp, #40	; 0x28
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df2:	f107 031c 	add.w	r3, r7, #28
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]
 8000dfc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dfe:	463b      	mov	r3, r7
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
 8000e0c:	615a      	str	r2, [r3, #20]
 8000e0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e10:	4b37      	ldr	r3, [pc, #220]	; (8000ef0 <MX_TIM2_Init+0x104>)
 8000e12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e18:	4b35      	ldr	r3, [pc, #212]	; (8000ef0 <MX_TIM2_Init+0x104>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e1e:	4b34      	ldr	r3, [pc, #208]	; (8000ef0 <MX_TIM2_Init+0x104>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000e24:	4b32      	ldr	r3, [pc, #200]	; (8000ef0 <MX_TIM2_Init+0x104>)
 8000e26:	f04f 32ff 	mov.w	r2, #4294967295
 8000e2a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e2c:	4b30      	ldr	r3, [pc, #192]	; (8000ef0 <MX_TIM2_Init+0x104>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e32:	4b2f      	ldr	r3, [pc, #188]	; (8000ef0 <MX_TIM2_Init+0x104>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e38:	482d      	ldr	r0, [pc, #180]	; (8000ef0 <MX_TIM2_Init+0x104>)
 8000e3a:	f008 f96d 	bl	8009118 <HAL_TIM_PWM_Init>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000e44:	f000 fb06 	bl	8001454 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000e48:	4829      	ldr	r0, [pc, #164]	; (8000ef0 <MX_TIM2_Init+0x104>)
 8000e4a:	f008 f904 	bl	8009056 <HAL_TIM_OC_Init>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000e54:	f000 fafe 	bl	8001454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e60:	f107 031c 	add.w	r3, r7, #28
 8000e64:	4619      	mov	r1, r3
 8000e66:	4822      	ldr	r0, [pc, #136]	; (8000ef0 <MX_TIM2_Init+0x104>)
 8000e68:	f009 fa74 	bl	800a354 <HAL_TIMEx_MasterConfigSynchronization>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000e72:	f000 faef 	bl	8001454 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e76:	2360      	movs	r3, #96	; 0x60
 8000e78:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e82:	2300      	movs	r3, #0
 8000e84:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e86:	463b      	mov	r3, r7
 8000e88:	2200      	movs	r2, #0
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4818      	ldr	r0, [pc, #96]	; (8000ef0 <MX_TIM2_Init+0x104>)
 8000e8e:	f008 fb07 	bl	80094a0 <HAL_TIM_PWM_ConfigChannel>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000e98:	f000 fadc 	bl	8001454 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e9c:	463b      	mov	r3, r7
 8000e9e:	2204      	movs	r2, #4
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4813      	ldr	r0, [pc, #76]	; (8000ef0 <MX_TIM2_Init+0x104>)
 8000ea4:	f008 fafc 	bl	80094a0 <HAL_TIM_PWM_ConfigChannel>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8000eae:	f000 fad1 	bl	8001454 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000eb2:	463b      	mov	r3, r7
 8000eb4:	2208      	movs	r2, #8
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	480d      	ldr	r0, [pc, #52]	; (8000ef0 <MX_TIM2_Init+0x104>)
 8000eba:	f008 faf1 	bl	80094a0 <HAL_TIM_PWM_ConfigChannel>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000ec4:	f000 fac6 	bl	8001454 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ecc:	463b      	mov	r3, r7
 8000ece:	220c      	movs	r2, #12
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4807      	ldr	r0, [pc, #28]	; (8000ef0 <MX_TIM2_Init+0x104>)
 8000ed4:	f008 f9ce 	bl	8009274 <HAL_TIM_OC_ConfigChannel>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 8000ede:	f000 fab9 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ee2:	4803      	ldr	r0, [pc, #12]	; (8000ef0 <MX_TIM2_Init+0x104>)
 8000ee4:	f001 f88e 	bl	8002004 <HAL_TIM_MspPostInit>

}
 8000ee8:	bf00      	nop
 8000eea:	3728      	adds	r7, #40	; 0x28
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	240005a0 	.word	0x240005a0

08000ef4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08a      	sub	sp, #40	; 0x28
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000efa:	f107 031c 	add.w	r3, r7, #28
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f06:	463b      	mov	r3, r7
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
 8000f14:	615a      	str	r2, [r3, #20]
 8000f16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f18:	4b27      	ldr	r3, [pc, #156]	; (8000fb8 <MX_TIM3_Init+0xc4>)
 8000f1a:	4a28      	ldr	r2, [pc, #160]	; (8000fbc <MX_TIM3_Init+0xc8>)
 8000f1c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f1e:	4b26      	ldr	r3, [pc, #152]	; (8000fb8 <MX_TIM3_Init+0xc4>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f24:	4b24      	ldr	r3, [pc, #144]	; (8000fb8 <MX_TIM3_Init+0xc4>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f2a:	4b23      	ldr	r3, [pc, #140]	; (8000fb8 <MX_TIM3_Init+0xc4>)
 8000f2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f30:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f32:	4b21      	ldr	r3, [pc, #132]	; (8000fb8 <MX_TIM3_Init+0xc4>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f38:	4b1f      	ldr	r3, [pc, #124]	; (8000fb8 <MX_TIM3_Init+0xc4>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f3e:	481e      	ldr	r0, [pc, #120]	; (8000fb8 <MX_TIM3_Init+0xc4>)
 8000f40:	f008 f8ea 	bl	8009118 <HAL_TIM_PWM_Init>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000f4a:	f000 fa83 	bl	8001454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f52:	2300      	movs	r3, #0
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f56:	f107 031c 	add.w	r3, r7, #28
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4816      	ldr	r0, [pc, #88]	; (8000fb8 <MX_TIM3_Init+0xc4>)
 8000f5e:	f009 f9f9 	bl	800a354 <HAL_TIMEx_MasterConfigSynchronization>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000f68:	f000 fa74 	bl	8001454 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f6c:	2360      	movs	r3, #96	; 0x60
 8000f6e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f74:	2300      	movs	r3, #0
 8000f76:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f7c:	463b      	mov	r3, r7
 8000f7e:	2200      	movs	r2, #0
 8000f80:	4619      	mov	r1, r3
 8000f82:	480d      	ldr	r0, [pc, #52]	; (8000fb8 <MX_TIM3_Init+0xc4>)
 8000f84:	f008 fa8c 	bl	80094a0 <HAL_TIM_PWM_ConfigChannel>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000f8e:	f000 fa61 	bl	8001454 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f92:	463b      	mov	r3, r7
 8000f94:	2204      	movs	r2, #4
 8000f96:	4619      	mov	r1, r3
 8000f98:	4807      	ldr	r0, [pc, #28]	; (8000fb8 <MX_TIM3_Init+0xc4>)
 8000f9a:	f008 fa81 	bl	80094a0 <HAL_TIM_PWM_ConfigChannel>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000fa4:	f000 fa56 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000fa8:	4803      	ldr	r0, [pc, #12]	; (8000fb8 <MX_TIM3_Init+0xc4>)
 8000faa:	f001 f82b 	bl	8002004 <HAL_TIM_MspPostInit>

}
 8000fae:	bf00      	nop
 8000fb0:	3728      	adds	r7, #40	; 0x28
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	240005ec 	.word	0x240005ec
 8000fbc:	40000400 	.word	0x40000400

08000fc0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08c      	sub	sp, #48	; 0x30
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000fc6:	f107 031c 	add.w	r3, r7, #28
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]
 8000fd4:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000fd6:	f107 030c 	add.w	r3, r7, #12
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000fee:	4b33      	ldr	r3, [pc, #204]	; (80010bc <MX_TIM5_Init+0xfc>)
 8000ff0:	4a33      	ldr	r2, [pc, #204]	; (80010c0 <MX_TIM5_Init+0x100>)
 8000ff2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000ff4:	4b31      	ldr	r3, [pc, #196]	; (80010bc <MX_TIM5_Init+0xfc>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ffa:	4b30      	ldr	r3, [pc, #192]	; (80010bc <MX_TIM5_Init+0xfc>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001000:	4b2e      	ldr	r3, [pc, #184]	; (80010bc <MX_TIM5_Init+0xfc>)
 8001002:	f04f 32ff 	mov.w	r2, #4294967295
 8001006:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001008:	4b2c      	ldr	r3, [pc, #176]	; (80010bc <MX_TIM5_Init+0xfc>)
 800100a:	2200      	movs	r2, #0
 800100c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800100e:	4b2b      	ldr	r3, [pc, #172]	; (80010bc <MX_TIM5_Init+0xfc>)
 8001010:	2200      	movs	r2, #0
 8001012:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8001014:	4829      	ldr	r0, [pc, #164]	; (80010bc <MX_TIM5_Init+0xfc>)
 8001016:	f008 f8d6 	bl	80091c6 <HAL_TIM_IC_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 8001020:	f000 fa18 	bl	8001454 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001024:	2304      	movs	r3, #4
 8001026:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001028:	2350      	movs	r3, #80	; 0x50
 800102a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800102c:	2300      	movs	r3, #0
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001030:	2300      	movs	r3, #0
 8001032:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8001038:	f107 031c 	add.w	r3, r7, #28
 800103c:	4619      	mov	r1, r3
 800103e:	481f      	ldr	r0, [pc, #124]	; (80010bc <MX_TIM5_Init+0xfc>)
 8001040:	f008 fb42 	bl	80096c8 <HAL_TIM_SlaveConfigSynchro>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 800104a:	f000 fa03 	bl	8001454 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001052:	2301      	movs	r3, #1
 8001054:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800105e:	f107 030c 	add.w	r3, r7, #12
 8001062:	2200      	movs	r2, #0
 8001064:	4619      	mov	r1, r3
 8001066:	4815      	ldr	r0, [pc, #84]	; (80010bc <MX_TIM5_Init+0xfc>)
 8001068:	f008 f97e 	bl	8009368 <HAL_TIM_IC_ConfigChannel>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM5_Init+0xb6>
  {
    Error_Handler();
 8001072:	f000 f9ef 	bl	8001454 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001076:	2302      	movs	r3, #2
 8001078:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800107a:	2302      	movs	r3, #2
 800107c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800107e:	f107 030c 	add.w	r3, r7, #12
 8001082:	2204      	movs	r2, #4
 8001084:	4619      	mov	r1, r3
 8001086:	480d      	ldr	r0, [pc, #52]	; (80010bc <MX_TIM5_Init+0xfc>)
 8001088:	f008 f96e 	bl	8009368 <HAL_TIM_IC_ConfigChannel>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8001092:	f000 f9df 	bl	8001454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001096:	2300      	movs	r3, #0
 8001098:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800109a:	2300      	movs	r3, #0
 800109c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800109e:	463b      	mov	r3, r7
 80010a0:	4619      	mov	r1, r3
 80010a2:	4806      	ldr	r0, [pc, #24]	; (80010bc <MX_TIM5_Init+0xfc>)
 80010a4:	f009 f956 	bl	800a354 <HAL_TIMEx_MasterConfigSynchronization>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_TIM5_Init+0xf2>
  {
    Error_Handler();
 80010ae:	f000 f9d1 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80010b2:	bf00      	nop
 80010b4:	3730      	adds	r7, #48	; 0x30
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	24000638 	.word	0x24000638
 80010c0:	40000c00 	.word	0x40000c00

080010c4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08c      	sub	sp, #48	; 0x30
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80010ca:	f107 031c 	add.w	r3, r7, #28
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	60da      	str	r2, [r3, #12]
 80010d8:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80010da:	f107 030c 	add.w	r3, r7, #12
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e8:	463b      	mov	r3, r7
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80010f2:	4b34      	ldr	r3, [pc, #208]	; (80011c4 <MX_TIM15_Init+0x100>)
 80010f4:	4a34      	ldr	r2, [pc, #208]	; (80011c8 <MX_TIM15_Init+0x104>)
 80010f6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80010f8:	4b32      	ldr	r3, [pc, #200]	; (80011c4 <MX_TIM15_Init+0x100>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010fe:	4b31      	ldr	r3, [pc, #196]	; (80011c4 <MX_TIM15_Init+0x100>)
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001104:	4b2f      	ldr	r3, [pc, #188]	; (80011c4 <MX_TIM15_Init+0x100>)
 8001106:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800110a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800110c:	4b2d      	ldr	r3, [pc, #180]	; (80011c4 <MX_TIM15_Init+0x100>)
 800110e:	2200      	movs	r2, #0
 8001110:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001112:	4b2c      	ldr	r3, [pc, #176]	; (80011c4 <MX_TIM15_Init+0x100>)
 8001114:	2200      	movs	r2, #0
 8001116:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001118:	4b2a      	ldr	r3, [pc, #168]	; (80011c4 <MX_TIM15_Init+0x100>)
 800111a:	2200      	movs	r2, #0
 800111c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 800111e:	4829      	ldr	r0, [pc, #164]	; (80011c4 <MX_TIM15_Init+0x100>)
 8001120:	f008 f851 	bl	80091c6 <HAL_TIM_IC_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_TIM15_Init+0x6a>
  {
    Error_Handler();
 800112a:	f000 f993 	bl	8001454 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800112e:	2304      	movs	r3, #4
 8001130:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001132:	2350      	movs	r3, #80	; 0x50
 8001134:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001136:	2300      	movs	r3, #0
 8001138:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800113a:	2300      	movs	r3, #0
 800113c:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 8001142:	f107 031c 	add.w	r3, r7, #28
 8001146:	4619      	mov	r1, r3
 8001148:	481e      	ldr	r0, [pc, #120]	; (80011c4 <MX_TIM15_Init+0x100>)
 800114a:	f008 fabd 	bl	80096c8 <HAL_TIM_SlaveConfigSynchro>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8001154:	f000 f97e 	bl	8001454 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001158:	2300      	movs	r3, #0
 800115a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800115c:	2301      	movs	r3, #1
 800115e:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001168:	f107 030c 	add.w	r3, r7, #12
 800116c:	2200      	movs	r2, #0
 800116e:	4619      	mov	r1, r3
 8001170:	4814      	ldr	r0, [pc, #80]	; (80011c4 <MX_TIM15_Init+0x100>)
 8001172:	f008 f8f9 	bl	8009368 <HAL_TIM_IC_ConfigChannel>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM15_Init+0xbc>
  {
    Error_Handler();
 800117c:	f000 f96a 	bl	8001454 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001180:	2302      	movs	r3, #2
 8001182:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001184:	2302      	movs	r3, #2
 8001186:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001188:	f107 030c 	add.w	r3, r7, #12
 800118c:	2204      	movs	r2, #4
 800118e:	4619      	mov	r1, r3
 8001190:	480c      	ldr	r0, [pc, #48]	; (80011c4 <MX_TIM15_Init+0x100>)
 8001192:	f008 f8e9 	bl	8009368 <HAL_TIM_IC_ConfigChannel>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_TIM15_Init+0xdc>
  {
    Error_Handler();
 800119c:	f000 f95a 	bl	8001454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a0:	2300      	movs	r3, #0
 80011a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a4:	2300      	movs	r3, #0
 80011a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80011a8:	463b      	mov	r3, r7
 80011aa:	4619      	mov	r1, r3
 80011ac:	4805      	ldr	r0, [pc, #20]	; (80011c4 <MX_TIM15_Init+0x100>)
 80011ae:	f009 f8d1 	bl	800a354 <HAL_TIMEx_MasterConfigSynchronization>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM15_Init+0xf8>
  {
    Error_Handler();
 80011b8:	f000 f94c 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80011bc:	bf00      	nop
 80011be:	3730      	adds	r7, #48	; 0x30
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	24000684 	.word	0x24000684
 80011c8:	40014000 	.word	0x40014000

080011cc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80011d0:	4b15      	ldr	r3, [pc, #84]	; (8001228 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011d2:	4a16      	ldr	r2, [pc, #88]	; (800122c <MX_USB_OTG_FS_PCD_Init+0x60>)
 80011d4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80011d6:	4b14      	ldr	r3, [pc, #80]	; (8001228 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011d8:	2209      	movs	r2, #9
 80011da:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80011dc:	4b12      	ldr	r3, [pc, #72]	; (8001228 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011de:	2202      	movs	r2, #2
 80011e0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80011e2:	4b11      	ldr	r3, [pc, #68]	; (8001228 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80011e8:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011ea:	2202      	movs	r2, #2
 80011ec:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80011fa:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001200:	4b09      	ldr	r3, [pc, #36]	; (8001228 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001202:	2200      	movs	r2, #0
 8001204:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001206:	4b08      	ldr	r3, [pc, #32]	; (8001228 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001208:	2200      	movs	r2, #0
 800120a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800120e:	2200      	movs	r2, #0
 8001210:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001212:	4805      	ldr	r0, [pc, #20]	; (8001228 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001214:	f002 fe41 	bl	8003e9a <HAL_PCD_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800121e:	f000 f919 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	240006d0 	.word	0x240006d0
 800122c:	40080000 	.word	0x40080000

08001230 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08c      	sub	sp, #48	; 0x30
 8001234:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001236:	f107 031c 	add.w	r3, r7, #28
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	60da      	str	r2, [r3, #12]
 8001244:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001246:	4b68      	ldr	r3, [pc, #416]	; (80013e8 <MX_GPIO_Init+0x1b8>)
 8001248:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800124c:	4a66      	ldr	r2, [pc, #408]	; (80013e8 <MX_GPIO_Init+0x1b8>)
 800124e:	f043 0310 	orr.w	r3, r3, #16
 8001252:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001256:	4b64      	ldr	r3, [pc, #400]	; (80013e8 <MX_GPIO_Init+0x1b8>)
 8001258:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800125c:	f003 0310 	and.w	r3, r3, #16
 8001260:	61bb      	str	r3, [r7, #24]
 8001262:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001264:	4b60      	ldr	r3, [pc, #384]	; (80013e8 <MX_GPIO_Init+0x1b8>)
 8001266:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800126a:	4a5f      	ldr	r2, [pc, #380]	; (80013e8 <MX_GPIO_Init+0x1b8>)
 800126c:	f043 0304 	orr.w	r3, r3, #4
 8001270:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001274:	4b5c      	ldr	r3, [pc, #368]	; (80013e8 <MX_GPIO_Init+0x1b8>)
 8001276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800127a:	f003 0304 	and.w	r3, r3, #4
 800127e:	617b      	str	r3, [r7, #20]
 8001280:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001282:	4b59      	ldr	r3, [pc, #356]	; (80013e8 <MX_GPIO_Init+0x1b8>)
 8001284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001288:	4a57      	ldr	r2, [pc, #348]	; (80013e8 <MX_GPIO_Init+0x1b8>)
 800128a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800128e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001292:	4b55      	ldr	r3, [pc, #340]	; (80013e8 <MX_GPIO_Init+0x1b8>)
 8001294:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800129c:	613b      	str	r3, [r7, #16]
 800129e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a0:	4b51      	ldr	r3, [pc, #324]	; (80013e8 <MX_GPIO_Init+0x1b8>)
 80012a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a6:	4a50      	ldr	r2, [pc, #320]	; (80013e8 <MX_GPIO_Init+0x1b8>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012b0:	4b4d      	ldr	r3, [pc, #308]	; (80013e8 <MX_GPIO_Init+0x1b8>)
 80012b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012be:	4b4a      	ldr	r3, [pc, #296]	; (80013e8 <MX_GPIO_Init+0x1b8>)
 80012c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c4:	4a48      	ldr	r2, [pc, #288]	; (80013e8 <MX_GPIO_Init+0x1b8>)
 80012c6:	f043 0302 	orr.w	r3, r3, #2
 80012ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012ce:	4b46      	ldr	r3, [pc, #280]	; (80013e8 <MX_GPIO_Init+0x1b8>)
 80012d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d4:	f003 0302 	and.w	r3, r3, #2
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012dc:	4b42      	ldr	r3, [pc, #264]	; (80013e8 <MX_GPIO_Init+0x1b8>)
 80012de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012e2:	4a41      	ldr	r2, [pc, #260]	; (80013e8 <MX_GPIO_Init+0x1b8>)
 80012e4:	f043 0308 	orr.w	r3, r3, #8
 80012e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012ec:	4b3e      	ldr	r3, [pc, #248]	; (80013e8 <MX_GPIO_Init+0x1b8>)
 80012ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f2:	f003 0308 	and.w	r3, r3, #8
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ONBOARD_LED_Pin|LCD_LED_Pin|LCD_CS_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80012fa:	2200      	movs	r2, #0
 80012fc:	f648 4108 	movw	r1, #35848	; 0x8c08
 8001300:	483a      	ldr	r0, [pc, #232]	; (80013ec <MX_GPIO_Init+0x1bc>)
 8001302:	f002 fc89 	bl	8003c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BNO_NRST_Pin|BNO_BOOTN_Pin|Manual_Output_Pin, GPIO_PIN_RESET);
 8001306:	2200      	movs	r2, #0
 8001308:	f24c 0120 	movw	r1, #49184	; 0xc020
 800130c:	4838      	ldr	r0, [pc, #224]	; (80013f0 <MX_GPIO_Init+0x1c0>)
 800130e:	f002 fc83 	bl	8003c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BNO_P0_Pin|BNO_P1_Pin|PCA9685_OE_Pin|LED_BLUE_Pin
 8001312:	2200      	movs	r2, #0
 8001314:	f44f 61ed 	mov.w	r1, #1896	; 0x768
 8001318:	4836      	ldr	r0, [pc, #216]	; (80013f4 <MX_GPIO_Init+0x1c4>)
 800131a:	f002 fc7d 	bl	8003c18 <HAL_GPIO_WritePin>
                          |LED_YELLOW_Pin|SPI_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : ONBOARD_LED_Pin LCD_LED_Pin LCD_CS_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = ONBOARD_LED_Pin|LCD_LED_Pin|LCD_CS_Pin|LED_RED_Pin;
 800131e:	f648 4308 	movw	r3, #35848	; 0x8c08
 8001322:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001324:	2301      	movs	r3, #1
 8001326:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132c:	2300      	movs	r3, #0
 800132e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001330:	f107 031c 	add.w	r3, r7, #28
 8001334:	4619      	mov	r1, r3
 8001336:	482d      	ldr	r0, [pc, #180]	; (80013ec <MX_GPIO_Init+0x1bc>)
 8001338:	f002 fabe 	bl	80038b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Onboard_Key1_Pin */
  GPIO_InitStruct.Pin = Onboard_Key1_Pin;
 800133c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001340:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001342:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001346:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Onboard_Key1_GPIO_Port, &GPIO_InitStruct);
 800134c:	f107 031c 	add.w	r3, r7, #28
 8001350:	4619      	mov	r1, r3
 8001352:	4829      	ldr	r0, [pc, #164]	; (80013f8 <MX_GPIO_Init+0x1c8>)
 8001354:	f002 fab0 	bl	80038b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BNO_INT_Pin */
  GPIO_InitStruct.Pin = BNO_INT_Pin;
 8001358:	2380      	movs	r3, #128	; 0x80
 800135a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800135c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001360:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BNO_INT_GPIO_Port, &GPIO_InitStruct);
 8001366:	f107 031c 	add.w	r3, r7, #28
 800136a:	4619      	mov	r1, r3
 800136c:	481f      	ldr	r0, [pc, #124]	; (80013ec <MX_GPIO_Init+0x1bc>)
 800136e:	f002 faa3 	bl	80038b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_SWITCH_Pin */
  GPIO_InitStruct.Pin = LCD_SWITCH_Pin;
 8001372:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001376:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001378:	2300      	movs	r3, #0
 800137a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LCD_SWITCH_GPIO_Port, &GPIO_InitStruct);
 8001380:	f107 031c 	add.w	r3, r7, #28
 8001384:	4619      	mov	r1, r3
 8001386:	4819      	ldr	r0, [pc, #100]	; (80013ec <MX_GPIO_Init+0x1bc>)
 8001388:	f002 fa96 	bl	80038b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BNO_NRST_Pin BNO_BOOTN_Pin Manual_Output_Pin */
  GPIO_InitStruct.Pin = BNO_NRST_Pin|BNO_BOOTN_Pin|Manual_Output_Pin;
 800138c:	f24c 0320 	movw	r3, #49184	; 0xc020
 8001390:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001392:	2301      	movs	r3, #1
 8001394:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139a:	2300      	movs	r3, #0
 800139c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139e:	f107 031c 	add.w	r3, r7, #28
 80013a2:	4619      	mov	r1, r3
 80013a4:	4812      	ldr	r0, [pc, #72]	; (80013f0 <MX_GPIO_Init+0x1c0>)
 80013a6:	f002 fa87 	bl	80038b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BNO_P0_Pin BNO_P1_Pin PCA9685_OE_Pin LED_BLUE_Pin
                           LED_YELLOW_Pin SPI_CS_Pin */
  GPIO_InitStruct.Pin = BNO_P0_Pin|BNO_P1_Pin|PCA9685_OE_Pin|LED_BLUE_Pin
 80013aa:	f44f 63ed 	mov.w	r3, #1896	; 0x768
 80013ae:	61fb      	str	r3, [r7, #28]
                          |LED_YELLOW_Pin|SPI_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b0:	2301      	movs	r3, #1
 80013b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b8:	2300      	movs	r3, #0
 80013ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013bc:	f107 031c 	add.w	r3, r7, #28
 80013c0:	4619      	mov	r1, r3
 80013c2:	480c      	ldr	r0, [pc, #48]	; (80013f4 <MX_GPIO_Init+0x1c4>)
 80013c4:	f002 fa78 	bl	80038b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Manual_Input_Pin */
  GPIO_InitStruct.Pin = Manual_Input_Pin;
 80013c8:	2380      	movs	r3, #128	; 0x80
 80013ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013cc:	2300      	movs	r3, #0
 80013ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Manual_Input_GPIO_Port, &GPIO_InitStruct);
 80013d4:	f107 031c 	add.w	r3, r7, #28
 80013d8:	4619      	mov	r1, r3
 80013da:	4805      	ldr	r0, [pc, #20]	; (80013f0 <MX_GPIO_Init+0x1c0>)
 80013dc:	f002 fa6c 	bl	80038b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013e0:	bf00      	nop
 80013e2:	3730      	adds	r7, #48	; 0x30
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	58024400 	.word	0x58024400
 80013ec:	58021000 	.word	0x58021000
 80013f0:	58020400 	.word	0x58020400
 80013f4:	58020c00 	.word	0x58020c00
 80013f8:	58020800 	.word	0x58020800

080013fc <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001402:	463b      	mov	r3, r7
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800140e:	f002 f9d7 	bl	80037c0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001412:	2301      	movs	r3, #1
 8001414:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001416:	2300      	movs	r3, #0
 8001418:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800141a:	2300      	movs	r3, #0
 800141c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800141e:	231f      	movs	r3, #31
 8001420:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001422:	2387      	movs	r3, #135	; 0x87
 8001424:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001426:	2300      	movs	r3, #0
 8001428:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800142a:	2300      	movs	r3, #0
 800142c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800142e:	2301      	movs	r3, #1
 8001430:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001432:	2301      	movs	r3, #1
 8001434:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001436:	2300      	movs	r3, #0
 8001438:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800143a:	2300      	movs	r3, #0
 800143c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800143e:	463b      	mov	r3, r7
 8001440:	4618      	mov	r0, r3
 8001442:	f002 f9f5 	bl	8003830 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001446:	2004      	movs	r0, #4
 8001448:	f002 f9d2 	bl	80037f0 <HAL_MPU_Enable>

}
 800144c:	bf00      	nop
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001458:	b672      	cpsid	i
}
 800145a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800145c:	e7fe      	b.n	800145c <Error_Handler+0x8>
	...

08001460 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001466:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <HAL_MspInit+0x30>)
 8001468:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800146c:	4a08      	ldr	r2, [pc, #32]	; (8001490 <HAL_MspInit+0x30>)
 800146e:	f043 0302 	orr.w	r3, r3, #2
 8001472:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001476:	4b06      	ldr	r3, [pc, #24]	; (8001490 <HAL_MspInit+0x30>)
 8001478:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	58024400 	.word	0x58024400

08001494 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08c      	sub	sp, #48	; 0x30
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	f107 031c 	add.w	r3, r7, #28
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a33      	ldr	r2, [pc, #204]	; (8001580 <HAL_ADC_MspInit+0xec>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d15f      	bne.n	8001576 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80014b6:	4b33      	ldr	r3, [pc, #204]	; (8001584 <HAL_ADC_MspInit+0xf0>)
 80014b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014bc:	4a31      	ldr	r2, [pc, #196]	; (8001584 <HAL_ADC_MspInit+0xf0>)
 80014be:	f043 0320 	orr.w	r3, r3, #32
 80014c2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80014c6:	4b2f      	ldr	r3, [pc, #188]	; (8001584 <HAL_ADC_MspInit+0xf0>)
 80014c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014cc:	f003 0320 	and.w	r3, r3, #32
 80014d0:	61bb      	str	r3, [r7, #24]
 80014d2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d4:	4b2b      	ldr	r3, [pc, #172]	; (8001584 <HAL_ADC_MspInit+0xf0>)
 80014d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014da:	4a2a      	ldr	r2, [pc, #168]	; (8001584 <HAL_ADC_MspInit+0xf0>)
 80014dc:	f043 0304 	orr.w	r3, r3, #4
 80014e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014e4:	4b27      	ldr	r3, [pc, #156]	; (8001584 <HAL_ADC_MspInit+0xf0>)
 80014e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ea:	f003 0304 	and.w	r3, r3, #4
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f2:	4b24      	ldr	r3, [pc, #144]	; (8001584 <HAL_ADC_MspInit+0xf0>)
 80014f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f8:	4a22      	ldr	r2, [pc, #136]	; (8001584 <HAL_ADC_MspInit+0xf0>)
 80014fa:	f043 0301 	orr.w	r3, r3, #1
 80014fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001502:	4b20      	ldr	r3, [pc, #128]	; (8001584 <HAL_ADC_MspInit+0xf0>)
 8001504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	613b      	str	r3, [r7, #16]
 800150e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001510:	4b1c      	ldr	r3, [pc, #112]	; (8001584 <HAL_ADC_MspInit+0xf0>)
 8001512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001516:	4a1b      	ldr	r2, [pc, #108]	; (8001584 <HAL_ADC_MspInit+0xf0>)
 8001518:	f043 0302 	orr.w	r3, r3, #2
 800151c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001520:	4b18      	ldr	r3, [pc, #96]	; (8001584 <HAL_ADC_MspInit+0xf0>)
 8001522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = F06_Pin|F07_Pin|F01_Pin|F04_Pin;
 800152e:	2333      	movs	r3, #51	; 0x33
 8001530:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001532:	2303      	movs	r3, #3
 8001534:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800153a:	f107 031c 	add.w	r3, r7, #28
 800153e:	4619      	mov	r1, r3
 8001540:	4811      	ldr	r0, [pc, #68]	; (8001588 <HAL_ADC_MspInit+0xf4>)
 8001542:	f002 f9b9 	bl	80038b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = F03_Pin|F00_Pin;
 8001546:	2350      	movs	r3, #80	; 0x50
 8001548:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800154a:	2303      	movs	r3, #3
 800154c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001552:	f107 031c 	add.w	r3, r7, #28
 8001556:	4619      	mov	r1, r3
 8001558:	480c      	ldr	r0, [pc, #48]	; (800158c <HAL_ADC_MspInit+0xf8>)
 800155a:	f002 f9ad 	bl	80038b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = F05_Pin|F02_Pin;
 800155e:	2303      	movs	r3, #3
 8001560:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001562:	2303      	movs	r3, #3
 8001564:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156a:	f107 031c 	add.w	r3, r7, #28
 800156e:	4619      	mov	r1, r3
 8001570:	4807      	ldr	r0, [pc, #28]	; (8001590 <HAL_ADC_MspInit+0xfc>)
 8001572:	f002 f9a1 	bl	80038b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001576:	bf00      	nop
 8001578:	3730      	adds	r7, #48	; 0x30
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40022000 	.word	0x40022000
 8001584:	58024400 	.word	0x58024400
 8001588:	58020800 	.word	0x58020800
 800158c:	58020000 	.word	0x58020000
 8001590:	58020400 	.word	0x58020400

08001594 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b0ba      	sub	sp, #232	; 0xe8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015ac:	f107 0310 	add.w	r3, r7, #16
 80015b0:	22c0      	movs	r2, #192	; 0xc0
 80015b2:	2100      	movs	r1, #0
 80015b4:	4618      	mov	r0, r3
 80015b6:	f00b f829 	bl	800c60c <memset>
  if(hi2c->Instance==I2C1)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a27      	ldr	r2, [pc, #156]	; (800165c <HAL_I2C_MspInit+0xc8>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d146      	bne.n	8001652 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015c4:	f04f 0208 	mov.w	r2, #8
 80015c8:	f04f 0300 	mov.w	r3, #0
 80015cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80015d0:	2300      	movs	r3, #0
 80015d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015d6:	f107 0310 	add.w	r3, r7, #16
 80015da:	4618      	mov	r0, r3
 80015dc:	f003 fe90 	bl	8005300 <HAL_RCCEx_PeriphCLKConfig>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80015e6:	f7ff ff35 	bl	8001454 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ea:	4b1d      	ldr	r3, [pc, #116]	; (8001660 <HAL_I2C_MspInit+0xcc>)
 80015ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015f0:	4a1b      	ldr	r2, [pc, #108]	; (8001660 <HAL_I2C_MspInit+0xcc>)
 80015f2:	f043 0302 	orr.w	r3, r3, #2
 80015f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015fa:	4b19      	ldr	r3, [pc, #100]	; (8001660 <HAL_I2C_MspInit+0xcc>)
 80015fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001608:	f44f 7340 	mov.w	r3, #768	; 0x300
 800160c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001610:	2312      	movs	r3, #18
 8001612:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161c:	2300      	movs	r3, #0
 800161e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001622:	2304      	movs	r3, #4
 8001624:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001628:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800162c:	4619      	mov	r1, r3
 800162e:	480d      	ldr	r0, [pc, #52]	; (8001664 <HAL_I2C_MspInit+0xd0>)
 8001630:	f002 f942 	bl	80038b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001634:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <HAL_I2C_MspInit+0xcc>)
 8001636:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800163a:	4a09      	ldr	r2, [pc, #36]	; (8001660 <HAL_I2C_MspInit+0xcc>)
 800163c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001640:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <HAL_I2C_MspInit+0xcc>)
 8001646:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800164a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001652:	bf00      	nop
 8001654:	37e8      	adds	r7, #232	; 0xe8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40005400 	.word	0x40005400
 8001660:	58024400 	.word	0x58024400
 8001664:	58020400 	.word	0x58020400

08001668 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b0c4      	sub	sp, #272	; 0x110
 800166c:	af00      	add	r7, sp, #0
 800166e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001672:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001676:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001688:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800168c:	22c0      	movs	r2, #192	; 0xc0
 800168e:	2100      	movs	r1, #0
 8001690:	4618      	mov	r0, r3
 8001692:	f00a ffbb 	bl	800c60c <memset>
  if(huart->Instance==LPUART1)
 8001696:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800169a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4ab1      	ldr	r2, [pc, #708]	; (8001968 <HAL_UART_MspInit+0x300>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d147      	bne.n	8001738 <HAL_UART_MspInit+0xd0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80016a8:	f04f 0204 	mov.w	r2, #4
 80016ac:	f04f 0300 	mov.w	r3, #0
 80016b0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 80016b4:	2300      	movs	r3, #0
 80016b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80016be:	4618      	mov	r0, r3
 80016c0:	f003 fe1e 	bl	8005300 <HAL_RCCEx_PeriphCLKConfig>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
 80016ca:	f7ff fec3 	bl	8001454 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80016ce:	4ba7      	ldr	r3, [pc, #668]	; (800196c <HAL_UART_MspInit+0x304>)
 80016d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016d4:	4aa5      	ldr	r2, [pc, #660]	; (800196c <HAL_UART_MspInit+0x304>)
 80016d6:	f043 0308 	orr.w	r3, r3, #8
 80016da:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80016de:	4ba3      	ldr	r3, [pc, #652]	; (800196c <HAL_UART_MspInit+0x304>)
 80016e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016e4:	f003 0308 	and.w	r3, r3, #8
 80016e8:	637b      	str	r3, [r7, #52]	; 0x34
 80016ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ec:	4b9f      	ldr	r3, [pc, #636]	; (800196c <HAL_UART_MspInit+0x304>)
 80016ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016f2:	4a9e      	ldr	r2, [pc, #632]	; (800196c <HAL_UART_MspInit+0x304>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016fc:	4b9b      	ldr	r3, [pc, #620]	; (800196c <HAL_UART_MspInit+0x304>)
 80016fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	633b      	str	r3, [r7, #48]	; 0x30
 8001708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**LPUART1 GPIO Configuration
    PA9     ------> LPUART1_TX
    PA10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800170a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800170e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001712:	2302      	movs	r3, #2
 8001714:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171e:	2300      	movs	r3, #0
 8001720:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 8001724:	2303      	movs	r3, #3
 8001726:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800172e:	4619      	mov	r1, r3
 8001730:	488f      	ldr	r0, [pc, #572]	; (8001970 <HAL_UART_MspInit+0x308>)
 8001732:	f002 f8c1 	bl	80038b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001736:	e189      	b.n	8001a4c <HAL_UART_MspInit+0x3e4>
  else if(huart->Instance==UART4)
 8001738:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800173c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a8b      	ldr	r2, [pc, #556]	; (8001974 <HAL_UART_MspInit+0x30c>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d146      	bne.n	80017d8 <HAL_UART_MspInit+0x170>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800174a:	f04f 0202 	mov.w	r2, #2
 800174e:	f04f 0300 	mov.w	r3, #0
 8001752:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001756:	2300      	movs	r3, #0
 8001758:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800175c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001760:	4618      	mov	r0, r3
 8001762:	f003 fdcd 	bl	8005300 <HAL_RCCEx_PeriphCLKConfig>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <HAL_UART_MspInit+0x108>
      Error_Handler();
 800176c:	f7ff fe72 	bl	8001454 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 8001770:	4b7e      	ldr	r3, [pc, #504]	; (800196c <HAL_UART_MspInit+0x304>)
 8001772:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001776:	4a7d      	ldr	r2, [pc, #500]	; (800196c <HAL_UART_MspInit+0x304>)
 8001778:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800177c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001780:	4b7a      	ldr	r3, [pc, #488]	; (800196c <HAL_UART_MspInit+0x304>)
 8001782:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001786:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800178a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800178c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800178e:	4b77      	ldr	r3, [pc, #476]	; (800196c <HAL_UART_MspInit+0x304>)
 8001790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001794:	4a75      	ldr	r2, [pc, #468]	; (800196c <HAL_UART_MspInit+0x304>)
 8001796:	f043 0308 	orr.w	r3, r3, #8
 800179a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800179e:	4b73      	ldr	r3, [pc, #460]	; (800196c <HAL_UART_MspInit+0x304>)
 80017a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017a4:	f003 0308 	and.w	r3, r3, #8
 80017a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80017aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017ac:	2303      	movs	r3, #3
 80017ae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b2:	2302      	movs	r3, #2
 80017b4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017be:	2300      	movs	r3, #0
 80017c0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80017c4:	2308      	movs	r3, #8
 80017c6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ca:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80017ce:	4619      	mov	r1, r3
 80017d0:	4869      	ldr	r0, [pc, #420]	; (8001978 <HAL_UART_MspInit+0x310>)
 80017d2:	f002 f871 	bl	80038b8 <HAL_GPIO_Init>
}
 80017d6:	e139      	b.n	8001a4c <HAL_UART_MspInit+0x3e4>
  else if(huart->Instance==UART5)
 80017d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80017dc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a65      	ldr	r2, [pc, #404]	; (800197c <HAL_UART_MspInit+0x314>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d147      	bne.n	800187a <HAL_UART_MspInit+0x212>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80017ea:	f04f 0202 	mov.w	r2, #2
 80017ee:	f04f 0300 	mov.w	r3, #0
 80017f2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80017f6:	2300      	movs	r3, #0
 80017f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001800:	4618      	mov	r0, r3
 8001802:	f003 fd7d 	bl	8005300 <HAL_RCCEx_PeriphCLKConfig>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 800180c:	f7ff fe22 	bl	8001454 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001810:	4b56      	ldr	r3, [pc, #344]	; (800196c <HAL_UART_MspInit+0x304>)
 8001812:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001816:	4a55      	ldr	r2, [pc, #340]	; (800196c <HAL_UART_MspInit+0x304>)
 8001818:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800181c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001820:	4b52      	ldr	r3, [pc, #328]	; (800196c <HAL_UART_MspInit+0x304>)
 8001822:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001826:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800182a:	627b      	str	r3, [r7, #36]	; 0x24
 800182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800182e:	4b4f      	ldr	r3, [pc, #316]	; (800196c <HAL_UART_MspInit+0x304>)
 8001830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001834:	4a4d      	ldr	r2, [pc, #308]	; (800196c <HAL_UART_MspInit+0x304>)
 8001836:	f043 0302 	orr.w	r3, r3, #2
 800183a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800183e:	4b4b      	ldr	r3, [pc, #300]	; (800196c <HAL_UART_MspInit+0x304>)
 8001840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	623b      	str	r3, [r7, #32]
 800184a:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800184c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001850:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001854:	2302      	movs	r3, #2
 8001856:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001860:	2300      	movs	r3, #0
 8001862:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8001866:	230e      	movs	r3, #14
 8001868:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800186c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001870:	4619      	mov	r1, r3
 8001872:	4843      	ldr	r0, [pc, #268]	; (8001980 <HAL_UART_MspInit+0x318>)
 8001874:	f002 f820 	bl	80038b8 <HAL_GPIO_Init>
}
 8001878:	e0e8      	b.n	8001a4c <HAL_UART_MspInit+0x3e4>
  else if(huart->Instance==UART7)
 800187a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800187e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a3f      	ldr	r2, [pc, #252]	; (8001984 <HAL_UART_MspInit+0x31c>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d17f      	bne.n	800198c <HAL_UART_MspInit+0x324>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 800188c:	f04f 0202 	mov.w	r2, #2
 8001890:	f04f 0300 	mov.w	r3, #0
 8001894:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001898:	2300      	movs	r3, #0
 800189a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800189e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018a2:	4618      	mov	r0, r3
 80018a4:	f003 fd2c 	bl	8005300 <HAL_RCCEx_PeriphCLKConfig>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <HAL_UART_MspInit+0x24a>
      Error_Handler();
 80018ae:	f7ff fdd1 	bl	8001454 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 80018b2:	4b2e      	ldr	r3, [pc, #184]	; (800196c <HAL_UART_MspInit+0x304>)
 80018b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018b8:	4a2c      	ldr	r2, [pc, #176]	; (800196c <HAL_UART_MspInit+0x304>)
 80018ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80018be:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80018c2:	4b2a      	ldr	r3, [pc, #168]	; (800196c <HAL_UART_MspInit+0x304>)
 80018c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80018cc:	61fb      	str	r3, [r7, #28]
 80018ce:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018d0:	4b26      	ldr	r3, [pc, #152]	; (800196c <HAL_UART_MspInit+0x304>)
 80018d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018d6:	4a25      	ldr	r2, [pc, #148]	; (800196c <HAL_UART_MspInit+0x304>)
 80018d8:	f043 0310 	orr.w	r3, r3, #16
 80018dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018e0:	4b22      	ldr	r3, [pc, #136]	; (800196c <HAL_UART_MspInit+0x304>)
 80018e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018e6:	f003 0310 	and.w	r3, r3, #16
 80018ea:	61bb      	str	r3, [r7, #24]
 80018ec:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ee:	4b1f      	ldr	r3, [pc, #124]	; (800196c <HAL_UART_MspInit+0x304>)
 80018f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018f4:	4a1d      	ldr	r2, [pc, #116]	; (800196c <HAL_UART_MspInit+0x304>)
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018fe:	4b1b      	ldr	r3, [pc, #108]	; (800196c <HAL_UART_MspInit+0x304>)
 8001900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	617b      	str	r3, [r7, #20]
 800190a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800190c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001910:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001914:	2302      	movs	r3, #2
 8001916:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001920:	2300      	movs	r3, #0
 8001922:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8001926:	2307      	movs	r3, #7
 8001928:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800192c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001930:	4619      	mov	r1, r3
 8001932:	4815      	ldr	r0, [pc, #84]	; (8001988 <HAL_UART_MspInit+0x320>)
 8001934:	f001 ffc0 	bl	80038b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001938:	f44f 7380 	mov.w	r3, #256	; 0x100
 800193c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001940:	2302      	movs	r3, #2
 8001942:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194c:	2300      	movs	r3, #0
 800194e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF11_UART7;
 8001952:	230b      	movs	r3, #11
 8001954:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001958:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800195c:	4619      	mov	r1, r3
 800195e:	4804      	ldr	r0, [pc, #16]	; (8001970 <HAL_UART_MspInit+0x308>)
 8001960:	f001 ffaa 	bl	80038b8 <HAL_GPIO_Init>
}
 8001964:	e072      	b.n	8001a4c <HAL_UART_MspInit+0x3e4>
 8001966:	bf00      	nop
 8001968:	58000c00 	.word	0x58000c00
 800196c:	58024400 	.word	0x58024400
 8001970:	58020000 	.word	0x58020000
 8001974:	40004c00 	.word	0x40004c00
 8001978:	58020c00 	.word	0x58020c00
 800197c:	40005000 	.word	0x40005000
 8001980:	58020400 	.word	0x58020400
 8001984:	40007800 	.word	0x40007800
 8001988:	58021000 	.word	0x58021000
  else if(huart->Instance==USART3)
 800198c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001990:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a2f      	ldr	r2, [pc, #188]	; (8001a58 <HAL_UART_MspInit+0x3f0>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d156      	bne.n	8001a4c <HAL_UART_MspInit+0x3e4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800199e:	f04f 0202 	mov.w	r2, #2
 80019a2:	f04f 0300 	mov.w	r3, #0
 80019a6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80019aa:	2300      	movs	r3, #0
 80019ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019b4:	4618      	mov	r0, r3
 80019b6:	f003 fca3 	bl	8005300 <HAL_RCCEx_PeriphCLKConfig>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <HAL_UART_MspInit+0x35c>
      Error_Handler();
 80019c0:	f7ff fd48 	bl	8001454 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80019c4:	4b25      	ldr	r3, [pc, #148]	; (8001a5c <HAL_UART_MspInit+0x3f4>)
 80019c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019ca:	4a24      	ldr	r2, [pc, #144]	; (8001a5c <HAL_UART_MspInit+0x3f4>)
 80019cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019d0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80019d4:	4b21      	ldr	r3, [pc, #132]	; (8001a5c <HAL_UART_MspInit+0x3f4>)
 80019d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019da:	f403 2280 	and.w	r2, r3, #262144	; 0x40000
 80019de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019e2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80019ec:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80019f0:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f2:	4b1a      	ldr	r3, [pc, #104]	; (8001a5c <HAL_UART_MspInit+0x3f4>)
 80019f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f8:	4a18      	ldr	r2, [pc, #96]	; (8001a5c <HAL_UART_MspInit+0x3f4>)
 80019fa:	f043 0302 	orr.w	r3, r3, #2
 80019fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a02:	4b16      	ldr	r3, [pc, #88]	; (8001a5c <HAL_UART_MspInit+0x3f4>)
 8001a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a08:	f003 0202 	and.w	r2, r3, #2
 8001a0c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001a10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001a1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001a1e:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a20:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a24:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a34:	2300      	movs	r3, #0
 8001a36:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a3a:	2307      	movs	r3, #7
 8001a3c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a40:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001a44:	4619      	mov	r1, r3
 8001a46:	4806      	ldr	r0, [pc, #24]	; (8001a60 <HAL_UART_MspInit+0x3f8>)
 8001a48:	f001 ff36 	bl	80038b8 <HAL_GPIO_Init>
}
 8001a4c:	bf00      	nop
 8001a4e:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40004800 	.word	0x40004800
 8001a5c:	58024400 	.word	0x58024400
 8001a60:	58020400 	.word	0x58020400

08001a64 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b0bc      	sub	sp, #240	; 0xf0
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	60da      	str	r2, [r3, #12]
 8001a7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a7c:	f107 0318 	add.w	r3, r7, #24
 8001a80:	22c0      	movs	r2, #192	; 0xc0
 8001a82:	2100      	movs	r1, #0
 8001a84:	4618      	mov	r0, r3
 8001a86:	f00a fdc1 	bl	800c60c <memset>
  if(hqspi->Instance==QUADSPI)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a55      	ldr	r2, [pc, #340]	; (8001be4 <HAL_QSPI_MspInit+0x180>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	f040 80a3 	bne.w	8001bdc <HAL_QSPI_MspInit+0x178>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001a96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a9a:	f04f 0300 	mov.w	r3, #0
 8001a9e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aa6:	f107 0318 	add.w	r3, r7, #24
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f003 fc28 	bl	8005300 <HAL_RCCEx_PeriphCLKConfig>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 8001ab6:	f7ff fccd 	bl	8001454 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001aba:	4b4b      	ldr	r3, [pc, #300]	; (8001be8 <HAL_QSPI_MspInit+0x184>)
 8001abc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001ac0:	4a49      	ldr	r2, [pc, #292]	; (8001be8 <HAL_QSPI_MspInit+0x184>)
 8001ac2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ac6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001aca:	4b47      	ldr	r3, [pc, #284]	; (8001be8 <HAL_QSPI_MspInit+0x184>)
 8001acc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001ad0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ad4:	617b      	str	r3, [r7, #20]
 8001ad6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ad8:	4b43      	ldr	r3, [pc, #268]	; (8001be8 <HAL_QSPI_MspInit+0x184>)
 8001ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ade:	4a42      	ldr	r2, [pc, #264]	; (8001be8 <HAL_QSPI_MspInit+0x184>)
 8001ae0:	f043 0310 	orr.w	r3, r3, #16
 8001ae4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ae8:	4b3f      	ldr	r3, [pc, #252]	; (8001be8 <HAL_QSPI_MspInit+0x184>)
 8001aea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aee:	f003 0310 	and.w	r3, r3, #16
 8001af2:	613b      	str	r3, [r7, #16]
 8001af4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af6:	4b3c      	ldr	r3, [pc, #240]	; (8001be8 <HAL_QSPI_MspInit+0x184>)
 8001af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001afc:	4a3a      	ldr	r2, [pc, #232]	; (8001be8 <HAL_QSPI_MspInit+0x184>)
 8001afe:	f043 0302 	orr.w	r3, r3, #2
 8001b02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b06:	4b38      	ldr	r3, [pc, #224]	; (8001be8 <HAL_QSPI_MspInit+0x184>)
 8001b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b14:	4b34      	ldr	r3, [pc, #208]	; (8001be8 <HAL_QSPI_MspInit+0x184>)
 8001b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b1a:	4a33      	ldr	r2, [pc, #204]	; (8001be8 <HAL_QSPI_MspInit+0x184>)
 8001b1c:	f043 0308 	orr.w	r3, r3, #8
 8001b20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b24:	4b30      	ldr	r3, [pc, #192]	; (8001be8 <HAL_QSPI_MspInit+0x184>)
 8001b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b2a:	f003 0308 	and.w	r3, r3, #8
 8001b2e:	60bb      	str	r3, [r7, #8]
 8001b30:	68bb      	ldr	r3, [r7, #8]
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b32:	2304      	movs	r3, #4
 8001b34:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b44:	2300      	movs	r3, #0
 8001b46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001b4a:	2309      	movs	r3, #9
 8001b4c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b50:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001b54:	4619      	mov	r1, r3
 8001b56:	4825      	ldr	r0, [pc, #148]	; (8001bec <HAL_QSPI_MspInit+0x188>)
 8001b58:	f001 feae 	bl	80038b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b5c:	2304      	movs	r3, #4
 8001b5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b62:	2302      	movs	r3, #2
 8001b64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001b74:	2309      	movs	r3, #9
 8001b76:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b7a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001b7e:	4619      	mov	r1, r3
 8001b80:	481b      	ldr	r0, [pc, #108]	; (8001bf0 <HAL_QSPI_MspInit+0x18c>)
 8001b82:	f001 fe99 	bl	80038b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8001b86:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001b8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001ba0:	2309      	movs	r3, #9
 8001ba2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ba6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001baa:	4619      	mov	r1, r3
 8001bac:	4811      	ldr	r0, [pc, #68]	; (8001bf4 <HAL_QSPI_MspInit+0x190>)
 8001bae:	f001 fe83 	bl	80038b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001bb2:	2340      	movs	r3, #64	; 0x40
 8001bb4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001bca:	230a      	movs	r3, #10
 8001bcc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4806      	ldr	r0, [pc, #24]	; (8001bf0 <HAL_QSPI_MspInit+0x18c>)
 8001bd8:	f001 fe6e 	bl	80038b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001bdc:	bf00      	nop
 8001bde:	37f0      	adds	r7, #240	; 0xf0
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	52005000 	.word	0x52005000
 8001be8:	58024400 	.word	0x58024400
 8001bec:	58021000 	.word	0x58021000
 8001bf0:	58020400 	.word	0x58020400
 8001bf4:	58020c00 	.word	0x58020c00

08001bf8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08a      	sub	sp, #40	; 0x28
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c00:	f107 0314 	add.w	r3, r7, #20
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a2a      	ldr	r2, [pc, #168]	; (8001cc0 <HAL_SD_MspInit+0xc8>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d14d      	bne.n	8001cb6 <HAL_SD_MspInit+0xbe>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001c1a:	4b2a      	ldr	r3, [pc, #168]	; (8001cc4 <HAL_SD_MspInit+0xcc>)
 8001c1c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001c20:	4a28      	ldr	r2, [pc, #160]	; (8001cc4 <HAL_SD_MspInit+0xcc>)
 8001c22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c26:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001c2a:	4b26      	ldr	r3, [pc, #152]	; (8001cc4 <HAL_SD_MspInit+0xcc>)
 8001c2c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c34:	613b      	str	r3, [r7, #16]
 8001c36:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c38:	4b22      	ldr	r3, [pc, #136]	; (8001cc4 <HAL_SD_MspInit+0xcc>)
 8001c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c3e:	4a21      	ldr	r2, [pc, #132]	; (8001cc4 <HAL_SD_MspInit+0xcc>)
 8001c40:	f043 0304 	orr.w	r3, r3, #4
 8001c44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c48:	4b1e      	ldr	r3, [pc, #120]	; (8001cc4 <HAL_SD_MspInit+0xcc>)
 8001c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c4e:	f003 0304 	and.w	r3, r3, #4
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c56:	4b1b      	ldr	r3, [pc, #108]	; (8001cc4 <HAL_SD_MspInit+0xcc>)
 8001c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c5c:	4a19      	ldr	r2, [pc, #100]	; (8001cc4 <HAL_SD_MspInit+0xcc>)
 8001c5e:	f043 0308 	orr.w	r3, r3, #8
 8001c62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c66:	4b17      	ldr	r3, [pc, #92]	; (8001cc4 <HAL_SD_MspInit+0xcc>)
 8001c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c6c:	f003 0308 	and.w	r3, r3, #8
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001c74:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001c78:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c82:	2303      	movs	r3, #3
 8001c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001c86:	230c      	movs	r3, #12
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c8a:	f107 0314 	add.w	r3, r7, #20
 8001c8e:	4619      	mov	r1, r3
 8001c90:	480d      	ldr	r0, [pc, #52]	; (8001cc8 <HAL_SD_MspInit+0xd0>)
 8001c92:	f001 fe11 	bl	80038b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c96:	2304      	movs	r3, #4
 8001c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001ca6:	230c      	movs	r3, #12
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001caa:	f107 0314 	add.w	r3, r7, #20
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4806      	ldr	r0, [pc, #24]	; (8001ccc <HAL_SD_MspInit+0xd4>)
 8001cb2:	f001 fe01 	bl	80038b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001cb6:	bf00      	nop
 8001cb8:	3728      	adds	r7, #40	; 0x28
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	52007000 	.word	0x52007000
 8001cc4:	58024400 	.word	0x58024400
 8001cc8:	58020800 	.word	0x58020800
 8001ccc:	58020c00 	.word	0x58020c00

08001cd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b0be      	sub	sp, #248	; 0xf8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ce8:	f107 0320 	add.w	r3, r7, #32
 8001cec:	22c0      	movs	r2, #192	; 0xc0
 8001cee:	2100      	movs	r1, #0
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f00a fc8b 	bl	800c60c <memset>
  if(hspi->Instance==SPI1)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a5f      	ldr	r2, [pc, #380]	; (8001e78 <HAL_SPI_MspInit+0x1a8>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d16a      	bne.n	8001dd6 <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001d00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d04:	f04f 0300 	mov.w	r3, #0
 8001d08:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d12:	f107 0320 	add.w	r3, r7, #32
 8001d16:	4618      	mov	r0, r3
 8001d18:	f003 faf2 	bl	8005300 <HAL_RCCEx_PeriphCLKConfig>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001d22:	f7ff fb97 	bl	8001454 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d26:	4b55      	ldr	r3, [pc, #340]	; (8001e7c <HAL_SPI_MspInit+0x1ac>)
 8001d28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d2c:	4a53      	ldr	r2, [pc, #332]	; (8001e7c <HAL_SPI_MspInit+0x1ac>)
 8001d2e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d32:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001d36:	4b51      	ldr	r3, [pc, #324]	; (8001e7c <HAL_SPI_MspInit+0x1ac>)
 8001d38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d40:	61fb      	str	r3, [r7, #28]
 8001d42:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d44:	4b4d      	ldr	r3, [pc, #308]	; (8001e7c <HAL_SPI_MspInit+0x1ac>)
 8001d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d4a:	4a4c      	ldr	r2, [pc, #304]	; (8001e7c <HAL_SPI_MspInit+0x1ac>)
 8001d4c:	f043 0308 	orr.w	r3, r3, #8
 8001d50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d54:	4b49      	ldr	r3, [pc, #292]	; (8001e7c <HAL_SPI_MspInit+0x1ac>)
 8001d56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d5a:	f003 0308 	and.w	r3, r3, #8
 8001d5e:	61bb      	str	r3, [r7, #24]
 8001d60:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d62:	4b46      	ldr	r3, [pc, #280]	; (8001e7c <HAL_SPI_MspInit+0x1ac>)
 8001d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d68:	4a44      	ldr	r2, [pc, #272]	; (8001e7c <HAL_SPI_MspInit+0x1ac>)
 8001d6a:	f043 0302 	orr.w	r3, r3, #2
 8001d6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d72:	4b42      	ldr	r3, [pc, #264]	; (8001e7c <HAL_SPI_MspInit+0x1ac>)
 8001d74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	617b      	str	r3, [r7, #20]
 8001d7e:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d80:	2380      	movs	r3, #128	; 0x80
 8001d82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d86:	2302      	movs	r3, #2
 8001d88:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d92:	2300      	movs	r3, #0
 8001d94:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d98:	2305      	movs	r3, #5
 8001d9a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d9e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001da2:	4619      	mov	r1, r3
 8001da4:	4836      	ldr	r0, [pc, #216]	; (8001e80 <HAL_SPI_MspInit+0x1b0>)
 8001da6:	f001 fd87 	bl	80038b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001daa:	2318      	movs	r3, #24
 8001dac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db0:	2302      	movs	r3, #2
 8001db2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db6:	2300      	movs	r3, #0
 8001db8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001dc2:	2305      	movs	r3, #5
 8001dc4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001dcc:	4619      	mov	r1, r3
 8001dce:	482d      	ldr	r0, [pc, #180]	; (8001e84 <HAL_SPI_MspInit+0x1b4>)
 8001dd0:	f001 fd72 	bl	80038b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001dd4:	e04b      	b.n	8001e6e <HAL_SPI_MspInit+0x19e>
  else if(hspi->Instance==SPI4)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a2b      	ldr	r2, [pc, #172]	; (8001e88 <HAL_SPI_MspInit+0x1b8>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d146      	bne.n	8001e6e <HAL_SPI_MspInit+0x19e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001de0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001de4:	f04f 0300 	mov.w	r3, #0
 8001de8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001dec:	2300      	movs	r3, #0
 8001dee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001df2:	f107 0320 	add.w	r3, r7, #32
 8001df6:	4618      	mov	r0, r3
 8001df8:	f003 fa82 	bl	8005300 <HAL_RCCEx_PeriphCLKConfig>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <HAL_SPI_MspInit+0x136>
      Error_Handler();
 8001e02:	f7ff fb27 	bl	8001454 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001e06:	4b1d      	ldr	r3, [pc, #116]	; (8001e7c <HAL_SPI_MspInit+0x1ac>)
 8001e08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e0c:	4a1b      	ldr	r2, [pc, #108]	; (8001e7c <HAL_SPI_MspInit+0x1ac>)
 8001e0e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e12:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001e16:	4b19      	ldr	r3, [pc, #100]	; (8001e7c <HAL_SPI_MspInit+0x1ac>)
 8001e18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e20:	613b      	str	r3, [r7, #16]
 8001e22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e24:	4b15      	ldr	r3, [pc, #84]	; (8001e7c <HAL_SPI_MspInit+0x1ac>)
 8001e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e2a:	4a14      	ldr	r2, [pc, #80]	; (8001e7c <HAL_SPI_MspInit+0x1ac>)
 8001e2c:	f043 0310 	orr.w	r3, r3, #16
 8001e30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e34:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <HAL_SPI_MspInit+0x1ac>)
 8001e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e3a:	f003 0310 	and.w	r3, r3, #16
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001e42:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001e46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e56:	2300      	movs	r3, #0
 8001e58:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001e5c:	2305      	movs	r3, #5
 8001e5e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e62:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001e66:	4619      	mov	r1, r3
 8001e68:	4808      	ldr	r0, [pc, #32]	; (8001e8c <HAL_SPI_MspInit+0x1bc>)
 8001e6a:	f001 fd25 	bl	80038b8 <HAL_GPIO_Init>
}
 8001e6e:	bf00      	nop
 8001e70:	37f8      	adds	r7, #248	; 0xf8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40013000 	.word	0x40013000
 8001e7c:	58024400 	.word	0x58024400
 8001e80:	58020c00 	.word	0x58020c00
 8001e84:	58020400 	.word	0x58020400
 8001e88:	40013400 	.word	0x40013400
 8001e8c:	58021000 	.word	0x58021000

08001e90 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ea0:	d10f      	bne.n	8001ec2 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ea2:	4b15      	ldr	r3, [pc, #84]	; (8001ef8 <HAL_TIM_PWM_MspInit+0x68>)
 8001ea4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ea8:	4a13      	ldr	r2, [pc, #76]	; (8001ef8 <HAL_TIM_PWM_MspInit+0x68>)
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001eb2:	4b11      	ldr	r3, [pc, #68]	; (8001ef8 <HAL_TIM_PWM_MspInit+0x68>)
 8001eb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ec0:	e013      	b.n	8001eea <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM3)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a0d      	ldr	r2, [pc, #52]	; (8001efc <HAL_TIM_PWM_MspInit+0x6c>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d10e      	bne.n	8001eea <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ecc:	4b0a      	ldr	r3, [pc, #40]	; (8001ef8 <HAL_TIM_PWM_MspInit+0x68>)
 8001ece:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ed2:	4a09      	ldr	r2, [pc, #36]	; (8001ef8 <HAL_TIM_PWM_MspInit+0x68>)
 8001ed4:	f043 0302 	orr.w	r3, r3, #2
 8001ed8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001edc:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <HAL_TIM_PWM_MspInit+0x68>)
 8001ede:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	60bb      	str	r3, [r7, #8]
 8001ee8:	68bb      	ldr	r3, [r7, #8]
}
 8001eea:	bf00      	nop
 8001eec:	3714      	adds	r7, #20
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	58024400 	.word	0x58024400
 8001efc:	40000400 	.word	0x40000400

08001f00 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08c      	sub	sp, #48	; 0x30
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f08:	f107 031c 	add.w	r3, r7, #28
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	605a      	str	r2, [r3, #4]
 8001f12:	609a      	str	r2, [r3, #8]
 8001f14:	60da      	str	r2, [r3, #12]
 8001f16:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM5)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a34      	ldr	r2, [pc, #208]	; (8001ff0 <HAL_TIM_IC_MspInit+0xf0>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d12e      	bne.n	8001f80 <HAL_TIM_IC_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001f22:	4b34      	ldr	r3, [pc, #208]	; (8001ff4 <HAL_TIM_IC_MspInit+0xf4>)
 8001f24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f28:	4a32      	ldr	r2, [pc, #200]	; (8001ff4 <HAL_TIM_IC_MspInit+0xf4>)
 8001f2a:	f043 0308 	orr.w	r3, r3, #8
 8001f2e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f32:	4b30      	ldr	r3, [pc, #192]	; (8001ff4 <HAL_TIM_IC_MspInit+0xf4>)
 8001f34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f38:	f003 0308 	and.w	r3, r3, #8
 8001f3c:	61bb      	str	r3, [r7, #24]
 8001f3e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f40:	4b2c      	ldr	r3, [pc, #176]	; (8001ff4 <HAL_TIM_IC_MspInit+0xf4>)
 8001f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f46:	4a2b      	ldr	r2, [pc, #172]	; (8001ff4 <HAL_TIM_IC_MspInit+0xf4>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f50:	4b28      	ldr	r3, [pc, #160]	; (8001ff4 <HAL_TIM_IC_MspInit+0xf4>)
 8001f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	617b      	str	r3, [r7, #20]
 8001f5c:	697b      	ldr	r3, [r7, #20]
    /**TIM5 GPIO Configuration
    PA0     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = Servo_Input_Pin;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f62:	2302      	movs	r3, #2
 8001f64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Servo_Input_GPIO_Port, &GPIO_InitStruct);
 8001f72:	f107 031c 	add.w	r3, r7, #28
 8001f76:	4619      	mov	r1, r3
 8001f78:	481f      	ldr	r0, [pc, #124]	; (8001ff8 <HAL_TIM_IC_MspInit+0xf8>)
 8001f7a:	f001 fc9d 	bl	80038b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001f7e:	e032      	b.n	8001fe6 <HAL_TIM_IC_MspInit+0xe6>
  else if(htim_ic->Instance==TIM15)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a1d      	ldr	r2, [pc, #116]	; (8001ffc <HAL_TIM_IC_MspInit+0xfc>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d12d      	bne.n	8001fe6 <HAL_TIM_IC_MspInit+0xe6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001f8a:	4b1a      	ldr	r3, [pc, #104]	; (8001ff4 <HAL_TIM_IC_MspInit+0xf4>)
 8001f8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f90:	4a18      	ldr	r2, [pc, #96]	; (8001ff4 <HAL_TIM_IC_MspInit+0xf4>)
 8001f92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f96:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001f9a:	4b16      	ldr	r3, [pc, #88]	; (8001ff4 <HAL_TIM_IC_MspInit+0xf4>)
 8001f9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa4:	613b      	str	r3, [r7, #16]
 8001fa6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fa8:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <HAL_TIM_IC_MspInit+0xf4>)
 8001faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fae:	4a11      	ldr	r2, [pc, #68]	; (8001ff4 <HAL_TIM_IC_MspInit+0xf4>)
 8001fb0:	f043 0310 	orr.w	r3, r3, #16
 8001fb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fb8:	4b0e      	ldr	r3, [pc, #56]	; (8001ff4 <HAL_TIM_IC_MspInit+0xf4>)
 8001fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fbe:	f003 0310 	and.w	r3, r3, #16
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ESC_Input_Pin;
 8001fc6:	2320      	movs	r3, #32
 8001fc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8001fd6:	2304      	movs	r3, #4
 8001fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ESC_Input_GPIO_Port, &GPIO_InitStruct);
 8001fda:	f107 031c 	add.w	r3, r7, #28
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4807      	ldr	r0, [pc, #28]	; (8002000 <HAL_TIM_IC_MspInit+0x100>)
 8001fe2:	f001 fc69 	bl	80038b8 <HAL_GPIO_Init>
}
 8001fe6:	bf00      	nop
 8001fe8:	3730      	adds	r7, #48	; 0x30
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40000c00 	.word	0x40000c00
 8001ff4:	58024400 	.word	0x58024400
 8001ff8:	58020000 	.word	0x58020000
 8001ffc:	40014000 	.word	0x40014000
 8002000:	58021000 	.word	0x58021000

08002004 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b08a      	sub	sp, #40	; 0x28
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200c:	f107 0314 	add.w	r3, r7, #20
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	609a      	str	r2, [r3, #8]
 8002018:	60da      	str	r2, [r3, #12]
 800201a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002024:	d120      	bne.n	8002068 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002026:	4b24      	ldr	r3, [pc, #144]	; (80020b8 <HAL_TIM_MspPostInit+0xb4>)
 8002028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800202c:	4a22      	ldr	r2, [pc, #136]	; (80020b8 <HAL_TIM_MspPostInit+0xb4>)
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002036:	4b20      	ldr	r3, [pc, #128]	; (80020b8 <HAL_TIM_MspPostInit+0xb4>)
 8002038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	613b      	str	r3, [r7, #16]
 8002042:	693b      	ldr	r3, [r7, #16]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin|PWM3_Pin|PWM0_Pin;
 8002044:	f248 030e 	movw	r3, #32782	; 0x800e
 8002048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204a:	2302      	movs	r3, #2
 800204c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002052:	2300      	movs	r3, #0
 8002054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002056:	2301      	movs	r3, #1
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205a:	f107 0314 	add.w	r3, r7, #20
 800205e:	4619      	mov	r1, r3
 8002060:	4816      	ldr	r0, [pc, #88]	; (80020bc <HAL_TIM_MspPostInit+0xb8>)
 8002062:	f001 fc29 	bl	80038b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002066:	e023      	b.n	80020b0 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM3)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a14      	ldr	r2, [pc, #80]	; (80020c0 <HAL_TIM_MspPostInit+0xbc>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d11e      	bne.n	80020b0 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002072:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <HAL_TIM_MspPostInit+0xb4>)
 8002074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002078:	4a0f      	ldr	r2, [pc, #60]	; (80020b8 <HAL_TIM_MspPostInit+0xb4>)
 800207a:	f043 0304 	orr.w	r3, r3, #4
 800207e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002082:	4b0d      	ldr	r3, [pc, #52]	; (80020b8 <HAL_TIM_MspPostInit+0xb4>)
 8002084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo_Output_Pin|ESC_Output_Pin;
 8002090:	23c0      	movs	r3, #192	; 0xc0
 8002092:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002094:	2302      	movs	r3, #2
 8002096:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002098:	2300      	movs	r3, #0
 800209a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209c:	2300      	movs	r3, #0
 800209e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020a0:	2302      	movs	r3, #2
 80020a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020a4:	f107 0314 	add.w	r3, r7, #20
 80020a8:	4619      	mov	r1, r3
 80020aa:	4806      	ldr	r0, [pc, #24]	; (80020c4 <HAL_TIM_MspPostInit+0xc0>)
 80020ac:	f001 fc04 	bl	80038b8 <HAL_GPIO_Init>
}
 80020b0:	bf00      	nop
 80020b2:	3728      	adds	r7, #40	; 0x28
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	58024400 	.word	0x58024400
 80020bc:	58020000 	.word	0x58020000
 80020c0:	40000400 	.word	0x40000400
 80020c4:	58020800 	.word	0x58020800

080020c8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b0ba      	sub	sp, #232	; 0xe8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	60da      	str	r2, [r3, #12]
 80020de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020e0:	f107 0310 	add.w	r3, r7, #16
 80020e4:	22c0      	movs	r2, #192	; 0xc0
 80020e6:	2100      	movs	r1, #0
 80020e8:	4618      	mov	r0, r3
 80020ea:	f00a fa8f 	bl	800c60c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a28      	ldr	r2, [pc, #160]	; (8002194 <HAL_PCD_MspInit+0xcc>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d149      	bne.n	800218c <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80020f8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80020fc:	f04f 0300 	mov.w	r3, #0
 8002100:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002104:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002108:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800210c:	f107 0310 	add.w	r3, r7, #16
 8002110:	4618      	mov	r0, r3
 8002112:	f003 f8f5 	bl	8005300 <HAL_RCCEx_PeriphCLKConfig>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800211c:	f7ff f99a 	bl	8001454 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002120:	f002 f83e 	bl	80041a0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002124:	4b1c      	ldr	r3, [pc, #112]	; (8002198 <HAL_PCD_MspInit+0xd0>)
 8002126:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800212a:	4a1b      	ldr	r2, [pc, #108]	; (8002198 <HAL_PCD_MspInit+0xd0>)
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002134:	4b18      	ldr	r3, [pc, #96]	; (8002198 <HAL_PCD_MspInit+0xd0>)
 8002136:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002142:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002146:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214a:	2302      	movs	r3, #2
 800214c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002150:	2300      	movs	r3, #0
 8002152:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002156:	2300      	movs	r3, #0
 8002158:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800215c:	230a      	movs	r3, #10
 800215e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002162:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002166:	4619      	mov	r1, r3
 8002168:	480c      	ldr	r0, [pc, #48]	; (800219c <HAL_PCD_MspInit+0xd4>)
 800216a:	f001 fba5 	bl	80038b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800216e:	4b0a      	ldr	r3, [pc, #40]	; (8002198 <HAL_PCD_MspInit+0xd0>)
 8002170:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002174:	4a08      	ldr	r2, [pc, #32]	; (8002198 <HAL_PCD_MspInit+0xd0>)
 8002176:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800217a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800217e:	4b06      	ldr	r3, [pc, #24]	; (8002198 <HAL_PCD_MspInit+0xd0>)
 8002180:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002184:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002188:	60bb      	str	r3, [r7, #8]
 800218a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800218c:	bf00      	nop
 800218e:	37e8      	adds	r7, #232	; 0xe8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40080000 	.word	0x40080000
 8002198:	58024400 	.word	0x58024400
 800219c:	58020000 	.word	0x58020000

080021a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021a4:	e7fe      	b.n	80021a4 <NMI_Handler+0x4>

080021a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021a6:	b480      	push	{r7}
 80021a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021aa:	e7fe      	b.n	80021aa <HardFault_Handler+0x4>

080021ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021b0:	e7fe      	b.n	80021b0 <MemManage_Handler+0x4>

080021b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021b2:	b480      	push	{r7}
 80021b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021b6:	e7fe      	b.n	80021b6 <BusFault_Handler+0x4>

080021b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021bc:	e7fe      	b.n	80021bc <UsageFault_Handler+0x4>

080021be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021be:	b480      	push	{r7}
 80021c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021da:	b480      	push	{r7}
 80021dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021de:	bf00      	nop
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021ec:	f000 f926 	bl	800243c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021f0:	bf00      	nop
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80021f8:	4b37      	ldr	r3, [pc, #220]	; (80022d8 <SystemInit+0xe4>)
 80021fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021fe:	4a36      	ldr	r2, [pc, #216]	; (80022d8 <SystemInit+0xe4>)
 8002200:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002204:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002208:	4b34      	ldr	r3, [pc, #208]	; (80022dc <SystemInit+0xe8>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 030f 	and.w	r3, r3, #15
 8002210:	2b06      	cmp	r3, #6
 8002212:	d807      	bhi.n	8002224 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002214:	4b31      	ldr	r3, [pc, #196]	; (80022dc <SystemInit+0xe8>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f023 030f 	bic.w	r3, r3, #15
 800221c:	4a2f      	ldr	r2, [pc, #188]	; (80022dc <SystemInit+0xe8>)
 800221e:	f043 0307 	orr.w	r3, r3, #7
 8002222:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002224:	4b2e      	ldr	r3, [pc, #184]	; (80022e0 <SystemInit+0xec>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a2d      	ldr	r2, [pc, #180]	; (80022e0 <SystemInit+0xec>)
 800222a:	f043 0301 	orr.w	r3, r3, #1
 800222e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002230:	4b2b      	ldr	r3, [pc, #172]	; (80022e0 <SystemInit+0xec>)
 8002232:	2200      	movs	r2, #0
 8002234:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002236:	4b2a      	ldr	r3, [pc, #168]	; (80022e0 <SystemInit+0xec>)
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	4929      	ldr	r1, [pc, #164]	; (80022e0 <SystemInit+0xec>)
 800223c:	4b29      	ldr	r3, [pc, #164]	; (80022e4 <SystemInit+0xf0>)
 800223e:	4013      	ands	r3, r2
 8002240:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002242:	4b26      	ldr	r3, [pc, #152]	; (80022dc <SystemInit+0xe8>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0308 	and.w	r3, r3, #8
 800224a:	2b00      	cmp	r3, #0
 800224c:	d007      	beq.n	800225e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800224e:	4b23      	ldr	r3, [pc, #140]	; (80022dc <SystemInit+0xe8>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f023 030f 	bic.w	r3, r3, #15
 8002256:	4a21      	ldr	r2, [pc, #132]	; (80022dc <SystemInit+0xe8>)
 8002258:	f043 0307 	orr.w	r3, r3, #7
 800225c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800225e:	4b20      	ldr	r3, [pc, #128]	; (80022e0 <SystemInit+0xec>)
 8002260:	2200      	movs	r2, #0
 8002262:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002264:	4b1e      	ldr	r3, [pc, #120]	; (80022e0 <SystemInit+0xec>)
 8002266:	2200      	movs	r2, #0
 8002268:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800226a:	4b1d      	ldr	r3, [pc, #116]	; (80022e0 <SystemInit+0xec>)
 800226c:	2200      	movs	r2, #0
 800226e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002270:	4b1b      	ldr	r3, [pc, #108]	; (80022e0 <SystemInit+0xec>)
 8002272:	4a1d      	ldr	r2, [pc, #116]	; (80022e8 <SystemInit+0xf4>)
 8002274:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002276:	4b1a      	ldr	r3, [pc, #104]	; (80022e0 <SystemInit+0xec>)
 8002278:	4a1c      	ldr	r2, [pc, #112]	; (80022ec <SystemInit+0xf8>)
 800227a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800227c:	4b18      	ldr	r3, [pc, #96]	; (80022e0 <SystemInit+0xec>)
 800227e:	4a1c      	ldr	r2, [pc, #112]	; (80022f0 <SystemInit+0xfc>)
 8002280:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002282:	4b17      	ldr	r3, [pc, #92]	; (80022e0 <SystemInit+0xec>)
 8002284:	2200      	movs	r2, #0
 8002286:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002288:	4b15      	ldr	r3, [pc, #84]	; (80022e0 <SystemInit+0xec>)
 800228a:	4a19      	ldr	r2, [pc, #100]	; (80022f0 <SystemInit+0xfc>)
 800228c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800228e:	4b14      	ldr	r3, [pc, #80]	; (80022e0 <SystemInit+0xec>)
 8002290:	2200      	movs	r2, #0
 8002292:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002294:	4b12      	ldr	r3, [pc, #72]	; (80022e0 <SystemInit+0xec>)
 8002296:	4a16      	ldr	r2, [pc, #88]	; (80022f0 <SystemInit+0xfc>)
 8002298:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800229a:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <SystemInit+0xec>)
 800229c:	2200      	movs	r2, #0
 800229e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80022a0:	4b0f      	ldr	r3, [pc, #60]	; (80022e0 <SystemInit+0xec>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a0e      	ldr	r2, [pc, #56]	; (80022e0 <SystemInit+0xec>)
 80022a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80022ac:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <SystemInit+0xec>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80022b2:	4b10      	ldr	r3, [pc, #64]	; (80022f4 <SystemInit+0x100>)
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <SystemInit+0x104>)
 80022b8:	4013      	ands	r3, r2
 80022ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022be:	d202      	bcs.n	80022c6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80022c0:	4b0e      	ldr	r3, [pc, #56]	; (80022fc <SystemInit+0x108>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80022c6:	4b0e      	ldr	r3, [pc, #56]	; (8002300 <SystemInit+0x10c>)
 80022c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80022cc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80022ce:	bf00      	nop
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	e000ed00 	.word	0xe000ed00
 80022dc:	52002000 	.word	0x52002000
 80022e0:	58024400 	.word	0x58024400
 80022e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80022e8:	02020200 	.word	0x02020200
 80022ec:	01ff0000 	.word	0x01ff0000
 80022f0:	01010280 	.word	0x01010280
 80022f4:	5c001000 	.word	0x5c001000
 80022f8:	ffff0000 	.word	0xffff0000
 80022fc:	51008108 	.word	0x51008108
 8002300:	52004000 	.word	0x52004000

08002304 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002304:	f8df d034 	ldr.w	sp, [pc, #52]	; 800233c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002308:	f7ff ff74 	bl	80021f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800230c:	480c      	ldr	r0, [pc, #48]	; (8002340 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800230e:	490d      	ldr	r1, [pc, #52]	; (8002344 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002310:	4a0d      	ldr	r2, [pc, #52]	; (8002348 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002312:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002314:	e002      	b.n	800231c <LoopCopyDataInit>

08002316 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002316:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002318:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800231a:	3304      	adds	r3, #4

0800231c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800231c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800231e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002320:	d3f9      	bcc.n	8002316 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002322:	4a0a      	ldr	r2, [pc, #40]	; (800234c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002324:	4c0a      	ldr	r4, [pc, #40]	; (8002350 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002326:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002328:	e001      	b.n	800232e <LoopFillZerobss>

0800232a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800232a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800232c:	3204      	adds	r2, #4

0800232e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800232e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002330:	d3fb      	bcc.n	800232a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002332:	f00a f973 	bl	800c61c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002336:	f7fe f94d 	bl	80005d4 <main>
  bx  lr
 800233a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800233c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002340:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002344:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8002348:	0800c6c4 	.word	0x0800c6c4
  ldr r2, =_sbss
 800234c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8002350:	24000be0 	.word	0x24000be0

08002354 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002354:	e7fe      	b.n	8002354 <ADC3_IRQHandler>
	...

08002358 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800235e:	2003      	movs	r0, #3
 8002360:	f001 f9fc 	bl	800375c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002364:	f002 fdf6 	bl	8004f54 <HAL_RCC_GetSysClockFreq>
 8002368:	4602      	mov	r2, r0
 800236a:	4b15      	ldr	r3, [pc, #84]	; (80023c0 <HAL_Init+0x68>)
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	0a1b      	lsrs	r3, r3, #8
 8002370:	f003 030f 	and.w	r3, r3, #15
 8002374:	4913      	ldr	r1, [pc, #76]	; (80023c4 <HAL_Init+0x6c>)
 8002376:	5ccb      	ldrb	r3, [r1, r3]
 8002378:	f003 031f 	and.w	r3, r3, #31
 800237c:	fa22 f303 	lsr.w	r3, r2, r3
 8002380:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002382:	4b0f      	ldr	r3, [pc, #60]	; (80023c0 <HAL_Init+0x68>)
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	f003 030f 	and.w	r3, r3, #15
 800238a:	4a0e      	ldr	r2, [pc, #56]	; (80023c4 <HAL_Init+0x6c>)
 800238c:	5cd3      	ldrb	r3, [r2, r3]
 800238e:	f003 031f 	and.w	r3, r3, #31
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	fa22 f303 	lsr.w	r3, r2, r3
 8002398:	4a0b      	ldr	r2, [pc, #44]	; (80023c8 <HAL_Init+0x70>)
 800239a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800239c:	4a0b      	ldr	r2, [pc, #44]	; (80023cc <HAL_Init+0x74>)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023a2:	200f      	movs	r0, #15
 80023a4:	f000 f814 	bl	80023d0 <HAL_InitTick>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e002      	b.n	80023b8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80023b2:	f7ff f855 	bl	8001460 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	58024400 	.word	0x58024400
 80023c4:	0800c67c 	.word	0x0800c67c
 80023c8:	24000004 	.word	0x24000004
 80023cc:	24000000 	.word	0x24000000

080023d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80023d8:	4b15      	ldr	r3, [pc, #84]	; (8002430 <HAL_InitTick+0x60>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e021      	b.n	8002428 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80023e4:	4b13      	ldr	r3, [pc, #76]	; (8002434 <HAL_InitTick+0x64>)
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	4b11      	ldr	r3, [pc, #68]	; (8002430 <HAL_InitTick+0x60>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	4619      	mov	r1, r3
 80023ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80023f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023fa:	4618      	mov	r0, r3
 80023fc:	f001 f9d3 	bl	80037a6 <HAL_SYSTICK_Config>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e00e      	b.n	8002428 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b0f      	cmp	r3, #15
 800240e:	d80a      	bhi.n	8002426 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002410:	2200      	movs	r2, #0
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	f04f 30ff 	mov.w	r0, #4294967295
 8002418:	f001 f9ab 	bl	8003772 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800241c:	4a06      	ldr	r2, [pc, #24]	; (8002438 <HAL_InitTick+0x68>)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002422:	2300      	movs	r3, #0
 8002424:	e000      	b.n	8002428 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
}
 8002428:	4618      	mov	r0, r3
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	2400000c 	.word	0x2400000c
 8002434:	24000000 	.word	0x24000000
 8002438:	24000008 	.word	0x24000008

0800243c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002440:	4b06      	ldr	r3, [pc, #24]	; (800245c <HAL_IncTick+0x20>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	461a      	mov	r2, r3
 8002446:	4b06      	ldr	r3, [pc, #24]	; (8002460 <HAL_IncTick+0x24>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4413      	add	r3, r2
 800244c:	4a04      	ldr	r2, [pc, #16]	; (8002460 <HAL_IncTick+0x24>)
 800244e:	6013      	str	r3, [r2, #0]
}
 8002450:	bf00      	nop
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	2400000c 	.word	0x2400000c
 8002460:	24000bdc 	.word	0x24000bdc

08002464 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  return uwTick;
 8002468:	4b03      	ldr	r3, [pc, #12]	; (8002478 <HAL_GetTick+0x14>)
 800246a:	681b      	ldr	r3, [r3, #0]
}
 800246c:	4618      	mov	r0, r3
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	24000bdc 	.word	0x24000bdc

0800247c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002484:	f7ff ffee 	bl	8002464 <HAL_GetTick>
 8002488:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002494:	d005      	beq.n	80024a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002496:	4b0a      	ldr	r3, [pc, #40]	; (80024c0 <HAL_Delay+0x44>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	461a      	mov	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	4413      	add	r3, r2
 80024a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024a2:	bf00      	nop
 80024a4:	f7ff ffde 	bl	8002464 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d8f7      	bhi.n	80024a4 <HAL_Delay+0x28>
  {
  }
}
 80024b4:	bf00      	nop
 80024b6:	bf00      	nop
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	2400000c 	.word	0x2400000c

080024c4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80024c8:	4b03      	ldr	r3, [pc, #12]	; (80024d8 <HAL_GetREVID+0x14>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	0c1b      	lsrs	r3, r3, #16
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	5c001000 	.word	0x5c001000

080024dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	431a      	orrs	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	609a      	str	r2, [r3, #8]
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
 800250a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	431a      	orrs	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	609a      	str	r2, [r3, #8]
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002538:	4618      	mov	r0, r3
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002544:	b480      	push	{r7}
 8002546:	b087      	sub	sp, #28
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
 8002550:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	3360      	adds	r3, #96	; 0x60
 8002556:	461a      	mov	r2, r3
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	4413      	add	r3, r2
 800255e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	430b      	orrs	r3, r1
 8002572:	431a      	orrs	r2, r3
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002578:	bf00      	nop
 800257a:	371c      	adds	r7, #28
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	f003 031f 	and.w	r3, r3, #31
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	fa01 f303 	lsl.w	r3, r1, r3
 80025a4:	431a      	orrs	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	611a      	str	r2, [r3, #16]
}
 80025aa:	bf00      	nop
 80025ac:	3714      	adds	r7, #20
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr

080025b6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80025b6:	b480      	push	{r7}
 80025b8:	b087      	sub	sp, #28
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	60f8      	str	r0, [r7, #12]
 80025be:	60b9      	str	r1, [r7, #8]
 80025c0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	3360      	adds	r3, #96	; 0x60
 80025c6:	461a      	mov	r2, r3
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4413      	add	r3, r2
 80025ce:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	431a      	orrs	r2, r3
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	601a      	str	r2, [r3, #0]
  }
}
 80025e0:	bf00      	nop
 80025e2:	371c      	adds	r7, #28
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b087      	sub	sp, #28
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	3330      	adds	r3, #48	; 0x30
 80025fc:	461a      	mov	r2, r3
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	0a1b      	lsrs	r3, r3, #8
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	f003 030c 	and.w	r3, r3, #12
 8002608:	4413      	add	r3, r2
 800260a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	f003 031f 	and.w	r3, r3, #31
 8002616:	211f      	movs	r1, #31
 8002618:	fa01 f303 	lsl.w	r3, r1, r3
 800261c:	43db      	mvns	r3, r3
 800261e:	401a      	ands	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	0e9b      	lsrs	r3, r3, #26
 8002624:	f003 011f 	and.w	r1, r3, #31
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	f003 031f 	and.w	r3, r3, #31
 800262e:	fa01 f303 	lsl.w	r3, r1, r3
 8002632:	431a      	orrs	r2, r3
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002638:	bf00      	nop
 800263a:	371c      	adds	r7, #28
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002644:	b480      	push	{r7}
 8002646:	b087      	sub	sp, #28
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	3314      	adds	r3, #20
 8002654:	461a      	mov	r2, r3
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	0e5b      	lsrs	r3, r3, #25
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	4413      	add	r3, r2
 8002662:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	0d1b      	lsrs	r3, r3, #20
 800266c:	f003 031f 	and.w	r3, r3, #31
 8002670:	2107      	movs	r1, #7
 8002672:	fa01 f303 	lsl.w	r3, r1, r3
 8002676:	43db      	mvns	r3, r3
 8002678:	401a      	ands	r2, r3
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	0d1b      	lsrs	r3, r3, #20
 800267e:	f003 031f 	and.w	r3, r3, #31
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	fa01 f303 	lsl.w	r3, r1, r3
 8002688:	431a      	orrs	r2, r3
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800268e:	bf00      	nop
 8002690:	371c      	adds	r7, #28
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
	...

0800269c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026b4:	43db      	mvns	r3, r3
 80026b6:	401a      	ands	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f003 0318 	and.w	r3, r3, #24
 80026be:	4908      	ldr	r1, [pc, #32]	; (80026e0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80026c0:	40d9      	lsrs	r1, r3
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	400b      	ands	r3, r1
 80026c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026ca:	431a      	orrs	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80026d2:	bf00      	nop
 80026d4:	3714      	adds	r7, #20
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	000fffff 	.word	0x000fffff

080026e4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	4b04      	ldr	r3, [pc, #16]	; (8002704 <LL_ADC_DisableDeepPowerDown+0x20>)
 80026f2:	4013      	ands	r3, r2
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6093      	str	r3, [r2, #8]
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	5fffffc0 	.word	0x5fffffc0

08002708 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002718:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800271c:	d101      	bne.n	8002722 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	4b05      	ldr	r3, [pc, #20]	; (8002754 <LL_ADC_EnableInternalRegulator+0x24>)
 800273e:	4013      	ands	r3, r2
 8002740:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr
 8002754:	6fffffc0 	.word	0x6fffffc0

08002758 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002768:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800276c:	d101      	bne.n	8002772 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800276e:	2301      	movs	r3, #1
 8002770:	e000      	b.n	8002774 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	2b01      	cmp	r3, #1
 8002792:	d101      	bne.n	8002798 <LL_ADC_IsEnabled+0x18>
 8002794:	2301      	movs	r3, #1
 8002796:	e000      	b.n	800279a <LL_ADC_IsEnabled+0x1a>
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 0304 	and.w	r3, r3, #4
 80027b6:	2b04      	cmp	r3, #4
 80027b8:	d101      	bne.n	80027be <LL_ADC_REG_IsConversionOngoing+0x18>
 80027ba:	2301      	movs	r3, #1
 80027bc:	e000      	b.n	80027c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 0308 	and.w	r3, r3, #8
 80027dc:	2b08      	cmp	r3, #8
 80027de:	d101      	bne.n	80027e4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80027e0:	2301      	movs	r3, #1
 80027e2:	e000      	b.n	80027e6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
	...

080027f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80027f4:	b590      	push	{r4, r7, lr}
 80027f6:	b089      	sub	sp, #36	; 0x24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027fc:	2300      	movs	r3, #0
 80027fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002800:	2300      	movs	r3, #0
 8002802:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e18f      	b.n	8002b2e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002818:	2b00      	cmp	r3, #0
 800281a:	d109      	bne.n	8002830 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f7fe fe39 	bl	8001494 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff ff67 	bl	8002708 <LL_ADC_IsDeepPowerDownEnabled>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d004      	beq.n	800284a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff ff4d 	bl	80026e4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff ff82 	bl	8002758 <LL_ADC_IsInternalRegulatorEnabled>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d114      	bne.n	8002884 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff ff66 	bl	8002730 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002864:	4b87      	ldr	r3, [pc, #540]	; (8002a84 <HAL_ADC_Init+0x290>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	099b      	lsrs	r3, r3, #6
 800286a:	4a87      	ldr	r2, [pc, #540]	; (8002a88 <HAL_ADC_Init+0x294>)
 800286c:	fba2 2303 	umull	r2, r3, r2, r3
 8002870:	099b      	lsrs	r3, r3, #6
 8002872:	3301      	adds	r3, #1
 8002874:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002876:	e002      	b.n	800287e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	3b01      	subs	r3, #1
 800287c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1f9      	bne.n	8002878 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff ff65 	bl	8002758 <LL_ADC_IsInternalRegulatorEnabled>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10d      	bne.n	80028b0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002898:	f043 0210 	orr.w	r2, r3, #16
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a4:	f043 0201 	orr.w	r2, r3, #1
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff ff76 	bl	80027a6 <LL_ADC_REG_IsConversionOngoing>
 80028ba:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c0:	f003 0310 	and.w	r3, r3, #16
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f040 8129 	bne.w	8002b1c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f040 8125 	bne.w	8002b1c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80028da:	f043 0202 	orr.w	r2, r3, #2
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7ff ff4a 	bl	8002780 <LL_ADC_IsEnabled>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d136      	bne.n	8002960 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a65      	ldr	r2, [pc, #404]	; (8002a8c <HAL_ADC_Init+0x298>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d004      	beq.n	8002906 <HAL_ADC_Init+0x112>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a63      	ldr	r2, [pc, #396]	; (8002a90 <HAL_ADC_Init+0x29c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d10e      	bne.n	8002924 <HAL_ADC_Init+0x130>
 8002906:	4861      	ldr	r0, [pc, #388]	; (8002a8c <HAL_ADC_Init+0x298>)
 8002908:	f7ff ff3a 	bl	8002780 <LL_ADC_IsEnabled>
 800290c:	4604      	mov	r4, r0
 800290e:	4860      	ldr	r0, [pc, #384]	; (8002a90 <HAL_ADC_Init+0x29c>)
 8002910:	f7ff ff36 	bl	8002780 <LL_ADC_IsEnabled>
 8002914:	4603      	mov	r3, r0
 8002916:	4323      	orrs	r3, r4
 8002918:	2b00      	cmp	r3, #0
 800291a:	bf0c      	ite	eq
 800291c:	2301      	moveq	r3, #1
 800291e:	2300      	movne	r3, #0
 8002920:	b2db      	uxtb	r3, r3
 8002922:	e008      	b.n	8002936 <HAL_ADC_Init+0x142>
 8002924:	485b      	ldr	r0, [pc, #364]	; (8002a94 <HAL_ADC_Init+0x2a0>)
 8002926:	f7ff ff2b 	bl	8002780 <LL_ADC_IsEnabled>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	bf0c      	ite	eq
 8002930:	2301      	moveq	r3, #1
 8002932:	2300      	movne	r3, #0
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d012      	beq.n	8002960 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a53      	ldr	r2, [pc, #332]	; (8002a8c <HAL_ADC_Init+0x298>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d004      	beq.n	800294e <HAL_ADC_Init+0x15a>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a51      	ldr	r2, [pc, #324]	; (8002a90 <HAL_ADC_Init+0x29c>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d101      	bne.n	8002952 <HAL_ADC_Init+0x15e>
 800294e:	4a52      	ldr	r2, [pc, #328]	; (8002a98 <HAL_ADC_Init+0x2a4>)
 8002950:	e000      	b.n	8002954 <HAL_ADC_Init+0x160>
 8002952:	4a52      	ldr	r2, [pc, #328]	; (8002a9c <HAL_ADC_Init+0x2a8>)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	4619      	mov	r1, r3
 800295a:	4610      	mov	r0, r2
 800295c:	f7ff fdbe 	bl	80024dc <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002960:	f7ff fdb0 	bl	80024c4 <HAL_GetREVID>
 8002964:	4603      	mov	r3, r0
 8002966:	f241 0203 	movw	r2, #4099	; 0x1003
 800296a:	4293      	cmp	r3, r2
 800296c:	d914      	bls.n	8002998 <HAL_ADC_Init+0x1a4>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	2b10      	cmp	r3, #16
 8002974:	d110      	bne.n	8002998 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	7d5b      	ldrb	r3, [r3, #21]
 800297a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002980:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002986:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	7f1b      	ldrb	r3, [r3, #28]
 800298c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800298e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002990:	f043 030c 	orr.w	r3, r3, #12
 8002994:	61bb      	str	r3, [r7, #24]
 8002996:	e00d      	b.n	80029b4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	7d5b      	ldrb	r3, [r3, #21]
 800299c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80029a2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80029a8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	7f1b      	ldrb	r3, [r3, #28]
 80029ae:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80029b0:	4313      	orrs	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	7f1b      	ldrb	r3, [r3, #28]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d106      	bne.n	80029ca <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	3b01      	subs	r3, #1
 80029c2:	045b      	lsls	r3, r3, #17
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d009      	beq.n	80029e6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029de:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68da      	ldr	r2, [r3, #12]
 80029ec:	4b2c      	ldr	r3, [pc, #176]	; (8002aa0 <HAL_ADC_Init+0x2ac>)
 80029ee:	4013      	ands	r3, r2
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	6812      	ldr	r2, [r2, #0]
 80029f4:	69b9      	ldr	r1, [r7, #24]
 80029f6:	430b      	orrs	r3, r1
 80029f8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff fed1 	bl	80027a6 <LL_ADC_REG_IsConversionOngoing>
 8002a04:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff fede 	bl	80027cc <LL_ADC_INJ_IsConversionOngoing>
 8002a10:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d15f      	bne.n	8002ad8 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d15c      	bne.n	8002ad8 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	7d1b      	ldrb	r3, [r3, #20]
 8002a22:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68da      	ldr	r2, [r3, #12]
 8002a32:	4b1c      	ldr	r3, [pc, #112]	; (8002aa4 <HAL_ADC_Init+0x2b0>)
 8002a34:	4013      	ands	r3, r2
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6812      	ldr	r2, [r2, #0]
 8002a3a:	69b9      	ldr	r1, [r7, #24]
 8002a3c:	430b      	orrs	r3, r1
 8002a3e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d130      	bne.n	8002aac <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	691a      	ldr	r2, [r3, #16]
 8002a56:	4b14      	ldr	r3, [pc, #80]	; (8002aa8 <HAL_ADC_Init+0x2b4>)
 8002a58:	4013      	ands	r3, r2
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a5e:	3a01      	subs	r2, #1
 8002a60:	0411      	lsls	r1, r2, #16
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a66:	4311      	orrs	r1, r2
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002a6c:	4311      	orrs	r1, r2
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a72:	430a      	orrs	r2, r1
 8002a74:	431a      	orrs	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f042 0201 	orr.w	r2, r2, #1
 8002a7e:	611a      	str	r2, [r3, #16]
 8002a80:	e01c      	b.n	8002abc <HAL_ADC_Init+0x2c8>
 8002a82:	bf00      	nop
 8002a84:	24000000 	.word	0x24000000
 8002a88:	053e2d63 	.word	0x053e2d63
 8002a8c:	40022000 	.word	0x40022000
 8002a90:	40022100 	.word	0x40022100
 8002a94:	58026000 	.word	0x58026000
 8002a98:	40022300 	.word	0x40022300
 8002a9c:	58026300 	.word	0x58026300
 8002aa0:	fff0c003 	.word	0xfff0c003
 8002aa4:	ffffbffc 	.word	0xffffbffc
 8002aa8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	691a      	ldr	r2, [r3, #16]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 0201 	bic.w	r2, r2, #1
 8002aba:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 fb80 	bl	80031d8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d10c      	bne.n	8002afa <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	f023 010f 	bic.w	r1, r3, #15
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	1e5a      	subs	r2, r3, #1
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	430a      	orrs	r2, r1
 8002af6:	631a      	str	r2, [r3, #48]	; 0x30
 8002af8:	e007      	b.n	8002b0a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 020f 	bic.w	r2, r2, #15
 8002b08:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0e:	f023 0303 	bic.w	r3, r3, #3
 8002b12:	f043 0201 	orr.w	r2, r3, #1
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	655a      	str	r2, [r3, #84]	; 0x54
 8002b1a:	e007      	b.n	8002b2c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b20:	f043 0210 	orr.w	r2, r3, #16
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3724      	adds	r7, #36	; 0x24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd90      	pop	{r4, r7, pc}
 8002b36:	bf00      	nop

08002b38 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002b38:	b590      	push	{r4, r7, lr}
 8002b3a:	b0a1      	sub	sp, #132	; 0x84
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b42:	2300      	movs	r3, #0
 8002b44:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	4a9d      	ldr	r2, [pc, #628]	; (8002dc8 <HAL_ADC_ConfigChannel+0x290>)
 8002b52:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d101      	bne.n	8002b62 <HAL_ADC_ConfigChannel+0x2a>
 8002b5e:	2302      	movs	r3, #2
 8002b60:	e321      	b.n	80031a6 <HAL_ADC_ConfigChannel+0x66e>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff fe19 	bl	80027a6 <LL_ADC_REG_IsConversionOngoing>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f040 8306 	bne.w	8003188 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d108      	bne.n	8002b9a <HAL_ADC_ConfigChannel+0x62>
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	0e9b      	lsrs	r3, r3, #26
 8002b8e:	f003 031f 	and.w	r3, r3, #31
 8002b92:	2201      	movs	r2, #1
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	e016      	b.n	8002bc8 <HAL_ADC_ConfigChannel+0x90>
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ba2:	fa93 f3a3 	rbit	r3, r3
 8002ba6:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ba8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002baa:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002bac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002bb2:	2320      	movs	r3, #32
 8002bb4:	e003      	b.n	8002bbe <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002bb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bb8:	fab3 f383 	clz	r3, r3
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	f003 031f 	and.w	r3, r3, #31
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	6812      	ldr	r2, [r2, #0]
 8002bcc:	69d1      	ldr	r1, [r2, #28]
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	6812      	ldr	r2, [r2, #0]
 8002bd2:	430b      	orrs	r3, r1
 8002bd4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6818      	ldr	r0, [r3, #0]
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	6859      	ldr	r1, [r3, #4]
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	461a      	mov	r2, r3
 8002be4:	f7ff fd02 	bl	80025ec <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff fdda 	bl	80027a6 <LL_ADC_REG_IsConversionOngoing>
 8002bf2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff fde7 	bl	80027cc <LL_ADC_INJ_IsConversionOngoing>
 8002bfe:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f040 80b3 	bne.w	8002d6e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f040 80af 	bne.w	8002d6e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6818      	ldr	r0, [r3, #0]
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	6819      	ldr	r1, [r3, #0]
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	f7ff fd11 	bl	8002644 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002c22:	4b6a      	ldr	r3, [pc, #424]	; (8002dcc <HAL_ADC_ConfigChannel+0x294>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002c2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c2e:	d10b      	bne.n	8002c48 <HAL_ADC_ConfigChannel+0x110>
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	695a      	ldr	r2, [r3, #20]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	089b      	lsrs	r3, r3, #2
 8002c3c:	f003 0307 	and.w	r3, r3, #7
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	fa02 f303 	lsl.w	r3, r2, r3
 8002c46:	e01d      	b.n	8002c84 <HAL_ADC_ConfigChannel+0x14c>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	f003 0310 	and.w	r3, r3, #16
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10b      	bne.n	8002c6e <HAL_ADC_ConfigChannel+0x136>
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	695a      	ldr	r2, [r3, #20]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	089b      	lsrs	r3, r3, #2
 8002c62:	f003 0307 	and.w	r3, r3, #7
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	e00a      	b.n	8002c84 <HAL_ADC_ConfigChannel+0x14c>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	695a      	ldr	r2, [r3, #20]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	089b      	lsrs	r3, r3, #2
 8002c7a:	f003 0304 	and.w	r3, r3, #4
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	2b04      	cmp	r3, #4
 8002c8c:	d027      	beq.n	8002cde <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6818      	ldr	r0, [r3, #0]
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	6919      	ldr	r1, [r3, #16]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c9c:	f7ff fc52 	bl	8002544 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6818      	ldr	r0, [r3, #0]
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	6919      	ldr	r1, [r3, #16]
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	7e5b      	ldrb	r3, [r3, #25]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d102      	bne.n	8002cb6 <HAL_ADC_ConfigChannel+0x17e>
 8002cb0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002cb4:	e000      	b.n	8002cb8 <HAL_ADC_ConfigChannel+0x180>
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	461a      	mov	r2, r3
 8002cba:	f7ff fc7c 	bl	80025b6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6818      	ldr	r0, [r3, #0]
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	6919      	ldr	r1, [r3, #16]
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	7e1b      	ldrb	r3, [r3, #24]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d102      	bne.n	8002cd4 <HAL_ADC_ConfigChannel+0x19c>
 8002cce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002cd2:	e000      	b.n	8002cd6 <HAL_ADC_ConfigChannel+0x19e>
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	f7ff fc54 	bl	8002584 <LL_ADC_SetDataRightShift>
 8002cdc:	e047      	b.n	8002d6e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	069b      	lsls	r3, r3, #26
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d107      	bne.n	8002d02 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002d00:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d08:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	069b      	lsls	r3, r3, #26
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d107      	bne.n	8002d26 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002d24:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	069b      	lsls	r3, r3, #26
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d107      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002d48:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	069b      	lsls	r3, r3, #26
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d107      	bne.n	8002d6e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002d6c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff fd04 	bl	8002780 <LL_ADC_IsEnabled>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f040 820d 	bne.w	800319a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6818      	ldr	r0, [r3, #0]
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	6819      	ldr	r1, [r3, #0]
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	f7ff fc85 	bl	800269c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	4a0c      	ldr	r2, [pc, #48]	; (8002dc8 <HAL_ADC_ConfigChannel+0x290>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	f040 8133 	bne.w	8003004 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d110      	bne.n	8002dd0 <HAL_ADC_ConfigChannel+0x298>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	0e9b      	lsrs	r3, r3, #26
 8002db4:	3301      	adds	r3, #1
 8002db6:	f003 031f 	and.w	r3, r3, #31
 8002dba:	2b09      	cmp	r3, #9
 8002dbc:	bf94      	ite	ls
 8002dbe:	2301      	movls	r3, #1
 8002dc0:	2300      	movhi	r3, #0
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	e01e      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x2cc>
 8002dc6:	bf00      	nop
 8002dc8:	47ff0000 	.word	0x47ff0000
 8002dcc:	5c001000 	.word	0x5c001000
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dd8:	fa93 f3a3 	rbit	r3, r3
 8002ddc:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002dde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002de0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002de2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d101      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002de8:	2320      	movs	r3, #32
 8002dea:	e003      	b.n	8002df4 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002dec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dee:	fab3 f383 	clz	r3, r3
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	3301      	adds	r3, #1
 8002df6:	f003 031f 	and.w	r3, r3, #31
 8002dfa:	2b09      	cmp	r3, #9
 8002dfc:	bf94      	ite	ls
 8002dfe:	2301      	movls	r3, #1
 8002e00:	2300      	movhi	r3, #0
 8002e02:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d079      	beq.n	8002efc <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d107      	bne.n	8002e24 <HAL_ADC_ConfigChannel+0x2ec>
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	0e9b      	lsrs	r3, r3, #26
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	069b      	lsls	r3, r3, #26
 8002e1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e22:	e015      	b.n	8002e50 <HAL_ADC_ConfigChannel+0x318>
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e2c:	fa93 f3a3 	rbit	r3, r3
 8002e30:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002e32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e34:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002e36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d101      	bne.n	8002e40 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002e3c:	2320      	movs	r3, #32
 8002e3e:	e003      	b.n	8002e48 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002e40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e42:	fab3 f383 	clz	r3, r3
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	3301      	adds	r3, #1
 8002e4a:	069b      	lsls	r3, r3, #26
 8002e4c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d109      	bne.n	8002e70 <HAL_ADC_ConfigChannel+0x338>
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	0e9b      	lsrs	r3, r3, #26
 8002e62:	3301      	adds	r3, #1
 8002e64:	f003 031f 	and.w	r3, r3, #31
 8002e68:	2101      	movs	r1, #1
 8002e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6e:	e017      	b.n	8002ea0 <HAL_ADC_ConfigChannel+0x368>
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e78:	fa93 f3a3 	rbit	r3, r3
 8002e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e80:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002e82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d101      	bne.n	8002e8c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002e88:	2320      	movs	r3, #32
 8002e8a:	e003      	b.n	8002e94 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002e8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e8e:	fab3 f383 	clz	r3, r3
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	3301      	adds	r3, #1
 8002e96:	f003 031f 	and.w	r3, r3, #31
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea0:	ea42 0103 	orr.w	r1, r2, r3
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d10a      	bne.n	8002ec6 <HAL_ADC_ConfigChannel+0x38e>
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	0e9b      	lsrs	r3, r3, #26
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	f003 021f 	and.w	r2, r3, #31
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	4413      	add	r3, r2
 8002ec2:	051b      	lsls	r3, r3, #20
 8002ec4:	e018      	b.n	8002ef8 <HAL_ADC_ConfigChannel+0x3c0>
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ece:	fa93 f3a3 	rbit	r3, r3
 8002ed2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002ede:	2320      	movs	r3, #32
 8002ee0:	e003      	b.n	8002eea <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8002ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee4:	fab3 f383 	clz	r3, r3
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	3301      	adds	r3, #1
 8002eec:	f003 021f 	and.w	r2, r3, #31
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	4413      	add	r3, r2
 8002ef6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ef8:	430b      	orrs	r3, r1
 8002efa:	e07e      	b.n	8002ffa <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d107      	bne.n	8002f18 <HAL_ADC_ConfigChannel+0x3e0>
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	0e9b      	lsrs	r3, r3, #26
 8002f0e:	3301      	adds	r3, #1
 8002f10:	069b      	lsls	r3, r3, #26
 8002f12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f16:	e015      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x40c>
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f20:	fa93 f3a3 	rbit	r3, r3
 8002f24:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f28:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d101      	bne.n	8002f34 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002f30:	2320      	movs	r3, #32
 8002f32:	e003      	b.n	8002f3c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f36:	fab3 f383 	clz	r3, r3
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	069b      	lsls	r3, r3, #26
 8002f40:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d109      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x42c>
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	0e9b      	lsrs	r3, r3, #26
 8002f56:	3301      	adds	r3, #1
 8002f58:	f003 031f 	and.w	r3, r3, #31
 8002f5c:	2101      	movs	r1, #1
 8002f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f62:	e017      	b.n	8002f94 <HAL_ADC_ConfigChannel+0x45c>
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	fa93 f3a3 	rbit	r3, r3
 8002f70:	61bb      	str	r3, [r7, #24]
  return result;
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002f76:	6a3b      	ldr	r3, [r7, #32]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d101      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002f7c:	2320      	movs	r3, #32
 8002f7e:	e003      	b.n	8002f88 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002f80:	6a3b      	ldr	r3, [r7, #32]
 8002f82:	fab3 f383 	clz	r3, r3
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	3301      	adds	r3, #1
 8002f8a:	f003 031f 	and.w	r3, r3, #31
 8002f8e:	2101      	movs	r1, #1
 8002f90:	fa01 f303 	lsl.w	r3, r1, r3
 8002f94:	ea42 0103 	orr.w	r1, r2, r3
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10d      	bne.n	8002fc0 <HAL_ADC_ConfigChannel+0x488>
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	0e9b      	lsrs	r3, r3, #26
 8002faa:	3301      	adds	r3, #1
 8002fac:	f003 021f 	and.w	r2, r3, #31
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	4413      	add	r3, r2
 8002fb6:	3b1e      	subs	r3, #30
 8002fb8:	051b      	lsls	r3, r3, #20
 8002fba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002fbe:	e01b      	b.n	8002ff8 <HAL_ADC_ConfigChannel+0x4c0>
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	fa93 f3a3 	rbit	r3, r3
 8002fcc:	60fb      	str	r3, [r7, #12]
  return result;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002fd8:	2320      	movs	r3, #32
 8002fda:	e003      	b.n	8002fe4 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	fab3 f383 	clz	r3, r3
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	f003 021f 	and.w	r2, r3, #31
 8002fea:	4613      	mov	r3, r2
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	4413      	add	r3, r2
 8002ff0:	3b1e      	subs	r3, #30
 8002ff2:	051b      	lsls	r3, r3, #20
 8002ff4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ff8:	430b      	orrs	r3, r1
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	6892      	ldr	r2, [r2, #8]
 8002ffe:	4619      	mov	r1, r3
 8003000:	f7ff fb20 	bl	8002644 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	f280 80c6 	bge.w	800319a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a67      	ldr	r2, [pc, #412]	; (80031b0 <HAL_ADC_ConfigChannel+0x678>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d004      	beq.n	8003022 <HAL_ADC_ConfigChannel+0x4ea>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a65      	ldr	r2, [pc, #404]	; (80031b4 <HAL_ADC_ConfigChannel+0x67c>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d101      	bne.n	8003026 <HAL_ADC_ConfigChannel+0x4ee>
 8003022:	4b65      	ldr	r3, [pc, #404]	; (80031b8 <HAL_ADC_ConfigChannel+0x680>)
 8003024:	e000      	b.n	8003028 <HAL_ADC_ConfigChannel+0x4f0>
 8003026:	4b65      	ldr	r3, [pc, #404]	; (80031bc <HAL_ADC_ConfigChannel+0x684>)
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff fa7d 	bl	8002528 <LL_ADC_GetCommonPathInternalCh>
 800302e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a5e      	ldr	r2, [pc, #376]	; (80031b0 <HAL_ADC_ConfigChannel+0x678>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d004      	beq.n	8003044 <HAL_ADC_ConfigChannel+0x50c>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a5d      	ldr	r2, [pc, #372]	; (80031b4 <HAL_ADC_ConfigChannel+0x67c>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d10e      	bne.n	8003062 <HAL_ADC_ConfigChannel+0x52a>
 8003044:	485a      	ldr	r0, [pc, #360]	; (80031b0 <HAL_ADC_ConfigChannel+0x678>)
 8003046:	f7ff fb9b 	bl	8002780 <LL_ADC_IsEnabled>
 800304a:	4604      	mov	r4, r0
 800304c:	4859      	ldr	r0, [pc, #356]	; (80031b4 <HAL_ADC_ConfigChannel+0x67c>)
 800304e:	f7ff fb97 	bl	8002780 <LL_ADC_IsEnabled>
 8003052:	4603      	mov	r3, r0
 8003054:	4323      	orrs	r3, r4
 8003056:	2b00      	cmp	r3, #0
 8003058:	bf0c      	ite	eq
 800305a:	2301      	moveq	r3, #1
 800305c:	2300      	movne	r3, #0
 800305e:	b2db      	uxtb	r3, r3
 8003060:	e008      	b.n	8003074 <HAL_ADC_ConfigChannel+0x53c>
 8003062:	4857      	ldr	r0, [pc, #348]	; (80031c0 <HAL_ADC_ConfigChannel+0x688>)
 8003064:	f7ff fb8c 	bl	8002780 <LL_ADC_IsEnabled>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	bf0c      	ite	eq
 800306e:	2301      	moveq	r3, #1
 8003070:	2300      	movne	r3, #0
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b00      	cmp	r3, #0
 8003076:	d07d      	beq.n	8003174 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a51      	ldr	r2, [pc, #324]	; (80031c4 <HAL_ADC_ConfigChannel+0x68c>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d130      	bne.n	80030e4 <HAL_ADC_ConfigChannel+0x5ac>
 8003082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003084:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d12b      	bne.n	80030e4 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a4b      	ldr	r2, [pc, #300]	; (80031c0 <HAL_ADC_ConfigChannel+0x688>)
 8003092:	4293      	cmp	r3, r2
 8003094:	f040 8081 	bne.w	800319a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a44      	ldr	r2, [pc, #272]	; (80031b0 <HAL_ADC_ConfigChannel+0x678>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d004      	beq.n	80030ac <HAL_ADC_ConfigChannel+0x574>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a43      	ldr	r2, [pc, #268]	; (80031b4 <HAL_ADC_ConfigChannel+0x67c>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d101      	bne.n	80030b0 <HAL_ADC_ConfigChannel+0x578>
 80030ac:	4a42      	ldr	r2, [pc, #264]	; (80031b8 <HAL_ADC_ConfigChannel+0x680>)
 80030ae:	e000      	b.n	80030b2 <HAL_ADC_ConfigChannel+0x57a>
 80030b0:	4a42      	ldr	r2, [pc, #264]	; (80031bc <HAL_ADC_ConfigChannel+0x684>)
 80030b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030b8:	4619      	mov	r1, r3
 80030ba:	4610      	mov	r0, r2
 80030bc:	f7ff fa21 	bl	8002502 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030c0:	4b41      	ldr	r3, [pc, #260]	; (80031c8 <HAL_ADC_ConfigChannel+0x690>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	099b      	lsrs	r3, r3, #6
 80030c6:	4a41      	ldr	r2, [pc, #260]	; (80031cc <HAL_ADC_ConfigChannel+0x694>)
 80030c8:	fba2 2303 	umull	r2, r3, r2, r3
 80030cc:	099b      	lsrs	r3, r3, #6
 80030ce:	3301      	adds	r3, #1
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80030d4:	e002      	b.n	80030dc <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	3b01      	subs	r3, #1
 80030da:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1f9      	bne.n	80030d6 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030e2:	e05a      	b.n	800319a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a39      	ldr	r2, [pc, #228]	; (80031d0 <HAL_ADC_ConfigChannel+0x698>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d11e      	bne.n	800312c <HAL_ADC_ConfigChannel+0x5f4>
 80030ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d119      	bne.n	800312c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a30      	ldr	r2, [pc, #192]	; (80031c0 <HAL_ADC_ConfigChannel+0x688>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d14b      	bne.n	800319a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a2a      	ldr	r2, [pc, #168]	; (80031b0 <HAL_ADC_ConfigChannel+0x678>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d004      	beq.n	8003116 <HAL_ADC_ConfigChannel+0x5de>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a28      	ldr	r2, [pc, #160]	; (80031b4 <HAL_ADC_ConfigChannel+0x67c>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d101      	bne.n	800311a <HAL_ADC_ConfigChannel+0x5e2>
 8003116:	4a28      	ldr	r2, [pc, #160]	; (80031b8 <HAL_ADC_ConfigChannel+0x680>)
 8003118:	e000      	b.n	800311c <HAL_ADC_ConfigChannel+0x5e4>
 800311a:	4a28      	ldr	r2, [pc, #160]	; (80031bc <HAL_ADC_ConfigChannel+0x684>)
 800311c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800311e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003122:	4619      	mov	r1, r3
 8003124:	4610      	mov	r0, r2
 8003126:	f7ff f9ec 	bl	8002502 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800312a:	e036      	b.n	800319a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a28      	ldr	r2, [pc, #160]	; (80031d4 <HAL_ADC_ConfigChannel+0x69c>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d131      	bne.n	800319a <HAL_ADC_ConfigChannel+0x662>
 8003136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003138:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d12c      	bne.n	800319a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a1e      	ldr	r2, [pc, #120]	; (80031c0 <HAL_ADC_ConfigChannel+0x688>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d127      	bne.n	800319a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a18      	ldr	r2, [pc, #96]	; (80031b0 <HAL_ADC_ConfigChannel+0x678>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d004      	beq.n	800315e <HAL_ADC_ConfigChannel+0x626>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a16      	ldr	r2, [pc, #88]	; (80031b4 <HAL_ADC_ConfigChannel+0x67c>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d101      	bne.n	8003162 <HAL_ADC_ConfigChannel+0x62a>
 800315e:	4a16      	ldr	r2, [pc, #88]	; (80031b8 <HAL_ADC_ConfigChannel+0x680>)
 8003160:	e000      	b.n	8003164 <HAL_ADC_ConfigChannel+0x62c>
 8003162:	4a16      	ldr	r2, [pc, #88]	; (80031bc <HAL_ADC_ConfigChannel+0x684>)
 8003164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003166:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800316a:	4619      	mov	r1, r3
 800316c:	4610      	mov	r0, r2
 800316e:	f7ff f9c8 	bl	8002502 <LL_ADC_SetCommonPathInternalCh>
 8003172:	e012      	b.n	800319a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003178:	f043 0220 	orr.w	r2, r3, #32
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003186:	e008      	b.n	800319a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800318c:	f043 0220 	orr.w	r2, r3, #32
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80031a2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3784      	adds	r7, #132	; 0x84
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd90      	pop	{r4, r7, pc}
 80031ae:	bf00      	nop
 80031b0:	40022000 	.word	0x40022000
 80031b4:	40022100 	.word	0x40022100
 80031b8:	40022300 	.word	0x40022300
 80031bc:	58026300 	.word	0x58026300
 80031c0:	58026000 	.word	0x58026000
 80031c4:	cb840000 	.word	0xcb840000
 80031c8:	24000000 	.word	0x24000000
 80031cc:	053e2d63 	.word	0x053e2d63
 80031d0:	c7520000 	.word	0xc7520000
 80031d4:	cfb80000 	.word	0xcfb80000

080031d8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a7a      	ldr	r2, [pc, #488]	; (80033d0 <ADC_ConfigureBoostMode+0x1f8>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d004      	beq.n	80031f4 <ADC_ConfigureBoostMode+0x1c>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a79      	ldr	r2, [pc, #484]	; (80033d4 <ADC_ConfigureBoostMode+0x1fc>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d109      	bne.n	8003208 <ADC_ConfigureBoostMode+0x30>
 80031f4:	4b78      	ldr	r3, [pc, #480]	; (80033d8 <ADC_ConfigureBoostMode+0x200>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	bf14      	ite	ne
 8003200:	2301      	movne	r3, #1
 8003202:	2300      	moveq	r3, #0
 8003204:	b2db      	uxtb	r3, r3
 8003206:	e008      	b.n	800321a <ADC_ConfigureBoostMode+0x42>
 8003208:	4b74      	ldr	r3, [pc, #464]	; (80033dc <ADC_ConfigureBoostMode+0x204>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003210:	2b00      	cmp	r3, #0
 8003212:	bf14      	ite	ne
 8003214:	2301      	movne	r3, #1
 8003216:	2300      	moveq	r3, #0
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d01c      	beq.n	8003258 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800321e:	f002 f813 	bl	8005248 <HAL_RCC_GetHCLKFreq>
 8003222:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800322c:	d010      	beq.n	8003250 <ADC_ConfigureBoostMode+0x78>
 800322e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003232:	d873      	bhi.n	800331c <ADC_ConfigureBoostMode+0x144>
 8003234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003238:	d002      	beq.n	8003240 <ADC_ConfigureBoostMode+0x68>
 800323a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800323e:	d16d      	bne.n	800331c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	0c1b      	lsrs	r3, r3, #16
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	fbb2 f3f3 	udiv	r3, r2, r3
 800324c:	60fb      	str	r3, [r7, #12]
        break;
 800324e:	e068      	b.n	8003322 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	089b      	lsrs	r3, r3, #2
 8003254:	60fb      	str	r3, [r7, #12]
        break;
 8003256:	e064      	b.n	8003322 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003258:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800325c:	f04f 0100 	mov.w	r1, #0
 8003260:	f003 fa58 	bl	8006714 <HAL_RCCEx_GetPeriphCLKFreq>
 8003264:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800326e:	d051      	beq.n	8003314 <ADC_ConfigureBoostMode+0x13c>
 8003270:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003274:	d854      	bhi.n	8003320 <ADC_ConfigureBoostMode+0x148>
 8003276:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800327a:	d047      	beq.n	800330c <ADC_ConfigureBoostMode+0x134>
 800327c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003280:	d84e      	bhi.n	8003320 <ADC_ConfigureBoostMode+0x148>
 8003282:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003286:	d03d      	beq.n	8003304 <ADC_ConfigureBoostMode+0x12c>
 8003288:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800328c:	d848      	bhi.n	8003320 <ADC_ConfigureBoostMode+0x148>
 800328e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003292:	d033      	beq.n	80032fc <ADC_ConfigureBoostMode+0x124>
 8003294:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003298:	d842      	bhi.n	8003320 <ADC_ConfigureBoostMode+0x148>
 800329a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800329e:	d029      	beq.n	80032f4 <ADC_ConfigureBoostMode+0x11c>
 80032a0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80032a4:	d83c      	bhi.n	8003320 <ADC_ConfigureBoostMode+0x148>
 80032a6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80032aa:	d01a      	beq.n	80032e2 <ADC_ConfigureBoostMode+0x10a>
 80032ac:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80032b0:	d836      	bhi.n	8003320 <ADC_ConfigureBoostMode+0x148>
 80032b2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80032b6:	d014      	beq.n	80032e2 <ADC_ConfigureBoostMode+0x10a>
 80032b8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80032bc:	d830      	bhi.n	8003320 <ADC_ConfigureBoostMode+0x148>
 80032be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032c2:	d00e      	beq.n	80032e2 <ADC_ConfigureBoostMode+0x10a>
 80032c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032c8:	d82a      	bhi.n	8003320 <ADC_ConfigureBoostMode+0x148>
 80032ca:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80032ce:	d008      	beq.n	80032e2 <ADC_ConfigureBoostMode+0x10a>
 80032d0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80032d4:	d824      	bhi.n	8003320 <ADC_ConfigureBoostMode+0x148>
 80032d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80032da:	d002      	beq.n	80032e2 <ADC_ConfigureBoostMode+0x10a>
 80032dc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80032e0:	d11e      	bne.n	8003320 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	0c9b      	lsrs	r3, r3, #18
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f0:	60fb      	str	r3, [r7, #12]
        break;
 80032f2:	e016      	b.n	8003322 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	091b      	lsrs	r3, r3, #4
 80032f8:	60fb      	str	r3, [r7, #12]
        break;
 80032fa:	e012      	b.n	8003322 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	095b      	lsrs	r3, r3, #5
 8003300:	60fb      	str	r3, [r7, #12]
        break;
 8003302:	e00e      	b.n	8003322 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	099b      	lsrs	r3, r3, #6
 8003308:	60fb      	str	r3, [r7, #12]
        break;
 800330a:	e00a      	b.n	8003322 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	09db      	lsrs	r3, r3, #7
 8003310:	60fb      	str	r3, [r7, #12]
        break;
 8003312:	e006      	b.n	8003322 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	0a1b      	lsrs	r3, r3, #8
 8003318:	60fb      	str	r3, [r7, #12]
        break;
 800331a:	e002      	b.n	8003322 <ADC_ConfigureBoostMode+0x14a>
        break;
 800331c:	bf00      	nop
 800331e:	e000      	b.n	8003322 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003320:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003322:	f7ff f8cf 	bl	80024c4 <HAL_GetREVID>
 8003326:	4603      	mov	r3, r0
 8003328:	f241 0203 	movw	r2, #4099	; 0x1003
 800332c:	4293      	cmp	r3, r2
 800332e:	d815      	bhi.n	800335c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	4a2b      	ldr	r2, [pc, #172]	; (80033e0 <ADC_ConfigureBoostMode+0x208>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d908      	bls.n	800334a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689a      	ldr	r2, [r3, #8]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003346:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003348:	e03e      	b.n	80033c8 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	689a      	ldr	r2, [r3, #8]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003358:	609a      	str	r2, [r3, #8]
}
 800335a:	e035      	b.n	80033c8 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	085b      	lsrs	r3, r3, #1
 8003360:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	4a1f      	ldr	r2, [pc, #124]	; (80033e4 <ADC_ConfigureBoostMode+0x20c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d808      	bhi.n	800337c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003378:	609a      	str	r2, [r3, #8]
}
 800337a:	e025      	b.n	80033c8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4a1a      	ldr	r2, [pc, #104]	; (80033e8 <ADC_ConfigureBoostMode+0x210>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d80a      	bhi.n	800339a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003396:	609a      	str	r2, [r3, #8]
}
 8003398:	e016      	b.n	80033c8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4a13      	ldr	r2, [pc, #76]	; (80033ec <ADC_ConfigureBoostMode+0x214>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d80a      	bhi.n	80033b8 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033b4:	609a      	str	r2, [r3, #8]
}
 80033b6:	e007      	b.n	80033c8 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689a      	ldr	r2, [r3, #8]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80033c6:	609a      	str	r2, [r3, #8]
}
 80033c8:	bf00      	nop
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40022000 	.word	0x40022000
 80033d4:	40022100 	.word	0x40022100
 80033d8:	40022300 	.word	0x40022300
 80033dc:	58026300 	.word	0x58026300
 80033e0:	01312d00 	.word	0x01312d00
 80033e4:	005f5e10 	.word	0x005f5e10
 80033e8:	00bebc20 	.word	0x00bebc20
 80033ec:	017d7840 	.word	0x017d7840

080033f0 <LL_ADC_IsEnabled>:
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b01      	cmp	r3, #1
 8003402:	d101      	bne.n	8003408 <LL_ADC_IsEnabled+0x18>
 8003404:	2301      	movs	r3, #1
 8003406:	e000      	b.n	800340a <LL_ADC_IsEnabled+0x1a>
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr

08003416 <LL_ADC_REG_IsConversionOngoing>:
{
 8003416:	b480      	push	{r7}
 8003418:	b083      	sub	sp, #12
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 0304 	and.w	r3, r3, #4
 8003426:	2b04      	cmp	r3, #4
 8003428:	d101      	bne.n	800342e <LL_ADC_REG_IsConversionOngoing+0x18>
 800342a:	2301      	movs	r3, #1
 800342c:	e000      	b.n	8003430 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800343c:	b590      	push	{r4, r7, lr}
 800343e:	b09f      	sub	sp, #124	; 0x7c
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003446:	2300      	movs	r3, #0
 8003448:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003452:	2b01      	cmp	r3, #1
 8003454:	d101      	bne.n	800345a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003456:	2302      	movs	r3, #2
 8003458:	e0be      	b.n	80035d8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2201      	movs	r2, #1
 800345e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003462:	2300      	movs	r3, #0
 8003464:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003466:	2300      	movs	r3, #0
 8003468:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a5c      	ldr	r2, [pc, #368]	; (80035e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d102      	bne.n	800347a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003474:	4b5b      	ldr	r3, [pc, #364]	; (80035e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003476:	60bb      	str	r3, [r7, #8]
 8003478:	e001      	b.n	800347e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800347a:	2300      	movs	r3, #0
 800347c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10b      	bne.n	800349c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003488:	f043 0220 	orr.w	r2, r3, #32
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e09d      	b.n	80035d8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	4618      	mov	r0, r3
 80034a0:	f7ff ffb9 	bl	8003416 <LL_ADC_REG_IsConversionOngoing>
 80034a4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7ff ffb3 	bl	8003416 <LL_ADC_REG_IsConversionOngoing>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d17f      	bne.n	80035b6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80034b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d17c      	bne.n	80035b6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a47      	ldr	r2, [pc, #284]	; (80035e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d004      	beq.n	80034d0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a46      	ldr	r2, [pc, #280]	; (80035e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d101      	bne.n	80034d4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80034d0:	4b45      	ldr	r3, [pc, #276]	; (80035e8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80034d2:	e000      	b.n	80034d6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80034d4:	4b45      	ldr	r3, [pc, #276]	; (80035ec <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80034d6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d039      	beq.n	8003554 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80034e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	431a      	orrs	r2, r3
 80034ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034f0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a3a      	ldr	r2, [pc, #232]	; (80035e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d004      	beq.n	8003506 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a38      	ldr	r2, [pc, #224]	; (80035e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d10e      	bne.n	8003524 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003506:	4836      	ldr	r0, [pc, #216]	; (80035e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003508:	f7ff ff72 	bl	80033f0 <LL_ADC_IsEnabled>
 800350c:	4604      	mov	r4, r0
 800350e:	4835      	ldr	r0, [pc, #212]	; (80035e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003510:	f7ff ff6e 	bl	80033f0 <LL_ADC_IsEnabled>
 8003514:	4603      	mov	r3, r0
 8003516:	4323      	orrs	r3, r4
 8003518:	2b00      	cmp	r3, #0
 800351a:	bf0c      	ite	eq
 800351c:	2301      	moveq	r3, #1
 800351e:	2300      	movne	r3, #0
 8003520:	b2db      	uxtb	r3, r3
 8003522:	e008      	b.n	8003536 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003524:	4832      	ldr	r0, [pc, #200]	; (80035f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003526:	f7ff ff63 	bl	80033f0 <LL_ADC_IsEnabled>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	bf0c      	ite	eq
 8003530:	2301      	moveq	r3, #1
 8003532:	2300      	movne	r3, #0
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d047      	beq.n	80035ca <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800353a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800353c:	689a      	ldr	r2, [r3, #8]
 800353e:	4b2d      	ldr	r3, [pc, #180]	; (80035f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003540:	4013      	ands	r3, r2
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	6811      	ldr	r1, [r2, #0]
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	6892      	ldr	r2, [r2, #8]
 800354a:	430a      	orrs	r2, r1
 800354c:	431a      	orrs	r2, r3
 800354e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003550:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003552:	e03a      	b.n	80035ca <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800355c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800355e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a1e      	ldr	r2, [pc, #120]	; (80035e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d004      	beq.n	8003574 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a1d      	ldr	r2, [pc, #116]	; (80035e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d10e      	bne.n	8003592 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003574:	481a      	ldr	r0, [pc, #104]	; (80035e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003576:	f7ff ff3b 	bl	80033f0 <LL_ADC_IsEnabled>
 800357a:	4604      	mov	r4, r0
 800357c:	4819      	ldr	r0, [pc, #100]	; (80035e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800357e:	f7ff ff37 	bl	80033f0 <LL_ADC_IsEnabled>
 8003582:	4603      	mov	r3, r0
 8003584:	4323      	orrs	r3, r4
 8003586:	2b00      	cmp	r3, #0
 8003588:	bf0c      	ite	eq
 800358a:	2301      	moveq	r3, #1
 800358c:	2300      	movne	r3, #0
 800358e:	b2db      	uxtb	r3, r3
 8003590:	e008      	b.n	80035a4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003592:	4817      	ldr	r0, [pc, #92]	; (80035f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003594:	f7ff ff2c 	bl	80033f0 <LL_ADC_IsEnabled>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	bf0c      	ite	eq
 800359e:	2301      	moveq	r3, #1
 80035a0:	2300      	movne	r3, #0
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d010      	beq.n	80035ca <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80035a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	4b11      	ldr	r3, [pc, #68]	; (80035f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80035ae:	4013      	ands	r3, r2
 80035b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80035b2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80035b4:	e009      	b.n	80035ca <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ba:	f043 0220 	orr.w	r2, r3, #32
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80035c8:	e000      	b.n	80035cc <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80035ca:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80035d4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80035d8:	4618      	mov	r0, r3
 80035da:	377c      	adds	r7, #124	; 0x7c
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd90      	pop	{r4, r7, pc}
 80035e0:	40022000 	.word	0x40022000
 80035e4:	40022100 	.word	0x40022100
 80035e8:	40022300 	.word	0x40022300
 80035ec:	58026300 	.word	0x58026300
 80035f0:	58026000 	.word	0x58026000
 80035f4:	fffff0e0 	.word	0xfffff0e0

080035f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f003 0307 	and.w	r3, r3, #7
 8003606:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003608:	4b0b      	ldr	r3, [pc, #44]	; (8003638 <__NVIC_SetPriorityGrouping+0x40>)
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800360e:	68ba      	ldr	r2, [r7, #8]
 8003610:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003614:	4013      	ands	r3, r2
 8003616:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003620:	4b06      	ldr	r3, [pc, #24]	; (800363c <__NVIC_SetPriorityGrouping+0x44>)
 8003622:	4313      	orrs	r3, r2
 8003624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003626:	4a04      	ldr	r2, [pc, #16]	; (8003638 <__NVIC_SetPriorityGrouping+0x40>)
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	60d3      	str	r3, [r2, #12]
}
 800362c:	bf00      	nop
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	e000ed00 	.word	0xe000ed00
 800363c:	05fa0000 	.word	0x05fa0000

08003640 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003644:	4b04      	ldr	r3, [pc, #16]	; (8003658 <__NVIC_GetPriorityGrouping+0x18>)
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	0a1b      	lsrs	r3, r3, #8
 800364a:	f003 0307 	and.w	r3, r3, #7
}
 800364e:	4618      	mov	r0, r3
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr
 8003658:	e000ed00 	.word	0xe000ed00

0800365c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	4603      	mov	r3, r0
 8003664:	6039      	str	r1, [r7, #0]
 8003666:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003668:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800366c:	2b00      	cmp	r3, #0
 800366e:	db0a      	blt.n	8003686 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	b2da      	uxtb	r2, r3
 8003674:	490c      	ldr	r1, [pc, #48]	; (80036a8 <__NVIC_SetPriority+0x4c>)
 8003676:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800367a:	0112      	lsls	r2, r2, #4
 800367c:	b2d2      	uxtb	r2, r2
 800367e:	440b      	add	r3, r1
 8003680:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003684:	e00a      	b.n	800369c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	b2da      	uxtb	r2, r3
 800368a:	4908      	ldr	r1, [pc, #32]	; (80036ac <__NVIC_SetPriority+0x50>)
 800368c:	88fb      	ldrh	r3, [r7, #6]
 800368e:	f003 030f 	and.w	r3, r3, #15
 8003692:	3b04      	subs	r3, #4
 8003694:	0112      	lsls	r2, r2, #4
 8003696:	b2d2      	uxtb	r2, r2
 8003698:	440b      	add	r3, r1
 800369a:	761a      	strb	r2, [r3, #24]
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	e000e100 	.word	0xe000e100
 80036ac:	e000ed00 	.word	0xe000ed00

080036b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b089      	sub	sp, #36	; 0x24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f003 0307 	and.w	r3, r3, #7
 80036c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	f1c3 0307 	rsb	r3, r3, #7
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	bf28      	it	cs
 80036ce:	2304      	movcs	r3, #4
 80036d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	3304      	adds	r3, #4
 80036d6:	2b06      	cmp	r3, #6
 80036d8:	d902      	bls.n	80036e0 <NVIC_EncodePriority+0x30>
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	3b03      	subs	r3, #3
 80036de:	e000      	b.n	80036e2 <NVIC_EncodePriority+0x32>
 80036e0:	2300      	movs	r3, #0
 80036e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036e4:	f04f 32ff 	mov.w	r2, #4294967295
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	fa02 f303 	lsl.w	r3, r2, r3
 80036ee:	43da      	mvns	r2, r3
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	401a      	ands	r2, r3
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036f8:	f04f 31ff 	mov.w	r1, #4294967295
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003702:	43d9      	mvns	r1, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003708:	4313      	orrs	r3, r2
         );
}
 800370a:	4618      	mov	r0, r3
 800370c:	3724      	adds	r7, #36	; 0x24
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
	...

08003718 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	3b01      	subs	r3, #1
 8003724:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003728:	d301      	bcc.n	800372e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800372a:	2301      	movs	r3, #1
 800372c:	e00f      	b.n	800374e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800372e:	4a0a      	ldr	r2, [pc, #40]	; (8003758 <SysTick_Config+0x40>)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	3b01      	subs	r3, #1
 8003734:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003736:	210f      	movs	r1, #15
 8003738:	f04f 30ff 	mov.w	r0, #4294967295
 800373c:	f7ff ff8e 	bl	800365c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003740:	4b05      	ldr	r3, [pc, #20]	; (8003758 <SysTick_Config+0x40>)
 8003742:	2200      	movs	r2, #0
 8003744:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003746:	4b04      	ldr	r3, [pc, #16]	; (8003758 <SysTick_Config+0x40>)
 8003748:	2207      	movs	r2, #7
 800374a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	e000e010 	.word	0xe000e010

0800375c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f7ff ff47 	bl	80035f8 <__NVIC_SetPriorityGrouping>
}
 800376a:	bf00      	nop
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b086      	sub	sp, #24
 8003776:	af00      	add	r7, sp, #0
 8003778:	4603      	mov	r3, r0
 800377a:	60b9      	str	r1, [r7, #8]
 800377c:	607a      	str	r2, [r7, #4]
 800377e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003780:	f7ff ff5e 	bl	8003640 <__NVIC_GetPriorityGrouping>
 8003784:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	68b9      	ldr	r1, [r7, #8]
 800378a:	6978      	ldr	r0, [r7, #20]
 800378c:	f7ff ff90 	bl	80036b0 <NVIC_EncodePriority>
 8003790:	4602      	mov	r2, r0
 8003792:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003796:	4611      	mov	r1, r2
 8003798:	4618      	mov	r0, r3
 800379a:	f7ff ff5f 	bl	800365c <__NVIC_SetPriority>
}
 800379e:	bf00      	nop
 80037a0:	3718      	adds	r7, #24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b082      	sub	sp, #8
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7ff ffb2 	bl	8003718 <SysTick_Config>
 80037b4:	4603      	mov	r3, r0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
	...

080037c0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80037c0:	b480      	push	{r7}
 80037c2:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80037c4:	f3bf 8f5f 	dmb	sy
}
 80037c8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80037ca:	4b07      	ldr	r3, [pc, #28]	; (80037e8 <HAL_MPU_Disable+0x28>)
 80037cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ce:	4a06      	ldr	r2, [pc, #24]	; (80037e8 <HAL_MPU_Disable+0x28>)
 80037d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037d4:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80037d6:	4b05      	ldr	r3, [pc, #20]	; (80037ec <HAL_MPU_Disable+0x2c>)
 80037d8:	2200      	movs	r2, #0
 80037da:	605a      	str	r2, [r3, #4]
}
 80037dc:	bf00      	nop
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	e000ed00 	.word	0xe000ed00
 80037ec:	e000ed90 	.word	0xe000ed90

080037f0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80037f8:	4a0b      	ldr	r2, [pc, #44]	; (8003828 <HAL_MPU_Enable+0x38>)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f043 0301 	orr.w	r3, r3, #1
 8003800:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003802:	4b0a      	ldr	r3, [pc, #40]	; (800382c <HAL_MPU_Enable+0x3c>)
 8003804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003806:	4a09      	ldr	r2, [pc, #36]	; (800382c <HAL_MPU_Enable+0x3c>)
 8003808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800380c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800380e:	f3bf 8f4f 	dsb	sy
}
 8003812:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003814:	f3bf 8f6f 	isb	sy
}
 8003818:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800381a:	bf00      	nop
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	e000ed90 	.word	0xe000ed90
 800382c:	e000ed00 	.word	0xe000ed00

08003830 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	785a      	ldrb	r2, [r3, #1]
 800383c:	4b1d      	ldr	r3, [pc, #116]	; (80038b4 <HAL_MPU_ConfigRegion+0x84>)
 800383e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d029      	beq.n	800389c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8003848:	4a1a      	ldr	r2, [pc, #104]	; (80038b4 <HAL_MPU_ConfigRegion+0x84>)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	7b1b      	ldrb	r3, [r3, #12]
 8003854:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	7adb      	ldrb	r3, [r3, #11]
 800385a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800385c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	7a9b      	ldrb	r3, [r3, #10]
 8003862:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003864:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	7b5b      	ldrb	r3, [r3, #13]
 800386a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800386c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	7b9b      	ldrb	r3, [r3, #14]
 8003872:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003874:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	7bdb      	ldrb	r3, [r3, #15]
 800387a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800387c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	7a5b      	ldrb	r3, [r3, #9]
 8003882:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003884:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	7a1b      	ldrb	r3, [r3, #8]
 800388a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800388c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	7812      	ldrb	r2, [r2, #0]
 8003892:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003894:	4a07      	ldr	r2, [pc, #28]	; (80038b4 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003896:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003898:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800389a:	e005      	b.n	80038a8 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800389c:	4b05      	ldr	r3, [pc, #20]	; (80038b4 <HAL_MPU_ConfigRegion+0x84>)
 800389e:	2200      	movs	r2, #0
 80038a0:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80038a2:	4b04      	ldr	r3, [pc, #16]	; (80038b4 <HAL_MPU_ConfigRegion+0x84>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	611a      	str	r2, [r3, #16]
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr
 80038b4:	e000ed90 	.word	0xe000ed90

080038b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b089      	sub	sp, #36	; 0x24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80038c2:	2300      	movs	r3, #0
 80038c4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80038c6:	4b89      	ldr	r3, [pc, #548]	; (8003aec <HAL_GPIO_Init+0x234>)
 80038c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80038ca:	e194      	b.n	8003bf6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	2101      	movs	r1, #1
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	fa01 f303 	lsl.w	r3, r1, r3
 80038d8:	4013      	ands	r3, r2
 80038da:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f000 8186 	beq.w	8003bf0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f003 0303 	and.w	r3, r3, #3
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d005      	beq.n	80038fc <HAL_GPIO_Init+0x44>
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f003 0303 	and.w	r3, r3, #3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d130      	bne.n	800395e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	005b      	lsls	r3, r3, #1
 8003906:	2203      	movs	r2, #3
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	43db      	mvns	r3, r3
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	4013      	ands	r3, r2
 8003912:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	68da      	ldr	r2, [r3, #12]
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	4313      	orrs	r3, r2
 8003924:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003932:	2201      	movs	r2, #1
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	fa02 f303 	lsl.w	r3, r2, r3
 800393a:	43db      	mvns	r3, r3
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	4013      	ands	r3, r2
 8003940:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	091b      	lsrs	r3, r3, #4
 8003948:	f003 0201 	and.w	r2, r3, #1
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	fa02 f303 	lsl.w	r3, r2, r3
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	4313      	orrs	r3, r2
 8003956:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f003 0303 	and.w	r3, r3, #3
 8003966:	2b03      	cmp	r3, #3
 8003968:	d017      	beq.n	800399a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	005b      	lsls	r3, r3, #1
 8003974:	2203      	movs	r2, #3
 8003976:	fa02 f303 	lsl.w	r3, r2, r3
 800397a:	43db      	mvns	r3, r3
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	4013      	ands	r3, r2
 8003980:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	689a      	ldr	r2, [r3, #8]
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	005b      	lsls	r3, r3, #1
 800398a:	fa02 f303 	lsl.w	r3, r2, r3
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	4313      	orrs	r3, r2
 8003992:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f003 0303 	and.w	r3, r3, #3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d123      	bne.n	80039ee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	08da      	lsrs	r2, r3, #3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	3208      	adds	r2, #8
 80039ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	f003 0307 	and.w	r3, r3, #7
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	220f      	movs	r2, #15
 80039be:	fa02 f303 	lsl.w	r3, r2, r3
 80039c2:	43db      	mvns	r3, r3
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	4013      	ands	r3, r2
 80039c8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	691a      	ldr	r2, [r3, #16]
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	fa02 f303 	lsl.w	r3, r2, r3
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	4313      	orrs	r3, r2
 80039de:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	08da      	lsrs	r2, r3, #3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	3208      	adds	r2, #8
 80039e8:	69b9      	ldr	r1, [r7, #24]
 80039ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	2203      	movs	r2, #3
 80039fa:	fa02 f303 	lsl.w	r3, r2, r3
 80039fe:	43db      	mvns	r3, r3
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	4013      	ands	r3, r2
 8003a04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f003 0203 	and.w	r2, r3, #3
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	fa02 f303 	lsl.w	r3, r2, r3
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	69ba      	ldr	r2, [r7, #24]
 8003a20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f000 80e0 	beq.w	8003bf0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a30:	4b2f      	ldr	r3, [pc, #188]	; (8003af0 <HAL_GPIO_Init+0x238>)
 8003a32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a36:	4a2e      	ldr	r2, [pc, #184]	; (8003af0 <HAL_GPIO_Init+0x238>)
 8003a38:	f043 0302 	orr.w	r3, r3, #2
 8003a3c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003a40:	4b2b      	ldr	r3, [pc, #172]	; (8003af0 <HAL_GPIO_Init+0x238>)
 8003a42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	60fb      	str	r3, [r7, #12]
 8003a4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a4e:	4a29      	ldr	r2, [pc, #164]	; (8003af4 <HAL_GPIO_Init+0x23c>)
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	089b      	lsrs	r3, r3, #2
 8003a54:	3302      	adds	r3, #2
 8003a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	f003 0303 	and.w	r3, r3, #3
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	220f      	movs	r2, #15
 8003a66:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6a:	43db      	mvns	r3, r3
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a20      	ldr	r2, [pc, #128]	; (8003af8 <HAL_GPIO_Init+0x240>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d052      	beq.n	8003b20 <HAL_GPIO_Init+0x268>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a1f      	ldr	r2, [pc, #124]	; (8003afc <HAL_GPIO_Init+0x244>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d031      	beq.n	8003ae6 <HAL_GPIO_Init+0x22e>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a1e      	ldr	r2, [pc, #120]	; (8003b00 <HAL_GPIO_Init+0x248>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d02b      	beq.n	8003ae2 <HAL_GPIO_Init+0x22a>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a1d      	ldr	r2, [pc, #116]	; (8003b04 <HAL_GPIO_Init+0x24c>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d025      	beq.n	8003ade <HAL_GPIO_Init+0x226>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a1c      	ldr	r2, [pc, #112]	; (8003b08 <HAL_GPIO_Init+0x250>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d01f      	beq.n	8003ada <HAL_GPIO_Init+0x222>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a1b      	ldr	r2, [pc, #108]	; (8003b0c <HAL_GPIO_Init+0x254>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d019      	beq.n	8003ad6 <HAL_GPIO_Init+0x21e>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a1a      	ldr	r2, [pc, #104]	; (8003b10 <HAL_GPIO_Init+0x258>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d013      	beq.n	8003ad2 <HAL_GPIO_Init+0x21a>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a19      	ldr	r2, [pc, #100]	; (8003b14 <HAL_GPIO_Init+0x25c>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d00d      	beq.n	8003ace <HAL_GPIO_Init+0x216>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a18      	ldr	r2, [pc, #96]	; (8003b18 <HAL_GPIO_Init+0x260>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d007      	beq.n	8003aca <HAL_GPIO_Init+0x212>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a17      	ldr	r2, [pc, #92]	; (8003b1c <HAL_GPIO_Init+0x264>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d101      	bne.n	8003ac6 <HAL_GPIO_Init+0x20e>
 8003ac2:	2309      	movs	r3, #9
 8003ac4:	e02d      	b.n	8003b22 <HAL_GPIO_Init+0x26a>
 8003ac6:	230a      	movs	r3, #10
 8003ac8:	e02b      	b.n	8003b22 <HAL_GPIO_Init+0x26a>
 8003aca:	2308      	movs	r3, #8
 8003acc:	e029      	b.n	8003b22 <HAL_GPIO_Init+0x26a>
 8003ace:	2307      	movs	r3, #7
 8003ad0:	e027      	b.n	8003b22 <HAL_GPIO_Init+0x26a>
 8003ad2:	2306      	movs	r3, #6
 8003ad4:	e025      	b.n	8003b22 <HAL_GPIO_Init+0x26a>
 8003ad6:	2305      	movs	r3, #5
 8003ad8:	e023      	b.n	8003b22 <HAL_GPIO_Init+0x26a>
 8003ada:	2304      	movs	r3, #4
 8003adc:	e021      	b.n	8003b22 <HAL_GPIO_Init+0x26a>
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e01f      	b.n	8003b22 <HAL_GPIO_Init+0x26a>
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	e01d      	b.n	8003b22 <HAL_GPIO_Init+0x26a>
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e01b      	b.n	8003b22 <HAL_GPIO_Init+0x26a>
 8003aea:	bf00      	nop
 8003aec:	58000080 	.word	0x58000080
 8003af0:	58024400 	.word	0x58024400
 8003af4:	58000400 	.word	0x58000400
 8003af8:	58020000 	.word	0x58020000
 8003afc:	58020400 	.word	0x58020400
 8003b00:	58020800 	.word	0x58020800
 8003b04:	58020c00 	.word	0x58020c00
 8003b08:	58021000 	.word	0x58021000
 8003b0c:	58021400 	.word	0x58021400
 8003b10:	58021800 	.word	0x58021800
 8003b14:	58021c00 	.word	0x58021c00
 8003b18:	58022000 	.word	0x58022000
 8003b1c:	58022400 	.word	0x58022400
 8003b20:	2300      	movs	r3, #0
 8003b22:	69fa      	ldr	r2, [r7, #28]
 8003b24:	f002 0203 	and.w	r2, r2, #3
 8003b28:	0092      	lsls	r2, r2, #2
 8003b2a:	4093      	lsls	r3, r2
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b32:	4938      	ldr	r1, [pc, #224]	; (8003c14 <HAL_GPIO_Init+0x35c>)
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	089b      	lsrs	r3, r3, #2
 8003b38:	3302      	adds	r3, #2
 8003b3a:	69ba      	ldr	r2, [r7, #24]
 8003b3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	43db      	mvns	r3, r3
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	4013      	ands	r3, r2
 8003b50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d003      	beq.n	8003b66 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003b5e:	69ba      	ldr	r2, [r7, #24]
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003b66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	43db      	mvns	r3, r3
 8003b7a:	69ba      	ldr	r2, [r7, #24]
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d003      	beq.n	8003b94 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003b94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	43db      	mvns	r3, r3
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d003      	beq.n	8003bc0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	43db      	mvns	r3, r3
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f47f ae63 	bne.w	80038cc <HAL_GPIO_Init+0x14>
  }
}
 8003c06:	bf00      	nop
 8003c08:	bf00      	nop
 8003c0a:	3724      	adds	r7, #36	; 0x24
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr
 8003c14:	58000400 	.word	0x58000400

08003c18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	460b      	mov	r3, r1
 8003c22:	807b      	strh	r3, [r7, #2]
 8003c24:	4613      	mov	r3, r2
 8003c26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c28:	787b      	ldrb	r3, [r7, #1]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d003      	beq.n	8003c36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c2e:	887a      	ldrh	r2, [r7, #2]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003c34:	e003      	b.n	8003c3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003c36:	887b      	ldrh	r3, [r7, #2]
 8003c38:	041a      	lsls	r2, r3, #16
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	619a      	str	r2, [r3, #24]
}
 8003c3e:	bf00      	nop
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
	...

08003c4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e07f      	b.n	8003d5e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d106      	bne.n	8003c78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f7fd fc8e 	bl	8001594 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2224      	movs	r2, #36	; 0x24
 8003c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 0201 	bic.w	r2, r2, #1
 8003c8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c9c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	689a      	ldr	r2, [r3, #8]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d107      	bne.n	8003cc6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689a      	ldr	r2, [r3, #8]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cc2:	609a      	str	r2, [r3, #8]
 8003cc4:	e006      	b.n	8003cd4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	689a      	ldr	r2, [r3, #8]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003cd2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d104      	bne.n	8003ce6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ce4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6859      	ldr	r1, [r3, #4]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	4b1d      	ldr	r3, [pc, #116]	; (8003d68 <HAL_I2C_Init+0x11c>)
 8003cf2:	430b      	orrs	r3, r1
 8003cf4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68da      	ldr	r2, [r3, #12]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d04:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	691a      	ldr	r2, [r3, #16]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	69d9      	ldr	r1, [r3, #28]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a1a      	ldr	r2, [r3, #32]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f042 0201 	orr.w	r2, r2, #1
 8003d3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2220      	movs	r2, #32
 8003d4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3708      	adds	r7, #8
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	02008000 	.word	0x02008000

08003d6c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b20      	cmp	r3, #32
 8003d80:	d138      	bne.n	8003df4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d101      	bne.n	8003d90 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	e032      	b.n	8003df6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2224      	movs	r2, #36	; 0x24
 8003d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 0201 	bic.w	r2, r2, #1
 8003dae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003dbe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6819      	ldr	r1, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	683a      	ldr	r2, [r7, #0]
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f042 0201 	orr.w	r2, r2, #1
 8003dde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2220      	movs	r2, #32
 8003de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003df0:	2300      	movs	r3, #0
 8003df2:	e000      	b.n	8003df6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003df4:	2302      	movs	r3, #2
  }
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e02:	b480      	push	{r7}
 8003e04:	b085      	sub	sp, #20
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
 8003e0a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b20      	cmp	r3, #32
 8003e16:	d139      	bne.n	8003e8c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d101      	bne.n	8003e26 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e22:	2302      	movs	r3, #2
 8003e24:	e033      	b.n	8003e8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2224      	movs	r2, #36	; 0x24
 8003e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 0201 	bic.w	r2, r2, #1
 8003e44:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e54:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	021b      	lsls	r3, r3, #8
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f042 0201 	orr.w	r2, r2, #1
 8003e76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	e000      	b.n	8003e8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e8c:	2302      	movs	r3, #2
  }
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3714      	adds	r7, #20
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr

08003e9a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003e9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e9c:	b08f      	sub	sp, #60	; 0x3c
 8003e9e:	af0a      	add	r7, sp, #40	; 0x28
 8003ea0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e116      	b.n	80040da <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d106      	bne.n	8003ecc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7fe f8fe 	bl	80020c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2203      	movs	r2, #3
 8003ed0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d102      	bne.n	8003ee6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f008 f8f2 	bl	800c0d4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	603b      	str	r3, [r7, #0]
 8003ef6:	687e      	ldr	r6, [r7, #4]
 8003ef8:	466d      	mov	r5, sp
 8003efa:	f106 0410 	add.w	r4, r6, #16
 8003efe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f06:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f0a:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f0e:	1d33      	adds	r3, r6, #4
 8003f10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f12:	6838      	ldr	r0, [r7, #0]
 8003f14:	f008 f870 	bl	800bff8 <USB_CoreInit>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d005      	beq.n	8003f2a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2202      	movs	r2, #2
 8003f22:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e0d7      	b.n	80040da <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2100      	movs	r1, #0
 8003f30:	4618      	mov	r0, r3
 8003f32:	f008 f8e0 	bl	800c0f6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f36:	2300      	movs	r3, #0
 8003f38:	73fb      	strb	r3, [r7, #15]
 8003f3a:	e04a      	b.n	8003fd2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003f3c:	7bfa      	ldrb	r2, [r7, #15]
 8003f3e:	6879      	ldr	r1, [r7, #4]
 8003f40:	4613      	mov	r3, r2
 8003f42:	00db      	lsls	r3, r3, #3
 8003f44:	4413      	add	r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	440b      	add	r3, r1
 8003f4a:	333d      	adds	r3, #61	; 0x3d
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f50:	7bfa      	ldrb	r2, [r7, #15]
 8003f52:	6879      	ldr	r1, [r7, #4]
 8003f54:	4613      	mov	r3, r2
 8003f56:	00db      	lsls	r3, r3, #3
 8003f58:	4413      	add	r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	440b      	add	r3, r1
 8003f5e:	333c      	adds	r3, #60	; 0x3c
 8003f60:	7bfa      	ldrb	r2, [r7, #15]
 8003f62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003f64:	7bfa      	ldrb	r2, [r7, #15]
 8003f66:	7bfb      	ldrb	r3, [r7, #15]
 8003f68:	b298      	uxth	r0, r3
 8003f6a:	6879      	ldr	r1, [r7, #4]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	4413      	add	r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	440b      	add	r3, r1
 8003f76:	3356      	adds	r3, #86	; 0x56
 8003f78:	4602      	mov	r2, r0
 8003f7a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003f7c:	7bfa      	ldrb	r2, [r7, #15]
 8003f7e:	6879      	ldr	r1, [r7, #4]
 8003f80:	4613      	mov	r3, r2
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	4413      	add	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	440b      	add	r3, r1
 8003f8a:	3340      	adds	r3, #64	; 0x40
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003f90:	7bfa      	ldrb	r2, [r7, #15]
 8003f92:	6879      	ldr	r1, [r7, #4]
 8003f94:	4613      	mov	r3, r2
 8003f96:	00db      	lsls	r3, r3, #3
 8003f98:	4413      	add	r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	440b      	add	r3, r1
 8003f9e:	3344      	adds	r3, #68	; 0x44
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003fa4:	7bfa      	ldrb	r2, [r7, #15]
 8003fa6:	6879      	ldr	r1, [r7, #4]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	4413      	add	r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	440b      	add	r3, r1
 8003fb2:	3348      	adds	r3, #72	; 0x48
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003fb8:	7bfa      	ldrb	r2, [r7, #15]
 8003fba:	6879      	ldr	r1, [r7, #4]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	00db      	lsls	r3, r3, #3
 8003fc0:	4413      	add	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	440b      	add	r3, r1
 8003fc6:	334c      	adds	r3, #76	; 0x4c
 8003fc8:	2200      	movs	r2, #0
 8003fca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fcc:	7bfb      	ldrb	r3, [r7, #15]
 8003fce:	3301      	adds	r3, #1
 8003fd0:	73fb      	strb	r3, [r7, #15]
 8003fd2:	7bfa      	ldrb	r2, [r7, #15]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d3af      	bcc.n	8003f3c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fdc:	2300      	movs	r3, #0
 8003fde:	73fb      	strb	r3, [r7, #15]
 8003fe0:	e044      	b.n	800406c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003fe2:	7bfa      	ldrb	r2, [r7, #15]
 8003fe4:	6879      	ldr	r1, [r7, #4]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	00db      	lsls	r3, r3, #3
 8003fea:	4413      	add	r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	440b      	add	r3, r1
 8003ff0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ff8:	7bfa      	ldrb	r2, [r7, #15]
 8003ffa:	6879      	ldr	r1, [r7, #4]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	4413      	add	r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	440b      	add	r3, r1
 8004006:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800400a:	7bfa      	ldrb	r2, [r7, #15]
 800400c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800400e:	7bfa      	ldrb	r2, [r7, #15]
 8004010:	6879      	ldr	r1, [r7, #4]
 8004012:	4613      	mov	r3, r2
 8004014:	00db      	lsls	r3, r3, #3
 8004016:	4413      	add	r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	440b      	add	r3, r1
 800401c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004020:	2200      	movs	r2, #0
 8004022:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004024:	7bfa      	ldrb	r2, [r7, #15]
 8004026:	6879      	ldr	r1, [r7, #4]
 8004028:	4613      	mov	r3, r2
 800402a:	00db      	lsls	r3, r3, #3
 800402c:	4413      	add	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	440b      	add	r3, r1
 8004032:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004036:	2200      	movs	r2, #0
 8004038:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800403a:	7bfa      	ldrb	r2, [r7, #15]
 800403c:	6879      	ldr	r1, [r7, #4]
 800403e:	4613      	mov	r3, r2
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	4413      	add	r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	440b      	add	r3, r1
 8004048:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800404c:	2200      	movs	r2, #0
 800404e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004050:	7bfa      	ldrb	r2, [r7, #15]
 8004052:	6879      	ldr	r1, [r7, #4]
 8004054:	4613      	mov	r3, r2
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	4413      	add	r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	440b      	add	r3, r1
 800405e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004062:	2200      	movs	r2, #0
 8004064:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004066:	7bfb      	ldrb	r3, [r7, #15]
 8004068:	3301      	adds	r3, #1
 800406a:	73fb      	strb	r3, [r7, #15]
 800406c:	7bfa      	ldrb	r2, [r7, #15]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	429a      	cmp	r2, r3
 8004074:	d3b5      	bcc.n	8003fe2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	603b      	str	r3, [r7, #0]
 800407c:	687e      	ldr	r6, [r7, #4]
 800407e:	466d      	mov	r5, sp
 8004080:	f106 0410 	add.w	r4, r6, #16
 8004084:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004086:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004088:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800408a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800408c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004090:	e885 0003 	stmia.w	r5, {r0, r1}
 8004094:	1d33      	adds	r3, r6, #4
 8004096:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004098:	6838      	ldr	r0, [r7, #0]
 800409a:	f008 f879 	bl	800c190 <USB_DevInit>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d005      	beq.n	80040b0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2202      	movs	r2, #2
 80040a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e014      	b.n	80040da <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d102      	bne.n	80040ce <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 f80b 	bl	80040e4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f008 fa37 	bl	800c546 <USB_DevDisconnect>

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3714      	adds	r7, #20
 80040de:	46bd      	mov	sp, r7
 80040e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080040e4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004112:	4b05      	ldr	r3, [pc, #20]	; (8004128 <HAL_PCDEx_ActivateLPM+0x44>)
 8004114:	4313      	orrs	r3, r2
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3714      	adds	r7, #20
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr
 8004128:	10000003 	.word	0x10000003

0800412c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004134:	4b19      	ldr	r3, [pc, #100]	; (800419c <HAL_PWREx_ConfigSupply+0x70>)
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	f003 0304 	and.w	r3, r3, #4
 800413c:	2b04      	cmp	r3, #4
 800413e:	d00a      	beq.n	8004156 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004140:	4b16      	ldr	r3, [pc, #88]	; (800419c <HAL_PWREx_ConfigSupply+0x70>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	f003 0307 	and.w	r3, r3, #7
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	429a      	cmp	r2, r3
 800414c:	d001      	beq.n	8004152 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e01f      	b.n	8004192 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004152:	2300      	movs	r3, #0
 8004154:	e01d      	b.n	8004192 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004156:	4b11      	ldr	r3, [pc, #68]	; (800419c <HAL_PWREx_ConfigSupply+0x70>)
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	f023 0207 	bic.w	r2, r3, #7
 800415e:	490f      	ldr	r1, [pc, #60]	; (800419c <HAL_PWREx_ConfigSupply+0x70>)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4313      	orrs	r3, r2
 8004164:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004166:	f7fe f97d 	bl	8002464 <HAL_GetTick>
 800416a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800416c:	e009      	b.n	8004182 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800416e:	f7fe f979 	bl	8002464 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800417c:	d901      	bls.n	8004182 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e007      	b.n	8004192 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004182:	4b06      	ldr	r3, [pc, #24]	; (800419c <HAL_PWREx_ConfigSupply+0x70>)
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800418a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800418e:	d1ee      	bne.n	800416e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	58024800 	.word	0x58024800

080041a0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80041a0:	b480      	push	{r7}
 80041a2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80041a4:	4b05      	ldr	r3, [pc, #20]	; (80041bc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	4a04      	ldr	r2, [pc, #16]	; (80041bc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80041aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041ae:	60d3      	str	r3, [r2, #12]
}
 80041b0:	bf00      	nop
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	58024800 	.word	0x58024800

080041c0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af02      	add	r7, sp, #8
 80041c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80041c8:	f7fe f94c 	bl	8002464 <HAL_GetTick>
 80041cc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d101      	bne.n	80041d8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e05f      	b.n	8004298 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d107      	bne.n	80041f4 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f7fd fc3d 	bl	8001a64 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80041ea:	f241 3188 	movw	r1, #5000	; 0x1388
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f85a 	bl	80042a8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	3b01      	subs	r3, #1
 8004204:	021a      	lsls	r2, r3, #8
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	430a      	orrs	r2, r1
 800420c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	2120      	movs	r1, #32
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 f852 	bl	80042c4 <QSPI_WaitFlagStateUntilTimeout>
 8004220:	4603      	mov	r3, r0
 8004222:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004224:	7afb      	ldrb	r3, [r7, #11]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d135      	bne.n	8004296 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	4b1b      	ldr	r3, [pc, #108]	; (80042a0 <HAL_QSPI_Init+0xe0>)
 8004232:	4013      	ands	r3, r2
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	6852      	ldr	r2, [r2, #4]
 8004238:	0611      	lsls	r1, r2, #24
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	68d2      	ldr	r2, [r2, #12]
 800423e:	4311      	orrs	r1, r2
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	69d2      	ldr	r2, [r2, #28]
 8004244:	4311      	orrs	r1, r2
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	6a12      	ldr	r2, [r2, #32]
 800424a:	4311      	orrs	r1, r2
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	6812      	ldr	r2, [r2, #0]
 8004250:	430b      	orrs	r3, r1
 8004252:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685a      	ldr	r2, [r3, #4]
 800425a:	4b12      	ldr	r3, [pc, #72]	; (80042a4 <HAL_QSPI_Init+0xe4>)
 800425c:	4013      	ands	r3, r2
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	6912      	ldr	r2, [r2, #16]
 8004262:	0411      	lsls	r1, r2, #16
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	6952      	ldr	r2, [r2, #20]
 8004268:	4311      	orrs	r1, r2
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6992      	ldr	r2, [r2, #24]
 800426e:	4311      	orrs	r1, r2
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	6812      	ldr	r2, [r2, #0]
 8004274:	430b      	orrs	r3, r1
 8004276:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f042 0201 	orr.w	r2, r2, #1
 8004286:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8004296:	7afb      	ldrb	r3, [r7, #11]
}
 8004298:	4618      	mov	r0, r3
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	00ffff2f 	.word	0x00ffff2f
 80042a4:	ffe0f8fe 	.word	0xffe0f8fe

080042a8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	683a      	ldr	r2, [r7, #0]
 80042b6:	649a      	str	r2, [r3, #72]	; 0x48
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	603b      	str	r3, [r7, #0]
 80042d0:	4613      	mov	r3, r2
 80042d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80042d4:	e01a      	b.n	800430c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042dc:	d016      	beq.n	800430c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042de:	f7fe f8c1 	bl	8002464 <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	69ba      	ldr	r2, [r7, #24]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d302      	bcc.n	80042f4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d10b      	bne.n	800430c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2204      	movs	r2, #4
 80042f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004300:	f043 0201 	orr.w	r2, r3, #1
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e00e      	b.n	800432a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	689a      	ldr	r2, [r3, #8]
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	4013      	ands	r3, r2
 8004316:	2b00      	cmp	r3, #0
 8004318:	bf14      	ite	ne
 800431a:	2301      	movne	r3, #1
 800431c:	2300      	moveq	r3, #0
 800431e:	b2db      	uxtb	r3, r3
 8004320:	461a      	mov	r2, r3
 8004322:	79fb      	ldrb	r3, [r7, #7]
 8004324:	429a      	cmp	r2, r3
 8004326:	d1d6      	bne.n	80042d6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
	...

08004334 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b08c      	sub	sp, #48	; 0x30
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d102      	bne.n	8004348 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	f000 bc48 	b.w	8004bd8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	2b00      	cmp	r3, #0
 8004352:	f000 8088 	beq.w	8004466 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004356:	4b99      	ldr	r3, [pc, #612]	; (80045bc <HAL_RCC_OscConfig+0x288>)
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800435e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004360:	4b96      	ldr	r3, [pc, #600]	; (80045bc <HAL_RCC_OscConfig+0x288>)
 8004362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004364:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004368:	2b10      	cmp	r3, #16
 800436a:	d007      	beq.n	800437c <HAL_RCC_OscConfig+0x48>
 800436c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800436e:	2b18      	cmp	r3, #24
 8004370:	d111      	bne.n	8004396 <HAL_RCC_OscConfig+0x62>
 8004372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004374:	f003 0303 	and.w	r3, r3, #3
 8004378:	2b02      	cmp	r3, #2
 800437a:	d10c      	bne.n	8004396 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800437c:	4b8f      	ldr	r3, [pc, #572]	; (80045bc <HAL_RCC_OscConfig+0x288>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d06d      	beq.n	8004464 <HAL_RCC_OscConfig+0x130>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d169      	bne.n	8004464 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	f000 bc21 	b.w	8004bd8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800439e:	d106      	bne.n	80043ae <HAL_RCC_OscConfig+0x7a>
 80043a0:	4b86      	ldr	r3, [pc, #536]	; (80045bc <HAL_RCC_OscConfig+0x288>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a85      	ldr	r2, [pc, #532]	; (80045bc <HAL_RCC_OscConfig+0x288>)
 80043a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043aa:	6013      	str	r3, [r2, #0]
 80043ac:	e02e      	b.n	800440c <HAL_RCC_OscConfig+0xd8>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10c      	bne.n	80043d0 <HAL_RCC_OscConfig+0x9c>
 80043b6:	4b81      	ldr	r3, [pc, #516]	; (80045bc <HAL_RCC_OscConfig+0x288>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a80      	ldr	r2, [pc, #512]	; (80045bc <HAL_RCC_OscConfig+0x288>)
 80043bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043c0:	6013      	str	r3, [r2, #0]
 80043c2:	4b7e      	ldr	r3, [pc, #504]	; (80045bc <HAL_RCC_OscConfig+0x288>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a7d      	ldr	r2, [pc, #500]	; (80045bc <HAL_RCC_OscConfig+0x288>)
 80043c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043cc:	6013      	str	r3, [r2, #0]
 80043ce:	e01d      	b.n	800440c <HAL_RCC_OscConfig+0xd8>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043d8:	d10c      	bne.n	80043f4 <HAL_RCC_OscConfig+0xc0>
 80043da:	4b78      	ldr	r3, [pc, #480]	; (80045bc <HAL_RCC_OscConfig+0x288>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a77      	ldr	r2, [pc, #476]	; (80045bc <HAL_RCC_OscConfig+0x288>)
 80043e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043e4:	6013      	str	r3, [r2, #0]
 80043e6:	4b75      	ldr	r3, [pc, #468]	; (80045bc <HAL_RCC_OscConfig+0x288>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a74      	ldr	r2, [pc, #464]	; (80045bc <HAL_RCC_OscConfig+0x288>)
 80043ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043f0:	6013      	str	r3, [r2, #0]
 80043f2:	e00b      	b.n	800440c <HAL_RCC_OscConfig+0xd8>
 80043f4:	4b71      	ldr	r3, [pc, #452]	; (80045bc <HAL_RCC_OscConfig+0x288>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a70      	ldr	r2, [pc, #448]	; (80045bc <HAL_RCC_OscConfig+0x288>)
 80043fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043fe:	6013      	str	r3, [r2, #0]
 8004400:	4b6e      	ldr	r3, [pc, #440]	; (80045bc <HAL_RCC_OscConfig+0x288>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a6d      	ldr	r2, [pc, #436]	; (80045bc <HAL_RCC_OscConfig+0x288>)
 8004406:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800440a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d013      	beq.n	800443c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004414:	f7fe f826 	bl	8002464 <HAL_GetTick>
 8004418:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800441a:	e008      	b.n	800442e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800441c:	f7fe f822 	bl	8002464 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b64      	cmp	r3, #100	; 0x64
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e3d4      	b.n	8004bd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800442e:	4b63      	ldr	r3, [pc, #396]	; (80045bc <HAL_RCC_OscConfig+0x288>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d0f0      	beq.n	800441c <HAL_RCC_OscConfig+0xe8>
 800443a:	e014      	b.n	8004466 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800443c:	f7fe f812 	bl	8002464 <HAL_GetTick>
 8004440:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004442:	e008      	b.n	8004456 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004444:	f7fe f80e 	bl	8002464 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b64      	cmp	r3, #100	; 0x64
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e3c0      	b.n	8004bd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004456:	4b59      	ldr	r3, [pc, #356]	; (80045bc <HAL_RCC_OscConfig+0x288>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1f0      	bne.n	8004444 <HAL_RCC_OscConfig+0x110>
 8004462:	e000      	b.n	8004466 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	f000 80ca 	beq.w	8004608 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004474:	4b51      	ldr	r3, [pc, #324]	; (80045bc <HAL_RCC_OscConfig+0x288>)
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800447c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800447e:	4b4f      	ldr	r3, [pc, #316]	; (80045bc <HAL_RCC_OscConfig+0x288>)
 8004480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004482:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004484:	6a3b      	ldr	r3, [r7, #32]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d007      	beq.n	800449a <HAL_RCC_OscConfig+0x166>
 800448a:	6a3b      	ldr	r3, [r7, #32]
 800448c:	2b18      	cmp	r3, #24
 800448e:	d156      	bne.n	800453e <HAL_RCC_OscConfig+0x20a>
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	f003 0303 	and.w	r3, r3, #3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d151      	bne.n	800453e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800449a:	4b48      	ldr	r3, [pc, #288]	; (80045bc <HAL_RCC_OscConfig+0x288>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0304 	and.w	r3, r3, #4
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d005      	beq.n	80044b2 <HAL_RCC_OscConfig+0x17e>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e392      	b.n	8004bd8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80044b2:	4b42      	ldr	r3, [pc, #264]	; (80045bc <HAL_RCC_OscConfig+0x288>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f023 0219 	bic.w	r2, r3, #25
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	493f      	ldr	r1, [pc, #252]	; (80045bc <HAL_RCC_OscConfig+0x288>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c4:	f7fd ffce 	bl	8002464 <HAL_GetTick>
 80044c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044ca:	e008      	b.n	80044de <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044cc:	f7fd ffca 	bl	8002464 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d901      	bls.n	80044de <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e37c      	b.n	8004bd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044de:	4b37      	ldr	r3, [pc, #220]	; (80045bc <HAL_RCC_OscConfig+0x288>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0304 	and.w	r3, r3, #4
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d0f0      	beq.n	80044cc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ea:	f7fd ffeb 	bl	80024c4 <HAL_GetREVID>
 80044ee:	4603      	mov	r3, r0
 80044f0:	f241 0203 	movw	r2, #4099	; 0x1003
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d817      	bhi.n	8004528 <HAL_RCC_OscConfig+0x1f4>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	2b40      	cmp	r3, #64	; 0x40
 80044fe:	d108      	bne.n	8004512 <HAL_RCC_OscConfig+0x1de>
 8004500:	4b2e      	ldr	r3, [pc, #184]	; (80045bc <HAL_RCC_OscConfig+0x288>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004508:	4a2c      	ldr	r2, [pc, #176]	; (80045bc <HAL_RCC_OscConfig+0x288>)
 800450a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800450e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004510:	e07a      	b.n	8004608 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004512:	4b2a      	ldr	r3, [pc, #168]	; (80045bc <HAL_RCC_OscConfig+0x288>)
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	031b      	lsls	r3, r3, #12
 8004520:	4926      	ldr	r1, [pc, #152]	; (80045bc <HAL_RCC_OscConfig+0x288>)
 8004522:	4313      	orrs	r3, r2
 8004524:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004526:	e06f      	b.n	8004608 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004528:	4b24      	ldr	r3, [pc, #144]	; (80045bc <HAL_RCC_OscConfig+0x288>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	061b      	lsls	r3, r3, #24
 8004536:	4921      	ldr	r1, [pc, #132]	; (80045bc <HAL_RCC_OscConfig+0x288>)
 8004538:	4313      	orrs	r3, r2
 800453a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800453c:	e064      	b.n	8004608 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d047      	beq.n	80045d6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004546:	4b1d      	ldr	r3, [pc, #116]	; (80045bc <HAL_RCC_OscConfig+0x288>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f023 0219 	bic.w	r2, r3, #25
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	491a      	ldr	r1, [pc, #104]	; (80045bc <HAL_RCC_OscConfig+0x288>)
 8004554:	4313      	orrs	r3, r2
 8004556:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004558:	f7fd ff84 	bl	8002464 <HAL_GetTick>
 800455c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800455e:	e008      	b.n	8004572 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004560:	f7fd ff80 	bl	8002464 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b02      	cmp	r3, #2
 800456c:	d901      	bls.n	8004572 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e332      	b.n	8004bd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004572:	4b12      	ldr	r3, [pc, #72]	; (80045bc <HAL_RCC_OscConfig+0x288>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0304 	and.w	r3, r3, #4
 800457a:	2b00      	cmp	r3, #0
 800457c:	d0f0      	beq.n	8004560 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800457e:	f7fd ffa1 	bl	80024c4 <HAL_GetREVID>
 8004582:	4603      	mov	r3, r0
 8004584:	f241 0203 	movw	r2, #4099	; 0x1003
 8004588:	4293      	cmp	r3, r2
 800458a:	d819      	bhi.n	80045c0 <HAL_RCC_OscConfig+0x28c>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	2b40      	cmp	r3, #64	; 0x40
 8004592:	d108      	bne.n	80045a6 <HAL_RCC_OscConfig+0x272>
 8004594:	4b09      	ldr	r3, [pc, #36]	; (80045bc <HAL_RCC_OscConfig+0x288>)
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800459c:	4a07      	ldr	r2, [pc, #28]	; (80045bc <HAL_RCC_OscConfig+0x288>)
 800459e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045a2:	6053      	str	r3, [r2, #4]
 80045a4:	e030      	b.n	8004608 <HAL_RCC_OscConfig+0x2d4>
 80045a6:	4b05      	ldr	r3, [pc, #20]	; (80045bc <HAL_RCC_OscConfig+0x288>)
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	031b      	lsls	r3, r3, #12
 80045b4:	4901      	ldr	r1, [pc, #4]	; (80045bc <HAL_RCC_OscConfig+0x288>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	604b      	str	r3, [r1, #4]
 80045ba:	e025      	b.n	8004608 <HAL_RCC_OscConfig+0x2d4>
 80045bc:	58024400 	.word	0x58024400
 80045c0:	4b9a      	ldr	r3, [pc, #616]	; (800482c <HAL_RCC_OscConfig+0x4f8>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	061b      	lsls	r3, r3, #24
 80045ce:	4997      	ldr	r1, [pc, #604]	; (800482c <HAL_RCC_OscConfig+0x4f8>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	604b      	str	r3, [r1, #4]
 80045d4:	e018      	b.n	8004608 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045d6:	4b95      	ldr	r3, [pc, #596]	; (800482c <HAL_RCC_OscConfig+0x4f8>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a94      	ldr	r2, [pc, #592]	; (800482c <HAL_RCC_OscConfig+0x4f8>)
 80045dc:	f023 0301 	bic.w	r3, r3, #1
 80045e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e2:	f7fd ff3f 	bl	8002464 <HAL_GetTick>
 80045e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80045e8:	e008      	b.n	80045fc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045ea:	f7fd ff3b 	bl	8002464 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d901      	bls.n	80045fc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e2ed      	b.n	8004bd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80045fc:	4b8b      	ldr	r3, [pc, #556]	; (800482c <HAL_RCC_OscConfig+0x4f8>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0304 	and.w	r3, r3, #4
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1f0      	bne.n	80045ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0310 	and.w	r3, r3, #16
 8004610:	2b00      	cmp	r3, #0
 8004612:	f000 80a9 	beq.w	8004768 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004616:	4b85      	ldr	r3, [pc, #532]	; (800482c <HAL_RCC_OscConfig+0x4f8>)
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800461e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004620:	4b82      	ldr	r3, [pc, #520]	; (800482c <HAL_RCC_OscConfig+0x4f8>)
 8004622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004624:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	2b08      	cmp	r3, #8
 800462a:	d007      	beq.n	800463c <HAL_RCC_OscConfig+0x308>
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	2b18      	cmp	r3, #24
 8004630:	d13a      	bne.n	80046a8 <HAL_RCC_OscConfig+0x374>
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f003 0303 	and.w	r3, r3, #3
 8004638:	2b01      	cmp	r3, #1
 800463a:	d135      	bne.n	80046a8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800463c:	4b7b      	ldr	r3, [pc, #492]	; (800482c <HAL_RCC_OscConfig+0x4f8>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004644:	2b00      	cmp	r3, #0
 8004646:	d005      	beq.n	8004654 <HAL_RCC_OscConfig+0x320>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	69db      	ldr	r3, [r3, #28]
 800464c:	2b80      	cmp	r3, #128	; 0x80
 800464e:	d001      	beq.n	8004654 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e2c1      	b.n	8004bd8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004654:	f7fd ff36 	bl	80024c4 <HAL_GetREVID>
 8004658:	4603      	mov	r3, r0
 800465a:	f241 0203 	movw	r2, #4099	; 0x1003
 800465e:	4293      	cmp	r3, r2
 8004660:	d817      	bhi.n	8004692 <HAL_RCC_OscConfig+0x35e>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	2b20      	cmp	r3, #32
 8004668:	d108      	bne.n	800467c <HAL_RCC_OscConfig+0x348>
 800466a:	4b70      	ldr	r3, [pc, #448]	; (800482c <HAL_RCC_OscConfig+0x4f8>)
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004672:	4a6e      	ldr	r2, [pc, #440]	; (800482c <HAL_RCC_OscConfig+0x4f8>)
 8004674:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004678:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800467a:	e075      	b.n	8004768 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800467c:	4b6b      	ldr	r3, [pc, #428]	; (800482c <HAL_RCC_OscConfig+0x4f8>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	069b      	lsls	r3, r3, #26
 800468a:	4968      	ldr	r1, [pc, #416]	; (800482c <HAL_RCC_OscConfig+0x4f8>)
 800468c:	4313      	orrs	r3, r2
 800468e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004690:	e06a      	b.n	8004768 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004692:	4b66      	ldr	r3, [pc, #408]	; (800482c <HAL_RCC_OscConfig+0x4f8>)
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	061b      	lsls	r3, r3, #24
 80046a0:	4962      	ldr	r1, [pc, #392]	; (800482c <HAL_RCC_OscConfig+0x4f8>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80046a6:	e05f      	b.n	8004768 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	69db      	ldr	r3, [r3, #28]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d042      	beq.n	8004736 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80046b0:	4b5e      	ldr	r3, [pc, #376]	; (800482c <HAL_RCC_OscConfig+0x4f8>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a5d      	ldr	r2, [pc, #372]	; (800482c <HAL_RCC_OscConfig+0x4f8>)
 80046b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046bc:	f7fd fed2 	bl	8002464 <HAL_GetTick>
 80046c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80046c2:	e008      	b.n	80046d6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80046c4:	f7fd fece 	bl	8002464 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e280      	b.n	8004bd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80046d6:	4b55      	ldr	r3, [pc, #340]	; (800482c <HAL_RCC_OscConfig+0x4f8>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d0f0      	beq.n	80046c4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80046e2:	f7fd feef 	bl	80024c4 <HAL_GetREVID>
 80046e6:	4603      	mov	r3, r0
 80046e8:	f241 0203 	movw	r2, #4099	; 0x1003
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d817      	bhi.n	8004720 <HAL_RCC_OscConfig+0x3ec>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a1b      	ldr	r3, [r3, #32]
 80046f4:	2b20      	cmp	r3, #32
 80046f6:	d108      	bne.n	800470a <HAL_RCC_OscConfig+0x3d6>
 80046f8:	4b4c      	ldr	r3, [pc, #304]	; (800482c <HAL_RCC_OscConfig+0x4f8>)
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004700:	4a4a      	ldr	r2, [pc, #296]	; (800482c <HAL_RCC_OscConfig+0x4f8>)
 8004702:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004706:	6053      	str	r3, [r2, #4]
 8004708:	e02e      	b.n	8004768 <HAL_RCC_OscConfig+0x434>
 800470a:	4b48      	ldr	r3, [pc, #288]	; (800482c <HAL_RCC_OscConfig+0x4f8>)
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	069b      	lsls	r3, r3, #26
 8004718:	4944      	ldr	r1, [pc, #272]	; (800482c <HAL_RCC_OscConfig+0x4f8>)
 800471a:	4313      	orrs	r3, r2
 800471c:	604b      	str	r3, [r1, #4]
 800471e:	e023      	b.n	8004768 <HAL_RCC_OscConfig+0x434>
 8004720:	4b42      	ldr	r3, [pc, #264]	; (800482c <HAL_RCC_OscConfig+0x4f8>)
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a1b      	ldr	r3, [r3, #32]
 800472c:	061b      	lsls	r3, r3, #24
 800472e:	493f      	ldr	r1, [pc, #252]	; (800482c <HAL_RCC_OscConfig+0x4f8>)
 8004730:	4313      	orrs	r3, r2
 8004732:	60cb      	str	r3, [r1, #12]
 8004734:	e018      	b.n	8004768 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004736:	4b3d      	ldr	r3, [pc, #244]	; (800482c <HAL_RCC_OscConfig+0x4f8>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a3c      	ldr	r2, [pc, #240]	; (800482c <HAL_RCC_OscConfig+0x4f8>)
 800473c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004740:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004742:	f7fd fe8f 	bl	8002464 <HAL_GetTick>
 8004746:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004748:	e008      	b.n	800475c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800474a:	f7fd fe8b 	bl	8002464 <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	2b02      	cmp	r3, #2
 8004756:	d901      	bls.n	800475c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e23d      	b.n	8004bd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800475c:	4b33      	ldr	r3, [pc, #204]	; (800482c <HAL_RCC_OscConfig+0x4f8>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1f0      	bne.n	800474a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0308 	and.w	r3, r3, #8
 8004770:	2b00      	cmp	r3, #0
 8004772:	d036      	beq.n	80047e2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d019      	beq.n	80047b0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800477c:	4b2b      	ldr	r3, [pc, #172]	; (800482c <HAL_RCC_OscConfig+0x4f8>)
 800477e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004780:	4a2a      	ldr	r2, [pc, #168]	; (800482c <HAL_RCC_OscConfig+0x4f8>)
 8004782:	f043 0301 	orr.w	r3, r3, #1
 8004786:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004788:	f7fd fe6c 	bl	8002464 <HAL_GetTick>
 800478c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800478e:	e008      	b.n	80047a2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004790:	f7fd fe68 	bl	8002464 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b02      	cmp	r3, #2
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e21a      	b.n	8004bd8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80047a2:	4b22      	ldr	r3, [pc, #136]	; (800482c <HAL_RCC_OscConfig+0x4f8>)
 80047a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d0f0      	beq.n	8004790 <HAL_RCC_OscConfig+0x45c>
 80047ae:	e018      	b.n	80047e2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047b0:	4b1e      	ldr	r3, [pc, #120]	; (800482c <HAL_RCC_OscConfig+0x4f8>)
 80047b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047b4:	4a1d      	ldr	r2, [pc, #116]	; (800482c <HAL_RCC_OscConfig+0x4f8>)
 80047b6:	f023 0301 	bic.w	r3, r3, #1
 80047ba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047bc:	f7fd fe52 	bl	8002464 <HAL_GetTick>
 80047c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047c4:	f7fd fe4e 	bl	8002464 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e200      	b.n	8004bd8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80047d6:	4b15      	ldr	r3, [pc, #84]	; (800482c <HAL_RCC_OscConfig+0x4f8>)
 80047d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1f0      	bne.n	80047c4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0320 	and.w	r3, r3, #32
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d039      	beq.n	8004862 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d01c      	beq.n	8004830 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80047f6:	4b0d      	ldr	r3, [pc, #52]	; (800482c <HAL_RCC_OscConfig+0x4f8>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a0c      	ldr	r2, [pc, #48]	; (800482c <HAL_RCC_OscConfig+0x4f8>)
 80047fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004800:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004802:	f7fd fe2f 	bl	8002464 <HAL_GetTick>
 8004806:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004808:	e008      	b.n	800481c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800480a:	f7fd fe2b 	bl	8002464 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	2b02      	cmp	r3, #2
 8004816:	d901      	bls.n	800481c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e1dd      	b.n	8004bd8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800481c:	4b03      	ldr	r3, [pc, #12]	; (800482c <HAL_RCC_OscConfig+0x4f8>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d0f0      	beq.n	800480a <HAL_RCC_OscConfig+0x4d6>
 8004828:	e01b      	b.n	8004862 <HAL_RCC_OscConfig+0x52e>
 800482a:	bf00      	nop
 800482c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004830:	4b9b      	ldr	r3, [pc, #620]	; (8004aa0 <HAL_RCC_OscConfig+0x76c>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a9a      	ldr	r2, [pc, #616]	; (8004aa0 <HAL_RCC_OscConfig+0x76c>)
 8004836:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800483a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800483c:	f7fd fe12 	bl	8002464 <HAL_GetTick>
 8004840:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004842:	e008      	b.n	8004856 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004844:	f7fd fe0e 	bl	8002464 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	2b02      	cmp	r3, #2
 8004850:	d901      	bls.n	8004856 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e1c0      	b.n	8004bd8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004856:	4b92      	ldr	r3, [pc, #584]	; (8004aa0 <HAL_RCC_OscConfig+0x76c>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1f0      	bne.n	8004844 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0304 	and.w	r3, r3, #4
 800486a:	2b00      	cmp	r3, #0
 800486c:	f000 8081 	beq.w	8004972 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004870:	4b8c      	ldr	r3, [pc, #560]	; (8004aa4 <HAL_RCC_OscConfig+0x770>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a8b      	ldr	r2, [pc, #556]	; (8004aa4 <HAL_RCC_OscConfig+0x770>)
 8004876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800487a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800487c:	f7fd fdf2 	bl	8002464 <HAL_GetTick>
 8004880:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004882:	e008      	b.n	8004896 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004884:	f7fd fdee 	bl	8002464 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b64      	cmp	r3, #100	; 0x64
 8004890:	d901      	bls.n	8004896 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e1a0      	b.n	8004bd8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004896:	4b83      	ldr	r3, [pc, #524]	; (8004aa4 <HAL_RCC_OscConfig+0x770>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d0f0      	beq.n	8004884 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d106      	bne.n	80048b8 <HAL_RCC_OscConfig+0x584>
 80048aa:	4b7d      	ldr	r3, [pc, #500]	; (8004aa0 <HAL_RCC_OscConfig+0x76c>)
 80048ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ae:	4a7c      	ldr	r2, [pc, #496]	; (8004aa0 <HAL_RCC_OscConfig+0x76c>)
 80048b0:	f043 0301 	orr.w	r3, r3, #1
 80048b4:	6713      	str	r3, [r2, #112]	; 0x70
 80048b6:	e02d      	b.n	8004914 <HAL_RCC_OscConfig+0x5e0>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10c      	bne.n	80048da <HAL_RCC_OscConfig+0x5a6>
 80048c0:	4b77      	ldr	r3, [pc, #476]	; (8004aa0 <HAL_RCC_OscConfig+0x76c>)
 80048c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c4:	4a76      	ldr	r2, [pc, #472]	; (8004aa0 <HAL_RCC_OscConfig+0x76c>)
 80048c6:	f023 0301 	bic.w	r3, r3, #1
 80048ca:	6713      	str	r3, [r2, #112]	; 0x70
 80048cc:	4b74      	ldr	r3, [pc, #464]	; (8004aa0 <HAL_RCC_OscConfig+0x76c>)
 80048ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d0:	4a73      	ldr	r2, [pc, #460]	; (8004aa0 <HAL_RCC_OscConfig+0x76c>)
 80048d2:	f023 0304 	bic.w	r3, r3, #4
 80048d6:	6713      	str	r3, [r2, #112]	; 0x70
 80048d8:	e01c      	b.n	8004914 <HAL_RCC_OscConfig+0x5e0>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	2b05      	cmp	r3, #5
 80048e0:	d10c      	bne.n	80048fc <HAL_RCC_OscConfig+0x5c8>
 80048e2:	4b6f      	ldr	r3, [pc, #444]	; (8004aa0 <HAL_RCC_OscConfig+0x76c>)
 80048e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e6:	4a6e      	ldr	r2, [pc, #440]	; (8004aa0 <HAL_RCC_OscConfig+0x76c>)
 80048e8:	f043 0304 	orr.w	r3, r3, #4
 80048ec:	6713      	str	r3, [r2, #112]	; 0x70
 80048ee:	4b6c      	ldr	r3, [pc, #432]	; (8004aa0 <HAL_RCC_OscConfig+0x76c>)
 80048f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f2:	4a6b      	ldr	r2, [pc, #428]	; (8004aa0 <HAL_RCC_OscConfig+0x76c>)
 80048f4:	f043 0301 	orr.w	r3, r3, #1
 80048f8:	6713      	str	r3, [r2, #112]	; 0x70
 80048fa:	e00b      	b.n	8004914 <HAL_RCC_OscConfig+0x5e0>
 80048fc:	4b68      	ldr	r3, [pc, #416]	; (8004aa0 <HAL_RCC_OscConfig+0x76c>)
 80048fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004900:	4a67      	ldr	r2, [pc, #412]	; (8004aa0 <HAL_RCC_OscConfig+0x76c>)
 8004902:	f023 0301 	bic.w	r3, r3, #1
 8004906:	6713      	str	r3, [r2, #112]	; 0x70
 8004908:	4b65      	ldr	r3, [pc, #404]	; (8004aa0 <HAL_RCC_OscConfig+0x76c>)
 800490a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800490c:	4a64      	ldr	r2, [pc, #400]	; (8004aa0 <HAL_RCC_OscConfig+0x76c>)
 800490e:	f023 0304 	bic.w	r3, r3, #4
 8004912:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d015      	beq.n	8004948 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800491c:	f7fd fda2 	bl	8002464 <HAL_GetTick>
 8004920:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004922:	e00a      	b.n	800493a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004924:	f7fd fd9e 	bl	8002464 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004932:	4293      	cmp	r3, r2
 8004934:	d901      	bls.n	800493a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e14e      	b.n	8004bd8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800493a:	4b59      	ldr	r3, [pc, #356]	; (8004aa0 <HAL_RCC_OscConfig+0x76c>)
 800493c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d0ee      	beq.n	8004924 <HAL_RCC_OscConfig+0x5f0>
 8004946:	e014      	b.n	8004972 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004948:	f7fd fd8c 	bl	8002464 <HAL_GetTick>
 800494c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800494e:	e00a      	b.n	8004966 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004950:	f7fd fd88 	bl	8002464 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	f241 3288 	movw	r2, #5000	; 0x1388
 800495e:	4293      	cmp	r3, r2
 8004960:	d901      	bls.n	8004966 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e138      	b.n	8004bd8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004966:	4b4e      	ldr	r3, [pc, #312]	; (8004aa0 <HAL_RCC_OscConfig+0x76c>)
 8004968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1ee      	bne.n	8004950 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004976:	2b00      	cmp	r3, #0
 8004978:	f000 812d 	beq.w	8004bd6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800497c:	4b48      	ldr	r3, [pc, #288]	; (8004aa0 <HAL_RCC_OscConfig+0x76c>)
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004984:	2b18      	cmp	r3, #24
 8004986:	f000 80bd 	beq.w	8004b04 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498e:	2b02      	cmp	r3, #2
 8004990:	f040 809e 	bne.w	8004ad0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004994:	4b42      	ldr	r3, [pc, #264]	; (8004aa0 <HAL_RCC_OscConfig+0x76c>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a41      	ldr	r2, [pc, #260]	; (8004aa0 <HAL_RCC_OscConfig+0x76c>)
 800499a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800499e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a0:	f7fd fd60 	bl	8002464 <HAL_GetTick>
 80049a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049a6:	e008      	b.n	80049ba <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049a8:	f7fd fd5c 	bl	8002464 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e10e      	b.n	8004bd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049ba:	4b39      	ldr	r3, [pc, #228]	; (8004aa0 <HAL_RCC_OscConfig+0x76c>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1f0      	bne.n	80049a8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049c6:	4b36      	ldr	r3, [pc, #216]	; (8004aa0 <HAL_RCC_OscConfig+0x76c>)
 80049c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049ca:	4b37      	ldr	r3, [pc, #220]	; (8004aa8 <HAL_RCC_OscConfig+0x774>)
 80049cc:	4013      	ands	r3, r2
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80049d6:	0112      	lsls	r2, r2, #4
 80049d8:	430a      	orrs	r2, r1
 80049da:	4931      	ldr	r1, [pc, #196]	; (8004aa0 <HAL_RCC_OscConfig+0x76c>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	628b      	str	r3, [r1, #40]	; 0x28
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e4:	3b01      	subs	r3, #1
 80049e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ee:	3b01      	subs	r3, #1
 80049f0:	025b      	lsls	r3, r3, #9
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	431a      	orrs	r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fa:	3b01      	subs	r3, #1
 80049fc:	041b      	lsls	r3, r3, #16
 80049fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004a02:	431a      	orrs	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	061b      	lsls	r3, r3, #24
 8004a0c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004a10:	4923      	ldr	r1, [pc, #140]	; (8004aa0 <HAL_RCC_OscConfig+0x76c>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004a16:	4b22      	ldr	r3, [pc, #136]	; (8004aa0 <HAL_RCC_OscConfig+0x76c>)
 8004a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1a:	4a21      	ldr	r2, [pc, #132]	; (8004aa0 <HAL_RCC_OscConfig+0x76c>)
 8004a1c:	f023 0301 	bic.w	r3, r3, #1
 8004a20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004a22:	4b1f      	ldr	r3, [pc, #124]	; (8004aa0 <HAL_RCC_OscConfig+0x76c>)
 8004a24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a26:	4b21      	ldr	r3, [pc, #132]	; (8004aac <HAL_RCC_OscConfig+0x778>)
 8004a28:	4013      	ands	r3, r2
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004a2e:	00d2      	lsls	r2, r2, #3
 8004a30:	491b      	ldr	r1, [pc, #108]	; (8004aa0 <HAL_RCC_OscConfig+0x76c>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004a36:	4b1a      	ldr	r3, [pc, #104]	; (8004aa0 <HAL_RCC_OscConfig+0x76c>)
 8004a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3a:	f023 020c 	bic.w	r2, r3, #12
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	4917      	ldr	r1, [pc, #92]	; (8004aa0 <HAL_RCC_OscConfig+0x76c>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004a48:	4b15      	ldr	r3, [pc, #84]	; (8004aa0 <HAL_RCC_OscConfig+0x76c>)
 8004a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4c:	f023 0202 	bic.w	r2, r3, #2
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a54:	4912      	ldr	r1, [pc, #72]	; (8004aa0 <HAL_RCC_OscConfig+0x76c>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004a5a:	4b11      	ldr	r3, [pc, #68]	; (8004aa0 <HAL_RCC_OscConfig+0x76c>)
 8004a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5e:	4a10      	ldr	r2, [pc, #64]	; (8004aa0 <HAL_RCC_OscConfig+0x76c>)
 8004a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a66:	4b0e      	ldr	r3, [pc, #56]	; (8004aa0 <HAL_RCC_OscConfig+0x76c>)
 8004a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6a:	4a0d      	ldr	r2, [pc, #52]	; (8004aa0 <HAL_RCC_OscConfig+0x76c>)
 8004a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a70:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004a72:	4b0b      	ldr	r3, [pc, #44]	; (8004aa0 <HAL_RCC_OscConfig+0x76c>)
 8004a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a76:	4a0a      	ldr	r2, [pc, #40]	; (8004aa0 <HAL_RCC_OscConfig+0x76c>)
 8004a78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004a7e:	4b08      	ldr	r3, [pc, #32]	; (8004aa0 <HAL_RCC_OscConfig+0x76c>)
 8004a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a82:	4a07      	ldr	r2, [pc, #28]	; (8004aa0 <HAL_RCC_OscConfig+0x76c>)
 8004a84:	f043 0301 	orr.w	r3, r3, #1
 8004a88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a8a:	4b05      	ldr	r3, [pc, #20]	; (8004aa0 <HAL_RCC_OscConfig+0x76c>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a04      	ldr	r2, [pc, #16]	; (8004aa0 <HAL_RCC_OscConfig+0x76c>)
 8004a90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a96:	f7fd fce5 	bl	8002464 <HAL_GetTick>
 8004a9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a9c:	e011      	b.n	8004ac2 <HAL_RCC_OscConfig+0x78e>
 8004a9e:	bf00      	nop
 8004aa0:	58024400 	.word	0x58024400
 8004aa4:	58024800 	.word	0x58024800
 8004aa8:	fffffc0c 	.word	0xfffffc0c
 8004aac:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ab0:	f7fd fcd8 	bl	8002464 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e08a      	b.n	8004bd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ac2:	4b47      	ldr	r3, [pc, #284]	; (8004be0 <HAL_RCC_OscConfig+0x8ac>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d0f0      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x77c>
 8004ace:	e082      	b.n	8004bd6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ad0:	4b43      	ldr	r3, [pc, #268]	; (8004be0 <HAL_RCC_OscConfig+0x8ac>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a42      	ldr	r2, [pc, #264]	; (8004be0 <HAL_RCC_OscConfig+0x8ac>)
 8004ad6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004adc:	f7fd fcc2 	bl	8002464 <HAL_GetTick>
 8004ae0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ae2:	e008      	b.n	8004af6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ae4:	f7fd fcbe 	bl	8002464 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e070      	b.n	8004bd8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004af6:	4b3a      	ldr	r3, [pc, #232]	; (8004be0 <HAL_RCC_OscConfig+0x8ac>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1f0      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x7b0>
 8004b02:	e068      	b.n	8004bd6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004b04:	4b36      	ldr	r3, [pc, #216]	; (8004be0 <HAL_RCC_OscConfig+0x8ac>)
 8004b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b08:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004b0a:	4b35      	ldr	r3, [pc, #212]	; (8004be0 <HAL_RCC_OscConfig+0x8ac>)
 8004b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d031      	beq.n	8004b7c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	f003 0203 	and.w	r2, r3, #3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d12a      	bne.n	8004b7c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	091b      	lsrs	r3, r3, #4
 8004b2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d122      	bne.n	8004b7c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b40:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d11a      	bne.n	8004b7c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	0a5b      	lsrs	r3, r3, #9
 8004b4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b52:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d111      	bne.n	8004b7c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	0c1b      	lsrs	r3, r3, #16
 8004b5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b64:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d108      	bne.n	8004b7c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	0e1b      	lsrs	r3, r3, #24
 8004b6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b76:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d001      	beq.n	8004b80 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e02b      	b.n	8004bd8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004b80:	4b17      	ldr	r3, [pc, #92]	; (8004be0 <HAL_RCC_OscConfig+0x8ac>)
 8004b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b84:	08db      	lsrs	r3, r3, #3
 8004b86:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b8a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d01f      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004b96:	4b12      	ldr	r3, [pc, #72]	; (8004be0 <HAL_RCC_OscConfig+0x8ac>)
 8004b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9a:	4a11      	ldr	r2, [pc, #68]	; (8004be0 <HAL_RCC_OscConfig+0x8ac>)
 8004b9c:	f023 0301 	bic.w	r3, r3, #1
 8004ba0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ba2:	f7fd fc5f 	bl	8002464 <HAL_GetTick>
 8004ba6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004ba8:	bf00      	nop
 8004baa:	f7fd fc5b 	bl	8002464 <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d0f9      	beq.n	8004baa <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004bb6:	4b0a      	ldr	r3, [pc, #40]	; (8004be0 <HAL_RCC_OscConfig+0x8ac>)
 8004bb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bba:	4b0a      	ldr	r3, [pc, #40]	; (8004be4 <HAL_RCC_OscConfig+0x8b0>)
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004bc2:	00d2      	lsls	r2, r2, #3
 8004bc4:	4906      	ldr	r1, [pc, #24]	; (8004be0 <HAL_RCC_OscConfig+0x8ac>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004bca:	4b05      	ldr	r3, [pc, #20]	; (8004be0 <HAL_RCC_OscConfig+0x8ac>)
 8004bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bce:	4a04      	ldr	r2, [pc, #16]	; (8004be0 <HAL_RCC_OscConfig+0x8ac>)
 8004bd0:	f043 0301 	orr.w	r3, r3, #1
 8004bd4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3730      	adds	r7, #48	; 0x30
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	58024400 	.word	0x58024400
 8004be4:	ffff0007 	.word	0xffff0007

08004be8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d101      	bne.n	8004bfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e19c      	b.n	8004f36 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004bfc:	4b8a      	ldr	r3, [pc, #552]	; (8004e28 <HAL_RCC_ClockConfig+0x240>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 030f 	and.w	r3, r3, #15
 8004c04:	683a      	ldr	r2, [r7, #0]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d910      	bls.n	8004c2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c0a:	4b87      	ldr	r3, [pc, #540]	; (8004e28 <HAL_RCC_ClockConfig+0x240>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f023 020f 	bic.w	r2, r3, #15
 8004c12:	4985      	ldr	r1, [pc, #532]	; (8004e28 <HAL_RCC_ClockConfig+0x240>)
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c1a:	4b83      	ldr	r3, [pc, #524]	; (8004e28 <HAL_RCC_ClockConfig+0x240>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 030f 	and.w	r3, r3, #15
 8004c22:	683a      	ldr	r2, [r7, #0]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d001      	beq.n	8004c2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e184      	b.n	8004f36 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0304 	and.w	r3, r3, #4
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d010      	beq.n	8004c5a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	691a      	ldr	r2, [r3, #16]
 8004c3c:	4b7b      	ldr	r3, [pc, #492]	; (8004e2c <HAL_RCC_ClockConfig+0x244>)
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d908      	bls.n	8004c5a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004c48:	4b78      	ldr	r3, [pc, #480]	; (8004e2c <HAL_RCC_ClockConfig+0x244>)
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	4975      	ldr	r1, [pc, #468]	; (8004e2c <HAL_RCC_ClockConfig+0x244>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0308 	and.w	r3, r3, #8
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d010      	beq.n	8004c88 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	695a      	ldr	r2, [r3, #20]
 8004c6a:	4b70      	ldr	r3, [pc, #448]	; (8004e2c <HAL_RCC_ClockConfig+0x244>)
 8004c6c:	69db      	ldr	r3, [r3, #28]
 8004c6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d908      	bls.n	8004c88 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004c76:	4b6d      	ldr	r3, [pc, #436]	; (8004e2c <HAL_RCC_ClockConfig+0x244>)
 8004c78:	69db      	ldr	r3, [r3, #28]
 8004c7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	496a      	ldr	r1, [pc, #424]	; (8004e2c <HAL_RCC_ClockConfig+0x244>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0310 	and.w	r3, r3, #16
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d010      	beq.n	8004cb6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	699a      	ldr	r2, [r3, #24]
 8004c98:	4b64      	ldr	r3, [pc, #400]	; (8004e2c <HAL_RCC_ClockConfig+0x244>)
 8004c9a:	69db      	ldr	r3, [r3, #28]
 8004c9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d908      	bls.n	8004cb6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004ca4:	4b61      	ldr	r3, [pc, #388]	; (8004e2c <HAL_RCC_ClockConfig+0x244>)
 8004ca6:	69db      	ldr	r3, [r3, #28]
 8004ca8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	495e      	ldr	r1, [pc, #376]	; (8004e2c <HAL_RCC_ClockConfig+0x244>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0320 	and.w	r3, r3, #32
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d010      	beq.n	8004ce4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	69da      	ldr	r2, [r3, #28]
 8004cc6:	4b59      	ldr	r3, [pc, #356]	; (8004e2c <HAL_RCC_ClockConfig+0x244>)
 8004cc8:	6a1b      	ldr	r3, [r3, #32]
 8004cca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d908      	bls.n	8004ce4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004cd2:	4b56      	ldr	r3, [pc, #344]	; (8004e2c <HAL_RCC_ClockConfig+0x244>)
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	69db      	ldr	r3, [r3, #28]
 8004cde:	4953      	ldr	r1, [pc, #332]	; (8004e2c <HAL_RCC_ClockConfig+0x244>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0302 	and.w	r3, r3, #2
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d010      	beq.n	8004d12 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68da      	ldr	r2, [r3, #12]
 8004cf4:	4b4d      	ldr	r3, [pc, #308]	; (8004e2c <HAL_RCC_ClockConfig+0x244>)
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	f003 030f 	and.w	r3, r3, #15
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d908      	bls.n	8004d12 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d00:	4b4a      	ldr	r3, [pc, #296]	; (8004e2c <HAL_RCC_ClockConfig+0x244>)
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	f023 020f 	bic.w	r2, r3, #15
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	4947      	ldr	r1, [pc, #284]	; (8004e2c <HAL_RCC_ClockConfig+0x244>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0301 	and.w	r3, r3, #1
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d055      	beq.n	8004dca <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004d1e:	4b43      	ldr	r3, [pc, #268]	; (8004e2c <HAL_RCC_ClockConfig+0x244>)
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	4940      	ldr	r1, [pc, #256]	; (8004e2c <HAL_RCC_ClockConfig+0x244>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d107      	bne.n	8004d48 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d38:	4b3c      	ldr	r3, [pc, #240]	; (8004e2c <HAL_RCC_ClockConfig+0x244>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d121      	bne.n	8004d88 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e0f6      	b.n	8004f36 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	2b03      	cmp	r3, #3
 8004d4e:	d107      	bne.n	8004d60 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d50:	4b36      	ldr	r3, [pc, #216]	; (8004e2c <HAL_RCC_ClockConfig+0x244>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d115      	bne.n	8004d88 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e0ea      	b.n	8004f36 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d107      	bne.n	8004d78 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d68:	4b30      	ldr	r3, [pc, #192]	; (8004e2c <HAL_RCC_ClockConfig+0x244>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d109      	bne.n	8004d88 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e0de      	b.n	8004f36 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d78:	4b2c      	ldr	r3, [pc, #176]	; (8004e2c <HAL_RCC_ClockConfig+0x244>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0304 	and.w	r3, r3, #4
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d101      	bne.n	8004d88 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e0d6      	b.n	8004f36 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d88:	4b28      	ldr	r3, [pc, #160]	; (8004e2c <HAL_RCC_ClockConfig+0x244>)
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	f023 0207 	bic.w	r2, r3, #7
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	4925      	ldr	r1, [pc, #148]	; (8004e2c <HAL_RCC_ClockConfig+0x244>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d9a:	f7fd fb63 	bl	8002464 <HAL_GetTick>
 8004d9e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004da0:	e00a      	b.n	8004db8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004da2:	f7fd fb5f 	bl	8002464 <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d901      	bls.n	8004db8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e0be      	b.n	8004f36 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004db8:	4b1c      	ldr	r3, [pc, #112]	; (8004e2c <HAL_RCC_ClockConfig+0x244>)
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	00db      	lsls	r3, r3, #3
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d1eb      	bne.n	8004da2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d010      	beq.n	8004df8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68da      	ldr	r2, [r3, #12]
 8004dda:	4b14      	ldr	r3, [pc, #80]	; (8004e2c <HAL_RCC_ClockConfig+0x244>)
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	f003 030f 	and.w	r3, r3, #15
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d208      	bcs.n	8004df8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004de6:	4b11      	ldr	r3, [pc, #68]	; (8004e2c <HAL_RCC_ClockConfig+0x244>)
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	f023 020f 	bic.w	r2, r3, #15
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	490e      	ldr	r1, [pc, #56]	; (8004e2c <HAL_RCC_ClockConfig+0x244>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004df8:	4b0b      	ldr	r3, [pc, #44]	; (8004e28 <HAL_RCC_ClockConfig+0x240>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 030f 	and.w	r3, r3, #15
 8004e00:	683a      	ldr	r2, [r7, #0]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d214      	bcs.n	8004e30 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e06:	4b08      	ldr	r3, [pc, #32]	; (8004e28 <HAL_RCC_ClockConfig+0x240>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f023 020f 	bic.w	r2, r3, #15
 8004e0e:	4906      	ldr	r1, [pc, #24]	; (8004e28 <HAL_RCC_ClockConfig+0x240>)
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e16:	4b04      	ldr	r3, [pc, #16]	; (8004e28 <HAL_RCC_ClockConfig+0x240>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 030f 	and.w	r3, r3, #15
 8004e1e:	683a      	ldr	r2, [r7, #0]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d005      	beq.n	8004e30 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e086      	b.n	8004f36 <HAL_RCC_ClockConfig+0x34e>
 8004e28:	52002000 	.word	0x52002000
 8004e2c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0304 	and.w	r3, r3, #4
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d010      	beq.n	8004e5e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	691a      	ldr	r2, [r3, #16]
 8004e40:	4b3f      	ldr	r3, [pc, #252]	; (8004f40 <HAL_RCC_ClockConfig+0x358>)
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d208      	bcs.n	8004e5e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004e4c:	4b3c      	ldr	r3, [pc, #240]	; (8004f40 <HAL_RCC_ClockConfig+0x358>)
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	4939      	ldr	r1, [pc, #228]	; (8004f40 <HAL_RCC_ClockConfig+0x358>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0308 	and.w	r3, r3, #8
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d010      	beq.n	8004e8c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	695a      	ldr	r2, [r3, #20]
 8004e6e:	4b34      	ldr	r3, [pc, #208]	; (8004f40 <HAL_RCC_ClockConfig+0x358>)
 8004e70:	69db      	ldr	r3, [r3, #28]
 8004e72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d208      	bcs.n	8004e8c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004e7a:	4b31      	ldr	r3, [pc, #196]	; (8004f40 <HAL_RCC_ClockConfig+0x358>)
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	492e      	ldr	r1, [pc, #184]	; (8004f40 <HAL_RCC_ClockConfig+0x358>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0310 	and.w	r3, r3, #16
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d010      	beq.n	8004eba <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	699a      	ldr	r2, [r3, #24]
 8004e9c:	4b28      	ldr	r3, [pc, #160]	; (8004f40 <HAL_RCC_ClockConfig+0x358>)
 8004e9e:	69db      	ldr	r3, [r3, #28]
 8004ea0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d208      	bcs.n	8004eba <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004ea8:	4b25      	ldr	r3, [pc, #148]	; (8004f40 <HAL_RCC_ClockConfig+0x358>)
 8004eaa:	69db      	ldr	r3, [r3, #28]
 8004eac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	4922      	ldr	r1, [pc, #136]	; (8004f40 <HAL_RCC_ClockConfig+0x358>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0320 	and.w	r3, r3, #32
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d010      	beq.n	8004ee8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	69da      	ldr	r2, [r3, #28]
 8004eca:	4b1d      	ldr	r3, [pc, #116]	; (8004f40 <HAL_RCC_ClockConfig+0x358>)
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d208      	bcs.n	8004ee8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004ed6:	4b1a      	ldr	r3, [pc, #104]	; (8004f40 <HAL_RCC_ClockConfig+0x358>)
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	69db      	ldr	r3, [r3, #28]
 8004ee2:	4917      	ldr	r1, [pc, #92]	; (8004f40 <HAL_RCC_ClockConfig+0x358>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004ee8:	f000 f834 	bl	8004f54 <HAL_RCC_GetSysClockFreq>
 8004eec:	4602      	mov	r2, r0
 8004eee:	4b14      	ldr	r3, [pc, #80]	; (8004f40 <HAL_RCC_ClockConfig+0x358>)
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	0a1b      	lsrs	r3, r3, #8
 8004ef4:	f003 030f 	and.w	r3, r3, #15
 8004ef8:	4912      	ldr	r1, [pc, #72]	; (8004f44 <HAL_RCC_ClockConfig+0x35c>)
 8004efa:	5ccb      	ldrb	r3, [r1, r3]
 8004efc:	f003 031f 	and.w	r3, r3, #31
 8004f00:	fa22 f303 	lsr.w	r3, r2, r3
 8004f04:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f06:	4b0e      	ldr	r3, [pc, #56]	; (8004f40 <HAL_RCC_ClockConfig+0x358>)
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	f003 030f 	and.w	r3, r3, #15
 8004f0e:	4a0d      	ldr	r2, [pc, #52]	; (8004f44 <HAL_RCC_ClockConfig+0x35c>)
 8004f10:	5cd3      	ldrb	r3, [r2, r3]
 8004f12:	f003 031f 	and.w	r3, r3, #31
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	fa22 f303 	lsr.w	r3, r2, r3
 8004f1c:	4a0a      	ldr	r2, [pc, #40]	; (8004f48 <HAL_RCC_ClockConfig+0x360>)
 8004f1e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004f20:	4a0a      	ldr	r2, [pc, #40]	; (8004f4c <HAL_RCC_ClockConfig+0x364>)
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004f26:	4b0a      	ldr	r3, [pc, #40]	; (8004f50 <HAL_RCC_ClockConfig+0x368>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7fd fa50 	bl	80023d0 <HAL_InitTick>
 8004f30:	4603      	mov	r3, r0
 8004f32:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3718      	adds	r7, #24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	58024400 	.word	0x58024400
 8004f44:	0800c67c 	.word	0x0800c67c
 8004f48:	24000004 	.word	0x24000004
 8004f4c:	24000000 	.word	0x24000000
 8004f50:	24000008 	.word	0x24000008

08004f54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b089      	sub	sp, #36	; 0x24
 8004f58:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f5a:	4bb3      	ldr	r3, [pc, #716]	; (8005228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f62:	2b18      	cmp	r3, #24
 8004f64:	f200 8155 	bhi.w	8005212 <HAL_RCC_GetSysClockFreq+0x2be>
 8004f68:	a201      	add	r2, pc, #4	; (adr r2, 8004f70 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6e:	bf00      	nop
 8004f70:	08004fd5 	.word	0x08004fd5
 8004f74:	08005213 	.word	0x08005213
 8004f78:	08005213 	.word	0x08005213
 8004f7c:	08005213 	.word	0x08005213
 8004f80:	08005213 	.word	0x08005213
 8004f84:	08005213 	.word	0x08005213
 8004f88:	08005213 	.word	0x08005213
 8004f8c:	08005213 	.word	0x08005213
 8004f90:	08004ffb 	.word	0x08004ffb
 8004f94:	08005213 	.word	0x08005213
 8004f98:	08005213 	.word	0x08005213
 8004f9c:	08005213 	.word	0x08005213
 8004fa0:	08005213 	.word	0x08005213
 8004fa4:	08005213 	.word	0x08005213
 8004fa8:	08005213 	.word	0x08005213
 8004fac:	08005213 	.word	0x08005213
 8004fb0:	08005001 	.word	0x08005001
 8004fb4:	08005213 	.word	0x08005213
 8004fb8:	08005213 	.word	0x08005213
 8004fbc:	08005213 	.word	0x08005213
 8004fc0:	08005213 	.word	0x08005213
 8004fc4:	08005213 	.word	0x08005213
 8004fc8:	08005213 	.word	0x08005213
 8004fcc:	08005213 	.word	0x08005213
 8004fd0:	08005007 	.word	0x08005007
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fd4:	4b94      	ldr	r3, [pc, #592]	; (8005228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0320 	and.w	r3, r3, #32
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d009      	beq.n	8004ff4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004fe0:	4b91      	ldr	r3, [pc, #580]	; (8005228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	08db      	lsrs	r3, r3, #3
 8004fe6:	f003 0303 	and.w	r3, r3, #3
 8004fea:	4a90      	ldr	r2, [pc, #576]	; (800522c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004fec:	fa22 f303 	lsr.w	r3, r2, r3
 8004ff0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004ff2:	e111      	b.n	8005218 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004ff4:	4b8d      	ldr	r3, [pc, #564]	; (800522c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ff6:	61bb      	str	r3, [r7, #24]
      break;
 8004ff8:	e10e      	b.n	8005218 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004ffa:	4b8d      	ldr	r3, [pc, #564]	; (8005230 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004ffc:	61bb      	str	r3, [r7, #24]
      break;
 8004ffe:	e10b      	b.n	8005218 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005000:	4b8c      	ldr	r3, [pc, #560]	; (8005234 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005002:	61bb      	str	r3, [r7, #24]
      break;
 8005004:	e108      	b.n	8005218 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005006:	4b88      	ldr	r3, [pc, #544]	; (8005228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500a:	f003 0303 	and.w	r3, r3, #3
 800500e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005010:	4b85      	ldr	r3, [pc, #532]	; (8005228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005014:	091b      	lsrs	r3, r3, #4
 8005016:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800501a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800501c:	4b82      	ldr	r3, [pc, #520]	; (8005228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800501e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005020:	f003 0301 	and.w	r3, r3, #1
 8005024:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005026:	4b80      	ldr	r3, [pc, #512]	; (8005228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800502a:	08db      	lsrs	r3, r3, #3
 800502c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	fb02 f303 	mul.w	r3, r2, r3
 8005036:	ee07 3a90 	vmov	s15, r3
 800503a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800503e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	2b00      	cmp	r3, #0
 8005046:	f000 80e1 	beq.w	800520c <HAL_RCC_GetSysClockFreq+0x2b8>
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	2b02      	cmp	r3, #2
 800504e:	f000 8083 	beq.w	8005158 <HAL_RCC_GetSysClockFreq+0x204>
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	2b02      	cmp	r3, #2
 8005056:	f200 80a1 	bhi.w	800519c <HAL_RCC_GetSysClockFreq+0x248>
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d003      	beq.n	8005068 <HAL_RCC_GetSysClockFreq+0x114>
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	2b01      	cmp	r3, #1
 8005064:	d056      	beq.n	8005114 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005066:	e099      	b.n	800519c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005068:	4b6f      	ldr	r3, [pc, #444]	; (8005228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0320 	and.w	r3, r3, #32
 8005070:	2b00      	cmp	r3, #0
 8005072:	d02d      	beq.n	80050d0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005074:	4b6c      	ldr	r3, [pc, #432]	; (8005228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	08db      	lsrs	r3, r3, #3
 800507a:	f003 0303 	and.w	r3, r3, #3
 800507e:	4a6b      	ldr	r2, [pc, #428]	; (800522c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005080:	fa22 f303 	lsr.w	r3, r2, r3
 8005084:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	ee07 3a90 	vmov	s15, r3
 800508c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	ee07 3a90 	vmov	s15, r3
 8005096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800509a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800509e:	4b62      	ldr	r3, [pc, #392]	; (8005228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050a6:	ee07 3a90 	vmov	s15, r3
 80050aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80050b2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005238 <HAL_RCC_GetSysClockFreq+0x2e4>
 80050b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ca:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80050ce:	e087      	b.n	80051e0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	ee07 3a90 	vmov	s15, r3
 80050d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050da:	eddf 6a58 	vldr	s13, [pc, #352]	; 800523c <HAL_RCC_GetSysClockFreq+0x2e8>
 80050de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050e2:	4b51      	ldr	r3, [pc, #324]	; (8005228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ea:	ee07 3a90 	vmov	s15, r3
 80050ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80050f6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005238 <HAL_RCC_GetSysClockFreq+0x2e4>
 80050fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005102:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800510a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800510e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005112:	e065      	b.n	80051e0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	ee07 3a90 	vmov	s15, r3
 800511a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800511e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005240 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005126:	4b40      	ldr	r3, [pc, #256]	; (8005228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800512e:	ee07 3a90 	vmov	s15, r3
 8005132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005136:	ed97 6a02 	vldr	s12, [r7, #8]
 800513a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005238 <HAL_RCC_GetSysClockFreq+0x2e4>
 800513e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005146:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800514a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800514e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005152:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005156:	e043      	b.n	80051e0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	ee07 3a90 	vmov	s15, r3
 800515e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005162:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005244 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800516a:	4b2f      	ldr	r3, [pc, #188]	; (8005228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800516c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005172:	ee07 3a90 	vmov	s15, r3
 8005176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800517a:	ed97 6a02 	vldr	s12, [r7, #8]
 800517e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005238 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800518a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800518e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005196:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800519a:	e021      	b.n	80051e0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	ee07 3a90 	vmov	s15, r3
 80051a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051a6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005240 <HAL_RCC_GetSysClockFreq+0x2ec>
 80051aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051ae:	4b1e      	ldr	r3, [pc, #120]	; (8005228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051b6:	ee07 3a90 	vmov	s15, r3
 80051ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051be:	ed97 6a02 	vldr	s12, [r7, #8]
 80051c2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005238 <HAL_RCC_GetSysClockFreq+0x2e4>
 80051c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80051de:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80051e0:	4b11      	ldr	r3, [pc, #68]	; (8005228 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e4:	0a5b      	lsrs	r3, r3, #9
 80051e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051ea:	3301      	adds	r3, #1
 80051ec:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	ee07 3a90 	vmov	s15, r3
 80051f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80051f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80051fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005200:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005204:	ee17 3a90 	vmov	r3, s15
 8005208:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800520a:	e005      	b.n	8005218 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800520c:	2300      	movs	r3, #0
 800520e:	61bb      	str	r3, [r7, #24]
      break;
 8005210:	e002      	b.n	8005218 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005212:	4b07      	ldr	r3, [pc, #28]	; (8005230 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005214:	61bb      	str	r3, [r7, #24]
      break;
 8005216:	bf00      	nop
  }

  return sysclockfreq;
 8005218:	69bb      	ldr	r3, [r7, #24]
}
 800521a:	4618      	mov	r0, r3
 800521c:	3724      	adds	r7, #36	; 0x24
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	58024400 	.word	0x58024400
 800522c:	03d09000 	.word	0x03d09000
 8005230:	003d0900 	.word	0x003d0900
 8005234:	017d7840 	.word	0x017d7840
 8005238:	46000000 	.word	0x46000000
 800523c:	4c742400 	.word	0x4c742400
 8005240:	4a742400 	.word	0x4a742400
 8005244:	4bbebc20 	.word	0x4bbebc20

08005248 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800524e:	f7ff fe81 	bl	8004f54 <HAL_RCC_GetSysClockFreq>
 8005252:	4602      	mov	r2, r0
 8005254:	4b10      	ldr	r3, [pc, #64]	; (8005298 <HAL_RCC_GetHCLKFreq+0x50>)
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	0a1b      	lsrs	r3, r3, #8
 800525a:	f003 030f 	and.w	r3, r3, #15
 800525e:	490f      	ldr	r1, [pc, #60]	; (800529c <HAL_RCC_GetHCLKFreq+0x54>)
 8005260:	5ccb      	ldrb	r3, [r1, r3]
 8005262:	f003 031f 	and.w	r3, r3, #31
 8005266:	fa22 f303 	lsr.w	r3, r2, r3
 800526a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800526c:	4b0a      	ldr	r3, [pc, #40]	; (8005298 <HAL_RCC_GetHCLKFreq+0x50>)
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	f003 030f 	and.w	r3, r3, #15
 8005274:	4a09      	ldr	r2, [pc, #36]	; (800529c <HAL_RCC_GetHCLKFreq+0x54>)
 8005276:	5cd3      	ldrb	r3, [r2, r3]
 8005278:	f003 031f 	and.w	r3, r3, #31
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	fa22 f303 	lsr.w	r3, r2, r3
 8005282:	4a07      	ldr	r2, [pc, #28]	; (80052a0 <HAL_RCC_GetHCLKFreq+0x58>)
 8005284:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005286:	4a07      	ldr	r2, [pc, #28]	; (80052a4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800528c:	4b04      	ldr	r3, [pc, #16]	; (80052a0 <HAL_RCC_GetHCLKFreq+0x58>)
 800528e:	681b      	ldr	r3, [r3, #0]
}
 8005290:	4618      	mov	r0, r3
 8005292:	3708      	adds	r7, #8
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	58024400 	.word	0x58024400
 800529c:	0800c67c 	.word	0x0800c67c
 80052a0:	24000004 	.word	0x24000004
 80052a4:	24000000 	.word	0x24000000

080052a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80052ac:	f7ff ffcc 	bl	8005248 <HAL_RCC_GetHCLKFreq>
 80052b0:	4602      	mov	r2, r0
 80052b2:	4b06      	ldr	r3, [pc, #24]	; (80052cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80052b4:	69db      	ldr	r3, [r3, #28]
 80052b6:	091b      	lsrs	r3, r3, #4
 80052b8:	f003 0307 	and.w	r3, r3, #7
 80052bc:	4904      	ldr	r1, [pc, #16]	; (80052d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80052be:	5ccb      	ldrb	r3, [r1, r3]
 80052c0:	f003 031f 	and.w	r3, r3, #31
 80052c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	58024400 	.word	0x58024400
 80052d0:	0800c67c 	.word	0x0800c67c

080052d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80052d8:	f7ff ffb6 	bl	8005248 <HAL_RCC_GetHCLKFreq>
 80052dc:	4602      	mov	r2, r0
 80052de:	4b06      	ldr	r3, [pc, #24]	; (80052f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052e0:	69db      	ldr	r3, [r3, #28]
 80052e2:	0a1b      	lsrs	r3, r3, #8
 80052e4:	f003 0307 	and.w	r3, r3, #7
 80052e8:	4904      	ldr	r1, [pc, #16]	; (80052fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80052ea:	5ccb      	ldrb	r3, [r1, r3]
 80052ec:	f003 031f 	and.w	r3, r3, #31
 80052f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	58024400 	.word	0x58024400
 80052fc:	0800c67c 	.word	0x0800c67c

08005300 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005300:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005304:	b0ca      	sub	sp, #296	; 0x128
 8005306:	af00      	add	r7, sp, #0
 8005308:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800530c:	2300      	movs	r3, #0
 800530e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005312:	2300      	movs	r3, #0
 8005314:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005318:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800531c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005320:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005324:	2500      	movs	r5, #0
 8005326:	ea54 0305 	orrs.w	r3, r4, r5
 800532a:	d049      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800532c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005330:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005332:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005336:	d02f      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005338:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800533c:	d828      	bhi.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800533e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005342:	d01a      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005344:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005348:	d822      	bhi.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800534e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005352:	d007      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005354:	e01c      	b.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005356:	4bb8      	ldr	r3, [pc, #736]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535a:	4ab7      	ldr	r2, [pc, #732]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800535c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005360:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005362:	e01a      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005364:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005368:	3308      	adds	r3, #8
 800536a:	2102      	movs	r1, #2
 800536c:	4618      	mov	r0, r3
 800536e:	f002 fb61 	bl	8007a34 <RCCEx_PLL2_Config>
 8005372:	4603      	mov	r3, r0
 8005374:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005378:	e00f      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800537a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800537e:	3328      	adds	r3, #40	; 0x28
 8005380:	2102      	movs	r1, #2
 8005382:	4618      	mov	r0, r3
 8005384:	f002 fc08 	bl	8007b98 <RCCEx_PLL3_Config>
 8005388:	4603      	mov	r3, r0
 800538a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800538e:	e004      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005396:	e000      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005398:	bf00      	nop
    }

    if (ret == HAL_OK)
 800539a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10a      	bne.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80053a2:	4ba5      	ldr	r3, [pc, #660]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053a6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80053aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053b0:	4aa1      	ldr	r2, [pc, #644]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053b2:	430b      	orrs	r3, r1
 80053b4:	6513      	str	r3, [r2, #80]	; 0x50
 80053b6:	e003      	b.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80053c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80053cc:	f04f 0900 	mov.w	r9, #0
 80053d0:	ea58 0309 	orrs.w	r3, r8, r9
 80053d4:	d047      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80053d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053dc:	2b04      	cmp	r3, #4
 80053de:	d82a      	bhi.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80053e0:	a201      	add	r2, pc, #4	; (adr r2, 80053e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80053e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e6:	bf00      	nop
 80053e8:	080053fd 	.word	0x080053fd
 80053ec:	0800540b 	.word	0x0800540b
 80053f0:	08005421 	.word	0x08005421
 80053f4:	0800543f 	.word	0x0800543f
 80053f8:	0800543f 	.word	0x0800543f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053fc:	4b8e      	ldr	r3, [pc, #568]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005400:	4a8d      	ldr	r2, [pc, #564]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005402:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005406:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005408:	e01a      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800540a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800540e:	3308      	adds	r3, #8
 8005410:	2100      	movs	r1, #0
 8005412:	4618      	mov	r0, r3
 8005414:	f002 fb0e 	bl	8007a34 <RCCEx_PLL2_Config>
 8005418:	4603      	mov	r3, r0
 800541a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800541e:	e00f      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005420:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005424:	3328      	adds	r3, #40	; 0x28
 8005426:	2100      	movs	r1, #0
 8005428:	4618      	mov	r0, r3
 800542a:	f002 fbb5 	bl	8007b98 <RCCEx_PLL3_Config>
 800542e:	4603      	mov	r3, r0
 8005430:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005434:	e004      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800543c:	e000      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800543e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005440:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005444:	2b00      	cmp	r3, #0
 8005446:	d10a      	bne.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005448:	4b7b      	ldr	r3, [pc, #492]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800544a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800544c:	f023 0107 	bic.w	r1, r3, #7
 8005450:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005456:	4a78      	ldr	r2, [pc, #480]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005458:	430b      	orrs	r3, r1
 800545a:	6513      	str	r3, [r2, #80]	; 0x50
 800545c:	e003      	b.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800545e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005462:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005466:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800546a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800546e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8005472:	f04f 0b00 	mov.w	fp, #0
 8005476:	ea5a 030b 	orrs.w	r3, sl, fp
 800547a:	d04c      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800547c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005482:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005486:	d030      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005488:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800548c:	d829      	bhi.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800548e:	2bc0      	cmp	r3, #192	; 0xc0
 8005490:	d02d      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005492:	2bc0      	cmp	r3, #192	; 0xc0
 8005494:	d825      	bhi.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005496:	2b80      	cmp	r3, #128	; 0x80
 8005498:	d018      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800549a:	2b80      	cmp	r3, #128	; 0x80
 800549c:	d821      	bhi.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d002      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80054a2:	2b40      	cmp	r3, #64	; 0x40
 80054a4:	d007      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80054a6:	e01c      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054a8:	4b63      	ldr	r3, [pc, #396]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ac:	4a62      	ldr	r2, [pc, #392]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80054b4:	e01c      	b.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054ba:	3308      	adds	r3, #8
 80054bc:	2100      	movs	r1, #0
 80054be:	4618      	mov	r0, r3
 80054c0:	f002 fab8 	bl	8007a34 <RCCEx_PLL2_Config>
 80054c4:	4603      	mov	r3, r0
 80054c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80054ca:	e011      	b.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80054cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054d0:	3328      	adds	r3, #40	; 0x28
 80054d2:	2100      	movs	r1, #0
 80054d4:	4618      	mov	r0, r3
 80054d6:	f002 fb5f 	bl	8007b98 <RCCEx_PLL3_Config>
 80054da:	4603      	mov	r3, r0
 80054dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80054e0:	e006      	b.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80054e8:	e002      	b.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80054ea:	bf00      	nop
 80054ec:	e000      	b.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80054ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d10a      	bne.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80054f8:	4b4f      	ldr	r3, [pc, #316]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054fc:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005500:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005506:	4a4c      	ldr	r2, [pc, #304]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005508:	430b      	orrs	r3, r1
 800550a:	6513      	str	r3, [r2, #80]	; 0x50
 800550c:	e003      	b.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800550e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005512:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005516:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800551a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005522:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005526:	2300      	movs	r3, #0
 8005528:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800552c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8005530:	460b      	mov	r3, r1
 8005532:	4313      	orrs	r3, r2
 8005534:	d053      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005536:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800553a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800553e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005542:	d035      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005544:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005548:	d82e      	bhi.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800554a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800554e:	d031      	beq.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005550:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005554:	d828      	bhi.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005556:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800555a:	d01a      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800555c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005560:	d822      	bhi.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005562:	2b00      	cmp	r3, #0
 8005564:	d003      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005566:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800556a:	d007      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800556c:	e01c      	b.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800556e:	4b32      	ldr	r3, [pc, #200]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005572:	4a31      	ldr	r2, [pc, #196]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005578:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800557a:	e01c      	b.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800557c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005580:	3308      	adds	r3, #8
 8005582:	2100      	movs	r1, #0
 8005584:	4618      	mov	r0, r3
 8005586:	f002 fa55 	bl	8007a34 <RCCEx_PLL2_Config>
 800558a:	4603      	mov	r3, r0
 800558c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005590:	e011      	b.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005592:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005596:	3328      	adds	r3, #40	; 0x28
 8005598:	2100      	movs	r1, #0
 800559a:	4618      	mov	r0, r3
 800559c:	f002 fafc 	bl	8007b98 <RCCEx_PLL3_Config>
 80055a0:	4603      	mov	r3, r0
 80055a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80055a6:	e006      	b.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80055ae:	e002      	b.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80055b0:	bf00      	nop
 80055b2:	e000      	b.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80055b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10b      	bne.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80055be:	4b1e      	ldr	r3, [pc, #120]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055c2:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80055c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80055ce:	4a1a      	ldr	r2, [pc, #104]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055d0:	430b      	orrs	r3, r1
 80055d2:	6593      	str	r3, [r2, #88]	; 0x58
 80055d4:	e003      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80055de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80055ea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80055ee:	2300      	movs	r3, #0
 80055f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80055f4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80055f8:	460b      	mov	r3, r1
 80055fa:	4313      	orrs	r3, r2
 80055fc:	d056      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80055fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005602:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005606:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800560a:	d038      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800560c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005610:	d831      	bhi.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005612:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005616:	d034      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005618:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800561c:	d82b      	bhi.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800561e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005622:	d01d      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005624:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005628:	d825      	bhi.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800562a:	2b00      	cmp	r3, #0
 800562c:	d006      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800562e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005632:	d00a      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005634:	e01f      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005636:	bf00      	nop
 8005638:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800563c:	4ba2      	ldr	r3, [pc, #648]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800563e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005640:	4aa1      	ldr	r2, [pc, #644]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005646:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005648:	e01c      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800564a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800564e:	3308      	adds	r3, #8
 8005650:	2100      	movs	r1, #0
 8005652:	4618      	mov	r0, r3
 8005654:	f002 f9ee 	bl	8007a34 <RCCEx_PLL2_Config>
 8005658:	4603      	mov	r3, r0
 800565a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800565e:	e011      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005660:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005664:	3328      	adds	r3, #40	; 0x28
 8005666:	2100      	movs	r1, #0
 8005668:	4618      	mov	r0, r3
 800566a:	f002 fa95 	bl	8007b98 <RCCEx_PLL3_Config>
 800566e:	4603      	mov	r3, r0
 8005670:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005674:	e006      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800567c:	e002      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800567e:	bf00      	nop
 8005680:	e000      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005682:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005684:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005688:	2b00      	cmp	r3, #0
 800568a:	d10b      	bne.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800568c:	4b8e      	ldr	r3, [pc, #568]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800568e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005690:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005694:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005698:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800569c:	4a8a      	ldr	r2, [pc, #552]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800569e:	430b      	orrs	r3, r1
 80056a0:	6593      	str	r3, [r2, #88]	; 0x58
 80056a2:	e003      	b.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80056ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80056b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80056bc:	2300      	movs	r3, #0
 80056be:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80056c2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80056c6:	460b      	mov	r3, r1
 80056c8:	4313      	orrs	r3, r2
 80056ca:	d03a      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80056cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056d2:	2b30      	cmp	r3, #48	; 0x30
 80056d4:	d01f      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80056d6:	2b30      	cmp	r3, #48	; 0x30
 80056d8:	d819      	bhi.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80056da:	2b20      	cmp	r3, #32
 80056dc:	d00c      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80056de:	2b20      	cmp	r3, #32
 80056e0:	d815      	bhi.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d019      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80056e6:	2b10      	cmp	r3, #16
 80056e8:	d111      	bne.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056ea:	4b77      	ldr	r3, [pc, #476]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ee:	4a76      	ldr	r2, [pc, #472]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80056f6:	e011      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80056f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056fc:	3308      	adds	r3, #8
 80056fe:	2102      	movs	r1, #2
 8005700:	4618      	mov	r0, r3
 8005702:	f002 f997 	bl	8007a34 <RCCEx_PLL2_Config>
 8005706:	4603      	mov	r3, r0
 8005708:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800570c:	e006      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005714:	e002      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005716:	bf00      	nop
 8005718:	e000      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800571a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800571c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005720:	2b00      	cmp	r3, #0
 8005722:	d10a      	bne.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005724:	4b68      	ldr	r3, [pc, #416]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005728:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800572c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005732:	4a65      	ldr	r2, [pc, #404]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005734:	430b      	orrs	r3, r1
 8005736:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005738:	e003      	b.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800573a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800573e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005742:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800574e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005752:	2300      	movs	r3, #0
 8005754:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005758:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800575c:	460b      	mov	r3, r1
 800575e:	4313      	orrs	r3, r2
 8005760:	d051      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005762:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005768:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800576c:	d035      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800576e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005772:	d82e      	bhi.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005774:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005778:	d031      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800577a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800577e:	d828      	bhi.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005780:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005784:	d01a      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005786:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800578a:	d822      	bhi.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800578c:	2b00      	cmp	r3, #0
 800578e:	d003      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005790:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005794:	d007      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005796:	e01c      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005798:	4b4b      	ldr	r3, [pc, #300]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800579a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579c:	4a4a      	ldr	r2, [pc, #296]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800579e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80057a4:	e01c      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057aa:	3308      	adds	r3, #8
 80057ac:	2100      	movs	r1, #0
 80057ae:	4618      	mov	r0, r3
 80057b0:	f002 f940 	bl	8007a34 <RCCEx_PLL2_Config>
 80057b4:	4603      	mov	r3, r0
 80057b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80057ba:	e011      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80057bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057c0:	3328      	adds	r3, #40	; 0x28
 80057c2:	2100      	movs	r1, #0
 80057c4:	4618      	mov	r0, r3
 80057c6:	f002 f9e7 	bl	8007b98 <RCCEx_PLL3_Config>
 80057ca:	4603      	mov	r3, r0
 80057cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80057d0:	e006      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80057d8:	e002      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80057da:	bf00      	nop
 80057dc:	e000      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80057de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d10a      	bne.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80057e8:	4b37      	ldr	r3, [pc, #220]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ec:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80057f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057f6:	4a34      	ldr	r2, [pc, #208]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057f8:	430b      	orrs	r3, r1
 80057fa:	6513      	str	r3, [r2, #80]	; 0x50
 80057fc:	e003      	b.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005802:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005806:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800580a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005812:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005816:	2300      	movs	r3, #0
 8005818:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800581c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005820:	460b      	mov	r3, r1
 8005822:	4313      	orrs	r3, r2
 8005824:	d056      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005826:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800582a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800582c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005830:	d033      	beq.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005832:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005836:	d82c      	bhi.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005838:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800583c:	d02f      	beq.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800583e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005842:	d826      	bhi.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005844:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005848:	d02b      	beq.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800584a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800584e:	d820      	bhi.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005850:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005854:	d012      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005856:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800585a:	d81a      	bhi.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800585c:	2b00      	cmp	r3, #0
 800585e:	d022      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005864:	d115      	bne.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005866:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800586a:	3308      	adds	r3, #8
 800586c:	2101      	movs	r1, #1
 800586e:	4618      	mov	r0, r3
 8005870:	f002 f8e0 	bl	8007a34 <RCCEx_PLL2_Config>
 8005874:	4603      	mov	r3, r0
 8005876:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800587a:	e015      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800587c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005880:	3328      	adds	r3, #40	; 0x28
 8005882:	2101      	movs	r1, #1
 8005884:	4618      	mov	r0, r3
 8005886:	f002 f987 	bl	8007b98 <RCCEx_PLL3_Config>
 800588a:	4603      	mov	r3, r0
 800588c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005890:	e00a      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005898:	e006      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800589a:	bf00      	nop
 800589c:	e004      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800589e:	bf00      	nop
 80058a0:	e002      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80058a2:	bf00      	nop
 80058a4:	e000      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80058a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d10d      	bne.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80058b0:	4b05      	ldr	r3, [pc, #20]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058b4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80058b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058be:	4a02      	ldr	r2, [pc, #8]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058c0:	430b      	orrs	r3, r1
 80058c2:	6513      	str	r3, [r2, #80]	; 0x50
 80058c4:	e006      	b.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80058c6:	bf00      	nop
 80058c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80058d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058dc:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80058e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80058e4:	2300      	movs	r3, #0
 80058e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80058ea:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80058ee:	460b      	mov	r3, r1
 80058f0:	4313      	orrs	r3, r2
 80058f2:	d055      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80058f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80058fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005900:	d033      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005902:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005906:	d82c      	bhi.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800590c:	d02f      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800590e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005912:	d826      	bhi.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005914:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005918:	d02b      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800591a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800591e:	d820      	bhi.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005920:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005924:	d012      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005926:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800592a:	d81a      	bhi.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800592c:	2b00      	cmp	r3, #0
 800592e:	d022      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005930:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005934:	d115      	bne.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005936:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800593a:	3308      	adds	r3, #8
 800593c:	2101      	movs	r1, #1
 800593e:	4618      	mov	r0, r3
 8005940:	f002 f878 	bl	8007a34 <RCCEx_PLL2_Config>
 8005944:	4603      	mov	r3, r0
 8005946:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800594a:	e015      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800594c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005950:	3328      	adds	r3, #40	; 0x28
 8005952:	2101      	movs	r1, #1
 8005954:	4618      	mov	r0, r3
 8005956:	f002 f91f 	bl	8007b98 <RCCEx_PLL3_Config>
 800595a:	4603      	mov	r3, r0
 800595c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005960:	e00a      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005968:	e006      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800596a:	bf00      	nop
 800596c:	e004      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800596e:	bf00      	nop
 8005970:	e002      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005972:	bf00      	nop
 8005974:	e000      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005976:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005978:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800597c:	2b00      	cmp	r3, #0
 800597e:	d10b      	bne.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005980:	4ba3      	ldr	r3, [pc, #652]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005984:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005988:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800598c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005990:	4a9f      	ldr	r2, [pc, #636]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005992:	430b      	orrs	r3, r1
 8005994:	6593      	str	r3, [r2, #88]	; 0x58
 8005996:	e003      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005998:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800599c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80059a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80059ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80059b0:	2300      	movs	r3, #0
 80059b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80059b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80059ba:	460b      	mov	r3, r1
 80059bc:	4313      	orrs	r3, r2
 80059be:	d037      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80059c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059ca:	d00e      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80059cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059d0:	d816      	bhi.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d018      	beq.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80059d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059da:	d111      	bne.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059dc:	4b8c      	ldr	r3, [pc, #560]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e0:	4a8b      	ldr	r2, [pc, #556]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80059e8:	e00f      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059ee:	3308      	adds	r3, #8
 80059f0:	2101      	movs	r1, #1
 80059f2:	4618      	mov	r0, r3
 80059f4:	f002 f81e 	bl	8007a34 <RCCEx_PLL2_Config>
 80059f8:	4603      	mov	r3, r0
 80059fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80059fe:	e004      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005a06:	e000      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005a08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10a      	bne.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005a12:	4b7f      	ldr	r3, [pc, #508]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a16:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a20:	4a7b      	ldr	r2, [pc, #492]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a22:	430b      	orrs	r3, r1
 8005a24:	6513      	str	r3, [r2, #80]	; 0x50
 8005a26:	e003      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a2c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a38:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005a3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a40:	2300      	movs	r3, #0
 8005a42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005a46:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005a4a:	460b      	mov	r3, r1
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	d039      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a56:	2b03      	cmp	r3, #3
 8005a58:	d81c      	bhi.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005a5a:	a201      	add	r2, pc, #4	; (adr r2, 8005a60 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a60:	08005a9d 	.word	0x08005a9d
 8005a64:	08005a71 	.word	0x08005a71
 8005a68:	08005a7f 	.word	0x08005a7f
 8005a6c:	08005a9d 	.word	0x08005a9d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a70:	4b67      	ldr	r3, [pc, #412]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a74:	4a66      	ldr	r2, [pc, #408]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005a7c:	e00f      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a82:	3308      	adds	r3, #8
 8005a84:	2102      	movs	r1, #2
 8005a86:	4618      	mov	r0, r3
 8005a88:	f001 ffd4 	bl	8007a34 <RCCEx_PLL2_Config>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005a92:	e004      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005a9a:	e000      	b.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005a9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d10a      	bne.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005aa6:	4b5a      	ldr	r3, [pc, #360]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aaa:	f023 0103 	bic.w	r1, r3, #3
 8005aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ab2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ab4:	4a56      	ldr	r2, [pc, #344]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ab6:	430b      	orrs	r3, r1
 8005ab8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005aba:	e003      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005abc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ac0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005acc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005ad0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005ada:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005ade:	460b      	mov	r3, r1
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	f000 809f 	beq.w	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ae6:	4b4b      	ldr	r3, [pc, #300]	; (8005c14 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a4a      	ldr	r2, [pc, #296]	; (8005c14 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005af0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005af2:	f7fc fcb7 	bl	8002464 <HAL_GetTick>
 8005af6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005afa:	e00b      	b.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005afc:	f7fc fcb2 	bl	8002464 <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	2b64      	cmp	r3, #100	; 0x64
 8005b0a:	d903      	bls.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b12:	e005      	b.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b14:	4b3f      	ldr	r3, [pc, #252]	; (8005c14 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d0ed      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005b20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d179      	bne.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005b28:	4b39      	ldr	r3, [pc, #228]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005b34:	4053      	eors	r3, r2
 8005b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d015      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b3e:	4b34      	ldr	r3, [pc, #208]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b46:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b4a:	4b31      	ldr	r3, [pc, #196]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b4e:	4a30      	ldr	r2, [pc, #192]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b54:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b56:	4b2e      	ldr	r3, [pc, #184]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b5a:	4a2d      	ldr	r2, [pc, #180]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b60:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005b62:	4a2b      	ldr	r2, [pc, #172]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b64:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005b68:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b6e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005b72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b76:	d118      	bne.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b78:	f7fc fc74 	bl	8002464 <HAL_GetTick>
 8005b7c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b80:	e00d      	b.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b82:	f7fc fc6f 	bl	8002464 <HAL_GetTick>
 8005b86:	4602      	mov	r2, r0
 8005b88:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005b8c:	1ad2      	subs	r2, r2, r3
 8005b8e:	f241 3388 	movw	r3, #5000	; 0x1388
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d903      	bls.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8005b9c:	e005      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b9e:	4b1c      	ldr	r3, [pc, #112]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba2:	f003 0302 	and.w	r3, r3, #2
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d0eb      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005baa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d129      	bne.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bb6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bc2:	d10e      	bne.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005bc4:	4b12      	ldr	r3, [pc, #72]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bd0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005bd4:	091a      	lsrs	r2, r3, #4
 8005bd6:	4b10      	ldr	r3, [pc, #64]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005bd8:	4013      	ands	r3, r2
 8005bda:	4a0d      	ldr	r2, [pc, #52]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bdc:	430b      	orrs	r3, r1
 8005bde:	6113      	str	r3, [r2, #16]
 8005be0:	e005      	b.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005be2:	4b0b      	ldr	r3, [pc, #44]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	4a0a      	ldr	r2, [pc, #40]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005be8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005bec:	6113      	str	r3, [r2, #16]
 8005bee:	4b08      	ldr	r3, [pc, #32]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bf0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bf6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005bfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bfe:	4a04      	ldr	r2, [pc, #16]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c00:	430b      	orrs	r3, r1
 8005c02:	6713      	str	r3, [r2, #112]	; 0x70
 8005c04:	e00e      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8005c0e:	e009      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005c10:	58024400 	.word	0x58024400
 8005c14:	58024800 	.word	0x58024800
 8005c18:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c20:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c2c:	f002 0301 	and.w	r3, r2, #1
 8005c30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c34:	2300      	movs	r3, #0
 8005c36:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005c3a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005c3e:	460b      	mov	r3, r1
 8005c40:	4313      	orrs	r3, r2
 8005c42:	f000 8089 	beq.w	8005d58 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c4c:	2b28      	cmp	r3, #40	; 0x28
 8005c4e:	d86b      	bhi.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005c50:	a201      	add	r2, pc, #4	; (adr r2, 8005c58 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c56:	bf00      	nop
 8005c58:	08005d31 	.word	0x08005d31
 8005c5c:	08005d29 	.word	0x08005d29
 8005c60:	08005d29 	.word	0x08005d29
 8005c64:	08005d29 	.word	0x08005d29
 8005c68:	08005d29 	.word	0x08005d29
 8005c6c:	08005d29 	.word	0x08005d29
 8005c70:	08005d29 	.word	0x08005d29
 8005c74:	08005d29 	.word	0x08005d29
 8005c78:	08005cfd 	.word	0x08005cfd
 8005c7c:	08005d29 	.word	0x08005d29
 8005c80:	08005d29 	.word	0x08005d29
 8005c84:	08005d29 	.word	0x08005d29
 8005c88:	08005d29 	.word	0x08005d29
 8005c8c:	08005d29 	.word	0x08005d29
 8005c90:	08005d29 	.word	0x08005d29
 8005c94:	08005d29 	.word	0x08005d29
 8005c98:	08005d13 	.word	0x08005d13
 8005c9c:	08005d29 	.word	0x08005d29
 8005ca0:	08005d29 	.word	0x08005d29
 8005ca4:	08005d29 	.word	0x08005d29
 8005ca8:	08005d29 	.word	0x08005d29
 8005cac:	08005d29 	.word	0x08005d29
 8005cb0:	08005d29 	.word	0x08005d29
 8005cb4:	08005d29 	.word	0x08005d29
 8005cb8:	08005d31 	.word	0x08005d31
 8005cbc:	08005d29 	.word	0x08005d29
 8005cc0:	08005d29 	.word	0x08005d29
 8005cc4:	08005d29 	.word	0x08005d29
 8005cc8:	08005d29 	.word	0x08005d29
 8005ccc:	08005d29 	.word	0x08005d29
 8005cd0:	08005d29 	.word	0x08005d29
 8005cd4:	08005d29 	.word	0x08005d29
 8005cd8:	08005d31 	.word	0x08005d31
 8005cdc:	08005d29 	.word	0x08005d29
 8005ce0:	08005d29 	.word	0x08005d29
 8005ce4:	08005d29 	.word	0x08005d29
 8005ce8:	08005d29 	.word	0x08005d29
 8005cec:	08005d29 	.word	0x08005d29
 8005cf0:	08005d29 	.word	0x08005d29
 8005cf4:	08005d29 	.word	0x08005d29
 8005cf8:	08005d31 	.word	0x08005d31
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d00:	3308      	adds	r3, #8
 8005d02:	2101      	movs	r1, #1
 8005d04:	4618      	mov	r0, r3
 8005d06:	f001 fe95 	bl	8007a34 <RCCEx_PLL2_Config>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005d10:	e00f      	b.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d16:	3328      	adds	r3, #40	; 0x28
 8005d18:	2101      	movs	r1, #1
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f001 ff3c 	bl	8007b98 <RCCEx_PLL3_Config>
 8005d20:	4603      	mov	r3, r0
 8005d22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005d26:	e004      	b.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005d2e:	e000      	b.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005d30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10a      	bne.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005d3a:	4bbf      	ldr	r3, [pc, #764]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d3e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d48:	4abb      	ldr	r2, [pc, #748]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d4a:	430b      	orrs	r3, r1
 8005d4c:	6553      	str	r3, [r2, #84]	; 0x54
 8005d4e:	e003      	b.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d54:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d60:	f002 0302 	and.w	r3, r2, #2
 8005d64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d68:	2300      	movs	r3, #0
 8005d6a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005d6e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005d72:	460b      	mov	r3, r1
 8005d74:	4313      	orrs	r3, r2
 8005d76:	d041      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d7e:	2b05      	cmp	r3, #5
 8005d80:	d824      	bhi.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005d82:	a201      	add	r2, pc, #4	; (adr r2, 8005d88 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d88:	08005dd5 	.word	0x08005dd5
 8005d8c:	08005da1 	.word	0x08005da1
 8005d90:	08005db7 	.word	0x08005db7
 8005d94:	08005dd5 	.word	0x08005dd5
 8005d98:	08005dd5 	.word	0x08005dd5
 8005d9c:	08005dd5 	.word	0x08005dd5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005da4:	3308      	adds	r3, #8
 8005da6:	2101      	movs	r1, #1
 8005da8:	4618      	mov	r0, r3
 8005daa:	f001 fe43 	bl	8007a34 <RCCEx_PLL2_Config>
 8005dae:	4603      	mov	r3, r0
 8005db0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005db4:	e00f      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dba:	3328      	adds	r3, #40	; 0x28
 8005dbc:	2101      	movs	r1, #1
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f001 feea 	bl	8007b98 <RCCEx_PLL3_Config>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005dca:	e004      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005dd2:	e000      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005dd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d10a      	bne.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005dde:	4b96      	ldr	r3, [pc, #600]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005de2:	f023 0107 	bic.w	r1, r3, #7
 8005de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005dec:	4a92      	ldr	r2, [pc, #584]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005dee:	430b      	orrs	r3, r1
 8005df0:	6553      	str	r3, [r2, #84]	; 0x54
 8005df2:	e003      	b.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005df4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005df8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e04:	f002 0304 	and.w	r3, r2, #4
 8005e08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e12:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005e16:	460b      	mov	r3, r1
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	d044      	beq.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e24:	2b05      	cmp	r3, #5
 8005e26:	d825      	bhi.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005e28:	a201      	add	r2, pc, #4	; (adr r2, 8005e30 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e2e:	bf00      	nop
 8005e30:	08005e7d 	.word	0x08005e7d
 8005e34:	08005e49 	.word	0x08005e49
 8005e38:	08005e5f 	.word	0x08005e5f
 8005e3c:	08005e7d 	.word	0x08005e7d
 8005e40:	08005e7d 	.word	0x08005e7d
 8005e44:	08005e7d 	.word	0x08005e7d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e4c:	3308      	adds	r3, #8
 8005e4e:	2101      	movs	r1, #1
 8005e50:	4618      	mov	r0, r3
 8005e52:	f001 fdef 	bl	8007a34 <RCCEx_PLL2_Config>
 8005e56:	4603      	mov	r3, r0
 8005e58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005e5c:	e00f      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e62:	3328      	adds	r3, #40	; 0x28
 8005e64:	2101      	movs	r1, #1
 8005e66:	4618      	mov	r0, r3
 8005e68:	f001 fe96 	bl	8007b98 <RCCEx_PLL3_Config>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005e72:	e004      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005e7a:	e000      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005e7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d10b      	bne.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e86:	4b6c      	ldr	r3, [pc, #432]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e8a:	f023 0107 	bic.w	r1, r3, #7
 8005e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e96:	4a68      	ldr	r2, [pc, #416]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e98:	430b      	orrs	r3, r1
 8005e9a:	6593      	str	r3, [r2, #88]	; 0x58
 8005e9c:	e003      	b.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ea2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eae:	f002 0320 	and.w	r3, r2, #32
 8005eb2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ebc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	d055      	beq.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ece:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ed2:	d033      	beq.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005ed4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ed8:	d82c      	bhi.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ede:	d02f      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ee4:	d826      	bhi.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005ee6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005eea:	d02b      	beq.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005eec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005ef0:	d820      	bhi.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005ef2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ef6:	d012      	beq.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005ef8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005efc:	d81a      	bhi.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d022      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005f02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f06:	d115      	bne.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f0c:	3308      	adds	r3, #8
 8005f0e:	2100      	movs	r1, #0
 8005f10:	4618      	mov	r0, r3
 8005f12:	f001 fd8f 	bl	8007a34 <RCCEx_PLL2_Config>
 8005f16:	4603      	mov	r3, r0
 8005f18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005f1c:	e015      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f22:	3328      	adds	r3, #40	; 0x28
 8005f24:	2102      	movs	r1, #2
 8005f26:	4618      	mov	r0, r3
 8005f28:	f001 fe36 	bl	8007b98 <RCCEx_PLL3_Config>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005f32:	e00a      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005f3a:	e006      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005f3c:	bf00      	nop
 8005f3e:	e004      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005f40:	bf00      	nop
 8005f42:	e002      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005f44:	bf00      	nop
 8005f46:	e000      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005f48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d10b      	bne.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f52:	4b39      	ldr	r3, [pc, #228]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f56:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f62:	4a35      	ldr	r2, [pc, #212]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f64:	430b      	orrs	r3, r1
 8005f66:	6553      	str	r3, [r2, #84]	; 0x54
 8005f68:	e003      	b.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f7a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005f7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005f82:	2300      	movs	r3, #0
 8005f84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005f88:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	d058      	beq.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f9a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005f9e:	d033      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005fa0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005fa4:	d82c      	bhi.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005fa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005faa:	d02f      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005fac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fb0:	d826      	bhi.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005fb2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005fb6:	d02b      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005fb8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005fbc:	d820      	bhi.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005fbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fc2:	d012      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005fc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fc8:	d81a      	bhi.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d022      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005fce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fd2:	d115      	bne.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fd8:	3308      	adds	r3, #8
 8005fda:	2100      	movs	r1, #0
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f001 fd29 	bl	8007a34 <RCCEx_PLL2_Config>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005fe8:	e015      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fee:	3328      	adds	r3, #40	; 0x28
 8005ff0:	2102      	movs	r1, #2
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f001 fdd0 	bl	8007b98 <RCCEx_PLL3_Config>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005ffe:	e00a      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006006:	e006      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006008:	bf00      	nop
 800600a:	e004      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800600c:	bf00      	nop
 800600e:	e002      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006010:	bf00      	nop
 8006012:	e000      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006014:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006016:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800601a:	2b00      	cmp	r3, #0
 800601c:	d10e      	bne.n	800603c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800601e:	4b06      	ldr	r3, [pc, #24]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006022:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006026:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800602a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800602e:	4a02      	ldr	r2, [pc, #8]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006030:	430b      	orrs	r3, r1
 8006032:	6593      	str	r3, [r2, #88]	; 0x58
 8006034:	e006      	b.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006036:	bf00      	nop
 8006038:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800603c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006040:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006044:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006050:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006054:	2300      	movs	r3, #0
 8006056:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800605a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800605e:	460b      	mov	r3, r1
 8006060:	4313      	orrs	r3, r2
 8006062:	d055      	beq.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006064:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006068:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800606c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006070:	d033      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006072:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006076:	d82c      	bhi.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006078:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800607c:	d02f      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800607e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006082:	d826      	bhi.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006084:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006088:	d02b      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800608a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800608e:	d820      	bhi.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006090:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006094:	d012      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006096:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800609a:	d81a      	bhi.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800609c:	2b00      	cmp	r3, #0
 800609e:	d022      	beq.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80060a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060a4:	d115      	bne.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060aa:	3308      	adds	r3, #8
 80060ac:	2100      	movs	r1, #0
 80060ae:	4618      	mov	r0, r3
 80060b0:	f001 fcc0 	bl	8007a34 <RCCEx_PLL2_Config>
 80060b4:	4603      	mov	r3, r0
 80060b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80060ba:	e015      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80060bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060c0:	3328      	adds	r3, #40	; 0x28
 80060c2:	2102      	movs	r1, #2
 80060c4:	4618      	mov	r0, r3
 80060c6:	f001 fd67 	bl	8007b98 <RCCEx_PLL3_Config>
 80060ca:	4603      	mov	r3, r0
 80060cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80060d0:	e00a      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80060d8:	e006      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80060da:	bf00      	nop
 80060dc:	e004      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80060de:	bf00      	nop
 80060e0:	e002      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80060e2:	bf00      	nop
 80060e4:	e000      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80060e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d10b      	bne.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80060f0:	4ba1      	ldr	r3, [pc, #644]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80060f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060f4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80060f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006100:	4a9d      	ldr	r2, [pc, #628]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006102:	430b      	orrs	r3, r1
 8006104:	6593      	str	r3, [r2, #88]	; 0x58
 8006106:	e003      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006108:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800610c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006110:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006118:	f002 0308 	and.w	r3, r2, #8
 800611c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006120:	2300      	movs	r3, #0
 8006122:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006126:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800612a:	460b      	mov	r3, r1
 800612c:	4313      	orrs	r3, r2
 800612e:	d01e      	beq.n	800616e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006130:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006134:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006138:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800613c:	d10c      	bne.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800613e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006142:	3328      	adds	r3, #40	; 0x28
 8006144:	2102      	movs	r1, #2
 8006146:	4618      	mov	r0, r3
 8006148:	f001 fd26 	bl	8007b98 <RCCEx_PLL3_Config>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d002      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006158:	4b87      	ldr	r3, [pc, #540]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800615a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800615c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006160:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006164:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006168:	4a83      	ldr	r2, [pc, #524]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800616a:	430b      	orrs	r3, r1
 800616c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800616e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006176:	f002 0310 	and.w	r3, r2, #16
 800617a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800617e:	2300      	movs	r3, #0
 8006180:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006184:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006188:	460b      	mov	r3, r1
 800618a:	4313      	orrs	r3, r2
 800618c:	d01e      	beq.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800618e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006192:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800619a:	d10c      	bne.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800619c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061a0:	3328      	adds	r3, #40	; 0x28
 80061a2:	2102      	movs	r1, #2
 80061a4:	4618      	mov	r0, r3
 80061a6:	f001 fcf7 	bl	8007b98 <RCCEx_PLL3_Config>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d002      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80061b6:	4b70      	ldr	r3, [pc, #448]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80061be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061c6:	4a6c      	ldr	r2, [pc, #432]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061c8:	430b      	orrs	r3, r1
 80061ca:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80061cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80061d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80061dc:	2300      	movs	r3, #0
 80061de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80061e2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80061e6:	460b      	mov	r3, r1
 80061e8:	4313      	orrs	r3, r2
 80061ea:	d03e      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80061ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80061f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80061f8:	d022      	beq.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80061fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80061fe:	d81b      	bhi.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006200:	2b00      	cmp	r3, #0
 8006202:	d003      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006208:	d00b      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800620a:	e015      	b.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800620c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006210:	3308      	adds	r3, #8
 8006212:	2100      	movs	r1, #0
 8006214:	4618      	mov	r0, r3
 8006216:	f001 fc0d 	bl	8007a34 <RCCEx_PLL2_Config>
 800621a:	4603      	mov	r3, r0
 800621c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006220:	e00f      	b.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006222:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006226:	3328      	adds	r3, #40	; 0x28
 8006228:	2102      	movs	r1, #2
 800622a:	4618      	mov	r0, r3
 800622c:	f001 fcb4 	bl	8007b98 <RCCEx_PLL3_Config>
 8006230:	4603      	mov	r3, r0
 8006232:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006236:	e004      	b.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800623e:	e000      	b.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006240:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006242:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006246:	2b00      	cmp	r3, #0
 8006248:	d10b      	bne.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800624a:	4b4b      	ldr	r3, [pc, #300]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800624c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800624e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006252:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006256:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800625a:	4a47      	ldr	r2, [pc, #284]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800625c:	430b      	orrs	r3, r1
 800625e:	6593      	str	r3, [r2, #88]	; 0x58
 8006260:	e003      	b.n	800626a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006262:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006266:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800626a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800626e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006272:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006276:	67bb      	str	r3, [r7, #120]	; 0x78
 8006278:	2300      	movs	r3, #0
 800627a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800627c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006280:	460b      	mov	r3, r1
 8006282:	4313      	orrs	r3, r2
 8006284:	d03b      	beq.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006286:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800628a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800628e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006292:	d01f      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006294:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006298:	d818      	bhi.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800629a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800629e:	d003      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80062a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062a4:	d007      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80062a6:	e011      	b.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062a8:	4b33      	ldr	r3, [pc, #204]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ac:	4a32      	ldr	r2, [pc, #200]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80062b4:	e00f      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80062b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062ba:	3328      	adds	r3, #40	; 0x28
 80062bc:	2101      	movs	r1, #1
 80062be:	4618      	mov	r0, r3
 80062c0:	f001 fc6a 	bl	8007b98 <RCCEx_PLL3_Config>
 80062c4:	4603      	mov	r3, r0
 80062c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80062ca:	e004      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80062d2:	e000      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80062d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d10b      	bne.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80062de:	4b26      	ldr	r3, [pc, #152]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062e2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80062e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ee:	4a22      	ldr	r2, [pc, #136]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062f0:	430b      	orrs	r3, r1
 80062f2:	6553      	str	r3, [r2, #84]	; 0x54
 80062f4:	e003      	b.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80062fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006306:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800630a:	673b      	str	r3, [r7, #112]	; 0x70
 800630c:	2300      	movs	r3, #0
 800630e:	677b      	str	r3, [r7, #116]	; 0x74
 8006310:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006314:	460b      	mov	r3, r1
 8006316:	4313      	orrs	r3, r2
 8006318:	d034      	beq.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800631a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800631e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006320:	2b00      	cmp	r3, #0
 8006322:	d003      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006328:	d007      	beq.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800632a:	e011      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800632c:	4b12      	ldr	r3, [pc, #72]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800632e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006330:	4a11      	ldr	r2, [pc, #68]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006332:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006336:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006338:	e00e      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800633a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800633e:	3308      	adds	r3, #8
 8006340:	2102      	movs	r1, #2
 8006342:	4618      	mov	r0, r3
 8006344:	f001 fb76 	bl	8007a34 <RCCEx_PLL2_Config>
 8006348:	4603      	mov	r3, r0
 800634a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800634e:	e003      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006356:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006358:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800635c:	2b00      	cmp	r3, #0
 800635e:	d10d      	bne.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006360:	4b05      	ldr	r3, [pc, #20]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006364:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006368:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800636c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800636e:	4a02      	ldr	r2, [pc, #8]	; (8006378 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006370:	430b      	orrs	r3, r1
 8006372:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006374:	e006      	b.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006376:	bf00      	nop
 8006378:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800637c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006380:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006384:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006390:	66bb      	str	r3, [r7, #104]	; 0x68
 8006392:	2300      	movs	r3, #0
 8006394:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006396:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800639a:	460b      	mov	r3, r1
 800639c:	4313      	orrs	r3, r2
 800639e:	d00c      	beq.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80063a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063a4:	3328      	adds	r3, #40	; 0x28
 80063a6:	2102      	movs	r1, #2
 80063a8:	4618      	mov	r0, r3
 80063aa:	f001 fbf5 	bl	8007b98 <RCCEx_PLL3_Config>
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d002      	beq.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80063ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80063c6:	663b      	str	r3, [r7, #96]	; 0x60
 80063c8:	2300      	movs	r3, #0
 80063ca:	667b      	str	r3, [r7, #100]	; 0x64
 80063cc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80063d0:	460b      	mov	r3, r1
 80063d2:	4313      	orrs	r3, r2
 80063d4:	d038      	beq.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80063d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063e2:	d018      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80063e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063e8:	d811      	bhi.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80063ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063ee:	d014      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80063f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063f4:	d80b      	bhi.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d011      	beq.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80063fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063fe:	d106      	bne.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006400:	4bc3      	ldr	r3, [pc, #780]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006404:	4ac2      	ldr	r2, [pc, #776]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006406:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800640a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800640c:	e008      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006414:	e004      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006416:	bf00      	nop
 8006418:	e002      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800641a:	bf00      	nop
 800641c:	e000      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800641e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006420:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006424:	2b00      	cmp	r3, #0
 8006426:	d10b      	bne.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006428:	4bb9      	ldr	r3, [pc, #740]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800642a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800642c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006430:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006434:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006438:	4ab5      	ldr	r2, [pc, #724]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800643a:	430b      	orrs	r3, r1
 800643c:	6553      	str	r3, [r2, #84]	; 0x54
 800643e:	e003      	b.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006440:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006444:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006448:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800644c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006450:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006454:	65bb      	str	r3, [r7, #88]	; 0x58
 8006456:	2300      	movs	r3, #0
 8006458:	65fb      	str	r3, [r7, #92]	; 0x5c
 800645a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800645e:	460b      	mov	r3, r1
 8006460:	4313      	orrs	r3, r2
 8006462:	d009      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006464:	4baa      	ldr	r3, [pc, #680]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006468:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800646c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006472:	4aa7      	ldr	r2, [pc, #668]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006474:	430b      	orrs	r3, r1
 8006476:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006478:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800647c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006480:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8006484:	653b      	str	r3, [r7, #80]	; 0x50
 8006486:	2300      	movs	r3, #0
 8006488:	657b      	str	r3, [r7, #84]	; 0x54
 800648a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800648e:	460b      	mov	r3, r1
 8006490:	4313      	orrs	r3, r2
 8006492:	d00a      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006494:	4b9e      	ldr	r3, [pc, #632]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800649c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064a0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80064a4:	4a9a      	ldr	r2, [pc, #616]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064a6:	430b      	orrs	r3, r1
 80064a8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80064aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80064b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80064b8:	2300      	movs	r3, #0
 80064ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064bc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80064c0:	460b      	mov	r3, r1
 80064c2:	4313      	orrs	r3, r2
 80064c4:	d009      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80064c6:	4b92      	ldr	r3, [pc, #584]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064ca:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80064ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064d4:	4a8e      	ldr	r2, [pc, #568]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064d6:	430b      	orrs	r3, r1
 80064d8:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80064da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e2:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80064e6:	643b      	str	r3, [r7, #64]	; 0x40
 80064e8:	2300      	movs	r3, #0
 80064ea:	647b      	str	r3, [r7, #68]	; 0x44
 80064ec:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80064f0:	460b      	mov	r3, r1
 80064f2:	4313      	orrs	r3, r2
 80064f4:	d00e      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80064f6:	4b86      	ldr	r3, [pc, #536]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	4a85      	ldr	r2, [pc, #532]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006500:	6113      	str	r3, [r2, #16]
 8006502:	4b83      	ldr	r3, [pc, #524]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006504:	6919      	ldr	r1, [r3, #16]
 8006506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800650a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800650e:	4a80      	ldr	r2, [pc, #512]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006510:	430b      	orrs	r3, r1
 8006512:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006514:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006520:	63bb      	str	r3, [r7, #56]	; 0x38
 8006522:	2300      	movs	r3, #0
 8006524:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006526:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800652a:	460b      	mov	r3, r1
 800652c:	4313      	orrs	r3, r2
 800652e:	d009      	beq.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006530:	4b77      	ldr	r3, [pc, #476]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006534:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006538:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800653c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800653e:	4a74      	ldr	r2, [pc, #464]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006540:	430b      	orrs	r3, r1
 8006542:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006544:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006550:	633b      	str	r3, [r7, #48]	; 0x30
 8006552:	2300      	movs	r3, #0
 8006554:	637b      	str	r3, [r7, #52]	; 0x34
 8006556:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800655a:	460b      	mov	r3, r1
 800655c:	4313      	orrs	r3, r2
 800655e:	d00a      	beq.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006560:	4b6b      	ldr	r3, [pc, #428]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006564:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006568:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800656c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006570:	4a67      	ldr	r2, [pc, #412]	; (8006710 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006572:	430b      	orrs	r3, r1
 8006574:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006576:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800657a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657e:	2100      	movs	r1, #0
 8006580:	62b9      	str	r1, [r7, #40]	; 0x28
 8006582:	f003 0301 	and.w	r3, r3, #1
 8006586:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006588:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800658c:	460b      	mov	r3, r1
 800658e:	4313      	orrs	r3, r2
 8006590:	d011      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006592:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006596:	3308      	adds	r3, #8
 8006598:	2100      	movs	r1, #0
 800659a:	4618      	mov	r0, r3
 800659c:	f001 fa4a 	bl	8007a34 <RCCEx_PLL2_Config>
 80065a0:	4603      	mov	r3, r0
 80065a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80065a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d003      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80065b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065be:	2100      	movs	r1, #0
 80065c0:	6239      	str	r1, [r7, #32]
 80065c2:	f003 0302 	and.w	r3, r3, #2
 80065c6:	627b      	str	r3, [r7, #36]	; 0x24
 80065c8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80065cc:	460b      	mov	r3, r1
 80065ce:	4313      	orrs	r3, r2
 80065d0:	d011      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065d6:	3308      	adds	r3, #8
 80065d8:	2101      	movs	r1, #1
 80065da:	4618      	mov	r0, r3
 80065dc:	f001 fa2a 	bl	8007a34 <RCCEx_PLL2_Config>
 80065e0:	4603      	mov	r3, r0
 80065e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80065e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d003      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80065f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fe:	2100      	movs	r1, #0
 8006600:	61b9      	str	r1, [r7, #24]
 8006602:	f003 0304 	and.w	r3, r3, #4
 8006606:	61fb      	str	r3, [r7, #28]
 8006608:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800660c:	460b      	mov	r3, r1
 800660e:	4313      	orrs	r3, r2
 8006610:	d011      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006612:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006616:	3308      	adds	r3, #8
 8006618:	2102      	movs	r1, #2
 800661a:	4618      	mov	r0, r3
 800661c:	f001 fa0a 	bl	8007a34 <RCCEx_PLL2_Config>
 8006620:	4603      	mov	r3, r0
 8006622:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006626:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800662a:	2b00      	cmp	r3, #0
 800662c:	d003      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800662e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006632:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006636:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800663a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663e:	2100      	movs	r1, #0
 8006640:	6139      	str	r1, [r7, #16]
 8006642:	f003 0308 	and.w	r3, r3, #8
 8006646:	617b      	str	r3, [r7, #20]
 8006648:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800664c:	460b      	mov	r3, r1
 800664e:	4313      	orrs	r3, r2
 8006650:	d011      	beq.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006652:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006656:	3328      	adds	r3, #40	; 0x28
 8006658:	2100      	movs	r1, #0
 800665a:	4618      	mov	r0, r3
 800665c:	f001 fa9c 	bl	8007b98 <RCCEx_PLL3_Config>
 8006660:	4603      	mov	r3, r0
 8006662:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8006666:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800666a:	2b00      	cmp	r3, #0
 800666c:	d003      	beq.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800666e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006672:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006676:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800667a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667e:	2100      	movs	r1, #0
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	f003 0310 	and.w	r3, r3, #16
 8006686:	60fb      	str	r3, [r7, #12]
 8006688:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800668c:	460b      	mov	r3, r1
 800668e:	4313      	orrs	r3, r2
 8006690:	d011      	beq.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006692:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006696:	3328      	adds	r3, #40	; 0x28
 8006698:	2101      	movs	r1, #1
 800669a:	4618      	mov	r0, r3
 800669c:	f001 fa7c 	bl	8007b98 <RCCEx_PLL3_Config>
 80066a0:	4603      	mov	r3, r0
 80066a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80066a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d003      	beq.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80066b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066be:	2100      	movs	r1, #0
 80066c0:	6039      	str	r1, [r7, #0]
 80066c2:	f003 0320 	and.w	r3, r3, #32
 80066c6:	607b      	str	r3, [r7, #4]
 80066c8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80066cc:	460b      	mov	r3, r1
 80066ce:	4313      	orrs	r3, r2
 80066d0:	d011      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80066d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066d6:	3328      	adds	r3, #40	; 0x28
 80066d8:	2102      	movs	r1, #2
 80066da:	4618      	mov	r0, r3
 80066dc:	f001 fa5c 	bl	8007b98 <RCCEx_PLL3_Config>
 80066e0:	4603      	mov	r3, r0
 80066e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80066e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d003      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80066f6:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d101      	bne.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80066fe:	2300      	movs	r3, #0
 8006700:	e000      	b.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
}
 8006704:	4618      	mov	r0, r3
 8006706:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800670a:	46bd      	mov	sp, r7
 800670c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006710:	58024400 	.word	0x58024400

08006714 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b090      	sub	sp, #64	; 0x40
 8006718:	af00      	add	r7, sp, #0
 800671a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800671e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006722:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8006726:	430b      	orrs	r3, r1
 8006728:	f040 8094 	bne.w	8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800672c:	4b9e      	ldr	r3, [pc, #632]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800672e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006730:	f003 0307 	and.w	r3, r3, #7
 8006734:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006738:	2b04      	cmp	r3, #4
 800673a:	f200 8087 	bhi.w	800684c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800673e:	a201      	add	r2, pc, #4	; (adr r2, 8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006744:	08006759 	.word	0x08006759
 8006748:	08006781 	.word	0x08006781
 800674c:	080067a9 	.word	0x080067a9
 8006750:	08006845 	.word	0x08006845
 8006754:	080067d1 	.word	0x080067d1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006758:	4b93      	ldr	r3, [pc, #588]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006760:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006764:	d108      	bne.n	8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800676a:	4618      	mov	r0, r3
 800676c:	f001 f810 	bl	8007790 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006772:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006774:	f000 bd45 	b.w	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006778:	2300      	movs	r3, #0
 800677a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800677c:	f000 bd41 	b.w	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006780:	4b89      	ldr	r3, [pc, #548]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006788:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800678c:	d108      	bne.n	80067a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800678e:	f107 0318 	add.w	r3, r7, #24
 8006792:	4618      	mov	r0, r3
 8006794:	f000 fd54 	bl	8007240 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800679c:	f000 bd31 	b.w	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80067a0:	2300      	movs	r3, #0
 80067a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067a4:	f000 bd2d 	b.w	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80067a8:	4b7f      	ldr	r3, [pc, #508]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067b4:	d108      	bne.n	80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067b6:	f107 030c 	add.w	r3, r7, #12
 80067ba:	4618      	mov	r0, r3
 80067bc:	f000 fe94 	bl	80074e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067c4:	f000 bd1d 	b.w	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80067c8:	2300      	movs	r3, #0
 80067ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067cc:	f000 bd19 	b.w	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80067d0:	4b75      	ldr	r3, [pc, #468]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80067d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80067d8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80067da:	4b73      	ldr	r3, [pc, #460]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 0304 	and.w	r3, r3, #4
 80067e2:	2b04      	cmp	r3, #4
 80067e4:	d10c      	bne.n	8006800 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80067e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d109      	bne.n	8006800 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067ec:	4b6e      	ldr	r3, [pc, #440]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	08db      	lsrs	r3, r3, #3
 80067f2:	f003 0303 	and.w	r3, r3, #3
 80067f6:	4a6d      	ldr	r2, [pc, #436]	; (80069ac <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80067f8:	fa22 f303 	lsr.w	r3, r2, r3
 80067fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067fe:	e01f      	b.n	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006800:	4b69      	ldr	r3, [pc, #420]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006808:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800680c:	d106      	bne.n	800681c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800680e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006810:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006814:	d102      	bne.n	800681c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006816:	4b66      	ldr	r3, [pc, #408]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006818:	63fb      	str	r3, [r7, #60]	; 0x3c
 800681a:	e011      	b.n	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800681c:	4b62      	ldr	r3, [pc, #392]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006824:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006828:	d106      	bne.n	8006838 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800682a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800682c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006830:	d102      	bne.n	8006838 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006832:	4b60      	ldr	r3, [pc, #384]	; (80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006834:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006836:	e003      	b.n	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006838:	2300      	movs	r3, #0
 800683a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800683c:	f000 bce1 	b.w	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006840:	f000 bcdf 	b.w	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006844:	4b5c      	ldr	r3, [pc, #368]	; (80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006846:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006848:	f000 bcdb 	b.w	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800684c:	2300      	movs	r3, #0
 800684e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006850:	f000 bcd7 	b.w	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006854:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006858:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800685c:	430b      	orrs	r3, r1
 800685e:	f040 80ad 	bne.w	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006862:	4b51      	ldr	r3, [pc, #324]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006864:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006866:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800686a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800686c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006872:	d056      	beq.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800687a:	f200 8090 	bhi.w	800699e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800687e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006880:	2bc0      	cmp	r3, #192	; 0xc0
 8006882:	f000 8088 	beq.w	8006996 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8006886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006888:	2bc0      	cmp	r3, #192	; 0xc0
 800688a:	f200 8088 	bhi.w	800699e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800688e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006890:	2b80      	cmp	r3, #128	; 0x80
 8006892:	d032      	beq.n	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006896:	2b80      	cmp	r3, #128	; 0x80
 8006898:	f200 8081 	bhi.w	800699e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800689c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d003      	beq.n	80068aa <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80068a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a4:	2b40      	cmp	r3, #64	; 0x40
 80068a6:	d014      	beq.n	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80068a8:	e079      	b.n	800699e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80068aa:	4b3f      	ldr	r3, [pc, #252]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068b6:	d108      	bne.n	80068ca <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80068b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068bc:	4618      	mov	r0, r3
 80068be:	f000 ff67 	bl	8007790 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80068c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068c6:	f000 bc9c 	b.w	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068ca:	2300      	movs	r3, #0
 80068cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068ce:	f000 bc98 	b.w	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80068d2:	4b35      	ldr	r3, [pc, #212]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068de:	d108      	bne.n	80068f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068e0:	f107 0318 	add.w	r3, r7, #24
 80068e4:	4618      	mov	r0, r3
 80068e6:	f000 fcab 	bl	8007240 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068ee:	f000 bc88 	b.w	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068f2:	2300      	movs	r3, #0
 80068f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068f6:	f000 bc84 	b.w	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80068fa:	4b2b      	ldr	r3, [pc, #172]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006902:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006906:	d108      	bne.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006908:	f107 030c 	add.w	r3, r7, #12
 800690c:	4618      	mov	r0, r3
 800690e:	f000 fdeb 	bl	80074e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006916:	f000 bc74 	b.w	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800691a:	2300      	movs	r3, #0
 800691c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800691e:	f000 bc70 	b.w	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006922:	4b21      	ldr	r3, [pc, #132]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006926:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800692a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800692c:	4b1e      	ldr	r3, [pc, #120]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 0304 	and.w	r3, r3, #4
 8006934:	2b04      	cmp	r3, #4
 8006936:	d10c      	bne.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800693a:	2b00      	cmp	r3, #0
 800693c:	d109      	bne.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800693e:	4b1a      	ldr	r3, [pc, #104]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	08db      	lsrs	r3, r3, #3
 8006944:	f003 0303 	and.w	r3, r3, #3
 8006948:	4a18      	ldr	r2, [pc, #96]	; (80069ac <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800694a:	fa22 f303 	lsr.w	r3, r2, r3
 800694e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006950:	e01f      	b.n	8006992 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006952:	4b15      	ldr	r3, [pc, #84]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800695a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800695e:	d106      	bne.n	800696e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006962:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006966:	d102      	bne.n	800696e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006968:	4b11      	ldr	r3, [pc, #68]	; (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800696a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800696c:	e011      	b.n	8006992 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800696e:	4b0e      	ldr	r3, [pc, #56]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006976:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800697a:	d106      	bne.n	800698a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800697c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800697e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006982:	d102      	bne.n	800698a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006984:	4b0b      	ldr	r3, [pc, #44]	; (80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006986:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006988:	e003      	b.n	8006992 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800698a:	2300      	movs	r3, #0
 800698c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800698e:	f000 bc38 	b.w	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006992:	f000 bc36 	b.w	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006996:	4b08      	ldr	r3, [pc, #32]	; (80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006998:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800699a:	f000 bc32 	b.w	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800699e:	2300      	movs	r3, #0
 80069a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069a2:	f000 bc2e 	b.w	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80069a6:	bf00      	nop
 80069a8:	58024400 	.word	0x58024400
 80069ac:	03d09000 	.word	0x03d09000
 80069b0:	003d0900 	.word	0x003d0900
 80069b4:	017d7840 	.word	0x017d7840
 80069b8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80069bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069c0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80069c4:	430b      	orrs	r3, r1
 80069c6:	f040 809c 	bne.w	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80069ca:	4b9e      	ldr	r3, [pc, #632]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80069cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ce:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80069d2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80069d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80069da:	d054      	beq.n	8006a86 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80069dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80069e2:	f200 808b 	bhi.w	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80069e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80069ec:	f000 8083 	beq.w	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80069f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80069f6:	f200 8081 	bhi.w	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80069fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a00:	d02f      	beq.n	8006a62 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8006a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a08:	d878      	bhi.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d004      	beq.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a16:	d012      	beq.n	8006a3e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006a18:	e070      	b.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006a1a:	4b8a      	ldr	r3, [pc, #552]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a26:	d107      	bne.n	8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f000 feaf 	bl	8007790 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a34:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a36:	e3e4      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a3c:	e3e1      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a3e:	4b81      	ldr	r3, [pc, #516]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a4a:	d107      	bne.n	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a4c:	f107 0318 	add.w	r3, r7, #24
 8006a50:	4618      	mov	r0, r3
 8006a52:	f000 fbf5 	bl	8007240 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a5a:	e3d2      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a60:	e3cf      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a62:	4b78      	ldr	r3, [pc, #480]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a6e:	d107      	bne.n	8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a70:	f107 030c 	add.w	r3, r7, #12
 8006a74:	4618      	mov	r0, r3
 8006a76:	f000 fd37 	bl	80074e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a7e:	e3c0      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a80:	2300      	movs	r3, #0
 8006a82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a84:	e3bd      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006a86:	4b6f      	ldr	r3, [pc, #444]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a8a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a8e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a90:	4b6c      	ldr	r3, [pc, #432]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 0304 	and.w	r3, r3, #4
 8006a98:	2b04      	cmp	r3, #4
 8006a9a:	d10c      	bne.n	8006ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d109      	bne.n	8006ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006aa2:	4b68      	ldr	r3, [pc, #416]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	08db      	lsrs	r3, r3, #3
 8006aa8:	f003 0303 	and.w	r3, r3, #3
 8006aac:	4a66      	ldr	r2, [pc, #408]	; (8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006aae:	fa22 f303 	lsr.w	r3, r2, r3
 8006ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ab4:	e01e      	b.n	8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ab6:	4b63      	ldr	r3, [pc, #396]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006abe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ac2:	d106      	bne.n	8006ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ac6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006aca:	d102      	bne.n	8006ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006acc:	4b5f      	ldr	r3, [pc, #380]	; (8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006ace:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ad0:	e010      	b.n	8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006ad2:	4b5c      	ldr	r3, [pc, #368]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ada:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ade:	d106      	bne.n	8006aee <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ae2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ae6:	d102      	bne.n	8006aee <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006ae8:	4b59      	ldr	r3, [pc, #356]	; (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006aea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006aec:	e002      	b.n	8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006aee:	2300      	movs	r3, #0
 8006af0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006af2:	e386      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006af4:	e385      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006af6:	4b57      	ldr	r3, [pc, #348]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006af8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006afa:	e382      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006afc:	2300      	movs	r3, #0
 8006afe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b00:	e37f      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006b02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b06:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8006b0a:	430b      	orrs	r3, r1
 8006b0c:	f040 80a7 	bne.w	8006c5e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006b10:	4b4c      	ldr	r3, [pc, #304]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b14:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006b18:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b20:	d055      	beq.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8006b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b28:	f200 8096 	bhi.w	8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006b32:	f000 8084 	beq.w	8006c3e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b38:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006b3c:	f200 808c 	bhi.w	8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b46:	d030      	beq.n	8006baa <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8006b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b4e:	f200 8083 	bhi.w	8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d004      	beq.n	8006b62 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006b5e:	d012      	beq.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006b60:	e07a      	b.n	8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b62:	4b38      	ldr	r3, [pc, #224]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b6e:	d107      	bne.n	8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b74:	4618      	mov	r0, r3
 8006b76:	f000 fe0b 	bl	8007790 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b7e:	e340      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b80:	2300      	movs	r3, #0
 8006b82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b84:	e33d      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b86:	4b2f      	ldr	r3, [pc, #188]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b92:	d107      	bne.n	8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b94:	f107 0318 	add.w	r3, r7, #24
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f000 fb51 	bl	8007240 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ba2:	e32e      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ba8:	e32b      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006baa:	4b26      	ldr	r3, [pc, #152]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bb6:	d107      	bne.n	8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006bb8:	f107 030c 	add.w	r3, r7, #12
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f000 fc93 	bl	80074e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bc6:	e31c      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bcc:	e319      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006bce:	4b1d      	ldr	r3, [pc, #116]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bd2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006bd6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006bd8:	4b1a      	ldr	r3, [pc, #104]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 0304 	and.w	r3, r3, #4
 8006be0:	2b04      	cmp	r3, #4
 8006be2:	d10c      	bne.n	8006bfe <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d109      	bne.n	8006bfe <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006bea:	4b16      	ldr	r3, [pc, #88]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	08db      	lsrs	r3, r3, #3
 8006bf0:	f003 0303 	and.w	r3, r3, #3
 8006bf4:	4a14      	ldr	r2, [pc, #80]	; (8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8006bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bfc:	e01e      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006bfe:	4b11      	ldr	r3, [pc, #68]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c0a:	d106      	bne.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c12:	d102      	bne.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006c14:	4b0d      	ldr	r3, [pc, #52]	; (8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006c16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c18:	e010      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006c1a:	4b0a      	ldr	r3, [pc, #40]	; (8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c26:	d106      	bne.n	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8006c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c2e:	d102      	bne.n	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006c30:	4b07      	ldr	r3, [pc, #28]	; (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006c32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c34:	e002      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006c36:	2300      	movs	r3, #0
 8006c38:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006c3a:	e2e2      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006c3c:	e2e1      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006c3e:	4b05      	ldr	r3, [pc, #20]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006c40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c42:	e2de      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006c44:	58024400 	.word	0x58024400
 8006c48:	03d09000 	.word	0x03d09000
 8006c4c:	003d0900 	.word	0x003d0900
 8006c50:	017d7840 	.word	0x017d7840
 8006c54:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c5c:	e2d1      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006c5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c62:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8006c66:	430b      	orrs	r3, r1
 8006c68:	f040 809c 	bne.w	8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006c6c:	4b93      	ldr	r3, [pc, #588]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c70:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006c74:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c7c:	d054      	beq.n	8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c84:	f200 808b 	bhi.w	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c8a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c8e:	f000 8083 	beq.w	8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c94:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c98:	f200 8081 	bhi.w	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ca2:	d02f      	beq.n	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006caa:	d878      	bhi.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d004      	beq.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cb8:	d012      	beq.n	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006cba:	e070      	b.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006cbc:	4b7f      	ldr	r3, [pc, #508]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cc4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006cc8:	d107      	bne.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006cca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f000 fd5e 	bl	8007790 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cd8:	e293      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cde:	e290      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ce0:	4b76      	ldr	r3, [pc, #472]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ce8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cec:	d107      	bne.n	8006cfe <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cee:	f107 0318 	add.w	r3, r7, #24
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f000 faa4 	bl	8007240 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cfc:	e281      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d02:	e27e      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006d04:	4b6d      	ldr	r3, [pc, #436]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d10:	d107      	bne.n	8006d22 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d12:	f107 030c 	add.w	r3, r7, #12
 8006d16:	4618      	mov	r0, r3
 8006d18:	f000 fbe6 	bl	80074e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d20:	e26f      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d22:	2300      	movs	r3, #0
 8006d24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d26:	e26c      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006d28:	4b64      	ldr	r3, [pc, #400]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006d30:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006d32:	4b62      	ldr	r3, [pc, #392]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 0304 	and.w	r3, r3, #4
 8006d3a:	2b04      	cmp	r3, #4
 8006d3c:	d10c      	bne.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d109      	bne.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d44:	4b5d      	ldr	r3, [pc, #372]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	08db      	lsrs	r3, r3, #3
 8006d4a:	f003 0303 	and.w	r3, r3, #3
 8006d4e:	4a5c      	ldr	r2, [pc, #368]	; (8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006d50:	fa22 f303 	lsr.w	r3, r2, r3
 8006d54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d56:	e01e      	b.n	8006d96 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d58:	4b58      	ldr	r3, [pc, #352]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d64:	d106      	bne.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d6c:	d102      	bne.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006d6e:	4b55      	ldr	r3, [pc, #340]	; (8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006d70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d72:	e010      	b.n	8006d96 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d74:	4b51      	ldr	r3, [pc, #324]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d80:	d106      	bne.n	8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d88:	d102      	bne.n	8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006d8a:	4b4f      	ldr	r3, [pc, #316]	; (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d8e:	e002      	b.n	8006d96 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006d90:	2300      	movs	r3, #0
 8006d92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006d94:	e235      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006d96:	e234      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006d98:	4b4c      	ldr	r3, [pc, #304]	; (8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d9c:	e231      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006da2:	e22e      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006da4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006da8:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8006dac:	430b      	orrs	r3, r1
 8006dae:	f040 808f 	bne.w	8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006db2:	4b42      	ldr	r3, [pc, #264]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006db6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006dba:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8006dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dbe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006dc2:	d06b      	beq.n	8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006dca:	d874      	bhi.n	8006eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006dd2:	d056      	beq.n	8006e82 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006dda:	d86c      	bhi.n	8006eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dde:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006de2:	d03b      	beq.n	8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006dea:	d864      	bhi.n	8006eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006df2:	d021      	beq.n	8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dfa:	d85c      	bhi.n	8006eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d004      	beq.n	8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e08:	d004      	beq.n	8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006e0a:	e054      	b.n	8006eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006e0c:	f7fe fa4c 	bl	80052a8 <HAL_RCC_GetPCLK1Freq>
 8006e10:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006e12:	e1f6      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e14:	4b29      	ldr	r3, [pc, #164]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e20:	d107      	bne.n	8006e32 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e22:	f107 0318 	add.w	r3, r7, #24
 8006e26:	4618      	mov	r0, r3
 8006e28:	f000 fa0a 	bl	8007240 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e30:	e1e7      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e32:	2300      	movs	r3, #0
 8006e34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e36:	e1e4      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e38:	4b20      	ldr	r3, [pc, #128]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e44:	d107      	bne.n	8006e56 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e46:	f107 030c 	add.w	r3, r7, #12
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f000 fb4c 	bl	80074e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e54:	e1d5      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e56:	2300      	movs	r3, #0
 8006e58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e5a:	e1d2      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e5c:	4b17      	ldr	r3, [pc, #92]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 0304 	and.w	r3, r3, #4
 8006e64:	2b04      	cmp	r3, #4
 8006e66:	d109      	bne.n	8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e68:	4b14      	ldr	r3, [pc, #80]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	08db      	lsrs	r3, r3, #3
 8006e6e:	f003 0303 	and.w	r3, r3, #3
 8006e72:	4a13      	ldr	r2, [pc, #76]	; (8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006e74:	fa22 f303 	lsr.w	r3, r2, r3
 8006e78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e7a:	e1c2      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e80:	e1bf      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006e82:	4b0e      	ldr	r3, [pc, #56]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e8e:	d102      	bne.n	8006e96 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8006e90:	4b0c      	ldr	r3, [pc, #48]	; (8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006e92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e94:	e1b5      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e96:	2300      	movs	r3, #0
 8006e98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e9a:	e1b2      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006e9c:	4b07      	ldr	r3, [pc, #28]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ea4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ea8:	d102      	bne.n	8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8006eaa:	4b07      	ldr	r3, [pc, #28]	; (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006eac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006eae:	e1a8      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006eb4:	e1a5      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006eba:	e1a2      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006ebc:	58024400 	.word	0x58024400
 8006ec0:	03d09000 	.word	0x03d09000
 8006ec4:	003d0900 	.word	0x003d0900
 8006ec8:	017d7840 	.word	0x017d7840
 8006ecc:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006ed0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ed4:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8006ed8:	430b      	orrs	r3, r1
 8006eda:	d173      	bne.n	8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006edc:	4b9c      	ldr	r3, [pc, #624]	; (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ee0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006ee4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006eec:	d02f      	beq.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ef4:	d863      	bhi.n	8006fbe <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8006ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d004      	beq.n	8006f06 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f02:	d012      	beq.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006f04:	e05b      	b.n	8006fbe <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f06:	4b92      	ldr	r3, [pc, #584]	; (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f12:	d107      	bne.n	8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f14:	f107 0318 	add.w	r3, r7, #24
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f000 f991 	bl	8007240 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f22:	e16e      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f24:	2300      	movs	r3, #0
 8006f26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f28:	e16b      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f2a:	4b89      	ldr	r3, [pc, #548]	; (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f36:	d107      	bne.n	8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f38:	f107 030c 	add.w	r3, r7, #12
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f000 fad3 	bl	80074e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f46:	e15c      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f4c:	e159      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006f4e:	4b80      	ldr	r3, [pc, #512]	; (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006f56:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006f58:	4b7d      	ldr	r3, [pc, #500]	; (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 0304 	and.w	r3, r3, #4
 8006f60:	2b04      	cmp	r3, #4
 8006f62:	d10c      	bne.n	8006f7e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d109      	bne.n	8006f7e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f6a:	4b79      	ldr	r3, [pc, #484]	; (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	08db      	lsrs	r3, r3, #3
 8006f70:	f003 0303 	and.w	r3, r3, #3
 8006f74:	4a77      	ldr	r2, [pc, #476]	; (8007154 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006f76:	fa22 f303 	lsr.w	r3, r2, r3
 8006f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f7c:	e01e      	b.n	8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006f7e:	4b74      	ldr	r3, [pc, #464]	; (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f8a:	d106      	bne.n	8006f9a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8006f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f92:	d102      	bne.n	8006f9a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006f94:	4b70      	ldr	r3, [pc, #448]	; (8007158 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006f96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f98:	e010      	b.n	8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006f9a:	4b6d      	ldr	r3, [pc, #436]	; (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fa2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fa6:	d106      	bne.n	8006fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8006fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006faa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fae:	d102      	bne.n	8006fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006fb0:	4b6a      	ldr	r3, [pc, #424]	; (800715c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fb4:	e002      	b.n	8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006fba:	e122      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006fbc:	e121      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fc2:	e11e      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006fc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fc8:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8006fcc:	430b      	orrs	r3, r1
 8006fce:	d133      	bne.n	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006fd0:	4b5f      	ldr	r3, [pc, #380]	; (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fd8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d004      	beq.n	8006fea <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fe6:	d012      	beq.n	800700e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8006fe8:	e023      	b.n	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006fea:	4b59      	ldr	r3, [pc, #356]	; (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ff2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ff6:	d107      	bne.n	8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ff8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f000 fbc7 	bl	8007790 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007004:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007006:	e0fc      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007008:	2300      	movs	r3, #0
 800700a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800700c:	e0f9      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800700e:	4b50      	ldr	r3, [pc, #320]	; (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007016:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800701a:	d107      	bne.n	800702c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800701c:	f107 0318 	add.w	r3, r7, #24
 8007020:	4618      	mov	r0, r3
 8007022:	f000 f90d 	bl	8007240 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007026:	6a3b      	ldr	r3, [r7, #32]
 8007028:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800702a:	e0ea      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800702c:	2300      	movs	r3, #0
 800702e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007030:	e0e7      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007032:	2300      	movs	r3, #0
 8007034:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007036:	e0e4      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007038:	e9d7 2300 	ldrd	r2, r3, [r7]
 800703c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8007040:	430b      	orrs	r3, r1
 8007042:	f040 808d 	bne.w	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007046:	4b42      	ldr	r3, [pc, #264]	; (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800704a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800704e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007052:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007056:	d06b      	beq.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8007058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800705a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800705e:	d874      	bhi.n	800714a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007066:	d056      	beq.n	8007116 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800706e:	d86c      	bhi.n	800714a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007072:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007076:	d03b      	beq.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8007078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800707a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800707e:	d864      	bhi.n	800714a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007082:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007086:	d021      	beq.n	80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800708a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800708e:	d85c      	bhi.n	800714a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8007090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007092:	2b00      	cmp	r3, #0
 8007094:	d004      	beq.n	80070a0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8007096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007098:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800709c:	d004      	beq.n	80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800709e:	e054      	b.n	800714a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80070a0:	f000 f8b8 	bl	8007214 <HAL_RCCEx_GetD3PCLK1Freq>
 80070a4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80070a6:	e0ac      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070a8:	4b29      	ldr	r3, [pc, #164]	; (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070b4:	d107      	bne.n	80070c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070b6:	f107 0318 	add.w	r3, r7, #24
 80070ba:	4618      	mov	r0, r3
 80070bc:	f000 f8c0 	bl	8007240 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070c4:	e09d      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070c6:	2300      	movs	r3, #0
 80070c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070ca:	e09a      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80070cc:	4b20      	ldr	r3, [pc, #128]	; (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070d8:	d107      	bne.n	80070ea <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070da:	f107 030c 	add.w	r3, r7, #12
 80070de:	4618      	mov	r0, r3
 80070e0:	f000 fa02 	bl	80074e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070e8:	e08b      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070ea:	2300      	movs	r3, #0
 80070ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070ee:	e088      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80070f0:	4b17      	ldr	r3, [pc, #92]	; (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 0304 	and.w	r3, r3, #4
 80070f8:	2b04      	cmp	r3, #4
 80070fa:	d109      	bne.n	8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80070fc:	4b14      	ldr	r3, [pc, #80]	; (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	08db      	lsrs	r3, r3, #3
 8007102:	f003 0303 	and.w	r3, r3, #3
 8007106:	4a13      	ldr	r2, [pc, #76]	; (8007154 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8007108:	fa22 f303 	lsr.w	r3, r2, r3
 800710c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800710e:	e078      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007110:	2300      	movs	r3, #0
 8007112:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007114:	e075      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007116:	4b0e      	ldr	r3, [pc, #56]	; (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800711e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007122:	d102      	bne.n	800712a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007124:	4b0c      	ldr	r3, [pc, #48]	; (8007158 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8007126:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007128:	e06b      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800712a:	2300      	movs	r3, #0
 800712c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800712e:	e068      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007130:	4b07      	ldr	r3, [pc, #28]	; (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007138:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800713c:	d102      	bne.n	8007144 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800713e:	4b07      	ldr	r3, [pc, #28]	; (800715c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007140:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007142:	e05e      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007144:	2300      	movs	r3, #0
 8007146:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007148:	e05b      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800714a:	2300      	movs	r3, #0
 800714c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800714e:	e058      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007150:	58024400 	.word	0x58024400
 8007154:	03d09000 	.word	0x03d09000
 8007158:	003d0900 	.word	0x003d0900
 800715c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007160:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007164:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8007168:	430b      	orrs	r3, r1
 800716a:	d148      	bne.n	80071fe <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800716c:	4b27      	ldr	r3, [pc, #156]	; (800720c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800716e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007170:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007174:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007178:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800717c:	d02a      	beq.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800717e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007180:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007184:	d838      	bhi.n	80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8007186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007188:	2b00      	cmp	r3, #0
 800718a:	d004      	beq.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800718c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007192:	d00d      	beq.n	80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8007194:	e030      	b.n	80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007196:	4b1d      	ldr	r3, [pc, #116]	; (800720c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800719e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071a2:	d102      	bne.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80071a4:	4b1a      	ldr	r3, [pc, #104]	; (8007210 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80071a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071a8:	e02b      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071aa:	2300      	movs	r3, #0
 80071ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071ae:	e028      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80071b0:	4b16      	ldr	r3, [pc, #88]	; (800720c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071bc:	d107      	bne.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80071be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071c2:	4618      	mov	r0, r3
 80071c4:	f000 fae4 	bl	8007790 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80071c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071cc:	e019      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071ce:	2300      	movs	r3, #0
 80071d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071d2:	e016      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80071d4:	4b0d      	ldr	r3, [pc, #52]	; (800720c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071e0:	d107      	bne.n	80071f2 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071e2:	f107 0318 	add.w	r3, r7, #24
 80071e6:	4618      	mov	r0, r3
 80071e8:	f000 f82a 	bl	8007240 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80071ec:	69fb      	ldr	r3, [r7, #28]
 80071ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071f0:	e007      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071f2:	2300      	movs	r3, #0
 80071f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071f6:	e004      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80071f8:	2300      	movs	r3, #0
 80071fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071fc:	e001      	b.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80071fe:	2300      	movs	r3, #0
 8007200:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8007202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007204:	4618      	mov	r0, r3
 8007206:	3740      	adds	r7, #64	; 0x40
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}
 800720c:	58024400 	.word	0x58024400
 8007210:	017d7840 	.word	0x017d7840

08007214 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007218:	f7fe f816 	bl	8005248 <HAL_RCC_GetHCLKFreq>
 800721c:	4602      	mov	r2, r0
 800721e:	4b06      	ldr	r3, [pc, #24]	; (8007238 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007220:	6a1b      	ldr	r3, [r3, #32]
 8007222:	091b      	lsrs	r3, r3, #4
 8007224:	f003 0307 	and.w	r3, r3, #7
 8007228:	4904      	ldr	r1, [pc, #16]	; (800723c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800722a:	5ccb      	ldrb	r3, [r1, r3]
 800722c:	f003 031f 	and.w	r3, r3, #31
 8007230:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007234:	4618      	mov	r0, r3
 8007236:	bd80      	pop	{r7, pc}
 8007238:	58024400 	.word	0x58024400
 800723c:	0800c67c 	.word	0x0800c67c

08007240 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007240:	b480      	push	{r7}
 8007242:	b089      	sub	sp, #36	; 0x24
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007248:	4ba1      	ldr	r3, [pc, #644]	; (80074d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800724a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800724c:	f003 0303 	and.w	r3, r3, #3
 8007250:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007252:	4b9f      	ldr	r3, [pc, #636]	; (80074d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007256:	0b1b      	lsrs	r3, r3, #12
 8007258:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800725c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800725e:	4b9c      	ldr	r3, [pc, #624]	; (80074d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007262:	091b      	lsrs	r3, r3, #4
 8007264:	f003 0301 	and.w	r3, r3, #1
 8007268:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800726a:	4b99      	ldr	r3, [pc, #612]	; (80074d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800726c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800726e:	08db      	lsrs	r3, r3, #3
 8007270:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007274:	693a      	ldr	r2, [r7, #16]
 8007276:	fb02 f303 	mul.w	r3, r2, r3
 800727a:	ee07 3a90 	vmov	s15, r3
 800727e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007282:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	2b00      	cmp	r3, #0
 800728a:	f000 8111 	beq.w	80074b0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	2b02      	cmp	r3, #2
 8007292:	f000 8083 	beq.w	800739c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	2b02      	cmp	r3, #2
 800729a:	f200 80a1 	bhi.w	80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d003      	beq.n	80072ac <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d056      	beq.n	8007358 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80072aa:	e099      	b.n	80073e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072ac:	4b88      	ldr	r3, [pc, #544]	; (80074d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f003 0320 	and.w	r3, r3, #32
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d02d      	beq.n	8007314 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80072b8:	4b85      	ldr	r3, [pc, #532]	; (80074d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	08db      	lsrs	r3, r3, #3
 80072be:	f003 0303 	and.w	r3, r3, #3
 80072c2:	4a84      	ldr	r2, [pc, #528]	; (80074d4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80072c4:	fa22 f303 	lsr.w	r3, r2, r3
 80072c8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	ee07 3a90 	vmov	s15, r3
 80072d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	ee07 3a90 	vmov	s15, r3
 80072da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072e2:	4b7b      	ldr	r3, [pc, #492]	; (80074d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ea:	ee07 3a90 	vmov	s15, r3
 80072ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80072f6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80074d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007302:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007306:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800730a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800730e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007312:	e087      	b.n	8007424 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	ee07 3a90 	vmov	s15, r3
 800731a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800731e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80074dc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007322:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007326:	4b6a      	ldr	r3, [pc, #424]	; (80074d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800732a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800732e:	ee07 3a90 	vmov	s15, r3
 8007332:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007336:	ed97 6a03 	vldr	s12, [r7, #12]
 800733a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80074d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800733e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007342:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007346:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800734a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800734e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007352:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007356:	e065      	b.n	8007424 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	ee07 3a90 	vmov	s15, r3
 800735e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007362:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80074e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007366:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800736a:	4b59      	ldr	r3, [pc, #356]	; (80074d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800736c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800736e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007372:	ee07 3a90 	vmov	s15, r3
 8007376:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800737a:	ed97 6a03 	vldr	s12, [r7, #12]
 800737e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80074d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007382:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007386:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800738a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800738e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007396:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800739a:	e043      	b.n	8007424 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	ee07 3a90 	vmov	s15, r3
 80073a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073a6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80074e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80073aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073ae:	4b48      	ldr	r3, [pc, #288]	; (80074d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073b6:	ee07 3a90 	vmov	s15, r3
 80073ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073be:	ed97 6a03 	vldr	s12, [r7, #12]
 80073c2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80074d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80073c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073de:	e021      	b.n	8007424 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	ee07 3a90 	vmov	s15, r3
 80073e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80074e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80073ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073f2:	4b37      	ldr	r3, [pc, #220]	; (80074d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073fa:	ee07 3a90 	vmov	s15, r3
 80073fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007402:	ed97 6a03 	vldr	s12, [r7, #12]
 8007406:	eddf 5a34 	vldr	s11, [pc, #208]	; 80074d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800740a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800740e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007412:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007416:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800741a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800741e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007422:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007424:	4b2a      	ldr	r3, [pc, #168]	; (80074d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007428:	0a5b      	lsrs	r3, r3, #9
 800742a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800742e:	ee07 3a90 	vmov	s15, r3
 8007432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007436:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800743a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800743e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007442:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007446:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800744a:	ee17 2a90 	vmov	r2, s15
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007452:	4b1f      	ldr	r3, [pc, #124]	; (80074d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007456:	0c1b      	lsrs	r3, r3, #16
 8007458:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800745c:	ee07 3a90 	vmov	s15, r3
 8007460:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007464:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007468:	ee37 7a87 	vadd.f32	s14, s15, s14
 800746c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007470:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007474:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007478:	ee17 2a90 	vmov	r2, s15
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007480:	4b13      	ldr	r3, [pc, #76]	; (80074d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007484:	0e1b      	lsrs	r3, r3, #24
 8007486:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800748a:	ee07 3a90 	vmov	s15, r3
 800748e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007492:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007496:	ee37 7a87 	vadd.f32	s14, s15, s14
 800749a:	edd7 6a07 	vldr	s13, [r7, #28]
 800749e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074a6:	ee17 2a90 	vmov	r2, s15
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80074ae:	e008      	b.n	80074c2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	609a      	str	r2, [r3, #8]
}
 80074c2:	bf00      	nop
 80074c4:	3724      	adds	r7, #36	; 0x24
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr
 80074ce:	bf00      	nop
 80074d0:	58024400 	.word	0x58024400
 80074d4:	03d09000 	.word	0x03d09000
 80074d8:	46000000 	.word	0x46000000
 80074dc:	4c742400 	.word	0x4c742400
 80074e0:	4a742400 	.word	0x4a742400
 80074e4:	4bbebc20 	.word	0x4bbebc20

080074e8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b089      	sub	sp, #36	; 0x24
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80074f0:	4ba1      	ldr	r3, [pc, #644]	; (8007778 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f4:	f003 0303 	and.w	r3, r3, #3
 80074f8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80074fa:	4b9f      	ldr	r3, [pc, #636]	; (8007778 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074fe:	0d1b      	lsrs	r3, r3, #20
 8007500:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007504:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007506:	4b9c      	ldr	r3, [pc, #624]	; (8007778 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750a:	0a1b      	lsrs	r3, r3, #8
 800750c:	f003 0301 	and.w	r3, r3, #1
 8007510:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007512:	4b99      	ldr	r3, [pc, #612]	; (8007778 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007516:	08db      	lsrs	r3, r3, #3
 8007518:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800751c:	693a      	ldr	r2, [r7, #16]
 800751e:	fb02 f303 	mul.w	r3, r2, r3
 8007522:	ee07 3a90 	vmov	s15, r3
 8007526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800752a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	2b00      	cmp	r3, #0
 8007532:	f000 8111 	beq.w	8007758 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007536:	69bb      	ldr	r3, [r7, #24]
 8007538:	2b02      	cmp	r3, #2
 800753a:	f000 8083 	beq.w	8007644 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	2b02      	cmp	r3, #2
 8007542:	f200 80a1 	bhi.w	8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d003      	beq.n	8007554 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	2b01      	cmp	r3, #1
 8007550:	d056      	beq.n	8007600 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007552:	e099      	b.n	8007688 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007554:	4b88      	ldr	r3, [pc, #544]	; (8007778 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f003 0320 	and.w	r3, r3, #32
 800755c:	2b00      	cmp	r3, #0
 800755e:	d02d      	beq.n	80075bc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007560:	4b85      	ldr	r3, [pc, #532]	; (8007778 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	08db      	lsrs	r3, r3, #3
 8007566:	f003 0303 	and.w	r3, r3, #3
 800756a:	4a84      	ldr	r2, [pc, #528]	; (800777c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800756c:	fa22 f303 	lsr.w	r3, r2, r3
 8007570:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	ee07 3a90 	vmov	s15, r3
 8007578:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	ee07 3a90 	vmov	s15, r3
 8007582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800758a:	4b7b      	ldr	r3, [pc, #492]	; (8007778 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800758c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007592:	ee07 3a90 	vmov	s15, r3
 8007596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800759a:	ed97 6a03 	vldr	s12, [r7, #12]
 800759e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007780 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075b6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80075ba:	e087      	b.n	80076cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	ee07 3a90 	vmov	s15, r3
 80075c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075c6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007784 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80075ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075ce:	4b6a      	ldr	r3, [pc, #424]	; (8007778 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075d6:	ee07 3a90 	vmov	s15, r3
 80075da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075de:	ed97 6a03 	vldr	s12, [r7, #12]
 80075e2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007780 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075fe:	e065      	b.n	80076cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	ee07 3a90 	vmov	s15, r3
 8007606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800760a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007788 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800760e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007612:	4b59      	ldr	r3, [pc, #356]	; (8007778 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800761a:	ee07 3a90 	vmov	s15, r3
 800761e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007622:	ed97 6a03 	vldr	s12, [r7, #12]
 8007626:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007780 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800762a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800762e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007632:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800763a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800763e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007642:	e043      	b.n	80076cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	ee07 3a90 	vmov	s15, r3
 800764a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800764e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800778c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007656:	4b48      	ldr	r3, [pc, #288]	; (8007778 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800765e:	ee07 3a90 	vmov	s15, r3
 8007662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007666:	ed97 6a03 	vldr	s12, [r7, #12]
 800766a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007780 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800766e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007676:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800767a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800767e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007682:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007686:	e021      	b.n	80076cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	ee07 3a90 	vmov	s15, r3
 800768e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007692:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007788 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800769a:	4b37      	ldr	r3, [pc, #220]	; (8007778 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800769c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800769e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076a2:	ee07 3a90 	vmov	s15, r3
 80076a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80076ae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007780 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80076b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076ca:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80076cc:	4b2a      	ldr	r3, [pc, #168]	; (8007778 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d0:	0a5b      	lsrs	r3, r3, #9
 80076d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076d6:	ee07 3a90 	vmov	s15, r3
 80076da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80076ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076f2:	ee17 2a90 	vmov	r2, s15
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80076fa:	4b1f      	ldr	r3, [pc, #124]	; (8007778 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076fe:	0c1b      	lsrs	r3, r3, #16
 8007700:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007704:	ee07 3a90 	vmov	s15, r3
 8007708:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800770c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007710:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007714:	edd7 6a07 	vldr	s13, [r7, #28]
 8007718:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800771c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007720:	ee17 2a90 	vmov	r2, s15
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007728:	4b13      	ldr	r3, [pc, #76]	; (8007778 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800772a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772c:	0e1b      	lsrs	r3, r3, #24
 800772e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007732:	ee07 3a90 	vmov	s15, r3
 8007736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800773a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800773e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007742:	edd7 6a07 	vldr	s13, [r7, #28]
 8007746:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800774a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800774e:	ee17 2a90 	vmov	r2, s15
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007756:	e008      	b.n	800776a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	609a      	str	r2, [r3, #8]
}
 800776a:	bf00      	nop
 800776c:	3724      	adds	r7, #36	; 0x24
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr
 8007776:	bf00      	nop
 8007778:	58024400 	.word	0x58024400
 800777c:	03d09000 	.word	0x03d09000
 8007780:	46000000 	.word	0x46000000
 8007784:	4c742400 	.word	0x4c742400
 8007788:	4a742400 	.word	0x4a742400
 800778c:	4bbebc20 	.word	0x4bbebc20

08007790 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007790:	b480      	push	{r7}
 8007792:	b089      	sub	sp, #36	; 0x24
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007798:	4ba0      	ldr	r3, [pc, #640]	; (8007a1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800779a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800779c:	f003 0303 	and.w	r3, r3, #3
 80077a0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80077a2:	4b9e      	ldr	r3, [pc, #632]	; (8007a1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a6:	091b      	lsrs	r3, r3, #4
 80077a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077ac:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80077ae:	4b9b      	ldr	r3, [pc, #620]	; (8007a1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b2:	f003 0301 	and.w	r3, r3, #1
 80077b6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80077b8:	4b98      	ldr	r3, [pc, #608]	; (8007a1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077bc:	08db      	lsrs	r3, r3, #3
 80077be:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077c2:	693a      	ldr	r2, [r7, #16]
 80077c4:	fb02 f303 	mul.w	r3, r2, r3
 80077c8:	ee07 3a90 	vmov	s15, r3
 80077cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077d0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	f000 8111 	beq.w	80079fe <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	2b02      	cmp	r3, #2
 80077e0:	f000 8083 	beq.w	80078ea <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80077e4:	69bb      	ldr	r3, [r7, #24]
 80077e6:	2b02      	cmp	r3, #2
 80077e8:	f200 80a1 	bhi.w	800792e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80077ec:	69bb      	ldr	r3, [r7, #24]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d003      	beq.n	80077fa <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d056      	beq.n	80078a6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80077f8:	e099      	b.n	800792e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077fa:	4b88      	ldr	r3, [pc, #544]	; (8007a1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 0320 	and.w	r3, r3, #32
 8007802:	2b00      	cmp	r3, #0
 8007804:	d02d      	beq.n	8007862 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007806:	4b85      	ldr	r3, [pc, #532]	; (8007a1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	08db      	lsrs	r3, r3, #3
 800780c:	f003 0303 	and.w	r3, r3, #3
 8007810:	4a83      	ldr	r2, [pc, #524]	; (8007a20 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007812:	fa22 f303 	lsr.w	r3, r2, r3
 8007816:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	ee07 3a90 	vmov	s15, r3
 800781e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	ee07 3a90 	vmov	s15, r3
 8007828:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800782c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007830:	4b7a      	ldr	r3, [pc, #488]	; (8007a1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007834:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007838:	ee07 3a90 	vmov	s15, r3
 800783c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007840:	ed97 6a03 	vldr	s12, [r7, #12]
 8007844:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007a24 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007848:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800784c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007850:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007854:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007858:	ee67 7a27 	vmul.f32	s15, s14, s15
 800785c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007860:	e087      	b.n	8007972 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	ee07 3a90 	vmov	s15, r3
 8007868:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800786c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007a28 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007870:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007874:	4b69      	ldr	r3, [pc, #420]	; (8007a1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007878:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800787c:	ee07 3a90 	vmov	s15, r3
 8007880:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007884:	ed97 6a03 	vldr	s12, [r7, #12]
 8007888:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007a24 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800788c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007890:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007894:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007898:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800789c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078a4:	e065      	b.n	8007972 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	ee07 3a90 	vmov	s15, r3
 80078ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078b0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007a2c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80078b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078b8:	4b58      	ldr	r3, [pc, #352]	; (8007a1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078c0:	ee07 3a90 	vmov	s15, r3
 80078c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80078cc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007a24 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80078d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078e8:	e043      	b.n	8007972 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	ee07 3a90 	vmov	s15, r3
 80078f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078f4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007a30 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80078f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078fc:	4b47      	ldr	r3, [pc, #284]	; (8007a1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80078fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007900:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007904:	ee07 3a90 	vmov	s15, r3
 8007908:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800790c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007910:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007a24 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007914:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007918:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800791c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007920:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007924:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007928:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800792c:	e021      	b.n	8007972 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	ee07 3a90 	vmov	s15, r3
 8007934:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007938:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007a28 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800793c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007940:	4b36      	ldr	r3, [pc, #216]	; (8007a1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007944:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007948:	ee07 3a90 	vmov	s15, r3
 800794c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007950:	ed97 6a03 	vldr	s12, [r7, #12]
 8007954:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007a24 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007958:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800795c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007960:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007964:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007968:	ee67 7a27 	vmul.f32	s15, s14, s15
 800796c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007970:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007972:	4b2a      	ldr	r3, [pc, #168]	; (8007a1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007976:	0a5b      	lsrs	r3, r3, #9
 8007978:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800797c:	ee07 3a90 	vmov	s15, r3
 8007980:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007984:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007988:	ee37 7a87 	vadd.f32	s14, s15, s14
 800798c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007990:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007994:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007998:	ee17 2a90 	vmov	r2, s15
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80079a0:	4b1e      	ldr	r3, [pc, #120]	; (8007a1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079a4:	0c1b      	lsrs	r3, r3, #16
 80079a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079aa:	ee07 3a90 	vmov	s15, r3
 80079ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80079be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079c6:	ee17 2a90 	vmov	r2, s15
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80079ce:	4b13      	ldr	r3, [pc, #76]	; (8007a1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80079d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d2:	0e1b      	lsrs	r3, r3, #24
 80079d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079d8:	ee07 3a90 	vmov	s15, r3
 80079dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80079ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079f4:	ee17 2a90 	vmov	r2, s15
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80079fc:	e008      	b.n	8007a10 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	609a      	str	r2, [r3, #8]
}
 8007a10:	bf00      	nop
 8007a12:	3724      	adds	r7, #36	; 0x24
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr
 8007a1c:	58024400 	.word	0x58024400
 8007a20:	03d09000 	.word	0x03d09000
 8007a24:	46000000 	.word	0x46000000
 8007a28:	4c742400 	.word	0x4c742400
 8007a2c:	4a742400 	.word	0x4a742400
 8007a30:	4bbebc20 	.word	0x4bbebc20

08007a34 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007a42:	4b53      	ldr	r3, [pc, #332]	; (8007b90 <RCCEx_PLL2_Config+0x15c>)
 8007a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a46:	f003 0303 	and.w	r3, r3, #3
 8007a4a:	2b03      	cmp	r3, #3
 8007a4c:	d101      	bne.n	8007a52 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e099      	b.n	8007b86 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007a52:	4b4f      	ldr	r3, [pc, #316]	; (8007b90 <RCCEx_PLL2_Config+0x15c>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a4e      	ldr	r2, [pc, #312]	; (8007b90 <RCCEx_PLL2_Config+0x15c>)
 8007a58:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007a5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a5e:	f7fa fd01 	bl	8002464 <HAL_GetTick>
 8007a62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007a64:	e008      	b.n	8007a78 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007a66:	f7fa fcfd 	bl	8002464 <HAL_GetTick>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	1ad3      	subs	r3, r2, r3
 8007a70:	2b02      	cmp	r3, #2
 8007a72:	d901      	bls.n	8007a78 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007a74:	2303      	movs	r3, #3
 8007a76:	e086      	b.n	8007b86 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007a78:	4b45      	ldr	r3, [pc, #276]	; (8007b90 <RCCEx_PLL2_Config+0x15c>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d1f0      	bne.n	8007a66 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007a84:	4b42      	ldr	r3, [pc, #264]	; (8007b90 <RCCEx_PLL2_Config+0x15c>)
 8007a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a88:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	031b      	lsls	r3, r3, #12
 8007a92:	493f      	ldr	r1, [pc, #252]	; (8007b90 <RCCEx_PLL2_Config+0x15c>)
 8007a94:	4313      	orrs	r3, r2
 8007a96:	628b      	str	r3, [r1, #40]	; 0x28
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	3b01      	subs	r3, #1
 8007a9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	3b01      	subs	r3, #1
 8007aa8:	025b      	lsls	r3, r3, #9
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	431a      	orrs	r2, r3
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	041b      	lsls	r3, r3, #16
 8007ab6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007aba:	431a      	orrs	r2, r3
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	691b      	ldr	r3, [r3, #16]
 8007ac0:	3b01      	subs	r3, #1
 8007ac2:	061b      	lsls	r3, r3, #24
 8007ac4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007ac8:	4931      	ldr	r1, [pc, #196]	; (8007b90 <RCCEx_PLL2_Config+0x15c>)
 8007aca:	4313      	orrs	r3, r2
 8007acc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007ace:	4b30      	ldr	r3, [pc, #192]	; (8007b90 <RCCEx_PLL2_Config+0x15c>)
 8007ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	695b      	ldr	r3, [r3, #20]
 8007ada:	492d      	ldr	r1, [pc, #180]	; (8007b90 <RCCEx_PLL2_Config+0x15c>)
 8007adc:	4313      	orrs	r3, r2
 8007ade:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007ae0:	4b2b      	ldr	r3, [pc, #172]	; (8007b90 <RCCEx_PLL2_Config+0x15c>)
 8007ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae4:	f023 0220 	bic.w	r2, r3, #32
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	699b      	ldr	r3, [r3, #24]
 8007aec:	4928      	ldr	r1, [pc, #160]	; (8007b90 <RCCEx_PLL2_Config+0x15c>)
 8007aee:	4313      	orrs	r3, r2
 8007af0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007af2:	4b27      	ldr	r3, [pc, #156]	; (8007b90 <RCCEx_PLL2_Config+0x15c>)
 8007af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af6:	4a26      	ldr	r2, [pc, #152]	; (8007b90 <RCCEx_PLL2_Config+0x15c>)
 8007af8:	f023 0310 	bic.w	r3, r3, #16
 8007afc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007afe:	4b24      	ldr	r3, [pc, #144]	; (8007b90 <RCCEx_PLL2_Config+0x15c>)
 8007b00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b02:	4b24      	ldr	r3, [pc, #144]	; (8007b94 <RCCEx_PLL2_Config+0x160>)
 8007b04:	4013      	ands	r3, r2
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	69d2      	ldr	r2, [r2, #28]
 8007b0a:	00d2      	lsls	r2, r2, #3
 8007b0c:	4920      	ldr	r1, [pc, #128]	; (8007b90 <RCCEx_PLL2_Config+0x15c>)
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007b12:	4b1f      	ldr	r3, [pc, #124]	; (8007b90 <RCCEx_PLL2_Config+0x15c>)
 8007b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b16:	4a1e      	ldr	r2, [pc, #120]	; (8007b90 <RCCEx_PLL2_Config+0x15c>)
 8007b18:	f043 0310 	orr.w	r3, r3, #16
 8007b1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d106      	bne.n	8007b32 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007b24:	4b1a      	ldr	r3, [pc, #104]	; (8007b90 <RCCEx_PLL2_Config+0x15c>)
 8007b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b28:	4a19      	ldr	r2, [pc, #100]	; (8007b90 <RCCEx_PLL2_Config+0x15c>)
 8007b2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b30:	e00f      	b.n	8007b52 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d106      	bne.n	8007b46 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007b38:	4b15      	ldr	r3, [pc, #84]	; (8007b90 <RCCEx_PLL2_Config+0x15c>)
 8007b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b3c:	4a14      	ldr	r2, [pc, #80]	; (8007b90 <RCCEx_PLL2_Config+0x15c>)
 8007b3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b44:	e005      	b.n	8007b52 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007b46:	4b12      	ldr	r3, [pc, #72]	; (8007b90 <RCCEx_PLL2_Config+0x15c>)
 8007b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b4a:	4a11      	ldr	r2, [pc, #68]	; (8007b90 <RCCEx_PLL2_Config+0x15c>)
 8007b4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007b50:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007b52:	4b0f      	ldr	r3, [pc, #60]	; (8007b90 <RCCEx_PLL2_Config+0x15c>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a0e      	ldr	r2, [pc, #56]	; (8007b90 <RCCEx_PLL2_Config+0x15c>)
 8007b58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007b5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b5e:	f7fa fc81 	bl	8002464 <HAL_GetTick>
 8007b62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007b64:	e008      	b.n	8007b78 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007b66:	f7fa fc7d 	bl	8002464 <HAL_GetTick>
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	1ad3      	subs	r3, r2, r3
 8007b70:	2b02      	cmp	r3, #2
 8007b72:	d901      	bls.n	8007b78 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007b74:	2303      	movs	r3, #3
 8007b76:	e006      	b.n	8007b86 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007b78:	4b05      	ldr	r3, [pc, #20]	; (8007b90 <RCCEx_PLL2_Config+0x15c>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d0f0      	beq.n	8007b66 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3710      	adds	r7, #16
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	58024400 	.word	0x58024400
 8007b94:	ffff0007 	.word	0xffff0007

08007b98 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007ba6:	4b53      	ldr	r3, [pc, #332]	; (8007cf4 <RCCEx_PLL3_Config+0x15c>)
 8007ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007baa:	f003 0303 	and.w	r3, r3, #3
 8007bae:	2b03      	cmp	r3, #3
 8007bb0:	d101      	bne.n	8007bb6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	e099      	b.n	8007cea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007bb6:	4b4f      	ldr	r3, [pc, #316]	; (8007cf4 <RCCEx_PLL3_Config+0x15c>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a4e      	ldr	r2, [pc, #312]	; (8007cf4 <RCCEx_PLL3_Config+0x15c>)
 8007bbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007bc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bc2:	f7fa fc4f 	bl	8002464 <HAL_GetTick>
 8007bc6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007bc8:	e008      	b.n	8007bdc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007bca:	f7fa fc4b 	bl	8002464 <HAL_GetTick>
 8007bce:	4602      	mov	r2, r0
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	1ad3      	subs	r3, r2, r3
 8007bd4:	2b02      	cmp	r3, #2
 8007bd6:	d901      	bls.n	8007bdc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007bd8:	2303      	movs	r3, #3
 8007bda:	e086      	b.n	8007cea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007bdc:	4b45      	ldr	r3, [pc, #276]	; (8007cf4 <RCCEx_PLL3_Config+0x15c>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d1f0      	bne.n	8007bca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007be8:	4b42      	ldr	r3, [pc, #264]	; (8007cf4 <RCCEx_PLL3_Config+0x15c>)
 8007bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bec:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	051b      	lsls	r3, r3, #20
 8007bf6:	493f      	ldr	r1, [pc, #252]	; (8007cf4 <RCCEx_PLL3_Config+0x15c>)
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	628b      	str	r3, [r1, #40]	; 0x28
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	3b01      	subs	r3, #1
 8007c02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	3b01      	subs	r3, #1
 8007c0c:	025b      	lsls	r3, r3, #9
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	431a      	orrs	r2, r3
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	3b01      	subs	r3, #1
 8007c18:	041b      	lsls	r3, r3, #16
 8007c1a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007c1e:	431a      	orrs	r2, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	691b      	ldr	r3, [r3, #16]
 8007c24:	3b01      	subs	r3, #1
 8007c26:	061b      	lsls	r3, r3, #24
 8007c28:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007c2c:	4931      	ldr	r1, [pc, #196]	; (8007cf4 <RCCEx_PLL3_Config+0x15c>)
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007c32:	4b30      	ldr	r3, [pc, #192]	; (8007cf4 <RCCEx_PLL3_Config+0x15c>)
 8007c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c36:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	695b      	ldr	r3, [r3, #20]
 8007c3e:	492d      	ldr	r1, [pc, #180]	; (8007cf4 <RCCEx_PLL3_Config+0x15c>)
 8007c40:	4313      	orrs	r3, r2
 8007c42:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007c44:	4b2b      	ldr	r3, [pc, #172]	; (8007cf4 <RCCEx_PLL3_Config+0x15c>)
 8007c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c48:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	699b      	ldr	r3, [r3, #24]
 8007c50:	4928      	ldr	r1, [pc, #160]	; (8007cf4 <RCCEx_PLL3_Config+0x15c>)
 8007c52:	4313      	orrs	r3, r2
 8007c54:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007c56:	4b27      	ldr	r3, [pc, #156]	; (8007cf4 <RCCEx_PLL3_Config+0x15c>)
 8007c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c5a:	4a26      	ldr	r2, [pc, #152]	; (8007cf4 <RCCEx_PLL3_Config+0x15c>)
 8007c5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007c62:	4b24      	ldr	r3, [pc, #144]	; (8007cf4 <RCCEx_PLL3_Config+0x15c>)
 8007c64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c66:	4b24      	ldr	r3, [pc, #144]	; (8007cf8 <RCCEx_PLL3_Config+0x160>)
 8007c68:	4013      	ands	r3, r2
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	69d2      	ldr	r2, [r2, #28]
 8007c6e:	00d2      	lsls	r2, r2, #3
 8007c70:	4920      	ldr	r1, [pc, #128]	; (8007cf4 <RCCEx_PLL3_Config+0x15c>)
 8007c72:	4313      	orrs	r3, r2
 8007c74:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007c76:	4b1f      	ldr	r3, [pc, #124]	; (8007cf4 <RCCEx_PLL3_Config+0x15c>)
 8007c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c7a:	4a1e      	ldr	r2, [pc, #120]	; (8007cf4 <RCCEx_PLL3_Config+0x15c>)
 8007c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d106      	bne.n	8007c96 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007c88:	4b1a      	ldr	r3, [pc, #104]	; (8007cf4 <RCCEx_PLL3_Config+0x15c>)
 8007c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c8c:	4a19      	ldr	r2, [pc, #100]	; (8007cf4 <RCCEx_PLL3_Config+0x15c>)
 8007c8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007c92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007c94:	e00f      	b.n	8007cb6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d106      	bne.n	8007caa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007c9c:	4b15      	ldr	r3, [pc, #84]	; (8007cf4 <RCCEx_PLL3_Config+0x15c>)
 8007c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca0:	4a14      	ldr	r2, [pc, #80]	; (8007cf4 <RCCEx_PLL3_Config+0x15c>)
 8007ca2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007ca6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007ca8:	e005      	b.n	8007cb6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007caa:	4b12      	ldr	r3, [pc, #72]	; (8007cf4 <RCCEx_PLL3_Config+0x15c>)
 8007cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cae:	4a11      	ldr	r2, [pc, #68]	; (8007cf4 <RCCEx_PLL3_Config+0x15c>)
 8007cb0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007cb4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007cb6:	4b0f      	ldr	r3, [pc, #60]	; (8007cf4 <RCCEx_PLL3_Config+0x15c>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a0e      	ldr	r2, [pc, #56]	; (8007cf4 <RCCEx_PLL3_Config+0x15c>)
 8007cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cc2:	f7fa fbcf 	bl	8002464 <HAL_GetTick>
 8007cc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007cc8:	e008      	b.n	8007cdc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007cca:	f7fa fbcb 	bl	8002464 <HAL_GetTick>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	1ad3      	subs	r3, r2, r3
 8007cd4:	2b02      	cmp	r3, #2
 8007cd6:	d901      	bls.n	8007cdc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007cd8:	2303      	movs	r3, #3
 8007cda:	e006      	b.n	8007cea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007cdc:	4b05      	ldr	r3, [pc, #20]	; (8007cf4 <RCCEx_PLL3_Config+0x15c>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d0f0      	beq.n	8007cca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3710      	adds	r7, #16
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	bf00      	nop
 8007cf4:	58024400 	.word	0x58024400
 8007cf8:	ffff0007 	.word	0xffff0007

08007cfc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b08a      	sub	sp, #40	; 0x28
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d101      	bne.n	8007d0e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e075      	b.n	8007dfa <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d105      	bne.n	8007d26 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f7f9 ff69 	bl	8001bf8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2204      	movs	r2, #4
 8007d2a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 f868 	bl	8007e04 <HAL_SD_InitCard>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d001      	beq.n	8007d3e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e05d      	b.n	8007dfa <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8007d3e:	f107 0308 	add.w	r3, r7, #8
 8007d42:	4619      	mov	r1, r3
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 fa9d 	bl	8008284 <HAL_SD_GetCardStatus>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d001      	beq.n	8007d54 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8007d50:	2301      	movs	r3, #1
 8007d52:	e052      	b.n	8007dfa <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8007d54:	7e3b      	ldrb	r3, [r7, #24]
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8007d5a:	7e7b      	ldrb	r3, [r7, #25]
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d10a      	bne.n	8007d7e <HAL_SD_Init+0x82>
 8007d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d102      	bne.n	8007d74 <HAL_SD_Init+0x78>
 8007d6e:	6a3b      	ldr	r3, [r7, #32]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d004      	beq.n	8007d7e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d7a:	659a      	str	r2, [r3, #88]	; 0x58
 8007d7c:	e00b      	b.n	8007d96 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d104      	bne.n	8007d90 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d8c:	659a      	str	r2, [r3, #88]	; 0x58
 8007d8e:	e002      	b.n	8007d96 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2200      	movs	r2, #0
 8007d94:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	68db      	ldr	r3, [r3, #12]
 8007d9a:	4619      	mov	r1, r3
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 fb2f 	bl	8008400 <HAL_SD_ConfigWideBusOperation>
 8007da2:	4603      	mov	r3, r0
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d001      	beq.n	8007dac <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	e026      	b.n	8007dfa <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8007dac:	f7fa fb5a 	bl	8002464 <HAL_GetTick>
 8007db0:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007db2:	e011      	b.n	8007dd8 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007db4:	f7fa fb56 	bl	8002464 <HAL_GetTick>
 8007db8:	4602      	mov	r2, r0
 8007dba:	69fb      	ldr	r3, [r7, #28]
 8007dbc:	1ad3      	subs	r3, r2, r3
 8007dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dc2:	d109      	bne.n	8007dd8 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007dca:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8007dd4:	2303      	movs	r3, #3
 8007dd6:	e010      	b.n	8007dfa <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 fc23 	bl	8008624 <HAL_SD_GetCardState>
 8007dde:	4603      	mov	r3, r0
 8007de0:	2b04      	cmp	r3, #4
 8007de2:	d1e7      	bne.n	8007db4 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2200      	movs	r2, #0
 8007dee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3728      	adds	r7, #40	; 0x28
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
	...

08007e04 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007e04:	b590      	push	{r4, r7, lr}
 8007e06:	b08d      	sub	sp, #52	; 0x34
 8007e08:	af02      	add	r7, sp, #8
 8007e0a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007e10:	2300      	movs	r3, #0
 8007e12:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007e14:	2300      	movs	r3, #0
 8007e16:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007e1c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007e20:	f04f 0100 	mov.w	r1, #0
 8007e24:	f7fe fc76 	bl	8006714 <HAL_RCCEx_GetPeriphCLKFreq>
 8007e28:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8007e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d109      	bne.n	8007e44 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2201      	movs	r2, #1
 8007e34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007e3e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007e40:	2301      	movs	r3, #1
 8007e42:	e070      	b.n	8007f26 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8007e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e46:	0a1b      	lsrs	r3, r3, #8
 8007e48:	4a39      	ldr	r2, [pc, #228]	; (8007f30 <HAL_SD_InitCard+0x12c>)
 8007e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e4e:	091b      	lsrs	r3, r3, #4
 8007e50:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681c      	ldr	r4, [r3, #0]
 8007e56:	466a      	mov	r2, sp
 8007e58:	f107 0318 	add.w	r3, r7, #24
 8007e5c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007e60:	e882 0003 	stmia.w	r2, {r0, r1}
 8007e64:	f107 030c 	add.w	r3, r7, #12
 8007e68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007e6a:	4620      	mov	r0, r4
 8007e6c:	f003 fbd6 	bl	800b61c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4618      	mov	r0, r3
 8007e76:	f003 fc08 	bl	800b68a <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d005      	beq.n	8007e8c <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	005b      	lsls	r3, r3, #1
 8007e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e8a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 8007e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d007      	beq.n	8007ea2 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8007e92:	4a28      	ldr	r2, [pc, #160]	; (8007f34 <HAL_SD_InitCard+0x130>)
 8007e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f7fa faed 	bl	800247c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 fcac 	bl	8008800 <SD_PowerON>
 8007ea8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007eaa:	6a3b      	ldr	r3, [r7, #32]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d00b      	beq.n	8007ec8 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ebc:	6a3b      	ldr	r3, [r7, #32]
 8007ebe:	431a      	orrs	r2, r3
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	e02e      	b.n	8007f26 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f000 fbcb 	bl	8008664 <SD_InitCard>
 8007ece:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007ed0:	6a3b      	ldr	r3, [r7, #32]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d00b      	beq.n	8007eee <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2201      	movs	r2, #1
 8007eda:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ee2:	6a3b      	ldr	r3, [r7, #32]
 8007ee4:	431a      	orrs	r2, r3
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	e01b      	b.n	8007f26 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f003 fc5c 	bl	800b7b4 <SDMMC_CmdBlockLength>
 8007efc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007efe:	6a3b      	ldr	r3, [r7, #32]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d00f      	beq.n	8007f24 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a0b      	ldr	r2, [pc, #44]	; (8007f38 <HAL_SD_InitCard+0x134>)
 8007f0a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f10:	6a3b      	ldr	r3, [r7, #32]
 8007f12:	431a      	orrs	r2, r3
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8007f20:	2301      	movs	r3, #1
 8007f22:	e000      	b.n	8007f26 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8007f24:	2300      	movs	r3, #0
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	372c      	adds	r7, #44	; 0x2c
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd90      	pop	{r4, r7, pc}
 8007f2e:	bf00      	nop
 8007f30:	014f8b59 	.word	0x014f8b59
 8007f34:	00012110 	.word	0x00012110
 8007f38:	1fe00fff 	.word	0x1fe00fff

08007f3c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f4a:	0f9b      	lsrs	r3, r3, #30
 8007f4c:	b2da      	uxtb	r2, r3
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f56:	0e9b      	lsrs	r3, r3, #26
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	f003 030f 	and.w	r3, r3, #15
 8007f5e:	b2da      	uxtb	r2, r3
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f68:	0e1b      	lsrs	r3, r3, #24
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	f003 0303 	and.w	r3, r3, #3
 8007f70:	b2da      	uxtb	r2, r3
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f7a:	0c1b      	lsrs	r3, r3, #16
 8007f7c:	b2da      	uxtb	r2, r3
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f86:	0a1b      	lsrs	r3, r3, #8
 8007f88:	b2da      	uxtb	r2, r3
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f92:	b2da      	uxtb	r2, r3
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f9c:	0d1b      	lsrs	r3, r3, #20
 8007f9e:	b29a      	uxth	r2, r3
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fa8:	0c1b      	lsrs	r3, r3, #16
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	f003 030f 	and.w	r3, r3, #15
 8007fb0:	b2da      	uxtb	r2, r3
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fba:	0bdb      	lsrs	r3, r3, #15
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	f003 0301 	and.w	r3, r3, #1
 8007fc2:	b2da      	uxtb	r2, r3
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fcc:	0b9b      	lsrs	r3, r3, #14
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	f003 0301 	and.w	r3, r3, #1
 8007fd4:	b2da      	uxtb	r2, r3
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fde:	0b5b      	lsrs	r3, r3, #13
 8007fe0:	b2db      	uxtb	r3, r3
 8007fe2:	f003 0301 	and.w	r3, r3, #1
 8007fe6:	b2da      	uxtb	r2, r3
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ff0:	0b1b      	lsrs	r3, r3, #12
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	f003 0301 	and.w	r3, r3, #1
 8007ff8:	b2da      	uxtb	r2, r3
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	2200      	movs	r2, #0
 8008002:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008008:	2b00      	cmp	r3, #0
 800800a:	d163      	bne.n	80080d4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008010:	009a      	lsls	r2, r3, #2
 8008012:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008016:	4013      	ands	r3, r2
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800801c:	0f92      	lsrs	r2, r2, #30
 800801e:	431a      	orrs	r2, r3
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008028:	0edb      	lsrs	r3, r3, #27
 800802a:	b2db      	uxtb	r3, r3
 800802c:	f003 0307 	and.w	r3, r3, #7
 8008030:	b2da      	uxtb	r2, r3
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800803a:	0e1b      	lsrs	r3, r3, #24
 800803c:	b2db      	uxtb	r3, r3
 800803e:	f003 0307 	and.w	r3, r3, #7
 8008042:	b2da      	uxtb	r2, r3
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800804c:	0d5b      	lsrs	r3, r3, #21
 800804e:	b2db      	uxtb	r3, r3
 8008050:	f003 0307 	and.w	r3, r3, #7
 8008054:	b2da      	uxtb	r2, r3
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800805e:	0c9b      	lsrs	r3, r3, #18
 8008060:	b2db      	uxtb	r3, r3
 8008062:	f003 0307 	and.w	r3, r3, #7
 8008066:	b2da      	uxtb	r2, r3
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008070:	0bdb      	lsrs	r3, r3, #15
 8008072:	b2db      	uxtb	r3, r3
 8008074:	f003 0307 	and.w	r3, r3, #7
 8008078:	b2da      	uxtb	r2, r3
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	691b      	ldr	r3, [r3, #16]
 8008082:	1c5a      	adds	r2, r3, #1
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	7e1b      	ldrb	r3, [r3, #24]
 800808c:	b2db      	uxtb	r3, r3
 800808e:	f003 0307 	and.w	r3, r3, #7
 8008092:	3302      	adds	r3, #2
 8008094:	2201      	movs	r2, #1
 8008096:	fa02 f303 	lsl.w	r3, r2, r3
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800809e:	fb03 f202 	mul.w	r2, r3, r2
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	7a1b      	ldrb	r3, [r3, #8]
 80080aa:	b2db      	uxtb	r3, r3
 80080ac:	f003 030f 	and.w	r3, r3, #15
 80080b0:	2201      	movs	r2, #1
 80080b2:	409a      	lsls	r2, r3
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80080c0:	0a52      	lsrs	r2, r2, #9
 80080c2:	fb03 f202 	mul.w	r2, r3, r2
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080d0:	655a      	str	r2, [r3, #84]	; 0x54
 80080d2:	e031      	b.n	8008138 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d11d      	bne.n	8008118 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080e0:	041b      	lsls	r3, r3, #16
 80080e2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080ea:	0c1b      	lsrs	r3, r3, #16
 80080ec:	431a      	orrs	r2, r3
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	691b      	ldr	r3, [r3, #16]
 80080f6:	3301      	adds	r3, #1
 80080f8:	029a      	lsls	r2, r3, #10
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f44f 7200 	mov.w	r2, #512	; 0x200
 800810c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	655a      	str	r2, [r3, #84]	; 0x54
 8008116:	e00f      	b.n	8008138 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a58      	ldr	r2, [pc, #352]	; (8008280 <HAL_SD_GetCardCSD+0x344>)
 800811e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008124:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2201      	movs	r2, #1
 8008130:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8008134:	2301      	movs	r3, #1
 8008136:	e09d      	b.n	8008274 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800813c:	0b9b      	lsrs	r3, r3, #14
 800813e:	b2db      	uxtb	r3, r3
 8008140:	f003 0301 	and.w	r3, r3, #1
 8008144:	b2da      	uxtb	r2, r3
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800814e:	09db      	lsrs	r3, r3, #7
 8008150:	b2db      	uxtb	r3, r3
 8008152:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008156:	b2da      	uxtb	r2, r3
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008160:	b2db      	uxtb	r3, r3
 8008162:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008166:	b2da      	uxtb	r2, r3
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008170:	0fdb      	lsrs	r3, r3, #31
 8008172:	b2da      	uxtb	r2, r3
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800817c:	0f5b      	lsrs	r3, r3, #29
 800817e:	b2db      	uxtb	r3, r3
 8008180:	f003 0303 	and.w	r3, r3, #3
 8008184:	b2da      	uxtb	r2, r3
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800818e:	0e9b      	lsrs	r3, r3, #26
 8008190:	b2db      	uxtb	r3, r3
 8008192:	f003 0307 	and.w	r3, r3, #7
 8008196:	b2da      	uxtb	r2, r3
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081a0:	0d9b      	lsrs	r3, r3, #22
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	f003 030f 	and.w	r3, r3, #15
 80081a8:	b2da      	uxtb	r2, r3
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081b2:	0d5b      	lsrs	r3, r3, #21
 80081b4:	b2db      	uxtb	r3, r3
 80081b6:	f003 0301 	and.w	r3, r3, #1
 80081ba:	b2da      	uxtb	r2, r3
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	2200      	movs	r2, #0
 80081c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081ce:	0c1b      	lsrs	r3, r3, #16
 80081d0:	b2db      	uxtb	r3, r3
 80081d2:	f003 0301 	and.w	r3, r3, #1
 80081d6:	b2da      	uxtb	r2, r3
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081e2:	0bdb      	lsrs	r3, r3, #15
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	f003 0301 	and.w	r3, r3, #1
 80081ea:	b2da      	uxtb	r2, r3
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081f6:	0b9b      	lsrs	r3, r3, #14
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	f003 0301 	and.w	r3, r3, #1
 80081fe:	b2da      	uxtb	r2, r3
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800820a:	0b5b      	lsrs	r3, r3, #13
 800820c:	b2db      	uxtb	r3, r3
 800820e:	f003 0301 	and.w	r3, r3, #1
 8008212:	b2da      	uxtb	r2, r3
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800821e:	0b1b      	lsrs	r3, r3, #12
 8008220:	b2db      	uxtb	r3, r3
 8008222:	f003 0301 	and.w	r3, r3, #1
 8008226:	b2da      	uxtb	r2, r3
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008232:	0a9b      	lsrs	r3, r3, #10
 8008234:	b2db      	uxtb	r3, r3
 8008236:	f003 0303 	and.w	r3, r3, #3
 800823a:	b2da      	uxtb	r2, r3
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008246:	0a1b      	lsrs	r3, r3, #8
 8008248:	b2db      	uxtb	r3, r3
 800824a:	f003 0303 	and.w	r3, r3, #3
 800824e:	b2da      	uxtb	r2, r3
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800825a:	085b      	lsrs	r3, r3, #1
 800825c:	b2db      	uxtb	r3, r3
 800825e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008262:	b2da      	uxtb	r2, r3
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	2201      	movs	r2, #1
 800826e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008272:	2300      	movs	r3, #0
}
 8008274:	4618      	mov	r0, r3
 8008276:	370c      	adds	r7, #12
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr
 8008280:	1fe00fff 	.word	0x1fe00fff

08008284 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b094      	sub	sp, #80	; 0x50
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800828e:	2300      	movs	r3, #0
 8008290:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800829a:	b2db      	uxtb	r3, r3
 800829c:	2b03      	cmp	r3, #3
 800829e:	d101      	bne.n	80082a4 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 80082a0:	2301      	movs	r3, #1
 80082a2:	e0a7      	b.n	80083f4 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80082a4:	f107 0308 	add.w	r3, r7, #8
 80082a8:	4619      	mov	r1, r3
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 fb36 	bl	800891c <SD_SendSDStatus>
 80082b0:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80082b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d011      	beq.n	80082dc <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a4f      	ldr	r2, [pc, #316]	; (80083fc <HAL_SD_GetCardStatus+0x178>)
 80082be:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082c6:	431a      	orrs	r2, r3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 80082d4:	2301      	movs	r3, #1
 80082d6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80082da:	e070      	b.n	80083be <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	099b      	lsrs	r3, r3, #6
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	f003 0303 	and.w	r3, r3, #3
 80082e6:	b2da      	uxtb	r2, r3
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	095b      	lsrs	r3, r3, #5
 80082f0:	b2db      	uxtb	r3, r3
 80082f2:	f003 0301 	and.w	r3, r3, #1
 80082f6:	b2da      	uxtb	r2, r3
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	0a1b      	lsrs	r3, r3, #8
 8008300:	b29b      	uxth	r3, r3
 8008302:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008306:	b29a      	uxth	r2, r3
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	0e1b      	lsrs	r3, r3, #24
 800830c:	b29b      	uxth	r3, r3
 800830e:	4313      	orrs	r3, r2
 8008310:	b29a      	uxth	r2, r3
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	061a      	lsls	r2, r3, #24
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	021b      	lsls	r3, r3, #8
 800831e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008322:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	0a1b      	lsrs	r3, r3, #8
 8008328:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800832c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	0e1b      	lsrs	r3, r3, #24
 8008332:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	b2da      	uxtb	r2, r3
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	0a1b      	lsrs	r3, r3, #8
 8008344:	b2da      	uxtb	r2, r3
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	0d1b      	lsrs	r3, r3, #20
 800834e:	b2db      	uxtb	r3, r3
 8008350:	f003 030f 	and.w	r3, r3, #15
 8008354:	b2da      	uxtb	r2, r3
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	0c1b      	lsrs	r3, r3, #16
 800835e:	b29b      	uxth	r3, r3
 8008360:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008364:	b29a      	uxth	r2, r3
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	b29b      	uxth	r3, r3
 800836a:	b2db      	uxtb	r3, r3
 800836c:	b29b      	uxth	r3, r3
 800836e:	4313      	orrs	r3, r2
 8008370:	b29a      	uxth	r2, r3
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	0a9b      	lsrs	r3, r3, #10
 800837a:	b2db      	uxtb	r3, r3
 800837c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008380:	b2da      	uxtb	r2, r3
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	0a1b      	lsrs	r3, r3, #8
 800838a:	b2db      	uxtb	r3, r3
 800838c:	f003 0303 	and.w	r3, r3, #3
 8008390:	b2da      	uxtb	r2, r3
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	091b      	lsrs	r3, r3, #4
 800839a:	b2db      	uxtb	r3, r3
 800839c:	f003 030f 	and.w	r3, r3, #15
 80083a0:	b2da      	uxtb	r2, r3
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	f003 030f 	and.w	r3, r3, #15
 80083ae:	b2da      	uxtb	r2, r3
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	0e1b      	lsrs	r3, r3, #24
 80083b8:	b2da      	uxtb	r2, r3
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80083c6:	4618      	mov	r0, r3
 80083c8:	f003 f9f4 	bl	800b7b4 <SDMMC_CmdBlockLength>
 80083cc:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80083ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d00d      	beq.n	80083f0 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a08      	ldr	r2, [pc, #32]	; (80083fc <HAL_SD_GetCardStatus+0x178>)
 80083da:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083e0:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2201      	movs	r2, #1
 80083e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 80083ea:	2301      	movs	r3, #1
 80083ec:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 80083f0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3750      	adds	r7, #80	; 0x50
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}
 80083fc:	1fe00fff 	.word	0x1fe00fff

08008400 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008400:	b590      	push	{r4, r7, lr}
 8008402:	b08d      	sub	sp, #52	; 0x34
 8008404:	af02      	add	r7, sp, #8
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800840a:	2300      	movs	r3, #0
 800840c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2203      	movs	r2, #3
 8008414:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800841c:	2b03      	cmp	r3, #3
 800841e:	d02e      	beq.n	800847e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008426:	d106      	bne.n	8008436 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800842c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	635a      	str	r2, [r3, #52]	; 0x34
 8008434:	e029      	b.n	800848a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800843c:	d10a      	bne.n	8008454 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 fb64 	bl	8008b0c <SD_WideBus_Enable>
 8008444:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800844a:	6a3b      	ldr	r3, [r7, #32]
 800844c:	431a      	orrs	r2, r3
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	635a      	str	r2, [r3, #52]	; 0x34
 8008452:	e01a      	b.n	800848a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d10a      	bne.n	8008470 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 fba1 	bl	8008ba2 <SD_WideBus_Disable>
 8008460:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008466:	6a3b      	ldr	r3, [r7, #32]
 8008468:	431a      	orrs	r2, r3
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	635a      	str	r2, [r3, #52]	; 0x34
 800846e:	e00c      	b.n	800848a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008474:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	635a      	str	r2, [r3, #52]	; 0x34
 800847c:	e005      	b.n	800848a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008482:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800848e:	2b00      	cmp	r3, #0
 8008490:	d007      	beq.n	80084a2 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a5f      	ldr	r2, [pc, #380]	; (8008614 <HAL_SD_ConfigWideBusOperation+0x214>)
 8008498:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800849a:	2301      	movs	r3, #1
 800849c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80084a0:	e096      	b.n	80085d0 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80084a2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80084a6:	f04f 0100 	mov.w	r1, #0
 80084aa:	f7fe f933 	bl	8006714 <HAL_RCCEx_GetPeriphCLKFreq>
 80084ae:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 80084b0:	69fb      	ldr	r3, [r7, #28]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	f000 8083 	beq.w	80085be <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	691b      	ldr	r3, [r3, #16]
 80084cc:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	695a      	ldr	r2, [r3, #20]
 80084d2:	69fb      	ldr	r3, [r7, #28]
 80084d4:	4950      	ldr	r1, [pc, #320]	; (8008618 <HAL_SD_ConfigWideBusOperation+0x218>)
 80084d6:	fba1 1303 	umull	r1, r3, r1, r3
 80084da:	0e1b      	lsrs	r3, r3, #24
 80084dc:	429a      	cmp	r2, r3
 80084de:	d303      	bcc.n	80084e8 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	695b      	ldr	r3, [r3, #20]
 80084e4:	61bb      	str	r3, [r7, #24]
 80084e6:	e05a      	b.n	800859e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084f0:	d103      	bne.n	80084fa <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	695b      	ldr	r3, [r3, #20]
 80084f6:	61bb      	str	r3, [r7, #24]
 80084f8:	e051      	b.n	800859e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008502:	d126      	bne.n	8008552 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	695b      	ldr	r3, [r3, #20]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d10e      	bne.n	800852a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800850c:	69fb      	ldr	r3, [r7, #28]
 800850e:	4a43      	ldr	r2, [pc, #268]	; (800861c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d906      	bls.n	8008522 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008514:	69fb      	ldr	r3, [r7, #28]
 8008516:	4a40      	ldr	r2, [pc, #256]	; (8008618 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008518:	fba2 2303 	umull	r2, r3, r2, r3
 800851c:	0e5b      	lsrs	r3, r3, #25
 800851e:	61bb      	str	r3, [r7, #24]
 8008520:	e03d      	b.n	800859e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	695b      	ldr	r3, [r3, #20]
 8008526:	61bb      	str	r3, [r7, #24]
 8008528:	e039      	b.n	800859e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	695b      	ldr	r3, [r3, #20]
 800852e:	005b      	lsls	r3, r3, #1
 8008530:	69fa      	ldr	r2, [r7, #28]
 8008532:	fbb2 f3f3 	udiv	r3, r2, r3
 8008536:	4a39      	ldr	r2, [pc, #228]	; (800861c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d906      	bls.n	800854a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800853c:	69fb      	ldr	r3, [r7, #28]
 800853e:	4a36      	ldr	r2, [pc, #216]	; (8008618 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008540:	fba2 2303 	umull	r2, r3, r2, r3
 8008544:	0e5b      	lsrs	r3, r3, #25
 8008546:	61bb      	str	r3, [r7, #24]
 8008548:	e029      	b.n	800859e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	695b      	ldr	r3, [r3, #20]
 800854e:	61bb      	str	r3, [r7, #24]
 8008550:	e025      	b.n	800859e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	695b      	ldr	r3, [r3, #20]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d10e      	bne.n	8008578 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800855a:	69fb      	ldr	r3, [r7, #28]
 800855c:	4a30      	ldr	r2, [pc, #192]	; (8008620 <HAL_SD_ConfigWideBusOperation+0x220>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d906      	bls.n	8008570 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008562:	69fb      	ldr	r3, [r7, #28]
 8008564:	4a2c      	ldr	r2, [pc, #176]	; (8008618 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008566:	fba2 2303 	umull	r2, r3, r2, r3
 800856a:	0e1b      	lsrs	r3, r3, #24
 800856c:	61bb      	str	r3, [r7, #24]
 800856e:	e016      	b.n	800859e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	695b      	ldr	r3, [r3, #20]
 8008574:	61bb      	str	r3, [r7, #24]
 8008576:	e012      	b.n	800859e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	695b      	ldr	r3, [r3, #20]
 800857c:	005b      	lsls	r3, r3, #1
 800857e:	69fa      	ldr	r2, [r7, #28]
 8008580:	fbb2 f3f3 	udiv	r3, r2, r3
 8008584:	4a26      	ldr	r2, [pc, #152]	; (8008620 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d906      	bls.n	8008598 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	4a22      	ldr	r2, [pc, #136]	; (8008618 <HAL_SD_ConfigWideBusOperation+0x218>)
 800858e:	fba2 2303 	umull	r2, r3, r2, r3
 8008592:	0e1b      	lsrs	r3, r3, #24
 8008594:	61bb      	str	r3, [r7, #24]
 8008596:	e002      	b.n	800859e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	695b      	ldr	r3, [r3, #20]
 800859c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681c      	ldr	r4, [r3, #0]
 80085a2:	466a      	mov	r2, sp
 80085a4:	f107 0314 	add.w	r3, r7, #20
 80085a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80085ac:	e882 0003 	stmia.w	r2, {r0, r1}
 80085b0:	f107 0308 	add.w	r3, r7, #8
 80085b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80085b6:	4620      	mov	r0, r4
 80085b8:	f003 f830 	bl	800b61c <SDMMC_Init>
 80085bc:	e008      	b.n	80085d0 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085c2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 80085ca:	2301      	movs	r3, #1
 80085cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80085d8:	4618      	mov	r0, r3
 80085da:	f003 f8eb 	bl	800b7b4 <SDMMC_CmdBlockLength>
 80085de:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80085e0:	6a3b      	ldr	r3, [r7, #32]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d00c      	beq.n	8008600 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a0a      	ldr	r2, [pc, #40]	; (8008614 <HAL_SD_ConfigWideBusOperation+0x214>)
 80085ec:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085f2:	6a3b      	ldr	r3, [r7, #32]
 80085f4:	431a      	orrs	r2, r3
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80085fa:	2301      	movs	r3, #1
 80085fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8008608:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800860c:	4618      	mov	r0, r3
 800860e:	372c      	adds	r7, #44	; 0x2c
 8008610:	46bd      	mov	sp, r7
 8008612:	bd90      	pop	{r4, r7, pc}
 8008614:	1fe00fff 	.word	0x1fe00fff
 8008618:	55e63b89 	.word	0x55e63b89
 800861c:	02faf080 	.word	0x02faf080
 8008620:	017d7840 	.word	0x017d7840

08008624 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b086      	sub	sp, #24
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800862c:	2300      	movs	r3, #0
 800862e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008630:	f107 030c 	add.w	r3, r7, #12
 8008634:	4619      	mov	r1, r3
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 fa40 	bl	8008abc <SD_SendStatus>
 800863c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d005      	beq.n	8008650 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	431a      	orrs	r2, r3
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	0a5b      	lsrs	r3, r3, #9
 8008654:	f003 030f 	and.w	r3, r3, #15
 8008658:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800865a:	693b      	ldr	r3, [r7, #16]
}
 800865c:	4618      	mov	r0, r3
 800865e:	3718      	adds	r7, #24
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b090      	sub	sp, #64	; 0x40
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800866c:	2300      	movs	r3, #0
 800866e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8008670:	f7f9 fef8 	bl	8002464 <HAL_GetTick>
 8008674:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4618      	mov	r0, r3
 800867c:	f003 f816 	bl	800b6ac <SDMMC_GetPowerState>
 8008680:	4603      	mov	r3, r0
 8008682:	2b00      	cmp	r3, #0
 8008684:	d102      	bne.n	800868c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008686:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800868a:	e0b5      	b.n	80087f8 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008690:	2b03      	cmp	r3, #3
 8008692:	d02e      	beq.n	80086f2 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4618      	mov	r0, r3
 800869a:	f003 f997 	bl	800b9cc <SDMMC_CmdSendCID>
 800869e:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80086a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d001      	beq.n	80086aa <SD_InitCard+0x46>
    {
      return errorstate;
 80086a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a8:	e0a6      	b.n	80087f8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	2100      	movs	r1, #0
 80086b0:	4618      	mov	r0, r3
 80086b2:	f003 f840 	bl	800b736 <SDMMC_GetResponse>
 80086b6:	4602      	mov	r2, r0
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	2104      	movs	r1, #4
 80086c2:	4618      	mov	r0, r3
 80086c4:	f003 f837 	bl	800b736 <SDMMC_GetResponse>
 80086c8:	4602      	mov	r2, r0
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	2108      	movs	r1, #8
 80086d4:	4618      	mov	r0, r3
 80086d6:	f003 f82e 	bl	800b736 <SDMMC_GetResponse>
 80086da:	4602      	mov	r2, r0
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	210c      	movs	r1, #12
 80086e6:	4618      	mov	r0, r3
 80086e8:	f003 f825 	bl	800b736 <SDMMC_GetResponse>
 80086ec:	4602      	mov	r2, r0
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f6:	2b03      	cmp	r3, #3
 80086f8:	d01d      	beq.n	8008736 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 80086fa:	e019      	b.n	8008730 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f107 020a 	add.w	r2, r7, #10
 8008704:	4611      	mov	r1, r2
 8008706:	4618      	mov	r0, r3
 8008708:	f003 f99f 	bl	800ba4a <SDMMC_CmdSetRelAdd>
 800870c:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800870e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008710:	2b00      	cmp	r3, #0
 8008712:	d001      	beq.n	8008718 <SD_InitCard+0xb4>
      {
        return errorstate;
 8008714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008716:	e06f      	b.n	80087f8 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8008718:	f7f9 fea4 	bl	8002464 <HAL_GetTick>
 800871c:	4602      	mov	r2, r0
 800871e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008720:	1ad3      	subs	r3, r2, r3
 8008722:	f241 3287 	movw	r2, #4999	; 0x1387
 8008726:	4293      	cmp	r3, r2
 8008728:	d902      	bls.n	8008730 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800872a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800872e:	e063      	b.n	80087f8 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8008730:	897b      	ldrh	r3, [r7, #10]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d0e2      	beq.n	80086fc <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800873a:	2b03      	cmp	r3, #3
 800873c:	d036      	beq.n	80087ac <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800873e:	897b      	ldrh	r3, [r7, #10]
 8008740:	461a      	mov	r2, r3
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800874e:	041b      	lsls	r3, r3, #16
 8008750:	4619      	mov	r1, r3
 8008752:	4610      	mov	r0, r2
 8008754:	f003 f959 	bl	800ba0a <SDMMC_CmdSendCSD>
 8008758:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800875a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800875c:	2b00      	cmp	r3, #0
 800875e:	d001      	beq.n	8008764 <SD_InitCard+0x100>
    {
      return errorstate;
 8008760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008762:	e049      	b.n	80087f8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	2100      	movs	r1, #0
 800876a:	4618      	mov	r0, r3
 800876c:	f002 ffe3 	bl	800b736 <SDMMC_GetResponse>
 8008770:	4602      	mov	r2, r0
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	2104      	movs	r1, #4
 800877c:	4618      	mov	r0, r3
 800877e:	f002 ffda 	bl	800b736 <SDMMC_GetResponse>
 8008782:	4602      	mov	r2, r0
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	2108      	movs	r1, #8
 800878e:	4618      	mov	r0, r3
 8008790:	f002 ffd1 	bl	800b736 <SDMMC_GetResponse>
 8008794:	4602      	mov	r2, r0
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	210c      	movs	r1, #12
 80087a0:	4618      	mov	r0, r3
 80087a2:	f002 ffc8 	bl	800b736 <SDMMC_GetResponse>
 80087a6:	4602      	mov	r2, r0
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	2104      	movs	r1, #4
 80087b2:	4618      	mov	r0, r3
 80087b4:	f002 ffbf 	bl	800b736 <SDMMC_GetResponse>
 80087b8:	4603      	mov	r3, r0
 80087ba:	0d1a      	lsrs	r2, r3, #20
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80087c0:	f107 030c 	add.w	r3, r7, #12
 80087c4:	4619      	mov	r1, r3
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f7ff fbb8 	bl	8007f3c <HAL_SD_GetCardCSD>
 80087cc:	4603      	mov	r3, r0
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d002      	beq.n	80087d8 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80087d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80087d6:	e00f      	b.n	80087f8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087e0:	041b      	lsls	r3, r3, #16
 80087e2:	4619      	mov	r1, r3
 80087e4:	4610      	mov	r0, r2
 80087e6:	f003 f808 	bl	800b7fa <SDMMC_CmdSelDesel>
 80087ea:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 80087ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d001      	beq.n	80087f6 <SD_InitCard+0x192>
  {
    return errorstate;
 80087f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f4:	e000      	b.n	80087f8 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80087f6:	2300      	movs	r3, #0
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3740      	adds	r7, #64	; 0x40
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b086      	sub	sp, #24
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008808:	2300      	movs	r3, #0
 800880a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800880c:	2300      	movs	r3, #0
 800880e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8008810:	2300      	movs	r3, #0
 8008812:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4618      	mov	r0, r3
 800881a:	f003 f811 	bl	800b840 <SDMMC_CmdGoIdleState>
 800881e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d001      	beq.n	800882a <SD_PowerON+0x2a>
  {
    return errorstate;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	e072      	b.n	8008910 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4618      	mov	r0, r3
 8008830:	f003 f824 	bl	800b87c <SDMMC_CmdOperCond>
 8008834:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800883c:	d10d      	bne.n	800885a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2200      	movs	r2, #0
 8008842:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4618      	mov	r0, r3
 800884a:	f002 fff9 	bl	800b840 <SDMMC_CmdGoIdleState>
 800884e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d004      	beq.n	8008860 <SD_PowerON+0x60>
    {
      return errorstate;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	e05a      	b.n	8008910 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2201      	movs	r2, #1
 800885e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008864:	2b01      	cmp	r3, #1
 8008866:	d137      	bne.n	80088d8 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	2100      	movs	r1, #0
 800886e:	4618      	mov	r0, r3
 8008870:	f003 f824 	bl	800b8bc <SDMMC_CmdAppCommand>
 8008874:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d02d      	beq.n	80088d8 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800887c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008880:	e046      	b.n	8008910 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	2100      	movs	r1, #0
 8008888:	4618      	mov	r0, r3
 800888a:	f003 f817 	bl	800b8bc <SDMMC_CmdAppCommand>
 800888e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d001      	beq.n	800889a <SD_PowerON+0x9a>
    {
      return errorstate;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	e03a      	b.n	8008910 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	491e      	ldr	r1, [pc, #120]	; (8008918 <SD_PowerON+0x118>)
 80088a0:	4618      	mov	r0, r3
 80088a2:	f003 f82e 	bl	800b902 <SDMMC_CmdAppOperCommand>
 80088a6:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d002      	beq.n	80088b4 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80088ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80088b2:	e02d      	b.n	8008910 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2100      	movs	r1, #0
 80088ba:	4618      	mov	r0, r3
 80088bc:	f002 ff3b 	bl	800b736 <SDMMC_GetResponse>
 80088c0:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	0fdb      	lsrs	r3, r3, #31
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d101      	bne.n	80088ce <SD_PowerON+0xce>
 80088ca:	2301      	movs	r3, #1
 80088cc:	e000      	b.n	80088d0 <SD_PowerON+0xd0>
 80088ce:	2300      	movs	r3, #0
 80088d0:	613b      	str	r3, [r7, #16]

    count++;
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	3301      	adds	r3, #1
 80088d6:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80088de:	4293      	cmp	r3, r2
 80088e0:	d802      	bhi.n	80088e8 <SD_PowerON+0xe8>
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d0cc      	beq.n	8008882 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d902      	bls.n	80088f8 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80088f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80088f6:	e00b      	b.n	8008910 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2200      	movs	r2, #0
 80088fc:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008904:	2b00      	cmp	r3, #0
 8008906:	d002      	beq.n	800890e <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2201      	movs	r2, #1
 800890c:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800890e:	2300      	movs	r3, #0
}
 8008910:	4618      	mov	r0, r3
 8008912:	3718      	adds	r7, #24
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}
 8008918:	c1100000 	.word	0xc1100000

0800891c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b08c      	sub	sp, #48	; 0x30
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008926:	f7f9 fd9d 	bl	8002464 <HAL_GetTick>
 800892a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	2100      	movs	r1, #0
 8008936:	4618      	mov	r0, r3
 8008938:	f002 fefd 	bl	800b736 <SDMMC_GetResponse>
 800893c:	4603      	mov	r3, r0
 800893e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008942:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008946:	d102      	bne.n	800894e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008948:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800894c:	e0b0      	b.n	8008ab0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	2140      	movs	r1, #64	; 0x40
 8008954:	4618      	mov	r0, r3
 8008956:	f002 ff2d 	bl	800b7b4 <SDMMC_CmdBlockLength>
 800895a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800895c:	6a3b      	ldr	r3, [r7, #32]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d005      	beq.n	800896e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800896a:	6a3b      	ldr	r3, [r7, #32]
 800896c:	e0a0      	b.n	8008ab0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008976:	041b      	lsls	r3, r3, #16
 8008978:	4619      	mov	r1, r3
 800897a:	4610      	mov	r0, r2
 800897c:	f002 ff9e 	bl	800b8bc <SDMMC_CmdAppCommand>
 8008980:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008982:	6a3b      	ldr	r3, [r7, #32]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d005      	beq.n	8008994 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8008990:	6a3b      	ldr	r3, [r7, #32]
 8008992:	e08d      	b.n	8008ab0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008994:	f04f 33ff 	mov.w	r3, #4294967295
 8008998:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800899a:	2340      	movs	r3, #64	; 0x40
 800899c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800899e:	2360      	movs	r3, #96	; 0x60
 80089a0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80089a2:	2302      	movs	r3, #2
 80089a4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80089a6:	2300      	movs	r3, #0
 80089a8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80089aa:	2301      	movs	r3, #1
 80089ac:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f107 0208 	add.w	r2, r7, #8
 80089b6:	4611      	mov	r1, r2
 80089b8:	4618      	mov	r0, r3
 80089ba:	f002 fecf 	bl	800b75c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4618      	mov	r0, r3
 80089c4:	f003 f886 	bl	800bad4 <SDMMC_CmdStatusRegister>
 80089c8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80089ca:	6a3b      	ldr	r3, [r7, #32]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d02b      	beq.n	8008a28 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80089d8:	6a3b      	ldr	r3, [r7, #32]
 80089da:	e069      	b.n	8008ab0 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d013      	beq.n	8008a12 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 80089ea:	2300      	movs	r3, #0
 80089ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089ee:	e00d      	b.n	8008a0c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4618      	mov	r0, r3
 80089f6:	f002 fe3b 	bl	800b670 <SDMMC_ReadFIFO>
 80089fa:	4602      	mov	r2, r0
 80089fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fe:	601a      	str	r2, [r3, #0]
        pData++;
 8008a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a02:	3304      	adds	r3, #4
 8008a04:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8008a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a08:	3301      	adds	r3, #1
 8008a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a0e:	2b07      	cmp	r3, #7
 8008a10:	d9ee      	bls.n	80089f0 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008a12:	f7f9 fd27 	bl	8002464 <HAL_GetTick>
 8008a16:	4602      	mov	r2, r0
 8008a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1a:	1ad3      	subs	r3, r2, r3
 8008a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a20:	d102      	bne.n	8008a28 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008a22:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008a26:	e043      	b.n	8008ab0 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a2e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d0d2      	beq.n	80089dc <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a3c:	f003 0308 	and.w	r3, r3, #8
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d001      	beq.n	8008a48 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008a44:	2308      	movs	r3, #8
 8008a46:	e033      	b.n	8008ab0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a4e:	f003 0302 	and.w	r3, r3, #2
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d001      	beq.n	8008a5a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008a56:	2302      	movs	r3, #2
 8008a58:	e02a      	b.n	8008ab0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a60:	f003 0320 	and.w	r3, r3, #32
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d017      	beq.n	8008a98 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8008a68:	2320      	movs	r3, #32
 8008a6a:	e021      	b.n	8008ab0 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4618      	mov	r0, r3
 8008a72:	f002 fdfd 	bl	800b670 <SDMMC_ReadFIFO>
 8008a76:	4602      	mov	r2, r0
 8008a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a7a:	601a      	str	r2, [r3, #0]
    pData++;
 8008a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a7e:	3304      	adds	r3, #4
 8008a80:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008a82:	f7f9 fcef 	bl	8002464 <HAL_GetTick>
 8008a86:	4602      	mov	r2, r0
 8008a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a8a:	1ad3      	subs	r3, r2, r3
 8008a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a90:	d102      	bne.n	8008a98 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008a92:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008a96:	e00b      	b.n	8008ab0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d1e2      	bne.n	8008a6c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a03      	ldr	r2, [pc, #12]	; (8008ab8 <SD_SendSDStatus+0x19c>)
 8008aac:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8008aae:	2300      	movs	r3, #0
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3730      	adds	r7, #48	; 0x30
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}
 8008ab8:	18000f3a 	.word	0x18000f3a

08008abc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d102      	bne.n	8008ad2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008acc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008ad0:	e018      	b.n	8008b04 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681a      	ldr	r2, [r3, #0]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ada:	041b      	lsls	r3, r3, #16
 8008adc:	4619      	mov	r1, r3
 8008ade:	4610      	mov	r0, r2
 8008ae0:	f002 ffd5 	bl	800ba8e <SDMMC_CmdSendStatus>
 8008ae4:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d001      	beq.n	8008af0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	e009      	b.n	8008b04 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	2100      	movs	r1, #0
 8008af6:	4618      	mov	r0, r3
 8008af8:	f002 fe1d 	bl	800b736 <SDMMC_GetResponse>
 8008afc:	4602      	mov	r2, r0
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008b02:	2300      	movs	r3, #0
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3710      	adds	r7, #16
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b086      	sub	sp, #24
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008b14:	2300      	movs	r3, #0
 8008b16:	60fb      	str	r3, [r7, #12]
 8008b18:	2300      	movs	r3, #0
 8008b1a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	2100      	movs	r1, #0
 8008b22:	4618      	mov	r0, r3
 8008b24:	f002 fe07 	bl	800b736 <SDMMC_GetResponse>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b32:	d102      	bne.n	8008b3a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008b34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b38:	e02f      	b.n	8008b9a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008b3a:	f107 030c 	add.w	r3, r7, #12
 8008b3e:	4619      	mov	r1, r3
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 f879 	bl	8008c38 <SD_FindSCR>
 8008b46:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d001      	beq.n	8008b52 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	e023      	b.n	8008b9a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d01c      	beq.n	8008b96 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b64:	041b      	lsls	r3, r3, #16
 8008b66:	4619      	mov	r1, r3
 8008b68:	4610      	mov	r0, r2
 8008b6a:	f002 fea7 	bl	800b8bc <SDMMC_CmdAppCommand>
 8008b6e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d001      	beq.n	8008b7a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	e00f      	b.n	8008b9a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	2102      	movs	r1, #2
 8008b80:	4618      	mov	r0, r3
 8008b82:	f002 fede 	bl	800b942 <SDMMC_CmdBusWidth>
 8008b86:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d001      	beq.n	8008b92 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	e003      	b.n	8008b9a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008b92:	2300      	movs	r3, #0
 8008b94:	e001      	b.n	8008b9a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008b96:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3718      	adds	r7, #24
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}

08008ba2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008ba2:	b580      	push	{r7, lr}
 8008ba4:	b086      	sub	sp, #24
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008baa:	2300      	movs	r3, #0
 8008bac:	60fb      	str	r3, [r7, #12]
 8008bae:	2300      	movs	r3, #0
 8008bb0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	2100      	movs	r1, #0
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f002 fdbc 	bl	800b736 <SDMMC_GetResponse>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bc4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008bc8:	d102      	bne.n	8008bd0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008bca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008bce:	e02f      	b.n	8008c30 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008bd0:	f107 030c 	add.w	r3, r7, #12
 8008bd4:	4619      	mov	r1, r3
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 f82e 	bl	8008c38 <SD_FindSCR>
 8008bdc:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d001      	beq.n	8008be8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	e023      	b.n	8008c30 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d01c      	beq.n	8008c2c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681a      	ldr	r2, [r3, #0]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bfa:	041b      	lsls	r3, r3, #16
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	4610      	mov	r0, r2
 8008c00:	f002 fe5c 	bl	800b8bc <SDMMC_CmdAppCommand>
 8008c04:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d001      	beq.n	8008c10 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	e00f      	b.n	8008c30 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	2100      	movs	r1, #0
 8008c16:	4618      	mov	r0, r3
 8008c18:	f002 fe93 	bl	800b942 <SDMMC_CmdBusWidth>
 8008c1c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d001      	beq.n	8008c28 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	e003      	b.n	8008c30 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	e001      	b.n	8008c30 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008c2c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3718      	adds	r7, #24
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b08e      	sub	sp, #56	; 0x38
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008c42:	f7f9 fc0f 	bl	8002464 <HAL_GetTick>
 8008c46:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	60bb      	str	r3, [r7, #8]
 8008c50:	2300      	movs	r3, #0
 8008c52:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	2108      	movs	r1, #8
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f002 fda8 	bl	800b7b4 <SDMMC_CmdBlockLength>
 8008c64:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d001      	beq.n	8008c70 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6e:	e0ad      	b.n	8008dcc <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c78:	041b      	lsls	r3, r3, #16
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	4610      	mov	r0, r2
 8008c7e:	f002 fe1d 	bl	800b8bc <SDMMC_CmdAppCommand>
 8008c82:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d001      	beq.n	8008c8e <SD_FindSCR+0x56>
  {
    return errorstate;
 8008c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c8c:	e09e      	b.n	8008dcc <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8008c92:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008c94:	2308      	movs	r3, #8
 8008c96:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008c98:	2330      	movs	r3, #48	; 0x30
 8008c9a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008c9c:	2302      	movs	r3, #2
 8008c9e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f107 0210 	add.w	r2, r7, #16
 8008cb0:	4611      	mov	r1, r2
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f002 fd52 	bl	800b75c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f002 fe63 	bl	800b988 <SDMMC_CmdSendSCR>
 8008cc2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d027      	beq.n	8008d1a <SD_FindSCR+0xe2>
  {
    return errorstate;
 8008cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ccc:	e07e      	b.n	8008dcc <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d113      	bne.n	8008d04 <SD_FindSCR+0xcc>
 8008cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d110      	bne.n	8008d04 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f002 fcc2 	bl	800b670 <SDMMC_ReadFIFO>
 8008cec:	4603      	mov	r3, r0
 8008cee:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f002 fcbb 	bl	800b670 <SDMMC_ReadFIFO>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	60fb      	str	r3, [r7, #12]
      index++;
 8008cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d00:	3301      	adds	r3, #1
 8008d02:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008d04:	f7f9 fbae 	bl	8002464 <HAL_GetTick>
 8008d08:	4602      	mov	r2, r0
 8008d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d0c:	1ad3      	subs	r3, r2, r3
 8008d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d12:	d102      	bne.n	8008d1a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008d14:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008d18:	e058      	b.n	8008dcc <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d20:	f240 532a 	movw	r3, #1322	; 0x52a
 8008d24:	4013      	ands	r3, r2
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d0d1      	beq.n	8008cce <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d30:	f003 0308 	and.w	r3, r3, #8
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d005      	beq.n	8008d44 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	2208      	movs	r2, #8
 8008d3e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008d40:	2308      	movs	r3, #8
 8008d42:	e043      	b.n	8008dcc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d4a:	f003 0302 	and.w	r3, r3, #2
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d005      	beq.n	8008d5e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	2202      	movs	r2, #2
 8008d58:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008d5a:	2302      	movs	r3, #2
 8008d5c:	e036      	b.n	8008dcc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d64:	f003 0320 	and.w	r3, r3, #32
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d005      	beq.n	8008d78 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	2220      	movs	r2, #32
 8008d72:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008d74:	2320      	movs	r3, #32
 8008d76:	e029      	b.n	8008dcc <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a15      	ldr	r2, [pc, #84]	; (8008dd4 <SD_FindSCR+0x19c>)
 8008d7e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	061a      	lsls	r2, r3, #24
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	021b      	lsls	r3, r3, #8
 8008d88:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008d8c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	0a1b      	lsrs	r3, r3, #8
 8008d92:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008d96:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	0e1b      	lsrs	r3, r3, #24
 8008d9c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da0:	601a      	str	r2, [r3, #0]
    scr++;
 8008da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da4:	3304      	adds	r3, #4
 8008da6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	061a      	lsls	r2, r3, #24
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	021b      	lsls	r3, r3, #8
 8008db0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008db4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	0a1b      	lsrs	r3, r3, #8
 8008dba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008dbe:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	0e1b      	lsrs	r3, r3, #24
 8008dc4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dc8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008dca:	2300      	movs	r3, #0
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3738      	adds	r7, #56	; 0x38
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}
 8008dd4:	18000f3a 	.word	0x18000f3a

08008dd8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b084      	sub	sp, #16
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d101      	bne.n	8008dea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008de6:	2301      	movs	r3, #1
 8008de8:	e10f      	b.n	800900a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2200      	movs	r2, #0
 8008dee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a87      	ldr	r2, [pc, #540]	; (8009014 <HAL_SPI_Init+0x23c>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d00f      	beq.n	8008e1a <HAL_SPI_Init+0x42>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a86      	ldr	r2, [pc, #536]	; (8009018 <HAL_SPI_Init+0x240>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d00a      	beq.n	8008e1a <HAL_SPI_Init+0x42>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a84      	ldr	r2, [pc, #528]	; (800901c <HAL_SPI_Init+0x244>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d005      	beq.n	8008e1a <HAL_SPI_Init+0x42>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	68db      	ldr	r3, [r3, #12]
 8008e12:	2b0f      	cmp	r3, #15
 8008e14:	d901      	bls.n	8008e1a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008e16:	2301      	movs	r3, #1
 8008e18:	e0f7      	b.n	800900a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 f900 	bl	8009020 <SPI_GetPacketSize>
 8008e20:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a7b      	ldr	r2, [pc, #492]	; (8009014 <HAL_SPI_Init+0x23c>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d00c      	beq.n	8008e46 <HAL_SPI_Init+0x6e>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a79      	ldr	r2, [pc, #484]	; (8009018 <HAL_SPI_Init+0x240>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d007      	beq.n	8008e46 <HAL_SPI_Init+0x6e>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a78      	ldr	r2, [pc, #480]	; (800901c <HAL_SPI_Init+0x244>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d002      	beq.n	8008e46 <HAL_SPI_Init+0x6e>
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2b08      	cmp	r3, #8
 8008e44:	d811      	bhi.n	8008e6a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008e4a:	4a72      	ldr	r2, [pc, #456]	; (8009014 <HAL_SPI_Init+0x23c>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d009      	beq.n	8008e64 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a70      	ldr	r2, [pc, #448]	; (8009018 <HAL_SPI_Init+0x240>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d004      	beq.n	8008e64 <HAL_SPI_Init+0x8c>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4a6f      	ldr	r2, [pc, #444]	; (800901c <HAL_SPI_Init+0x244>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d104      	bne.n	8008e6e <HAL_SPI_Init+0x96>
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	2b10      	cmp	r3, #16
 8008e68:	d901      	bls.n	8008e6e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e0cd      	b.n	800900a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d106      	bne.n	8008e88 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f7f8 ff24 	bl	8001cd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2202      	movs	r2, #2
 8008e8c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	681a      	ldr	r2, [r3, #0]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f022 0201 	bic.w	r2, r2, #1
 8008e9e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	689b      	ldr	r3, [r3, #8]
 8008ea6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8008eaa:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	699b      	ldr	r3, [r3, #24]
 8008eb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008eb4:	d119      	bne.n	8008eea <HAL_SPI_Init+0x112>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ebe:	d103      	bne.n	8008ec8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d008      	beq.n	8008eda <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d10c      	bne.n	8008eea <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008ed4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ed8:	d107      	bne.n	8008eea <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	681a      	ldr	r2, [r3, #0]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008ee8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d00f      	beq.n	8008f16 <HAL_SPI_Init+0x13e>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	68db      	ldr	r3, [r3, #12]
 8008efa:	2b06      	cmp	r3, #6
 8008efc:	d90b      	bls.n	8008f16 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	430a      	orrs	r2, r1
 8008f12:	601a      	str	r2, [r3, #0]
 8008f14:	e007      	b.n	8008f26 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008f24:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	69da      	ldr	r2, [r3, #28]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f2e:	431a      	orrs	r2, r3
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	431a      	orrs	r2, r3
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f38:	ea42 0103 	orr.w	r1, r2, r3
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	68da      	ldr	r2, [r3, #12]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	430a      	orrs	r2, r1
 8008f46:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f50:	431a      	orrs	r2, r3
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f56:	431a      	orrs	r2, r3
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	699b      	ldr	r3, [r3, #24]
 8008f5c:	431a      	orrs	r2, r3
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	691b      	ldr	r3, [r3, #16]
 8008f62:	431a      	orrs	r2, r3
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	695b      	ldr	r3, [r3, #20]
 8008f68:	431a      	orrs	r2, r3
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6a1b      	ldr	r3, [r3, #32]
 8008f6e:	431a      	orrs	r2, r3
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	431a      	orrs	r2, r3
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f7a:	431a      	orrs	r2, r3
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	689b      	ldr	r3, [r3, #8]
 8008f80:	431a      	orrs	r2, r3
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f86:	ea42 0103 	orr.w	r1, r2, r3
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	430a      	orrs	r2, r1
 8008f94:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d113      	bne.n	8008fc6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	689b      	ldr	r3, [r3, #8]
 8008fa4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008fb0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008fc4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f022 0201 	bic.w	r2, r2, #1
 8008fd4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d00a      	beq.n	8008ff8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	68db      	ldr	r3, [r3, #12]
 8008fe8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	430a      	orrs	r2, r1
 8008ff6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2201      	movs	r2, #1
 8009004:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8009008:	2300      	movs	r3, #0
}
 800900a:	4618      	mov	r0, r3
 800900c:	3710      	adds	r7, #16
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop
 8009014:	40013000 	.word	0x40013000
 8009018:	40003800 	.word	0x40003800
 800901c:	40003c00 	.word	0x40003c00

08009020 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009020:	b480      	push	{r7}
 8009022:	b085      	sub	sp, #20
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800902c:	095b      	lsrs	r3, r3, #5
 800902e:	3301      	adds	r3, #1
 8009030:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	68db      	ldr	r3, [r3, #12]
 8009036:	3301      	adds	r3, #1
 8009038:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	3307      	adds	r3, #7
 800903e:	08db      	lsrs	r3, r3, #3
 8009040:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	68fa      	ldr	r2, [r7, #12]
 8009046:	fb02 f303 	mul.w	r3, r2, r3
}
 800904a:	4618      	mov	r0, r3
 800904c:	3714      	adds	r7, #20
 800904e:	46bd      	mov	sp, r7
 8009050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009054:	4770      	bx	lr

08009056 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8009056:	b580      	push	{r7, lr}
 8009058:	b082      	sub	sp, #8
 800905a:	af00      	add	r7, sp, #0
 800905c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d101      	bne.n	8009068 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8009064:	2301      	movs	r3, #1
 8009066:	e049      	b.n	80090fc <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800906e:	b2db      	uxtb	r3, r3
 8009070:	2b00      	cmp	r3, #0
 8009072:	d106      	bne.n	8009082 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2200      	movs	r2, #0
 8009078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f000 f841 	bl	8009104 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2202      	movs	r2, #2
 8009086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	3304      	adds	r3, #4
 8009092:	4619      	mov	r1, r3
 8009094:	4610      	mov	r0, r2
 8009096:	f000 fb59 	bl	800974c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2201      	movs	r2, #1
 800909e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2201      	movs	r2, #1
 80090a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2201      	movs	r2, #1
 80090ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2201      	movs	r2, #1
 80090b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2201      	movs	r2, #1
 80090be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2201      	movs	r2, #1
 80090c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2201      	movs	r2, #1
 80090ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2201      	movs	r2, #1
 80090d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2201      	movs	r2, #1
 80090de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2201      	movs	r2, #1
 80090e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2201      	movs	r2, #1
 80090ee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2201      	movs	r2, #1
 80090f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80090fa:	2300      	movs	r3, #0
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3708      	adds	r7, #8
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8009104:	b480      	push	{r7}
 8009106:	b083      	sub	sp, #12
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800910c:	bf00      	nop
 800910e:	370c      	adds	r7, #12
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr

08009118 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d101      	bne.n	800912a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009126:	2301      	movs	r3, #1
 8009128:	e049      	b.n	80091be <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009130:	b2db      	uxtb	r3, r3
 8009132:	2b00      	cmp	r3, #0
 8009134:	d106      	bne.n	8009144 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2200      	movs	r2, #0
 800913a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f7f8 fea6 	bl	8001e90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2202      	movs	r2, #2
 8009148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681a      	ldr	r2, [r3, #0]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	3304      	adds	r3, #4
 8009154:	4619      	mov	r1, r3
 8009156:	4610      	mov	r0, r2
 8009158:	f000 faf8 	bl	800974c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2201      	movs	r2, #1
 8009160:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2201      	movs	r2, #1
 8009168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2201      	movs	r2, #1
 8009170:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2201      	movs	r2, #1
 8009178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2201      	movs	r2, #1
 8009180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2201      	movs	r2, #1
 8009188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2201      	movs	r2, #1
 8009190:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2201      	movs	r2, #1
 8009198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2201      	movs	r2, #1
 80091a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2201      	movs	r2, #1
 80091a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2201      	movs	r2, #1
 80091b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2201      	movs	r2, #1
 80091b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80091bc:	2300      	movs	r3, #0
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3708      	adds	r7, #8
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}

080091c6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80091c6:	b580      	push	{r7, lr}
 80091c8:	b082      	sub	sp, #8
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d101      	bne.n	80091d8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80091d4:	2301      	movs	r3, #1
 80091d6:	e049      	b.n	800926c <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091de:	b2db      	uxtb	r3, r3
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d106      	bne.n	80091f2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2200      	movs	r2, #0
 80091e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f7f8 fe87 	bl	8001f00 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2202      	movs	r2, #2
 80091f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681a      	ldr	r2, [r3, #0]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	3304      	adds	r3, #4
 8009202:	4619      	mov	r1, r3
 8009204:	4610      	mov	r0, r2
 8009206:	f000 faa1 	bl	800974c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2201      	movs	r2, #1
 800920e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2201      	movs	r2, #1
 8009216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2201      	movs	r2, #1
 800921e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2201      	movs	r2, #1
 8009226:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2201      	movs	r2, #1
 800922e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2201      	movs	r2, #1
 8009236:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2201      	movs	r2, #1
 800923e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2201      	movs	r2, #1
 8009246:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2201      	movs	r2, #1
 800924e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2201      	movs	r2, #1
 8009256:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2201      	movs	r2, #1
 800925e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2201      	movs	r2, #1
 8009266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800926a:	2300      	movs	r3, #0
}
 800926c:	4618      	mov	r0, r3
 800926e:	3708      	adds	r7, #8
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b086      	sub	sp, #24
 8009278:	af00      	add	r7, sp, #0
 800927a:	60f8      	str	r0, [r7, #12]
 800927c:	60b9      	str	r1, [r7, #8]
 800927e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009280:	2300      	movs	r3, #0
 8009282:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800928a:	2b01      	cmp	r3, #1
 800928c:	d101      	bne.n	8009292 <HAL_TIM_OC_ConfigChannel+0x1e>
 800928e:	2302      	movs	r3, #2
 8009290:	e066      	b.n	8009360 <HAL_TIM_OC_ConfigChannel+0xec>
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2201      	movs	r2, #1
 8009296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2b14      	cmp	r3, #20
 800929e:	d857      	bhi.n	8009350 <HAL_TIM_OC_ConfigChannel+0xdc>
 80092a0:	a201      	add	r2, pc, #4	; (adr r2, 80092a8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80092a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092a6:	bf00      	nop
 80092a8:	080092fd 	.word	0x080092fd
 80092ac:	08009351 	.word	0x08009351
 80092b0:	08009351 	.word	0x08009351
 80092b4:	08009351 	.word	0x08009351
 80092b8:	0800930b 	.word	0x0800930b
 80092bc:	08009351 	.word	0x08009351
 80092c0:	08009351 	.word	0x08009351
 80092c4:	08009351 	.word	0x08009351
 80092c8:	08009319 	.word	0x08009319
 80092cc:	08009351 	.word	0x08009351
 80092d0:	08009351 	.word	0x08009351
 80092d4:	08009351 	.word	0x08009351
 80092d8:	08009327 	.word	0x08009327
 80092dc:	08009351 	.word	0x08009351
 80092e0:	08009351 	.word	0x08009351
 80092e4:	08009351 	.word	0x08009351
 80092e8:	08009335 	.word	0x08009335
 80092ec:	08009351 	.word	0x08009351
 80092f0:	08009351 	.word	0x08009351
 80092f4:	08009351 	.word	0x08009351
 80092f8:	08009343 	.word	0x08009343
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	68b9      	ldr	r1, [r7, #8]
 8009302:	4618      	mov	r0, r3
 8009304:	f000 fabc 	bl	8009880 <TIM_OC1_SetConfig>
      break;
 8009308:	e025      	b.n	8009356 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	68b9      	ldr	r1, [r7, #8]
 8009310:	4618      	mov	r0, r3
 8009312:	f000 fb45 	bl	80099a0 <TIM_OC2_SetConfig>
      break;
 8009316:	e01e      	b.n	8009356 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	68b9      	ldr	r1, [r7, #8]
 800931e:	4618      	mov	r0, r3
 8009320:	f000 fbc8 	bl	8009ab4 <TIM_OC3_SetConfig>
      break;
 8009324:	e017      	b.n	8009356 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	68b9      	ldr	r1, [r7, #8]
 800932c:	4618      	mov	r0, r3
 800932e:	f000 fc49 	bl	8009bc4 <TIM_OC4_SetConfig>
      break;
 8009332:	e010      	b.n	8009356 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	68b9      	ldr	r1, [r7, #8]
 800933a:	4618      	mov	r0, r3
 800933c:	f000 fcac 	bl	8009c98 <TIM_OC5_SetConfig>
      break;
 8009340:	e009      	b.n	8009356 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	68b9      	ldr	r1, [r7, #8]
 8009348:	4618      	mov	r0, r3
 800934a:	f000 fd09 	bl	8009d60 <TIM_OC6_SetConfig>
      break;
 800934e:	e002      	b.n	8009356 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8009350:	2301      	movs	r3, #1
 8009352:	75fb      	strb	r3, [r7, #23]
      break;
 8009354:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2200      	movs	r2, #0
 800935a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800935e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009360:	4618      	mov	r0, r3
 8009362:	3718      	adds	r7, #24
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b086      	sub	sp, #24
 800936c:	af00      	add	r7, sp, #0
 800936e:	60f8      	str	r0, [r7, #12]
 8009370:	60b9      	str	r1, [r7, #8]
 8009372:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009374:	2300      	movs	r3, #0
 8009376:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800937e:	2b01      	cmp	r3, #1
 8009380:	d101      	bne.n	8009386 <HAL_TIM_IC_ConfigChannel+0x1e>
 8009382:	2302      	movs	r3, #2
 8009384:	e088      	b.n	8009498 <HAL_TIM_IC_ConfigChannel+0x130>
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2201      	movs	r2, #1
 800938a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d11b      	bne.n	80093cc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80093a4:	f000 fe2c 	bl	800a000 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	699a      	ldr	r2, [r3, #24]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f022 020c 	bic.w	r2, r2, #12
 80093b6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	6999      	ldr	r1, [r3, #24]
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	689a      	ldr	r2, [r3, #8]
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	430a      	orrs	r2, r1
 80093c8:	619a      	str	r2, [r3, #24]
 80093ca:	e060      	b.n	800948e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2b04      	cmp	r3, #4
 80093d0:	d11c      	bne.n	800940c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80093e2:	f000 feb0 	bl	800a146 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	699a      	ldr	r2, [r3, #24]
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80093f4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	6999      	ldr	r1, [r3, #24]
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	689b      	ldr	r3, [r3, #8]
 8009400:	021a      	lsls	r2, r3, #8
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	430a      	orrs	r2, r1
 8009408:	619a      	str	r2, [r3, #24]
 800940a:	e040      	b.n	800948e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2b08      	cmp	r3, #8
 8009410:	d11b      	bne.n	800944a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8009422:	f000 fefd 	bl	800a220 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	69da      	ldr	r2, [r3, #28]
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f022 020c 	bic.w	r2, r2, #12
 8009434:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	69d9      	ldr	r1, [r3, #28]
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	689a      	ldr	r2, [r3, #8]
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	430a      	orrs	r2, r1
 8009446:	61da      	str	r2, [r3, #28]
 8009448:	e021      	b.n	800948e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2b0c      	cmp	r3, #12
 800944e:	d11c      	bne.n	800948a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8009460:	f000 ff1a 	bl	800a298 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	69da      	ldr	r2, [r3, #28]
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009472:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	69d9      	ldr	r1, [r3, #28]
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	689b      	ldr	r3, [r3, #8]
 800947e:	021a      	lsls	r2, r3, #8
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	430a      	orrs	r2, r1
 8009486:	61da      	str	r2, [r3, #28]
 8009488:	e001      	b.n	800948e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800948a:	2301      	movs	r3, #1
 800948c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	2200      	movs	r2, #0
 8009492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009496:	7dfb      	ldrb	r3, [r7, #23]
}
 8009498:	4618      	mov	r0, r3
 800949a:	3718      	adds	r7, #24
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b086      	sub	sp, #24
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	60f8      	str	r0, [r7, #12]
 80094a8:	60b9      	str	r1, [r7, #8]
 80094aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80094ac:	2300      	movs	r3, #0
 80094ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094b6:	2b01      	cmp	r3, #1
 80094b8:	d101      	bne.n	80094be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80094ba:	2302      	movs	r3, #2
 80094bc:	e0ff      	b.n	80096be <HAL_TIM_PWM_ConfigChannel+0x21e>
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	2201      	movs	r2, #1
 80094c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2b14      	cmp	r3, #20
 80094ca:	f200 80f0 	bhi.w	80096ae <HAL_TIM_PWM_ConfigChannel+0x20e>
 80094ce:	a201      	add	r2, pc, #4	; (adr r2, 80094d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80094d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094d4:	08009529 	.word	0x08009529
 80094d8:	080096af 	.word	0x080096af
 80094dc:	080096af 	.word	0x080096af
 80094e0:	080096af 	.word	0x080096af
 80094e4:	08009569 	.word	0x08009569
 80094e8:	080096af 	.word	0x080096af
 80094ec:	080096af 	.word	0x080096af
 80094f0:	080096af 	.word	0x080096af
 80094f4:	080095ab 	.word	0x080095ab
 80094f8:	080096af 	.word	0x080096af
 80094fc:	080096af 	.word	0x080096af
 8009500:	080096af 	.word	0x080096af
 8009504:	080095eb 	.word	0x080095eb
 8009508:	080096af 	.word	0x080096af
 800950c:	080096af 	.word	0x080096af
 8009510:	080096af 	.word	0x080096af
 8009514:	0800962d 	.word	0x0800962d
 8009518:	080096af 	.word	0x080096af
 800951c:	080096af 	.word	0x080096af
 8009520:	080096af 	.word	0x080096af
 8009524:	0800966d 	.word	0x0800966d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	68b9      	ldr	r1, [r7, #8]
 800952e:	4618      	mov	r0, r3
 8009530:	f000 f9a6 	bl	8009880 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	699a      	ldr	r2, [r3, #24]
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f042 0208 	orr.w	r2, r2, #8
 8009542:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	699a      	ldr	r2, [r3, #24]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f022 0204 	bic.w	r2, r2, #4
 8009552:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	6999      	ldr	r1, [r3, #24]
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	691a      	ldr	r2, [r3, #16]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	430a      	orrs	r2, r1
 8009564:	619a      	str	r2, [r3, #24]
      break;
 8009566:	e0a5      	b.n	80096b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	68b9      	ldr	r1, [r7, #8]
 800956e:	4618      	mov	r0, r3
 8009570:	f000 fa16 	bl	80099a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	699a      	ldr	r2, [r3, #24]
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009582:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	699a      	ldr	r2, [r3, #24]
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009592:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	6999      	ldr	r1, [r3, #24]
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	691b      	ldr	r3, [r3, #16]
 800959e:	021a      	lsls	r2, r3, #8
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	430a      	orrs	r2, r1
 80095a6:	619a      	str	r2, [r3, #24]
      break;
 80095a8:	e084      	b.n	80096b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	68b9      	ldr	r1, [r7, #8]
 80095b0:	4618      	mov	r0, r3
 80095b2:	f000 fa7f 	bl	8009ab4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	69da      	ldr	r2, [r3, #28]
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f042 0208 	orr.w	r2, r2, #8
 80095c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	69da      	ldr	r2, [r3, #28]
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f022 0204 	bic.w	r2, r2, #4
 80095d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	69d9      	ldr	r1, [r3, #28]
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	691a      	ldr	r2, [r3, #16]
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	430a      	orrs	r2, r1
 80095e6:	61da      	str	r2, [r3, #28]
      break;
 80095e8:	e064      	b.n	80096b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	68b9      	ldr	r1, [r7, #8]
 80095f0:	4618      	mov	r0, r3
 80095f2:	f000 fae7 	bl	8009bc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	69da      	ldr	r2, [r3, #28]
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009604:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	69da      	ldr	r2, [r3, #28]
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009614:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	69d9      	ldr	r1, [r3, #28]
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	691b      	ldr	r3, [r3, #16]
 8009620:	021a      	lsls	r2, r3, #8
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	430a      	orrs	r2, r1
 8009628:	61da      	str	r2, [r3, #28]
      break;
 800962a:	e043      	b.n	80096b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	68b9      	ldr	r1, [r7, #8]
 8009632:	4618      	mov	r0, r3
 8009634:	f000 fb30 	bl	8009c98 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f042 0208 	orr.w	r2, r2, #8
 8009646:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f022 0204 	bic.w	r2, r2, #4
 8009656:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	691a      	ldr	r2, [r3, #16]
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	430a      	orrs	r2, r1
 8009668:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800966a:	e023      	b.n	80096b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	68b9      	ldr	r1, [r7, #8]
 8009672:	4618      	mov	r0, r3
 8009674:	f000 fb74 	bl	8009d60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009686:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009696:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	691b      	ldr	r3, [r3, #16]
 80096a2:	021a      	lsls	r2, r3, #8
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	430a      	orrs	r2, r1
 80096aa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80096ac:	e002      	b.n	80096b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80096ae:	2301      	movs	r3, #1
 80096b0:	75fb      	strb	r3, [r7, #23]
      break;
 80096b2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2200      	movs	r2, #0
 80096b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80096bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3718      	adds	r7, #24
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
 80096c6:	bf00      	nop

080096c8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b082      	sub	sp, #8
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d101      	bne.n	80096e0 <HAL_TIM_SlaveConfigSynchro+0x18>
 80096dc:	2302      	movs	r3, #2
 80096de:	e031      	b.n	8009744 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2201      	movs	r2, #1
 80096e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2202      	movs	r2, #2
 80096ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80096f0:	6839      	ldr	r1, [r7, #0]
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 fb9a 	bl	8009e2c <TIM_SlaveTimer_SetConfig>
 80096f8:	4603      	mov	r3, r0
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d009      	beq.n	8009712 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2201      	movs	r2, #1
 8009702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2200      	movs	r2, #0
 800970a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800970e:	2301      	movs	r3, #1
 8009710:	e018      	b.n	8009744 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	68da      	ldr	r2, [r3, #12]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009720:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	68da      	ldr	r2, [r3, #12]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009730:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2201      	movs	r2, #1
 8009736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2200      	movs	r2, #0
 800973e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009742:	2300      	movs	r3, #0
}
 8009744:	4618      	mov	r0, r3
 8009746:	3708      	adds	r7, #8
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800974c:	b480      	push	{r7}
 800974e:	b085      	sub	sp, #20
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	4a40      	ldr	r2, [pc, #256]	; (8009860 <TIM_Base_SetConfig+0x114>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d013      	beq.n	800978c <TIM_Base_SetConfig+0x40>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800976a:	d00f      	beq.n	800978c <TIM_Base_SetConfig+0x40>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	4a3d      	ldr	r2, [pc, #244]	; (8009864 <TIM_Base_SetConfig+0x118>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d00b      	beq.n	800978c <TIM_Base_SetConfig+0x40>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	4a3c      	ldr	r2, [pc, #240]	; (8009868 <TIM_Base_SetConfig+0x11c>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d007      	beq.n	800978c <TIM_Base_SetConfig+0x40>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	4a3b      	ldr	r2, [pc, #236]	; (800986c <TIM_Base_SetConfig+0x120>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d003      	beq.n	800978c <TIM_Base_SetConfig+0x40>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	4a3a      	ldr	r2, [pc, #232]	; (8009870 <TIM_Base_SetConfig+0x124>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d108      	bne.n	800979e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009792:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	68fa      	ldr	r2, [r7, #12]
 800979a:	4313      	orrs	r3, r2
 800979c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	4a2f      	ldr	r2, [pc, #188]	; (8009860 <TIM_Base_SetConfig+0x114>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d01f      	beq.n	80097e6 <TIM_Base_SetConfig+0x9a>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097ac:	d01b      	beq.n	80097e6 <TIM_Base_SetConfig+0x9a>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	4a2c      	ldr	r2, [pc, #176]	; (8009864 <TIM_Base_SetConfig+0x118>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d017      	beq.n	80097e6 <TIM_Base_SetConfig+0x9a>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	4a2b      	ldr	r2, [pc, #172]	; (8009868 <TIM_Base_SetConfig+0x11c>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d013      	beq.n	80097e6 <TIM_Base_SetConfig+0x9a>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	4a2a      	ldr	r2, [pc, #168]	; (800986c <TIM_Base_SetConfig+0x120>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d00f      	beq.n	80097e6 <TIM_Base_SetConfig+0x9a>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	4a29      	ldr	r2, [pc, #164]	; (8009870 <TIM_Base_SetConfig+0x124>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d00b      	beq.n	80097e6 <TIM_Base_SetConfig+0x9a>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	4a28      	ldr	r2, [pc, #160]	; (8009874 <TIM_Base_SetConfig+0x128>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d007      	beq.n	80097e6 <TIM_Base_SetConfig+0x9a>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	4a27      	ldr	r2, [pc, #156]	; (8009878 <TIM_Base_SetConfig+0x12c>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d003      	beq.n	80097e6 <TIM_Base_SetConfig+0x9a>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	4a26      	ldr	r2, [pc, #152]	; (800987c <TIM_Base_SetConfig+0x130>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d108      	bne.n	80097f8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	68db      	ldr	r3, [r3, #12]
 80097f2:	68fa      	ldr	r2, [r7, #12]
 80097f4:	4313      	orrs	r3, r2
 80097f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	695b      	ldr	r3, [r3, #20]
 8009802:	4313      	orrs	r3, r2
 8009804:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	68fa      	ldr	r2, [r7, #12]
 800980a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	689a      	ldr	r2, [r3, #8]
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	4a10      	ldr	r2, [pc, #64]	; (8009860 <TIM_Base_SetConfig+0x114>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d00f      	beq.n	8009844 <TIM_Base_SetConfig+0xf8>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	4a12      	ldr	r2, [pc, #72]	; (8009870 <TIM_Base_SetConfig+0x124>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d00b      	beq.n	8009844 <TIM_Base_SetConfig+0xf8>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	4a11      	ldr	r2, [pc, #68]	; (8009874 <TIM_Base_SetConfig+0x128>)
 8009830:	4293      	cmp	r3, r2
 8009832:	d007      	beq.n	8009844 <TIM_Base_SetConfig+0xf8>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	4a10      	ldr	r2, [pc, #64]	; (8009878 <TIM_Base_SetConfig+0x12c>)
 8009838:	4293      	cmp	r3, r2
 800983a:	d003      	beq.n	8009844 <TIM_Base_SetConfig+0xf8>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	4a0f      	ldr	r2, [pc, #60]	; (800987c <TIM_Base_SetConfig+0x130>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d103      	bne.n	800984c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	691a      	ldr	r2, [r3, #16]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2201      	movs	r2, #1
 8009850:	615a      	str	r2, [r3, #20]
}
 8009852:	bf00      	nop
 8009854:	3714      	adds	r7, #20
 8009856:	46bd      	mov	sp, r7
 8009858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985c:	4770      	bx	lr
 800985e:	bf00      	nop
 8009860:	40010000 	.word	0x40010000
 8009864:	40000400 	.word	0x40000400
 8009868:	40000800 	.word	0x40000800
 800986c:	40000c00 	.word	0x40000c00
 8009870:	40010400 	.word	0x40010400
 8009874:	40014000 	.word	0x40014000
 8009878:	40014400 	.word	0x40014400
 800987c:	40014800 	.word	0x40014800

08009880 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009880:	b480      	push	{r7}
 8009882:	b087      	sub	sp, #28
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6a1b      	ldr	r3, [r3, #32]
 800988e:	f023 0201 	bic.w	r2, r3, #1
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6a1b      	ldr	r3, [r3, #32]
 800989a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	699b      	ldr	r3, [r3, #24]
 80098a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80098a8:	68fa      	ldr	r2, [r7, #12]
 80098aa:	4b37      	ldr	r3, [pc, #220]	; (8009988 <TIM_OC1_SetConfig+0x108>)
 80098ac:	4013      	ands	r3, r2
 80098ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	f023 0303 	bic.w	r3, r3, #3
 80098b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	68fa      	ldr	r2, [r7, #12]
 80098be:	4313      	orrs	r3, r2
 80098c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	f023 0302 	bic.w	r3, r3, #2
 80098c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	689b      	ldr	r3, [r3, #8]
 80098ce:	697a      	ldr	r2, [r7, #20]
 80098d0:	4313      	orrs	r3, r2
 80098d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	4a2d      	ldr	r2, [pc, #180]	; (800998c <TIM_OC1_SetConfig+0x10c>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d00f      	beq.n	80098fc <TIM_OC1_SetConfig+0x7c>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	4a2c      	ldr	r2, [pc, #176]	; (8009990 <TIM_OC1_SetConfig+0x110>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d00b      	beq.n	80098fc <TIM_OC1_SetConfig+0x7c>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	4a2b      	ldr	r2, [pc, #172]	; (8009994 <TIM_OC1_SetConfig+0x114>)
 80098e8:	4293      	cmp	r3, r2
 80098ea:	d007      	beq.n	80098fc <TIM_OC1_SetConfig+0x7c>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	4a2a      	ldr	r2, [pc, #168]	; (8009998 <TIM_OC1_SetConfig+0x118>)
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d003      	beq.n	80098fc <TIM_OC1_SetConfig+0x7c>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	4a29      	ldr	r2, [pc, #164]	; (800999c <TIM_OC1_SetConfig+0x11c>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d10c      	bne.n	8009916 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	f023 0308 	bic.w	r3, r3, #8
 8009902:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	68db      	ldr	r3, [r3, #12]
 8009908:	697a      	ldr	r2, [r7, #20]
 800990a:	4313      	orrs	r3, r2
 800990c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	f023 0304 	bic.w	r3, r3, #4
 8009914:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	4a1c      	ldr	r2, [pc, #112]	; (800998c <TIM_OC1_SetConfig+0x10c>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d00f      	beq.n	800993e <TIM_OC1_SetConfig+0xbe>
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	4a1b      	ldr	r2, [pc, #108]	; (8009990 <TIM_OC1_SetConfig+0x110>)
 8009922:	4293      	cmp	r3, r2
 8009924:	d00b      	beq.n	800993e <TIM_OC1_SetConfig+0xbe>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	4a1a      	ldr	r2, [pc, #104]	; (8009994 <TIM_OC1_SetConfig+0x114>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d007      	beq.n	800993e <TIM_OC1_SetConfig+0xbe>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	4a19      	ldr	r2, [pc, #100]	; (8009998 <TIM_OC1_SetConfig+0x118>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d003      	beq.n	800993e <TIM_OC1_SetConfig+0xbe>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	4a18      	ldr	r2, [pc, #96]	; (800999c <TIM_OC1_SetConfig+0x11c>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d111      	bne.n	8009962 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009944:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800994c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	695b      	ldr	r3, [r3, #20]
 8009952:	693a      	ldr	r2, [r7, #16]
 8009954:	4313      	orrs	r3, r2
 8009956:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	699b      	ldr	r3, [r3, #24]
 800995c:	693a      	ldr	r2, [r7, #16]
 800995e:	4313      	orrs	r3, r2
 8009960:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	693a      	ldr	r2, [r7, #16]
 8009966:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	68fa      	ldr	r2, [r7, #12]
 800996c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	685a      	ldr	r2, [r3, #4]
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	697a      	ldr	r2, [r7, #20]
 800997a:	621a      	str	r2, [r3, #32]
}
 800997c:	bf00      	nop
 800997e:	371c      	adds	r7, #28
 8009980:	46bd      	mov	sp, r7
 8009982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009986:	4770      	bx	lr
 8009988:	fffeff8f 	.word	0xfffeff8f
 800998c:	40010000 	.word	0x40010000
 8009990:	40010400 	.word	0x40010400
 8009994:	40014000 	.word	0x40014000
 8009998:	40014400 	.word	0x40014400
 800999c:	40014800 	.word	0x40014800

080099a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b087      	sub	sp, #28
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6a1b      	ldr	r3, [r3, #32]
 80099ae:	f023 0210 	bic.w	r2, r3, #16
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6a1b      	ldr	r3, [r3, #32]
 80099ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	685b      	ldr	r3, [r3, #4]
 80099c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	699b      	ldr	r3, [r3, #24]
 80099c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80099c8:	68fa      	ldr	r2, [r7, #12]
 80099ca:	4b34      	ldr	r3, [pc, #208]	; (8009a9c <TIM_OC2_SetConfig+0xfc>)
 80099cc:	4013      	ands	r3, r2
 80099ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	021b      	lsls	r3, r3, #8
 80099de:	68fa      	ldr	r2, [r7, #12]
 80099e0:	4313      	orrs	r3, r2
 80099e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	f023 0320 	bic.w	r3, r3, #32
 80099ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	689b      	ldr	r3, [r3, #8]
 80099f0:	011b      	lsls	r3, r3, #4
 80099f2:	697a      	ldr	r2, [r7, #20]
 80099f4:	4313      	orrs	r3, r2
 80099f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	4a29      	ldr	r2, [pc, #164]	; (8009aa0 <TIM_OC2_SetConfig+0x100>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d003      	beq.n	8009a08 <TIM_OC2_SetConfig+0x68>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	4a28      	ldr	r2, [pc, #160]	; (8009aa4 <TIM_OC2_SetConfig+0x104>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d10d      	bne.n	8009a24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	68db      	ldr	r3, [r3, #12]
 8009a14:	011b      	lsls	r3, r3, #4
 8009a16:	697a      	ldr	r2, [r7, #20]
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	4a1e      	ldr	r2, [pc, #120]	; (8009aa0 <TIM_OC2_SetConfig+0x100>)
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d00f      	beq.n	8009a4c <TIM_OC2_SetConfig+0xac>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	4a1d      	ldr	r2, [pc, #116]	; (8009aa4 <TIM_OC2_SetConfig+0x104>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d00b      	beq.n	8009a4c <TIM_OC2_SetConfig+0xac>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	4a1c      	ldr	r2, [pc, #112]	; (8009aa8 <TIM_OC2_SetConfig+0x108>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d007      	beq.n	8009a4c <TIM_OC2_SetConfig+0xac>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	4a1b      	ldr	r2, [pc, #108]	; (8009aac <TIM_OC2_SetConfig+0x10c>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d003      	beq.n	8009a4c <TIM_OC2_SetConfig+0xac>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	4a1a      	ldr	r2, [pc, #104]	; (8009ab0 <TIM_OC2_SetConfig+0x110>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d113      	bne.n	8009a74 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009a52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009a5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	695b      	ldr	r3, [r3, #20]
 8009a60:	009b      	lsls	r3, r3, #2
 8009a62:	693a      	ldr	r2, [r7, #16]
 8009a64:	4313      	orrs	r3, r2
 8009a66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	699b      	ldr	r3, [r3, #24]
 8009a6c:	009b      	lsls	r3, r3, #2
 8009a6e:	693a      	ldr	r2, [r7, #16]
 8009a70:	4313      	orrs	r3, r2
 8009a72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	693a      	ldr	r2, [r7, #16]
 8009a78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	68fa      	ldr	r2, [r7, #12]
 8009a7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	685a      	ldr	r2, [r3, #4]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	697a      	ldr	r2, [r7, #20]
 8009a8c:	621a      	str	r2, [r3, #32]
}
 8009a8e:	bf00      	nop
 8009a90:	371c      	adds	r7, #28
 8009a92:	46bd      	mov	sp, r7
 8009a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a98:	4770      	bx	lr
 8009a9a:	bf00      	nop
 8009a9c:	feff8fff 	.word	0xfeff8fff
 8009aa0:	40010000 	.word	0x40010000
 8009aa4:	40010400 	.word	0x40010400
 8009aa8:	40014000 	.word	0x40014000
 8009aac:	40014400 	.word	0x40014400
 8009ab0:	40014800 	.word	0x40014800

08009ab4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b087      	sub	sp, #28
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6a1b      	ldr	r3, [r3, #32]
 8009ac2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6a1b      	ldr	r3, [r3, #32]
 8009ace:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	69db      	ldr	r3, [r3, #28]
 8009ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009adc:	68fa      	ldr	r2, [r7, #12]
 8009ade:	4b33      	ldr	r3, [pc, #204]	; (8009bac <TIM_OC3_SetConfig+0xf8>)
 8009ae0:	4013      	ands	r3, r2
 8009ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f023 0303 	bic.w	r3, r3, #3
 8009aea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	68fa      	ldr	r2, [r7, #12]
 8009af2:	4313      	orrs	r3, r2
 8009af4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009afc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	689b      	ldr	r3, [r3, #8]
 8009b02:	021b      	lsls	r3, r3, #8
 8009b04:	697a      	ldr	r2, [r7, #20]
 8009b06:	4313      	orrs	r3, r2
 8009b08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	4a28      	ldr	r2, [pc, #160]	; (8009bb0 <TIM_OC3_SetConfig+0xfc>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d003      	beq.n	8009b1a <TIM_OC3_SetConfig+0x66>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	4a27      	ldr	r2, [pc, #156]	; (8009bb4 <TIM_OC3_SetConfig+0x100>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d10d      	bne.n	8009b36 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	68db      	ldr	r3, [r3, #12]
 8009b26:	021b      	lsls	r3, r3, #8
 8009b28:	697a      	ldr	r2, [r7, #20]
 8009b2a:	4313      	orrs	r3, r2
 8009b2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	4a1d      	ldr	r2, [pc, #116]	; (8009bb0 <TIM_OC3_SetConfig+0xfc>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d00f      	beq.n	8009b5e <TIM_OC3_SetConfig+0xaa>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	4a1c      	ldr	r2, [pc, #112]	; (8009bb4 <TIM_OC3_SetConfig+0x100>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d00b      	beq.n	8009b5e <TIM_OC3_SetConfig+0xaa>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	4a1b      	ldr	r2, [pc, #108]	; (8009bb8 <TIM_OC3_SetConfig+0x104>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d007      	beq.n	8009b5e <TIM_OC3_SetConfig+0xaa>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	4a1a      	ldr	r2, [pc, #104]	; (8009bbc <TIM_OC3_SetConfig+0x108>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d003      	beq.n	8009b5e <TIM_OC3_SetConfig+0xaa>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	4a19      	ldr	r2, [pc, #100]	; (8009bc0 <TIM_OC3_SetConfig+0x10c>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d113      	bne.n	8009b86 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009b6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	695b      	ldr	r3, [r3, #20]
 8009b72:	011b      	lsls	r3, r3, #4
 8009b74:	693a      	ldr	r2, [r7, #16]
 8009b76:	4313      	orrs	r3, r2
 8009b78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	699b      	ldr	r3, [r3, #24]
 8009b7e:	011b      	lsls	r3, r3, #4
 8009b80:	693a      	ldr	r2, [r7, #16]
 8009b82:	4313      	orrs	r3, r2
 8009b84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	693a      	ldr	r2, [r7, #16]
 8009b8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	68fa      	ldr	r2, [r7, #12]
 8009b90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	685a      	ldr	r2, [r3, #4]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	697a      	ldr	r2, [r7, #20]
 8009b9e:	621a      	str	r2, [r3, #32]
}
 8009ba0:	bf00      	nop
 8009ba2:	371c      	adds	r7, #28
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr
 8009bac:	fffeff8f 	.word	0xfffeff8f
 8009bb0:	40010000 	.word	0x40010000
 8009bb4:	40010400 	.word	0x40010400
 8009bb8:	40014000 	.word	0x40014000
 8009bbc:	40014400 	.word	0x40014400
 8009bc0:	40014800 	.word	0x40014800

08009bc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b087      	sub	sp, #28
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6a1b      	ldr	r3, [r3, #32]
 8009bd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6a1b      	ldr	r3, [r3, #32]
 8009bde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	69db      	ldr	r3, [r3, #28]
 8009bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009bec:	68fa      	ldr	r2, [r7, #12]
 8009bee:	4b24      	ldr	r3, [pc, #144]	; (8009c80 <TIM_OC4_SetConfig+0xbc>)
 8009bf0:	4013      	ands	r3, r2
 8009bf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009bfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	021b      	lsls	r3, r3, #8
 8009c02:	68fa      	ldr	r2, [r7, #12]
 8009c04:	4313      	orrs	r3, r2
 8009c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	689b      	ldr	r3, [r3, #8]
 8009c14:	031b      	lsls	r3, r3, #12
 8009c16:	693a      	ldr	r2, [r7, #16]
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	4a19      	ldr	r2, [pc, #100]	; (8009c84 <TIM_OC4_SetConfig+0xc0>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d00f      	beq.n	8009c44 <TIM_OC4_SetConfig+0x80>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	4a18      	ldr	r2, [pc, #96]	; (8009c88 <TIM_OC4_SetConfig+0xc4>)
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	d00b      	beq.n	8009c44 <TIM_OC4_SetConfig+0x80>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	4a17      	ldr	r2, [pc, #92]	; (8009c8c <TIM_OC4_SetConfig+0xc8>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d007      	beq.n	8009c44 <TIM_OC4_SetConfig+0x80>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	4a16      	ldr	r2, [pc, #88]	; (8009c90 <TIM_OC4_SetConfig+0xcc>)
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	d003      	beq.n	8009c44 <TIM_OC4_SetConfig+0x80>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	4a15      	ldr	r2, [pc, #84]	; (8009c94 <TIM_OC4_SetConfig+0xd0>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d109      	bne.n	8009c58 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	695b      	ldr	r3, [r3, #20]
 8009c50:	019b      	lsls	r3, r3, #6
 8009c52:	697a      	ldr	r2, [r7, #20]
 8009c54:	4313      	orrs	r3, r2
 8009c56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	697a      	ldr	r2, [r7, #20]
 8009c5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	68fa      	ldr	r2, [r7, #12]
 8009c62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	685a      	ldr	r2, [r3, #4]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	693a      	ldr	r2, [r7, #16]
 8009c70:	621a      	str	r2, [r3, #32]
}
 8009c72:	bf00      	nop
 8009c74:	371c      	adds	r7, #28
 8009c76:	46bd      	mov	sp, r7
 8009c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7c:	4770      	bx	lr
 8009c7e:	bf00      	nop
 8009c80:	feff8fff 	.word	0xfeff8fff
 8009c84:	40010000 	.word	0x40010000
 8009c88:	40010400 	.word	0x40010400
 8009c8c:	40014000 	.word	0x40014000
 8009c90:	40014400 	.word	0x40014400
 8009c94:	40014800 	.word	0x40014800

08009c98 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b087      	sub	sp, #28
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
 8009ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6a1b      	ldr	r3, [r3, #32]
 8009ca6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6a1b      	ldr	r3, [r3, #32]
 8009cb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009cc0:	68fa      	ldr	r2, [r7, #12]
 8009cc2:	4b21      	ldr	r3, [pc, #132]	; (8009d48 <TIM_OC5_SetConfig+0xb0>)
 8009cc4:	4013      	ands	r3, r2
 8009cc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	68fa      	ldr	r2, [r7, #12]
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009cd8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	689b      	ldr	r3, [r3, #8]
 8009cde:	041b      	lsls	r3, r3, #16
 8009ce0:	693a      	ldr	r2, [r7, #16]
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	4a18      	ldr	r2, [pc, #96]	; (8009d4c <TIM_OC5_SetConfig+0xb4>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d00f      	beq.n	8009d0e <TIM_OC5_SetConfig+0x76>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	4a17      	ldr	r2, [pc, #92]	; (8009d50 <TIM_OC5_SetConfig+0xb8>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d00b      	beq.n	8009d0e <TIM_OC5_SetConfig+0x76>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	4a16      	ldr	r2, [pc, #88]	; (8009d54 <TIM_OC5_SetConfig+0xbc>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d007      	beq.n	8009d0e <TIM_OC5_SetConfig+0x76>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	4a15      	ldr	r2, [pc, #84]	; (8009d58 <TIM_OC5_SetConfig+0xc0>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d003      	beq.n	8009d0e <TIM_OC5_SetConfig+0x76>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	4a14      	ldr	r2, [pc, #80]	; (8009d5c <TIM_OC5_SetConfig+0xc4>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d109      	bne.n	8009d22 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d14:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	695b      	ldr	r3, [r3, #20]
 8009d1a:	021b      	lsls	r3, r3, #8
 8009d1c:	697a      	ldr	r2, [r7, #20]
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	697a      	ldr	r2, [r7, #20]
 8009d26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	68fa      	ldr	r2, [r7, #12]
 8009d2c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	685a      	ldr	r2, [r3, #4]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	693a      	ldr	r2, [r7, #16]
 8009d3a:	621a      	str	r2, [r3, #32]
}
 8009d3c:	bf00      	nop
 8009d3e:	371c      	adds	r7, #28
 8009d40:	46bd      	mov	sp, r7
 8009d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d46:	4770      	bx	lr
 8009d48:	fffeff8f 	.word	0xfffeff8f
 8009d4c:	40010000 	.word	0x40010000
 8009d50:	40010400 	.word	0x40010400
 8009d54:	40014000 	.word	0x40014000
 8009d58:	40014400 	.word	0x40014400
 8009d5c:	40014800 	.word	0x40014800

08009d60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009d60:	b480      	push	{r7}
 8009d62:	b087      	sub	sp, #28
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
 8009d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6a1b      	ldr	r3, [r3, #32]
 8009d6e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6a1b      	ldr	r3, [r3, #32]
 8009d7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009d88:	68fa      	ldr	r2, [r7, #12]
 8009d8a:	4b22      	ldr	r3, [pc, #136]	; (8009e14 <TIM_OC6_SetConfig+0xb4>)
 8009d8c:	4013      	ands	r3, r2
 8009d8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	021b      	lsls	r3, r3, #8
 8009d96:	68fa      	ldr	r2, [r7, #12]
 8009d98:	4313      	orrs	r3, r2
 8009d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009da2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	689b      	ldr	r3, [r3, #8]
 8009da8:	051b      	lsls	r3, r3, #20
 8009daa:	693a      	ldr	r2, [r7, #16]
 8009dac:	4313      	orrs	r3, r2
 8009dae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	4a19      	ldr	r2, [pc, #100]	; (8009e18 <TIM_OC6_SetConfig+0xb8>)
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d00f      	beq.n	8009dd8 <TIM_OC6_SetConfig+0x78>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	4a18      	ldr	r2, [pc, #96]	; (8009e1c <TIM_OC6_SetConfig+0xbc>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d00b      	beq.n	8009dd8 <TIM_OC6_SetConfig+0x78>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	4a17      	ldr	r2, [pc, #92]	; (8009e20 <TIM_OC6_SetConfig+0xc0>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d007      	beq.n	8009dd8 <TIM_OC6_SetConfig+0x78>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	4a16      	ldr	r2, [pc, #88]	; (8009e24 <TIM_OC6_SetConfig+0xc4>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d003      	beq.n	8009dd8 <TIM_OC6_SetConfig+0x78>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	4a15      	ldr	r2, [pc, #84]	; (8009e28 <TIM_OC6_SetConfig+0xc8>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d109      	bne.n	8009dec <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009dde:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	695b      	ldr	r3, [r3, #20]
 8009de4:	029b      	lsls	r3, r3, #10
 8009de6:	697a      	ldr	r2, [r7, #20]
 8009de8:	4313      	orrs	r3, r2
 8009dea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	697a      	ldr	r2, [r7, #20]
 8009df0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	68fa      	ldr	r2, [r7, #12]
 8009df6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	685a      	ldr	r2, [r3, #4]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	693a      	ldr	r2, [r7, #16]
 8009e04:	621a      	str	r2, [r3, #32]
}
 8009e06:	bf00      	nop
 8009e08:	371c      	adds	r7, #28
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e10:	4770      	bx	lr
 8009e12:	bf00      	nop
 8009e14:	feff8fff 	.word	0xfeff8fff
 8009e18:	40010000 	.word	0x40010000
 8009e1c:	40010400 	.word	0x40010400
 8009e20:	40014000 	.word	0x40014000
 8009e24:	40014400 	.word	0x40014400
 8009e28:	40014800 	.word	0x40014800

08009e2c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b086      	sub	sp, #24
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009e36:	2300      	movs	r3, #0
 8009e38:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	689b      	ldr	r3, [r3, #8]
 8009e40:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009e42:	693a      	ldr	r2, [r7, #16]
 8009e44:	4b65      	ldr	r3, [pc, #404]	; (8009fdc <TIM_SlaveTimer_SetConfig+0x1b0>)
 8009e46:	4013      	ands	r3, r2
 8009e48:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	685b      	ldr	r3, [r3, #4]
 8009e4e:	693a      	ldr	r2, [r7, #16]
 8009e50:	4313      	orrs	r3, r2
 8009e52:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009e54:	693a      	ldr	r2, [r7, #16]
 8009e56:	4b62      	ldr	r3, [pc, #392]	; (8009fe0 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8009e58:	4013      	ands	r3, r2
 8009e5a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	693a      	ldr	r2, [r7, #16]
 8009e62:	4313      	orrs	r3, r2
 8009e64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	693a      	ldr	r2, [r7, #16]
 8009e6c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	4a5c      	ldr	r2, [pc, #368]	; (8009fe4 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	f000 80ab 	beq.w	8009fd0 <TIM_SlaveTimer_SetConfig+0x1a4>
 8009e7a:	4a5a      	ldr	r2, [pc, #360]	; (8009fe4 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	f200 80a4 	bhi.w	8009fca <TIM_SlaveTimer_SetConfig+0x19e>
 8009e82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e86:	f000 80a3 	beq.w	8009fd0 <TIM_SlaveTimer_SetConfig+0x1a4>
 8009e8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e8e:	f200 809c 	bhi.w	8009fca <TIM_SlaveTimer_SetConfig+0x19e>
 8009e92:	4a55      	ldr	r2, [pc, #340]	; (8009fe8 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8009e94:	4293      	cmp	r3, r2
 8009e96:	f000 809b 	beq.w	8009fd0 <TIM_SlaveTimer_SetConfig+0x1a4>
 8009e9a:	4a53      	ldr	r2, [pc, #332]	; (8009fe8 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	f200 8094 	bhi.w	8009fca <TIM_SlaveTimer_SetConfig+0x19e>
 8009ea2:	4a52      	ldr	r2, [pc, #328]	; (8009fec <TIM_SlaveTimer_SetConfig+0x1c0>)
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	f000 8093 	beq.w	8009fd0 <TIM_SlaveTimer_SetConfig+0x1a4>
 8009eaa:	4a50      	ldr	r2, [pc, #320]	; (8009fec <TIM_SlaveTimer_SetConfig+0x1c0>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	f200 808c 	bhi.w	8009fca <TIM_SlaveTimer_SetConfig+0x19e>
 8009eb2:	4a4f      	ldr	r2, [pc, #316]	; (8009ff0 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	f000 808b 	beq.w	8009fd0 <TIM_SlaveTimer_SetConfig+0x1a4>
 8009eba:	4a4d      	ldr	r2, [pc, #308]	; (8009ff0 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	f200 8084 	bhi.w	8009fca <TIM_SlaveTimer_SetConfig+0x19e>
 8009ec2:	4a4c      	ldr	r2, [pc, #304]	; (8009ff4 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	f000 8083 	beq.w	8009fd0 <TIM_SlaveTimer_SetConfig+0x1a4>
 8009eca:	4a4a      	ldr	r2, [pc, #296]	; (8009ff4 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d87c      	bhi.n	8009fca <TIM_SlaveTimer_SetConfig+0x19e>
 8009ed0:	4a49      	ldr	r2, [pc, #292]	; (8009ff8 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d07c      	beq.n	8009fd0 <TIM_SlaveTimer_SetConfig+0x1a4>
 8009ed6:	4a48      	ldr	r2, [pc, #288]	; (8009ff8 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d876      	bhi.n	8009fca <TIM_SlaveTimer_SetConfig+0x19e>
 8009edc:	4a47      	ldr	r2, [pc, #284]	; (8009ffc <TIM_SlaveTimer_SetConfig+0x1d0>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d076      	beq.n	8009fd0 <TIM_SlaveTimer_SetConfig+0x1a4>
 8009ee2:	4a46      	ldr	r2, [pc, #280]	; (8009ffc <TIM_SlaveTimer_SetConfig+0x1d0>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d870      	bhi.n	8009fca <TIM_SlaveTimer_SetConfig+0x19e>
 8009ee8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009eec:	d070      	beq.n	8009fd0 <TIM_SlaveTimer_SetConfig+0x1a4>
 8009eee:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009ef2:	d86a      	bhi.n	8009fca <TIM_SlaveTimer_SetConfig+0x19e>
 8009ef4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ef8:	d06a      	beq.n	8009fd0 <TIM_SlaveTimer_SetConfig+0x1a4>
 8009efa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009efe:	d864      	bhi.n	8009fca <TIM_SlaveTimer_SetConfig+0x19e>
 8009f00:	2b70      	cmp	r3, #112	; 0x70
 8009f02:	d01a      	beq.n	8009f3a <TIM_SlaveTimer_SetConfig+0x10e>
 8009f04:	2b70      	cmp	r3, #112	; 0x70
 8009f06:	d860      	bhi.n	8009fca <TIM_SlaveTimer_SetConfig+0x19e>
 8009f08:	2b60      	cmp	r3, #96	; 0x60
 8009f0a:	d054      	beq.n	8009fb6 <TIM_SlaveTimer_SetConfig+0x18a>
 8009f0c:	2b60      	cmp	r3, #96	; 0x60
 8009f0e:	d85c      	bhi.n	8009fca <TIM_SlaveTimer_SetConfig+0x19e>
 8009f10:	2b50      	cmp	r3, #80	; 0x50
 8009f12:	d046      	beq.n	8009fa2 <TIM_SlaveTimer_SetConfig+0x176>
 8009f14:	2b50      	cmp	r3, #80	; 0x50
 8009f16:	d858      	bhi.n	8009fca <TIM_SlaveTimer_SetConfig+0x19e>
 8009f18:	2b40      	cmp	r3, #64	; 0x40
 8009f1a:	d019      	beq.n	8009f50 <TIM_SlaveTimer_SetConfig+0x124>
 8009f1c:	2b40      	cmp	r3, #64	; 0x40
 8009f1e:	d854      	bhi.n	8009fca <TIM_SlaveTimer_SetConfig+0x19e>
 8009f20:	2b30      	cmp	r3, #48	; 0x30
 8009f22:	d055      	beq.n	8009fd0 <TIM_SlaveTimer_SetConfig+0x1a4>
 8009f24:	2b30      	cmp	r3, #48	; 0x30
 8009f26:	d850      	bhi.n	8009fca <TIM_SlaveTimer_SetConfig+0x19e>
 8009f28:	2b20      	cmp	r3, #32
 8009f2a:	d051      	beq.n	8009fd0 <TIM_SlaveTimer_SetConfig+0x1a4>
 8009f2c:	2b20      	cmp	r3, #32
 8009f2e:	d84c      	bhi.n	8009fca <TIM_SlaveTimer_SetConfig+0x19e>
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d04d      	beq.n	8009fd0 <TIM_SlaveTimer_SetConfig+0x1a4>
 8009f34:	2b10      	cmp	r3, #16
 8009f36:	d04b      	beq.n	8009fd0 <TIM_SlaveTimer_SetConfig+0x1a4>
 8009f38:	e047      	b.n	8009fca <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8009f4a:	f000 f9e2 	bl	800a312 <TIM_ETR_SetConfig>
      break;
 8009f4e:	e040      	b.n	8009fd2 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	2b05      	cmp	r3, #5
 8009f56:	d101      	bne.n	8009f5c <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 8009f58:	2301      	movs	r3, #1
 8009f5a:	e03b      	b.n	8009fd4 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	6a1b      	ldr	r3, [r3, #32]
 8009f62:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	6a1a      	ldr	r2, [r3, #32]
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f022 0201 	bic.w	r2, r2, #1
 8009f72:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	699b      	ldr	r3, [r3, #24]
 8009f7a:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009f82:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	691b      	ldr	r3, [r3, #16]
 8009f88:	011b      	lsls	r3, r3, #4
 8009f8a:	68ba      	ldr	r2, [r7, #8]
 8009f8c:	4313      	orrs	r3, r2
 8009f8e:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	68ba      	ldr	r2, [r7, #8]
 8009f96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	68fa      	ldr	r2, [r7, #12]
 8009f9e:	621a      	str	r2, [r3, #32]
      break;
 8009fa0:	e017      	b.n	8009fd2 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fae:	461a      	mov	r2, r3
 8009fb0:	f000 f89a 	bl	800a0e8 <TIM_TI1_ConfigInputStage>
      break;
 8009fb4:	e00d      	b.n	8009fd2 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	f000 f8fc 	bl	800a1c0 <TIM_TI2_ConfigInputStage>
      break;
 8009fc8:	e003      	b.n	8009fd2 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8009fca:	2301      	movs	r3, #1
 8009fcc:	75fb      	strb	r3, [r7, #23]
      break;
 8009fce:	e000      	b.n	8009fd2 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 8009fd0:	bf00      	nop
  }

  return status;
 8009fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3718      	adds	r7, #24
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}
 8009fdc:	ffcfff8f 	.word	0xffcfff8f
 8009fe0:	fffefff8 	.word	0xfffefff8
 8009fe4:	00200010 	.word	0x00200010
 8009fe8:	00100070 	.word	0x00100070
 8009fec:	00100060 	.word	0x00100060
 8009ff0:	00100050 	.word	0x00100050
 8009ff4:	00100040 	.word	0x00100040
 8009ff8:	00100030 	.word	0x00100030
 8009ffc:	00100020 	.word	0x00100020

0800a000 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a000:	b480      	push	{r7}
 800a002:	b087      	sub	sp, #28
 800a004:	af00      	add	r7, sp, #0
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	60b9      	str	r1, [r7, #8]
 800a00a:	607a      	str	r2, [r7, #4]
 800a00c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	6a1b      	ldr	r3, [r3, #32]
 800a012:	f023 0201 	bic.w	r2, r3, #1
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	699b      	ldr	r3, [r3, #24]
 800a01e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	6a1b      	ldr	r3, [r3, #32]
 800a024:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	4a28      	ldr	r2, [pc, #160]	; (800a0cc <TIM_TI1_SetConfig+0xcc>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d01b      	beq.n	800a066 <TIM_TI1_SetConfig+0x66>
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a034:	d017      	beq.n	800a066 <TIM_TI1_SetConfig+0x66>
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	4a25      	ldr	r2, [pc, #148]	; (800a0d0 <TIM_TI1_SetConfig+0xd0>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d013      	beq.n	800a066 <TIM_TI1_SetConfig+0x66>
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	4a24      	ldr	r2, [pc, #144]	; (800a0d4 <TIM_TI1_SetConfig+0xd4>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d00f      	beq.n	800a066 <TIM_TI1_SetConfig+0x66>
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	4a23      	ldr	r2, [pc, #140]	; (800a0d8 <TIM_TI1_SetConfig+0xd8>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d00b      	beq.n	800a066 <TIM_TI1_SetConfig+0x66>
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	4a22      	ldr	r2, [pc, #136]	; (800a0dc <TIM_TI1_SetConfig+0xdc>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d007      	beq.n	800a066 <TIM_TI1_SetConfig+0x66>
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	4a21      	ldr	r2, [pc, #132]	; (800a0e0 <TIM_TI1_SetConfig+0xe0>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d003      	beq.n	800a066 <TIM_TI1_SetConfig+0x66>
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	4a20      	ldr	r2, [pc, #128]	; (800a0e4 <TIM_TI1_SetConfig+0xe4>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d101      	bne.n	800a06a <TIM_TI1_SetConfig+0x6a>
 800a066:	2301      	movs	r3, #1
 800a068:	e000      	b.n	800a06c <TIM_TI1_SetConfig+0x6c>
 800a06a:	2300      	movs	r3, #0
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d008      	beq.n	800a082 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	f023 0303 	bic.w	r3, r3, #3
 800a076:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a078:	697a      	ldr	r2, [r7, #20]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	4313      	orrs	r3, r2
 800a07e:	617b      	str	r3, [r7, #20]
 800a080:	e003      	b.n	800a08a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	f043 0301 	orr.w	r3, r3, #1
 800a088:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a090:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	011b      	lsls	r3, r3, #4
 800a096:	b2db      	uxtb	r3, r3
 800a098:	697a      	ldr	r2, [r7, #20]
 800a09a:	4313      	orrs	r3, r2
 800a09c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	f023 030a 	bic.w	r3, r3, #10
 800a0a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	f003 030a 	and.w	r3, r3, #10
 800a0ac:	693a      	ldr	r2, [r7, #16]
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	697a      	ldr	r2, [r7, #20]
 800a0b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	693a      	ldr	r2, [r7, #16]
 800a0bc:	621a      	str	r2, [r3, #32]
}
 800a0be:	bf00      	nop
 800a0c0:	371c      	adds	r7, #28
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c8:	4770      	bx	lr
 800a0ca:	bf00      	nop
 800a0cc:	40010000 	.word	0x40010000
 800a0d0:	40000400 	.word	0x40000400
 800a0d4:	40000800 	.word	0x40000800
 800a0d8:	40000c00 	.word	0x40000c00
 800a0dc:	40010400 	.word	0x40010400
 800a0e0:	40001800 	.word	0x40001800
 800a0e4:	40014000 	.word	0x40014000

0800a0e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b087      	sub	sp, #28
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	60b9      	str	r1, [r7, #8]
 800a0f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	6a1b      	ldr	r3, [r3, #32]
 800a0f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	6a1b      	ldr	r3, [r3, #32]
 800a0fe:	f023 0201 	bic.w	r2, r3, #1
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	699b      	ldr	r3, [r3, #24]
 800a10a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a112:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	011b      	lsls	r3, r3, #4
 800a118:	693a      	ldr	r2, [r7, #16]
 800a11a:	4313      	orrs	r3, r2
 800a11c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	f023 030a 	bic.w	r3, r3, #10
 800a124:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a126:	697a      	ldr	r2, [r7, #20]
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	4313      	orrs	r3, r2
 800a12c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	693a      	ldr	r2, [r7, #16]
 800a132:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	697a      	ldr	r2, [r7, #20]
 800a138:	621a      	str	r2, [r3, #32]
}
 800a13a:	bf00      	nop
 800a13c:	371c      	adds	r7, #28
 800a13e:	46bd      	mov	sp, r7
 800a140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a144:	4770      	bx	lr

0800a146 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a146:	b480      	push	{r7}
 800a148:	b087      	sub	sp, #28
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	60f8      	str	r0, [r7, #12]
 800a14e:	60b9      	str	r1, [r7, #8]
 800a150:	607a      	str	r2, [r7, #4]
 800a152:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	6a1b      	ldr	r3, [r3, #32]
 800a158:	f023 0210 	bic.w	r2, r3, #16
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	699b      	ldr	r3, [r3, #24]
 800a164:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	6a1b      	ldr	r3, [r3, #32]
 800a16a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a172:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	021b      	lsls	r3, r3, #8
 800a178:	697a      	ldr	r2, [r7, #20]
 800a17a:	4313      	orrs	r3, r2
 800a17c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a184:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	031b      	lsls	r3, r3, #12
 800a18a:	b29b      	uxth	r3, r3
 800a18c:	697a      	ldr	r2, [r7, #20]
 800a18e:	4313      	orrs	r3, r2
 800a190:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a198:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	011b      	lsls	r3, r3, #4
 800a19e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a1a2:	693a      	ldr	r2, [r7, #16]
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	697a      	ldr	r2, [r7, #20]
 800a1ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	693a      	ldr	r2, [r7, #16]
 800a1b2:	621a      	str	r2, [r3, #32]
}
 800a1b4:	bf00      	nop
 800a1b6:	371c      	adds	r7, #28
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr

0800a1c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b087      	sub	sp, #28
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	60f8      	str	r0, [r7, #12]
 800a1c8:	60b9      	str	r1, [r7, #8]
 800a1ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	6a1b      	ldr	r3, [r3, #32]
 800a1d0:	f023 0210 	bic.w	r2, r3, #16
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	699b      	ldr	r3, [r3, #24]
 800a1dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	6a1b      	ldr	r3, [r3, #32]
 800a1e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a1ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	031b      	lsls	r3, r3, #12
 800a1f0:	697a      	ldr	r2, [r7, #20]
 800a1f2:	4313      	orrs	r3, r2
 800a1f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a1fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	011b      	lsls	r3, r3, #4
 800a202:	693a      	ldr	r2, [r7, #16]
 800a204:	4313      	orrs	r3, r2
 800a206:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	697a      	ldr	r2, [r7, #20]
 800a20c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	693a      	ldr	r2, [r7, #16]
 800a212:	621a      	str	r2, [r3, #32]
}
 800a214:	bf00      	nop
 800a216:	371c      	adds	r7, #28
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr

0800a220 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a220:	b480      	push	{r7}
 800a222:	b087      	sub	sp, #28
 800a224:	af00      	add	r7, sp, #0
 800a226:	60f8      	str	r0, [r7, #12]
 800a228:	60b9      	str	r1, [r7, #8]
 800a22a:	607a      	str	r2, [r7, #4]
 800a22c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	6a1b      	ldr	r3, [r3, #32]
 800a232:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	69db      	ldr	r3, [r3, #28]
 800a23e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	6a1b      	ldr	r3, [r3, #32]
 800a244:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	f023 0303 	bic.w	r3, r3, #3
 800a24c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a24e:	697a      	ldr	r2, [r7, #20]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	4313      	orrs	r3, r2
 800a254:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a25c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	011b      	lsls	r3, r3, #4
 800a262:	b2db      	uxtb	r3, r3
 800a264:	697a      	ldr	r2, [r7, #20]
 800a266:	4313      	orrs	r3, r2
 800a268:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a270:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	021b      	lsls	r3, r3, #8
 800a276:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800a27a:	693a      	ldr	r2, [r7, #16]
 800a27c:	4313      	orrs	r3, r2
 800a27e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	697a      	ldr	r2, [r7, #20]
 800a284:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	693a      	ldr	r2, [r7, #16]
 800a28a:	621a      	str	r2, [r3, #32]
}
 800a28c:	bf00      	nop
 800a28e:	371c      	adds	r7, #28
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr

0800a298 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a298:	b480      	push	{r7}
 800a29a:	b087      	sub	sp, #28
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	60f8      	str	r0, [r7, #12]
 800a2a0:	60b9      	str	r1, [r7, #8]
 800a2a2:	607a      	str	r2, [r7, #4]
 800a2a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	6a1b      	ldr	r3, [r3, #32]
 800a2aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	69db      	ldr	r3, [r3, #28]
 800a2b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	6a1b      	ldr	r3, [r3, #32]
 800a2bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2c4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	021b      	lsls	r3, r3, #8
 800a2ca:	697a      	ldr	r2, [r7, #20]
 800a2cc:	4313      	orrs	r3, r2
 800a2ce:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a2d6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	031b      	lsls	r3, r3, #12
 800a2dc:	b29b      	uxth	r3, r3
 800a2de:	697a      	ldr	r2, [r7, #20]
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a2e4:	693b      	ldr	r3, [r7, #16]
 800a2e6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a2ea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	031b      	lsls	r3, r3, #12
 800a2f0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800a2f4:	693a      	ldr	r2, [r7, #16]
 800a2f6:	4313      	orrs	r3, r2
 800a2f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	697a      	ldr	r2, [r7, #20]
 800a2fe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	693a      	ldr	r2, [r7, #16]
 800a304:	621a      	str	r2, [r3, #32]
}
 800a306:	bf00      	nop
 800a308:	371c      	adds	r7, #28
 800a30a:	46bd      	mov	sp, r7
 800a30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a310:	4770      	bx	lr

0800a312 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a312:	b480      	push	{r7}
 800a314:	b087      	sub	sp, #28
 800a316:	af00      	add	r7, sp, #0
 800a318:	60f8      	str	r0, [r7, #12]
 800a31a:	60b9      	str	r1, [r7, #8]
 800a31c:	607a      	str	r2, [r7, #4]
 800a31e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	689b      	ldr	r3, [r3, #8]
 800a324:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a32c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	021a      	lsls	r2, r3, #8
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	431a      	orrs	r2, r3
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	4313      	orrs	r3, r2
 800a33a:	697a      	ldr	r2, [r7, #20]
 800a33c:	4313      	orrs	r3, r2
 800a33e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	697a      	ldr	r2, [r7, #20]
 800a344:	609a      	str	r2, [r3, #8]
}
 800a346:	bf00      	nop
 800a348:	371c      	adds	r7, #28
 800a34a:	46bd      	mov	sp, r7
 800a34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a350:	4770      	bx	lr
	...

0800a354 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a354:	b480      	push	{r7}
 800a356:	b085      	sub	sp, #20
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a364:	2b01      	cmp	r3, #1
 800a366:	d101      	bne.n	800a36c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a368:	2302      	movs	r3, #2
 800a36a:	e06d      	b.n	800a448 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2201      	movs	r2, #1
 800a370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2202      	movs	r2, #2
 800a378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	689b      	ldr	r3, [r3, #8]
 800a38a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4a30      	ldr	r2, [pc, #192]	; (800a454 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d004      	beq.n	800a3a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	4a2f      	ldr	r2, [pc, #188]	; (800a458 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d108      	bne.n	800a3b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a3a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	685b      	ldr	r3, [r3, #4]
 800a3ac:	68fa      	ldr	r2, [r7, #12]
 800a3ae:	4313      	orrs	r3, r2
 800a3b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	68fa      	ldr	r2, [r7, #12]
 800a3c0:	4313      	orrs	r3, r2
 800a3c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	68fa      	ldr	r2, [r7, #12]
 800a3ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	4a20      	ldr	r2, [pc, #128]	; (800a454 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d022      	beq.n	800a41c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3de:	d01d      	beq.n	800a41c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	4a1d      	ldr	r2, [pc, #116]	; (800a45c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	d018      	beq.n	800a41c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	4a1c      	ldr	r2, [pc, #112]	; (800a460 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d013      	beq.n	800a41c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	4a1a      	ldr	r2, [pc, #104]	; (800a464 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d00e      	beq.n	800a41c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	4a15      	ldr	r2, [pc, #84]	; (800a458 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a404:	4293      	cmp	r3, r2
 800a406:	d009      	beq.n	800a41c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	4a16      	ldr	r2, [pc, #88]	; (800a468 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a40e:	4293      	cmp	r3, r2
 800a410:	d004      	beq.n	800a41c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	4a15      	ldr	r2, [pc, #84]	; (800a46c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a418:	4293      	cmp	r3, r2
 800a41a:	d10c      	bne.n	800a436 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a422:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	689b      	ldr	r3, [r3, #8]
 800a428:	68ba      	ldr	r2, [r7, #8]
 800a42a:	4313      	orrs	r3, r2
 800a42c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	68ba      	ldr	r2, [r7, #8]
 800a434:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2201      	movs	r2, #1
 800a43a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2200      	movs	r2, #0
 800a442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a446:	2300      	movs	r3, #0
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3714      	adds	r7, #20
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr
 800a454:	40010000 	.word	0x40010000
 800a458:	40010400 	.word	0x40010400
 800a45c:	40000400 	.word	0x40000400
 800a460:	40000800 	.word	0x40000800
 800a464:	40000c00 	.word	0x40000c00
 800a468:	40001800 	.word	0x40001800
 800a46c:	40014000 	.word	0x40014000

0800a470 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b082      	sub	sp, #8
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d101      	bne.n	800a482 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a47e:	2301      	movs	r3, #1
 800a480:	e042      	b.n	800a508 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d106      	bne.n	800a49a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2200      	movs	r2, #0
 800a490:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f7f7 f8e7 	bl	8001668 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2224      	movs	r2, #36	; 0x24
 800a49e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	681a      	ldr	r2, [r3, #0]
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f022 0201 	bic.w	r2, r2, #1
 800a4b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f000 f82c 	bl	800a510 <UART_SetConfig>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d101      	bne.n	800a4c2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a4be:	2301      	movs	r3, #1
 800a4c0:	e022      	b.n	800a508 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d002      	beq.n	800a4d0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f000 fd88 	bl	800afe0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	685a      	ldr	r2, [r3, #4]
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a4de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	689a      	ldr	r2, [r3, #8]
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a4ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	681a      	ldr	r2, [r3, #0]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f042 0201 	orr.w	r2, r2, #1
 800a4fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f000 fe0f 	bl	800b124 <UART_CheckIdleState>
 800a506:	4603      	mov	r3, r0
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3708      	adds	r7, #8
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}

0800a510 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a510:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a514:	b092      	sub	sp, #72	; 0x48
 800a516:	af00      	add	r7, sp, #0
 800a518:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a51a:	2300      	movs	r3, #0
 800a51c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	689a      	ldr	r2, [r3, #8]
 800a524:	697b      	ldr	r3, [r7, #20]
 800a526:	691b      	ldr	r3, [r3, #16]
 800a528:	431a      	orrs	r2, r3
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	695b      	ldr	r3, [r3, #20]
 800a52e:	431a      	orrs	r2, r3
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	69db      	ldr	r3, [r3, #28]
 800a534:	4313      	orrs	r3, r2
 800a536:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	681a      	ldr	r2, [r3, #0]
 800a53e:	4bbe      	ldr	r3, [pc, #760]	; (800a838 <UART_SetConfig+0x328>)
 800a540:	4013      	ands	r3, r2
 800a542:	697a      	ldr	r2, [r7, #20]
 800a544:	6812      	ldr	r2, [r2, #0]
 800a546:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a548:	430b      	orrs	r3, r1
 800a54a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	685b      	ldr	r3, [r3, #4]
 800a552:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	68da      	ldr	r2, [r3, #12]
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	430a      	orrs	r2, r1
 800a560:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	699b      	ldr	r3, [r3, #24]
 800a566:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	4ab3      	ldr	r2, [pc, #716]	; (800a83c <UART_SetConfig+0x32c>)
 800a56e:	4293      	cmp	r3, r2
 800a570:	d004      	beq.n	800a57c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	6a1b      	ldr	r3, [r3, #32]
 800a576:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a578:	4313      	orrs	r3, r2
 800a57a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	689a      	ldr	r2, [r3, #8]
 800a582:	4baf      	ldr	r3, [pc, #700]	; (800a840 <UART_SetConfig+0x330>)
 800a584:	4013      	ands	r3, r2
 800a586:	697a      	ldr	r2, [r7, #20]
 800a588:	6812      	ldr	r2, [r2, #0]
 800a58a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a58c:	430b      	orrs	r3, r1
 800a58e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a596:	f023 010f 	bic.w	r1, r3, #15
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	430a      	orrs	r2, r1
 800a5a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4aa6      	ldr	r2, [pc, #664]	; (800a844 <UART_SetConfig+0x334>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d177      	bne.n	800a6a0 <UART_SetConfig+0x190>
 800a5b0:	4ba5      	ldr	r3, [pc, #660]	; (800a848 <UART_SetConfig+0x338>)
 800a5b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a5b8:	2b28      	cmp	r3, #40	; 0x28
 800a5ba:	d86d      	bhi.n	800a698 <UART_SetConfig+0x188>
 800a5bc:	a201      	add	r2, pc, #4	; (adr r2, 800a5c4 <UART_SetConfig+0xb4>)
 800a5be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5c2:	bf00      	nop
 800a5c4:	0800a669 	.word	0x0800a669
 800a5c8:	0800a699 	.word	0x0800a699
 800a5cc:	0800a699 	.word	0x0800a699
 800a5d0:	0800a699 	.word	0x0800a699
 800a5d4:	0800a699 	.word	0x0800a699
 800a5d8:	0800a699 	.word	0x0800a699
 800a5dc:	0800a699 	.word	0x0800a699
 800a5e0:	0800a699 	.word	0x0800a699
 800a5e4:	0800a671 	.word	0x0800a671
 800a5e8:	0800a699 	.word	0x0800a699
 800a5ec:	0800a699 	.word	0x0800a699
 800a5f0:	0800a699 	.word	0x0800a699
 800a5f4:	0800a699 	.word	0x0800a699
 800a5f8:	0800a699 	.word	0x0800a699
 800a5fc:	0800a699 	.word	0x0800a699
 800a600:	0800a699 	.word	0x0800a699
 800a604:	0800a679 	.word	0x0800a679
 800a608:	0800a699 	.word	0x0800a699
 800a60c:	0800a699 	.word	0x0800a699
 800a610:	0800a699 	.word	0x0800a699
 800a614:	0800a699 	.word	0x0800a699
 800a618:	0800a699 	.word	0x0800a699
 800a61c:	0800a699 	.word	0x0800a699
 800a620:	0800a699 	.word	0x0800a699
 800a624:	0800a681 	.word	0x0800a681
 800a628:	0800a699 	.word	0x0800a699
 800a62c:	0800a699 	.word	0x0800a699
 800a630:	0800a699 	.word	0x0800a699
 800a634:	0800a699 	.word	0x0800a699
 800a638:	0800a699 	.word	0x0800a699
 800a63c:	0800a699 	.word	0x0800a699
 800a640:	0800a699 	.word	0x0800a699
 800a644:	0800a689 	.word	0x0800a689
 800a648:	0800a699 	.word	0x0800a699
 800a64c:	0800a699 	.word	0x0800a699
 800a650:	0800a699 	.word	0x0800a699
 800a654:	0800a699 	.word	0x0800a699
 800a658:	0800a699 	.word	0x0800a699
 800a65c:	0800a699 	.word	0x0800a699
 800a660:	0800a699 	.word	0x0800a699
 800a664:	0800a691 	.word	0x0800a691
 800a668:	2301      	movs	r3, #1
 800a66a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a66e:	e222      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800a670:	2304      	movs	r3, #4
 800a672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a676:	e21e      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800a678:	2308      	movs	r3, #8
 800a67a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a67e:	e21a      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800a680:	2310      	movs	r3, #16
 800a682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a686:	e216      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800a688:	2320      	movs	r3, #32
 800a68a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a68e:	e212      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800a690:	2340      	movs	r3, #64	; 0x40
 800a692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a696:	e20e      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800a698:	2380      	movs	r3, #128	; 0x80
 800a69a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a69e:	e20a      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	4a69      	ldr	r2, [pc, #420]	; (800a84c <UART_SetConfig+0x33c>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d130      	bne.n	800a70c <UART_SetConfig+0x1fc>
 800a6aa:	4b67      	ldr	r3, [pc, #412]	; (800a848 <UART_SetConfig+0x338>)
 800a6ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6ae:	f003 0307 	and.w	r3, r3, #7
 800a6b2:	2b05      	cmp	r3, #5
 800a6b4:	d826      	bhi.n	800a704 <UART_SetConfig+0x1f4>
 800a6b6:	a201      	add	r2, pc, #4	; (adr r2, 800a6bc <UART_SetConfig+0x1ac>)
 800a6b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6bc:	0800a6d5 	.word	0x0800a6d5
 800a6c0:	0800a6dd 	.word	0x0800a6dd
 800a6c4:	0800a6e5 	.word	0x0800a6e5
 800a6c8:	0800a6ed 	.word	0x0800a6ed
 800a6cc:	0800a6f5 	.word	0x0800a6f5
 800a6d0:	0800a6fd 	.word	0x0800a6fd
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6da:	e1ec      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800a6dc:	2304      	movs	r3, #4
 800a6de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6e2:	e1e8      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800a6e4:	2308      	movs	r3, #8
 800a6e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6ea:	e1e4      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800a6ec:	2310      	movs	r3, #16
 800a6ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6f2:	e1e0      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800a6f4:	2320      	movs	r3, #32
 800a6f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6fa:	e1dc      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800a6fc:	2340      	movs	r3, #64	; 0x40
 800a6fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a702:	e1d8      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800a704:	2380      	movs	r3, #128	; 0x80
 800a706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a70a:	e1d4      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800a70c:	697b      	ldr	r3, [r7, #20]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a4f      	ldr	r2, [pc, #316]	; (800a850 <UART_SetConfig+0x340>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d130      	bne.n	800a778 <UART_SetConfig+0x268>
 800a716:	4b4c      	ldr	r3, [pc, #304]	; (800a848 <UART_SetConfig+0x338>)
 800a718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a71a:	f003 0307 	and.w	r3, r3, #7
 800a71e:	2b05      	cmp	r3, #5
 800a720:	d826      	bhi.n	800a770 <UART_SetConfig+0x260>
 800a722:	a201      	add	r2, pc, #4	; (adr r2, 800a728 <UART_SetConfig+0x218>)
 800a724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a728:	0800a741 	.word	0x0800a741
 800a72c:	0800a749 	.word	0x0800a749
 800a730:	0800a751 	.word	0x0800a751
 800a734:	0800a759 	.word	0x0800a759
 800a738:	0800a761 	.word	0x0800a761
 800a73c:	0800a769 	.word	0x0800a769
 800a740:	2300      	movs	r3, #0
 800a742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a746:	e1b6      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800a748:	2304      	movs	r3, #4
 800a74a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a74e:	e1b2      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800a750:	2308      	movs	r3, #8
 800a752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a756:	e1ae      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800a758:	2310      	movs	r3, #16
 800a75a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a75e:	e1aa      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800a760:	2320      	movs	r3, #32
 800a762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a766:	e1a6      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800a768:	2340      	movs	r3, #64	; 0x40
 800a76a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a76e:	e1a2      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800a770:	2380      	movs	r3, #128	; 0x80
 800a772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a776:	e19e      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800a778:	697b      	ldr	r3, [r7, #20]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	4a35      	ldr	r2, [pc, #212]	; (800a854 <UART_SetConfig+0x344>)
 800a77e:	4293      	cmp	r3, r2
 800a780:	d130      	bne.n	800a7e4 <UART_SetConfig+0x2d4>
 800a782:	4b31      	ldr	r3, [pc, #196]	; (800a848 <UART_SetConfig+0x338>)
 800a784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a786:	f003 0307 	and.w	r3, r3, #7
 800a78a:	2b05      	cmp	r3, #5
 800a78c:	d826      	bhi.n	800a7dc <UART_SetConfig+0x2cc>
 800a78e:	a201      	add	r2, pc, #4	; (adr r2, 800a794 <UART_SetConfig+0x284>)
 800a790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a794:	0800a7ad 	.word	0x0800a7ad
 800a798:	0800a7b5 	.word	0x0800a7b5
 800a79c:	0800a7bd 	.word	0x0800a7bd
 800a7a0:	0800a7c5 	.word	0x0800a7c5
 800a7a4:	0800a7cd 	.word	0x0800a7cd
 800a7a8:	0800a7d5 	.word	0x0800a7d5
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7b2:	e180      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800a7b4:	2304      	movs	r3, #4
 800a7b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7ba:	e17c      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800a7bc:	2308      	movs	r3, #8
 800a7be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7c2:	e178      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800a7c4:	2310      	movs	r3, #16
 800a7c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7ca:	e174      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800a7cc:	2320      	movs	r3, #32
 800a7ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7d2:	e170      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800a7d4:	2340      	movs	r3, #64	; 0x40
 800a7d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7da:	e16c      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800a7dc:	2380      	movs	r3, #128	; 0x80
 800a7de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a7e2:	e168      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	4a1b      	ldr	r2, [pc, #108]	; (800a858 <UART_SetConfig+0x348>)
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d142      	bne.n	800a874 <UART_SetConfig+0x364>
 800a7ee:	4b16      	ldr	r3, [pc, #88]	; (800a848 <UART_SetConfig+0x338>)
 800a7f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7f2:	f003 0307 	and.w	r3, r3, #7
 800a7f6:	2b05      	cmp	r3, #5
 800a7f8:	d838      	bhi.n	800a86c <UART_SetConfig+0x35c>
 800a7fa:	a201      	add	r2, pc, #4	; (adr r2, 800a800 <UART_SetConfig+0x2f0>)
 800a7fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a800:	0800a819 	.word	0x0800a819
 800a804:	0800a821 	.word	0x0800a821
 800a808:	0800a829 	.word	0x0800a829
 800a80c:	0800a831 	.word	0x0800a831
 800a810:	0800a85d 	.word	0x0800a85d
 800a814:	0800a865 	.word	0x0800a865
 800a818:	2300      	movs	r3, #0
 800a81a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a81e:	e14a      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800a820:	2304      	movs	r3, #4
 800a822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a826:	e146      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800a828:	2308      	movs	r3, #8
 800a82a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a82e:	e142      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800a830:	2310      	movs	r3, #16
 800a832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a836:	e13e      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800a838:	cfff69f3 	.word	0xcfff69f3
 800a83c:	58000c00 	.word	0x58000c00
 800a840:	11fff4ff 	.word	0x11fff4ff
 800a844:	40011000 	.word	0x40011000
 800a848:	58024400 	.word	0x58024400
 800a84c:	40004400 	.word	0x40004400
 800a850:	40004800 	.word	0x40004800
 800a854:	40004c00 	.word	0x40004c00
 800a858:	40005000 	.word	0x40005000
 800a85c:	2320      	movs	r3, #32
 800a85e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a862:	e128      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800a864:	2340      	movs	r3, #64	; 0x40
 800a866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a86a:	e124      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800a86c:	2380      	movs	r3, #128	; 0x80
 800a86e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a872:	e120      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800a874:	697b      	ldr	r3, [r7, #20]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4acb      	ldr	r2, [pc, #812]	; (800aba8 <UART_SetConfig+0x698>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d176      	bne.n	800a96c <UART_SetConfig+0x45c>
 800a87e:	4bcb      	ldr	r3, [pc, #812]	; (800abac <UART_SetConfig+0x69c>)
 800a880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a882:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a886:	2b28      	cmp	r3, #40	; 0x28
 800a888:	d86c      	bhi.n	800a964 <UART_SetConfig+0x454>
 800a88a:	a201      	add	r2, pc, #4	; (adr r2, 800a890 <UART_SetConfig+0x380>)
 800a88c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a890:	0800a935 	.word	0x0800a935
 800a894:	0800a965 	.word	0x0800a965
 800a898:	0800a965 	.word	0x0800a965
 800a89c:	0800a965 	.word	0x0800a965
 800a8a0:	0800a965 	.word	0x0800a965
 800a8a4:	0800a965 	.word	0x0800a965
 800a8a8:	0800a965 	.word	0x0800a965
 800a8ac:	0800a965 	.word	0x0800a965
 800a8b0:	0800a93d 	.word	0x0800a93d
 800a8b4:	0800a965 	.word	0x0800a965
 800a8b8:	0800a965 	.word	0x0800a965
 800a8bc:	0800a965 	.word	0x0800a965
 800a8c0:	0800a965 	.word	0x0800a965
 800a8c4:	0800a965 	.word	0x0800a965
 800a8c8:	0800a965 	.word	0x0800a965
 800a8cc:	0800a965 	.word	0x0800a965
 800a8d0:	0800a945 	.word	0x0800a945
 800a8d4:	0800a965 	.word	0x0800a965
 800a8d8:	0800a965 	.word	0x0800a965
 800a8dc:	0800a965 	.word	0x0800a965
 800a8e0:	0800a965 	.word	0x0800a965
 800a8e4:	0800a965 	.word	0x0800a965
 800a8e8:	0800a965 	.word	0x0800a965
 800a8ec:	0800a965 	.word	0x0800a965
 800a8f0:	0800a94d 	.word	0x0800a94d
 800a8f4:	0800a965 	.word	0x0800a965
 800a8f8:	0800a965 	.word	0x0800a965
 800a8fc:	0800a965 	.word	0x0800a965
 800a900:	0800a965 	.word	0x0800a965
 800a904:	0800a965 	.word	0x0800a965
 800a908:	0800a965 	.word	0x0800a965
 800a90c:	0800a965 	.word	0x0800a965
 800a910:	0800a955 	.word	0x0800a955
 800a914:	0800a965 	.word	0x0800a965
 800a918:	0800a965 	.word	0x0800a965
 800a91c:	0800a965 	.word	0x0800a965
 800a920:	0800a965 	.word	0x0800a965
 800a924:	0800a965 	.word	0x0800a965
 800a928:	0800a965 	.word	0x0800a965
 800a92c:	0800a965 	.word	0x0800a965
 800a930:	0800a95d 	.word	0x0800a95d
 800a934:	2301      	movs	r3, #1
 800a936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a93a:	e0bc      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800a93c:	2304      	movs	r3, #4
 800a93e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a942:	e0b8      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800a944:	2308      	movs	r3, #8
 800a946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a94a:	e0b4      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800a94c:	2310      	movs	r3, #16
 800a94e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a952:	e0b0      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800a954:	2320      	movs	r3, #32
 800a956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a95a:	e0ac      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800a95c:	2340      	movs	r3, #64	; 0x40
 800a95e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a962:	e0a8      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800a964:	2380      	movs	r3, #128	; 0x80
 800a966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a96a:	e0a4      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4a8f      	ldr	r2, [pc, #572]	; (800abb0 <UART_SetConfig+0x6a0>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d130      	bne.n	800a9d8 <UART_SetConfig+0x4c8>
 800a976:	4b8d      	ldr	r3, [pc, #564]	; (800abac <UART_SetConfig+0x69c>)
 800a978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a97a:	f003 0307 	and.w	r3, r3, #7
 800a97e:	2b05      	cmp	r3, #5
 800a980:	d826      	bhi.n	800a9d0 <UART_SetConfig+0x4c0>
 800a982:	a201      	add	r2, pc, #4	; (adr r2, 800a988 <UART_SetConfig+0x478>)
 800a984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a988:	0800a9a1 	.word	0x0800a9a1
 800a98c:	0800a9a9 	.word	0x0800a9a9
 800a990:	0800a9b1 	.word	0x0800a9b1
 800a994:	0800a9b9 	.word	0x0800a9b9
 800a998:	0800a9c1 	.word	0x0800a9c1
 800a99c:	0800a9c9 	.word	0x0800a9c9
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9a6:	e086      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800a9a8:	2304      	movs	r3, #4
 800a9aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9ae:	e082      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800a9b0:	2308      	movs	r3, #8
 800a9b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9b6:	e07e      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800a9b8:	2310      	movs	r3, #16
 800a9ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9be:	e07a      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800a9c0:	2320      	movs	r3, #32
 800a9c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9c6:	e076      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800a9c8:	2340      	movs	r3, #64	; 0x40
 800a9ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9ce:	e072      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800a9d0:	2380      	movs	r3, #128	; 0x80
 800a9d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9d6:	e06e      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	4a75      	ldr	r2, [pc, #468]	; (800abb4 <UART_SetConfig+0x6a4>)
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	d130      	bne.n	800aa44 <UART_SetConfig+0x534>
 800a9e2:	4b72      	ldr	r3, [pc, #456]	; (800abac <UART_SetConfig+0x69c>)
 800a9e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9e6:	f003 0307 	and.w	r3, r3, #7
 800a9ea:	2b05      	cmp	r3, #5
 800a9ec:	d826      	bhi.n	800aa3c <UART_SetConfig+0x52c>
 800a9ee:	a201      	add	r2, pc, #4	; (adr r2, 800a9f4 <UART_SetConfig+0x4e4>)
 800a9f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9f4:	0800aa0d 	.word	0x0800aa0d
 800a9f8:	0800aa15 	.word	0x0800aa15
 800a9fc:	0800aa1d 	.word	0x0800aa1d
 800aa00:	0800aa25 	.word	0x0800aa25
 800aa04:	0800aa2d 	.word	0x0800aa2d
 800aa08:	0800aa35 	.word	0x0800aa35
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa12:	e050      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800aa14:	2304      	movs	r3, #4
 800aa16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa1a:	e04c      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800aa1c:	2308      	movs	r3, #8
 800aa1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa22:	e048      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800aa24:	2310      	movs	r3, #16
 800aa26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa2a:	e044      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800aa2c:	2320      	movs	r3, #32
 800aa2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa32:	e040      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800aa34:	2340      	movs	r3, #64	; 0x40
 800aa36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa3a:	e03c      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800aa3c:	2380      	movs	r3, #128	; 0x80
 800aa3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa42:	e038      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800aa44:	697b      	ldr	r3, [r7, #20]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	4a5b      	ldr	r2, [pc, #364]	; (800abb8 <UART_SetConfig+0x6a8>)
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d130      	bne.n	800aab0 <UART_SetConfig+0x5a0>
 800aa4e:	4b57      	ldr	r3, [pc, #348]	; (800abac <UART_SetConfig+0x69c>)
 800aa50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa52:	f003 0307 	and.w	r3, r3, #7
 800aa56:	2b05      	cmp	r3, #5
 800aa58:	d826      	bhi.n	800aaa8 <UART_SetConfig+0x598>
 800aa5a:	a201      	add	r2, pc, #4	; (adr r2, 800aa60 <UART_SetConfig+0x550>)
 800aa5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa60:	0800aa79 	.word	0x0800aa79
 800aa64:	0800aa81 	.word	0x0800aa81
 800aa68:	0800aa89 	.word	0x0800aa89
 800aa6c:	0800aa91 	.word	0x0800aa91
 800aa70:	0800aa99 	.word	0x0800aa99
 800aa74:	0800aaa1 	.word	0x0800aaa1
 800aa78:	2302      	movs	r3, #2
 800aa7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa7e:	e01a      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800aa80:	2304      	movs	r3, #4
 800aa82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa86:	e016      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800aa88:	2308      	movs	r3, #8
 800aa8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa8e:	e012      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800aa90:	2310      	movs	r3, #16
 800aa92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa96:	e00e      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800aa98:	2320      	movs	r3, #32
 800aa9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa9e:	e00a      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800aaa0:	2340      	movs	r3, #64	; 0x40
 800aaa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaa6:	e006      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800aaa8:	2380      	movs	r3, #128	; 0x80
 800aaaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaae:	e002      	b.n	800aab6 <UART_SetConfig+0x5a6>
 800aab0:	2380      	movs	r3, #128	; 0x80
 800aab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	4a3f      	ldr	r2, [pc, #252]	; (800abb8 <UART_SetConfig+0x6a8>)
 800aabc:	4293      	cmp	r3, r2
 800aabe:	f040 80f8 	bne.w	800acb2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800aac2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800aac6:	2b20      	cmp	r3, #32
 800aac8:	dc46      	bgt.n	800ab58 <UART_SetConfig+0x648>
 800aaca:	2b02      	cmp	r3, #2
 800aacc:	f2c0 8082 	blt.w	800abd4 <UART_SetConfig+0x6c4>
 800aad0:	3b02      	subs	r3, #2
 800aad2:	2b1e      	cmp	r3, #30
 800aad4:	d87e      	bhi.n	800abd4 <UART_SetConfig+0x6c4>
 800aad6:	a201      	add	r2, pc, #4	; (adr r2, 800aadc <UART_SetConfig+0x5cc>)
 800aad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aadc:	0800ab5f 	.word	0x0800ab5f
 800aae0:	0800abd5 	.word	0x0800abd5
 800aae4:	0800ab67 	.word	0x0800ab67
 800aae8:	0800abd5 	.word	0x0800abd5
 800aaec:	0800abd5 	.word	0x0800abd5
 800aaf0:	0800abd5 	.word	0x0800abd5
 800aaf4:	0800ab77 	.word	0x0800ab77
 800aaf8:	0800abd5 	.word	0x0800abd5
 800aafc:	0800abd5 	.word	0x0800abd5
 800ab00:	0800abd5 	.word	0x0800abd5
 800ab04:	0800abd5 	.word	0x0800abd5
 800ab08:	0800abd5 	.word	0x0800abd5
 800ab0c:	0800abd5 	.word	0x0800abd5
 800ab10:	0800abd5 	.word	0x0800abd5
 800ab14:	0800ab87 	.word	0x0800ab87
 800ab18:	0800abd5 	.word	0x0800abd5
 800ab1c:	0800abd5 	.word	0x0800abd5
 800ab20:	0800abd5 	.word	0x0800abd5
 800ab24:	0800abd5 	.word	0x0800abd5
 800ab28:	0800abd5 	.word	0x0800abd5
 800ab2c:	0800abd5 	.word	0x0800abd5
 800ab30:	0800abd5 	.word	0x0800abd5
 800ab34:	0800abd5 	.word	0x0800abd5
 800ab38:	0800abd5 	.word	0x0800abd5
 800ab3c:	0800abd5 	.word	0x0800abd5
 800ab40:	0800abd5 	.word	0x0800abd5
 800ab44:	0800abd5 	.word	0x0800abd5
 800ab48:	0800abd5 	.word	0x0800abd5
 800ab4c:	0800abd5 	.word	0x0800abd5
 800ab50:	0800abd5 	.word	0x0800abd5
 800ab54:	0800abc7 	.word	0x0800abc7
 800ab58:	2b40      	cmp	r3, #64	; 0x40
 800ab5a:	d037      	beq.n	800abcc <UART_SetConfig+0x6bc>
 800ab5c:	e03a      	b.n	800abd4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ab5e:	f7fc fb59 	bl	8007214 <HAL_RCCEx_GetD3PCLK1Freq>
 800ab62:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ab64:	e03c      	b.n	800abe0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f7fc fb68 	bl	8007240 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ab70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab74:	e034      	b.n	800abe0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab76:	f107 0318 	add.w	r3, r7, #24
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f7fc fcb4 	bl	80074e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ab80:	69fb      	ldr	r3, [r7, #28]
 800ab82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab84:	e02c      	b.n	800abe0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab86:	4b09      	ldr	r3, [pc, #36]	; (800abac <UART_SetConfig+0x69c>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f003 0320 	and.w	r3, r3, #32
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d016      	beq.n	800abc0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ab92:	4b06      	ldr	r3, [pc, #24]	; (800abac <UART_SetConfig+0x69c>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	08db      	lsrs	r3, r3, #3
 800ab98:	f003 0303 	and.w	r3, r3, #3
 800ab9c:	4a07      	ldr	r2, [pc, #28]	; (800abbc <UART_SetConfig+0x6ac>)
 800ab9e:	fa22 f303 	lsr.w	r3, r2, r3
 800aba2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aba4:	e01c      	b.n	800abe0 <UART_SetConfig+0x6d0>
 800aba6:	bf00      	nop
 800aba8:	40011400 	.word	0x40011400
 800abac:	58024400 	.word	0x58024400
 800abb0:	40007800 	.word	0x40007800
 800abb4:	40007c00 	.word	0x40007c00
 800abb8:	58000c00 	.word	0x58000c00
 800abbc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800abc0:	4b9d      	ldr	r3, [pc, #628]	; (800ae38 <UART_SetConfig+0x928>)
 800abc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abc4:	e00c      	b.n	800abe0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800abc6:	4b9d      	ldr	r3, [pc, #628]	; (800ae3c <UART_SetConfig+0x92c>)
 800abc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abca:	e009      	b.n	800abe0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800abcc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800abd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abd2:	e005      	b.n	800abe0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800abd4:	2300      	movs	r3, #0
 800abd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800abd8:	2301      	movs	r3, #1
 800abda:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800abde:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800abe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	f000 81de 	beq.w	800afa4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abec:	4a94      	ldr	r2, [pc, #592]	; (800ae40 <UART_SetConfig+0x930>)
 800abee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800abf2:	461a      	mov	r2, r3
 800abf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abf6:	fbb3 f3f2 	udiv	r3, r3, r2
 800abfa:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	685a      	ldr	r2, [r3, #4]
 800ac00:	4613      	mov	r3, r2
 800ac02:	005b      	lsls	r3, r3, #1
 800ac04:	4413      	add	r3, r2
 800ac06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac08:	429a      	cmp	r2, r3
 800ac0a:	d305      	bcc.n	800ac18 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	685b      	ldr	r3, [r3, #4]
 800ac10:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ac12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac14:	429a      	cmp	r2, r3
 800ac16:	d903      	bls.n	800ac20 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800ac18:	2301      	movs	r3, #1
 800ac1a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ac1e:	e1c1      	b.n	800afa4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac22:	2200      	movs	r2, #0
 800ac24:	60bb      	str	r3, [r7, #8]
 800ac26:	60fa      	str	r2, [r7, #12]
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac2c:	4a84      	ldr	r2, [pc, #528]	; (800ae40 <UART_SetConfig+0x930>)
 800ac2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac32:	b29b      	uxth	r3, r3
 800ac34:	2200      	movs	r2, #0
 800ac36:	603b      	str	r3, [r7, #0]
 800ac38:	607a      	str	r2, [r7, #4]
 800ac3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac3e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ac42:	f7f5 fb49 	bl	80002d8 <__aeabi_uldivmod>
 800ac46:	4602      	mov	r2, r0
 800ac48:	460b      	mov	r3, r1
 800ac4a:	4610      	mov	r0, r2
 800ac4c:	4619      	mov	r1, r3
 800ac4e:	f04f 0200 	mov.w	r2, #0
 800ac52:	f04f 0300 	mov.w	r3, #0
 800ac56:	020b      	lsls	r3, r1, #8
 800ac58:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ac5c:	0202      	lsls	r2, r0, #8
 800ac5e:	6979      	ldr	r1, [r7, #20]
 800ac60:	6849      	ldr	r1, [r1, #4]
 800ac62:	0849      	lsrs	r1, r1, #1
 800ac64:	2000      	movs	r0, #0
 800ac66:	460c      	mov	r4, r1
 800ac68:	4605      	mov	r5, r0
 800ac6a:	eb12 0804 	adds.w	r8, r2, r4
 800ac6e:	eb43 0905 	adc.w	r9, r3, r5
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	685b      	ldr	r3, [r3, #4]
 800ac76:	2200      	movs	r2, #0
 800ac78:	469a      	mov	sl, r3
 800ac7a:	4693      	mov	fp, r2
 800ac7c:	4652      	mov	r2, sl
 800ac7e:	465b      	mov	r3, fp
 800ac80:	4640      	mov	r0, r8
 800ac82:	4649      	mov	r1, r9
 800ac84:	f7f5 fb28 	bl	80002d8 <__aeabi_uldivmod>
 800ac88:	4602      	mov	r2, r0
 800ac8a:	460b      	mov	r3, r1
 800ac8c:	4613      	mov	r3, r2
 800ac8e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ac90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac96:	d308      	bcc.n	800acaa <UART_SetConfig+0x79a>
 800ac98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac9e:	d204      	bcs.n	800acaa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aca6:	60da      	str	r2, [r3, #12]
 800aca8:	e17c      	b.n	800afa4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800acaa:	2301      	movs	r3, #1
 800acac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800acb0:	e178      	b.n	800afa4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	69db      	ldr	r3, [r3, #28]
 800acb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800acba:	f040 80c5 	bne.w	800ae48 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800acbe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800acc2:	2b20      	cmp	r3, #32
 800acc4:	dc48      	bgt.n	800ad58 <UART_SetConfig+0x848>
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	db7b      	blt.n	800adc2 <UART_SetConfig+0x8b2>
 800acca:	2b20      	cmp	r3, #32
 800accc:	d879      	bhi.n	800adc2 <UART_SetConfig+0x8b2>
 800acce:	a201      	add	r2, pc, #4	; (adr r2, 800acd4 <UART_SetConfig+0x7c4>)
 800acd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acd4:	0800ad5f 	.word	0x0800ad5f
 800acd8:	0800ad67 	.word	0x0800ad67
 800acdc:	0800adc3 	.word	0x0800adc3
 800ace0:	0800adc3 	.word	0x0800adc3
 800ace4:	0800ad6f 	.word	0x0800ad6f
 800ace8:	0800adc3 	.word	0x0800adc3
 800acec:	0800adc3 	.word	0x0800adc3
 800acf0:	0800adc3 	.word	0x0800adc3
 800acf4:	0800ad7f 	.word	0x0800ad7f
 800acf8:	0800adc3 	.word	0x0800adc3
 800acfc:	0800adc3 	.word	0x0800adc3
 800ad00:	0800adc3 	.word	0x0800adc3
 800ad04:	0800adc3 	.word	0x0800adc3
 800ad08:	0800adc3 	.word	0x0800adc3
 800ad0c:	0800adc3 	.word	0x0800adc3
 800ad10:	0800adc3 	.word	0x0800adc3
 800ad14:	0800ad8f 	.word	0x0800ad8f
 800ad18:	0800adc3 	.word	0x0800adc3
 800ad1c:	0800adc3 	.word	0x0800adc3
 800ad20:	0800adc3 	.word	0x0800adc3
 800ad24:	0800adc3 	.word	0x0800adc3
 800ad28:	0800adc3 	.word	0x0800adc3
 800ad2c:	0800adc3 	.word	0x0800adc3
 800ad30:	0800adc3 	.word	0x0800adc3
 800ad34:	0800adc3 	.word	0x0800adc3
 800ad38:	0800adc3 	.word	0x0800adc3
 800ad3c:	0800adc3 	.word	0x0800adc3
 800ad40:	0800adc3 	.word	0x0800adc3
 800ad44:	0800adc3 	.word	0x0800adc3
 800ad48:	0800adc3 	.word	0x0800adc3
 800ad4c:	0800adc3 	.word	0x0800adc3
 800ad50:	0800adc3 	.word	0x0800adc3
 800ad54:	0800adb5 	.word	0x0800adb5
 800ad58:	2b40      	cmp	r3, #64	; 0x40
 800ad5a:	d02e      	beq.n	800adba <UART_SetConfig+0x8aa>
 800ad5c:	e031      	b.n	800adc2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad5e:	f7fa faa3 	bl	80052a8 <HAL_RCC_GetPCLK1Freq>
 800ad62:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ad64:	e033      	b.n	800adce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ad66:	f7fa fab5 	bl	80052d4 <HAL_RCC_GetPCLK2Freq>
 800ad6a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ad6c:	e02f      	b.n	800adce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad72:	4618      	mov	r0, r3
 800ad74:	f7fc fa64 	bl	8007240 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ad78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad7c:	e027      	b.n	800adce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad7e:	f107 0318 	add.w	r3, r7, #24
 800ad82:	4618      	mov	r0, r3
 800ad84:	f7fc fbb0 	bl	80074e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ad88:	69fb      	ldr	r3, [r7, #28]
 800ad8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad8c:	e01f      	b.n	800adce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad8e:	4b2d      	ldr	r3, [pc, #180]	; (800ae44 <UART_SetConfig+0x934>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f003 0320 	and.w	r3, r3, #32
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d009      	beq.n	800adae <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ad9a:	4b2a      	ldr	r3, [pc, #168]	; (800ae44 <UART_SetConfig+0x934>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	08db      	lsrs	r3, r3, #3
 800ada0:	f003 0303 	and.w	r3, r3, #3
 800ada4:	4a24      	ldr	r2, [pc, #144]	; (800ae38 <UART_SetConfig+0x928>)
 800ada6:	fa22 f303 	lsr.w	r3, r2, r3
 800adaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800adac:	e00f      	b.n	800adce <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800adae:	4b22      	ldr	r3, [pc, #136]	; (800ae38 <UART_SetConfig+0x928>)
 800adb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adb2:	e00c      	b.n	800adce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800adb4:	4b21      	ldr	r3, [pc, #132]	; (800ae3c <UART_SetConfig+0x92c>)
 800adb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adb8:	e009      	b.n	800adce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800adba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800adbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adc0:	e005      	b.n	800adce <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800adc2:	2300      	movs	r3, #0
 800adc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800adc6:	2301      	movs	r3, #1
 800adc8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800adcc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800adce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800add0:	2b00      	cmp	r3, #0
 800add2:	f000 80e7 	beq.w	800afa4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adda:	4a19      	ldr	r2, [pc, #100]	; (800ae40 <UART_SetConfig+0x930>)
 800addc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ade0:	461a      	mov	r2, r3
 800ade2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ade4:	fbb3 f3f2 	udiv	r3, r3, r2
 800ade8:	005a      	lsls	r2, r3, #1
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	685b      	ldr	r3, [r3, #4]
 800adee:	085b      	lsrs	r3, r3, #1
 800adf0:	441a      	add	r2, r3
 800adf2:	697b      	ldr	r3, [r7, #20]
 800adf4:	685b      	ldr	r3, [r3, #4]
 800adf6:	fbb2 f3f3 	udiv	r3, r2, r3
 800adfa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800adfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adfe:	2b0f      	cmp	r3, #15
 800ae00:	d916      	bls.n	800ae30 <UART_SetConfig+0x920>
 800ae02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae08:	d212      	bcs.n	800ae30 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ae0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae0c:	b29b      	uxth	r3, r3
 800ae0e:	f023 030f 	bic.w	r3, r3, #15
 800ae12:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ae14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae16:	085b      	lsrs	r3, r3, #1
 800ae18:	b29b      	uxth	r3, r3
 800ae1a:	f003 0307 	and.w	r3, r3, #7
 800ae1e:	b29a      	uxth	r2, r3
 800ae20:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ae22:	4313      	orrs	r3, r2
 800ae24:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ae2c:	60da      	str	r2, [r3, #12]
 800ae2e:	e0b9      	b.n	800afa4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ae30:	2301      	movs	r3, #1
 800ae32:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ae36:	e0b5      	b.n	800afa4 <UART_SetConfig+0xa94>
 800ae38:	03d09000 	.word	0x03d09000
 800ae3c:	003d0900 	.word	0x003d0900
 800ae40:	0800c68c 	.word	0x0800c68c
 800ae44:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ae48:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ae4c:	2b20      	cmp	r3, #32
 800ae4e:	dc49      	bgt.n	800aee4 <UART_SetConfig+0x9d4>
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	db7c      	blt.n	800af4e <UART_SetConfig+0xa3e>
 800ae54:	2b20      	cmp	r3, #32
 800ae56:	d87a      	bhi.n	800af4e <UART_SetConfig+0xa3e>
 800ae58:	a201      	add	r2, pc, #4	; (adr r2, 800ae60 <UART_SetConfig+0x950>)
 800ae5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae5e:	bf00      	nop
 800ae60:	0800aeeb 	.word	0x0800aeeb
 800ae64:	0800aef3 	.word	0x0800aef3
 800ae68:	0800af4f 	.word	0x0800af4f
 800ae6c:	0800af4f 	.word	0x0800af4f
 800ae70:	0800aefb 	.word	0x0800aefb
 800ae74:	0800af4f 	.word	0x0800af4f
 800ae78:	0800af4f 	.word	0x0800af4f
 800ae7c:	0800af4f 	.word	0x0800af4f
 800ae80:	0800af0b 	.word	0x0800af0b
 800ae84:	0800af4f 	.word	0x0800af4f
 800ae88:	0800af4f 	.word	0x0800af4f
 800ae8c:	0800af4f 	.word	0x0800af4f
 800ae90:	0800af4f 	.word	0x0800af4f
 800ae94:	0800af4f 	.word	0x0800af4f
 800ae98:	0800af4f 	.word	0x0800af4f
 800ae9c:	0800af4f 	.word	0x0800af4f
 800aea0:	0800af1b 	.word	0x0800af1b
 800aea4:	0800af4f 	.word	0x0800af4f
 800aea8:	0800af4f 	.word	0x0800af4f
 800aeac:	0800af4f 	.word	0x0800af4f
 800aeb0:	0800af4f 	.word	0x0800af4f
 800aeb4:	0800af4f 	.word	0x0800af4f
 800aeb8:	0800af4f 	.word	0x0800af4f
 800aebc:	0800af4f 	.word	0x0800af4f
 800aec0:	0800af4f 	.word	0x0800af4f
 800aec4:	0800af4f 	.word	0x0800af4f
 800aec8:	0800af4f 	.word	0x0800af4f
 800aecc:	0800af4f 	.word	0x0800af4f
 800aed0:	0800af4f 	.word	0x0800af4f
 800aed4:	0800af4f 	.word	0x0800af4f
 800aed8:	0800af4f 	.word	0x0800af4f
 800aedc:	0800af4f 	.word	0x0800af4f
 800aee0:	0800af41 	.word	0x0800af41
 800aee4:	2b40      	cmp	r3, #64	; 0x40
 800aee6:	d02e      	beq.n	800af46 <UART_SetConfig+0xa36>
 800aee8:	e031      	b.n	800af4e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aeea:	f7fa f9dd 	bl	80052a8 <HAL_RCC_GetPCLK1Freq>
 800aeee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800aef0:	e033      	b.n	800af5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aef2:	f7fa f9ef 	bl	80052d4 <HAL_RCC_GetPCLK2Freq>
 800aef6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800aef8:	e02f      	b.n	800af5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aefa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aefe:	4618      	mov	r0, r3
 800af00:	f7fc f99e 	bl	8007240 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800af04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af08:	e027      	b.n	800af5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af0a:	f107 0318 	add.w	r3, r7, #24
 800af0e:	4618      	mov	r0, r3
 800af10:	f7fc faea 	bl	80074e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800af14:	69fb      	ldr	r3, [r7, #28]
 800af16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af18:	e01f      	b.n	800af5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af1a:	4b2d      	ldr	r3, [pc, #180]	; (800afd0 <UART_SetConfig+0xac0>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	f003 0320 	and.w	r3, r3, #32
 800af22:	2b00      	cmp	r3, #0
 800af24:	d009      	beq.n	800af3a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800af26:	4b2a      	ldr	r3, [pc, #168]	; (800afd0 <UART_SetConfig+0xac0>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	08db      	lsrs	r3, r3, #3
 800af2c:	f003 0303 	and.w	r3, r3, #3
 800af30:	4a28      	ldr	r2, [pc, #160]	; (800afd4 <UART_SetConfig+0xac4>)
 800af32:	fa22 f303 	lsr.w	r3, r2, r3
 800af36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800af38:	e00f      	b.n	800af5a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800af3a:	4b26      	ldr	r3, [pc, #152]	; (800afd4 <UART_SetConfig+0xac4>)
 800af3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af3e:	e00c      	b.n	800af5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800af40:	4b25      	ldr	r3, [pc, #148]	; (800afd8 <UART_SetConfig+0xac8>)
 800af42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af44:	e009      	b.n	800af5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af4c:	e005      	b.n	800af5a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800af4e:	2300      	movs	r3, #0
 800af50:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800af52:	2301      	movs	r3, #1
 800af54:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800af58:	bf00      	nop
    }

    if (pclk != 0U)
 800af5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d021      	beq.n	800afa4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af64:	4a1d      	ldr	r2, [pc, #116]	; (800afdc <UART_SetConfig+0xacc>)
 800af66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af6a:	461a      	mov	r2, r3
 800af6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af6e:	fbb3 f2f2 	udiv	r2, r3, r2
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	685b      	ldr	r3, [r3, #4]
 800af76:	085b      	lsrs	r3, r3, #1
 800af78:	441a      	add	r2, r3
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	685b      	ldr	r3, [r3, #4]
 800af7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800af82:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af86:	2b0f      	cmp	r3, #15
 800af88:	d909      	bls.n	800af9e <UART_SetConfig+0xa8e>
 800af8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af90:	d205      	bcs.n	800af9e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800af92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af94:	b29a      	uxth	r2, r3
 800af96:	697b      	ldr	r3, [r7, #20]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	60da      	str	r2, [r3, #12]
 800af9c:	e002      	b.n	800afa4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800af9e:	2301      	movs	r3, #1
 800afa0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	2201      	movs	r2, #1
 800afa8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	2201      	movs	r2, #1
 800afb0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800afb4:	697b      	ldr	r3, [r7, #20]
 800afb6:	2200      	movs	r2, #0
 800afb8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	2200      	movs	r2, #0
 800afbe:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800afc0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3748      	adds	r7, #72	; 0x48
 800afc8:	46bd      	mov	sp, r7
 800afca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800afce:	bf00      	nop
 800afd0:	58024400 	.word	0x58024400
 800afd4:	03d09000 	.word	0x03d09000
 800afd8:	003d0900 	.word	0x003d0900
 800afdc:	0800c68c 	.word	0x0800c68c

0800afe0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800afe0:	b480      	push	{r7}
 800afe2:	b083      	sub	sp, #12
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afec:	f003 0301 	and.w	r3, r3, #1
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d00a      	beq.n	800b00a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	685b      	ldr	r3, [r3, #4]
 800affa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	430a      	orrs	r2, r1
 800b008:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b00e:	f003 0302 	and.w	r3, r3, #2
 800b012:	2b00      	cmp	r3, #0
 800b014:	d00a      	beq.n	800b02c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	685b      	ldr	r3, [r3, #4]
 800b01c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	430a      	orrs	r2, r1
 800b02a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b030:	f003 0304 	and.w	r3, r3, #4
 800b034:	2b00      	cmp	r3, #0
 800b036:	d00a      	beq.n	800b04e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	685b      	ldr	r3, [r3, #4]
 800b03e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	430a      	orrs	r2, r1
 800b04c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b052:	f003 0308 	and.w	r3, r3, #8
 800b056:	2b00      	cmp	r3, #0
 800b058:	d00a      	beq.n	800b070 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	685b      	ldr	r3, [r3, #4]
 800b060:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	430a      	orrs	r2, r1
 800b06e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b074:	f003 0310 	and.w	r3, r3, #16
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d00a      	beq.n	800b092 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	689b      	ldr	r3, [r3, #8]
 800b082:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	430a      	orrs	r2, r1
 800b090:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b096:	f003 0320 	and.w	r3, r3, #32
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d00a      	beq.n	800b0b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	689b      	ldr	r3, [r3, #8]
 800b0a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	430a      	orrs	r2, r1
 800b0b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d01a      	beq.n	800b0f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	430a      	orrs	r2, r1
 800b0d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b0de:	d10a      	bne.n	800b0f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	685b      	ldr	r3, [r3, #4]
 800b0e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	430a      	orrs	r2, r1
 800b0f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d00a      	beq.n	800b118 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	685b      	ldr	r3, [r3, #4]
 800b108:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	430a      	orrs	r2, r1
 800b116:	605a      	str	r2, [r3, #4]
  }
}
 800b118:	bf00      	nop
 800b11a:	370c      	adds	r7, #12
 800b11c:	46bd      	mov	sp, r7
 800b11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b122:	4770      	bx	lr

0800b124 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b098      	sub	sp, #96	; 0x60
 800b128:	af02      	add	r7, sp, #8
 800b12a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2200      	movs	r2, #0
 800b130:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b134:	f7f7 f996 	bl	8002464 <HAL_GetTick>
 800b138:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	f003 0308 	and.w	r3, r3, #8
 800b144:	2b08      	cmp	r3, #8
 800b146:	d12f      	bne.n	800b1a8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b148:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b14c:	9300      	str	r3, [sp, #0]
 800b14e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b150:	2200      	movs	r2, #0
 800b152:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f000 f88e 	bl	800b278 <UART_WaitOnFlagUntilTimeout>
 800b15c:	4603      	mov	r3, r0
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d022      	beq.n	800b1a8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b16a:	e853 3f00 	ldrex	r3, [r3]
 800b16e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b172:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b176:	653b      	str	r3, [r7, #80]	; 0x50
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	461a      	mov	r2, r3
 800b17e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b180:	647b      	str	r3, [r7, #68]	; 0x44
 800b182:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b184:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b186:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b188:	e841 2300 	strex	r3, r2, [r1]
 800b18c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b18e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b190:	2b00      	cmp	r3, #0
 800b192:	d1e6      	bne.n	800b162 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2220      	movs	r2, #32
 800b198:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b1a4:	2303      	movs	r3, #3
 800b1a6:	e063      	b.n	800b270 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	f003 0304 	and.w	r3, r3, #4
 800b1b2:	2b04      	cmp	r3, #4
 800b1b4:	d149      	bne.n	800b24a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b1b6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b1ba:	9300      	str	r3, [sp, #0]
 800b1bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b1be:	2200      	movs	r2, #0
 800b1c0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f000 f857 	bl	800b278 <UART_WaitOnFlagUntilTimeout>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d03c      	beq.n	800b24a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d8:	e853 3f00 	ldrex	r3, [r3]
 800b1dc:	623b      	str	r3, [r7, #32]
   return(result);
 800b1de:	6a3b      	ldr	r3, [r7, #32]
 800b1e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b1e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	461a      	mov	r2, r3
 800b1ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1ee:	633b      	str	r3, [r7, #48]	; 0x30
 800b1f0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b1f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1f6:	e841 2300 	strex	r3, r2, [r1]
 800b1fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d1e6      	bne.n	800b1d0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	3308      	adds	r3, #8
 800b208:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	e853 3f00 	ldrex	r3, [r3]
 800b210:	60fb      	str	r3, [r7, #12]
   return(result);
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	f023 0301 	bic.w	r3, r3, #1
 800b218:	64bb      	str	r3, [r7, #72]	; 0x48
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	3308      	adds	r3, #8
 800b220:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b222:	61fa      	str	r2, [r7, #28]
 800b224:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b226:	69b9      	ldr	r1, [r7, #24]
 800b228:	69fa      	ldr	r2, [r7, #28]
 800b22a:	e841 2300 	strex	r3, r2, [r1]
 800b22e:	617b      	str	r3, [r7, #20]
   return(result);
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d1e5      	bne.n	800b202 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2220      	movs	r2, #32
 800b23a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2200      	movs	r2, #0
 800b242:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b246:	2303      	movs	r3, #3
 800b248:	e012      	b.n	800b270 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2220      	movs	r2, #32
 800b24e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2220      	movs	r2, #32
 800b256:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2200      	movs	r2, #0
 800b25e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2200      	movs	r2, #0
 800b264:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2200      	movs	r2, #0
 800b26a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b26e:	2300      	movs	r3, #0
}
 800b270:	4618      	mov	r0, r3
 800b272:	3758      	adds	r7, #88	; 0x58
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}

0800b278 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b084      	sub	sp, #16
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	60f8      	str	r0, [r7, #12]
 800b280:	60b9      	str	r1, [r7, #8]
 800b282:	603b      	str	r3, [r7, #0]
 800b284:	4613      	mov	r3, r2
 800b286:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b288:	e049      	b.n	800b31e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b28a:	69bb      	ldr	r3, [r7, #24]
 800b28c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b290:	d045      	beq.n	800b31e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b292:	f7f7 f8e7 	bl	8002464 <HAL_GetTick>
 800b296:	4602      	mov	r2, r0
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	1ad3      	subs	r3, r2, r3
 800b29c:	69ba      	ldr	r2, [r7, #24]
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	d302      	bcc.n	800b2a8 <UART_WaitOnFlagUntilTimeout+0x30>
 800b2a2:	69bb      	ldr	r3, [r7, #24]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d101      	bne.n	800b2ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b2a8:	2303      	movs	r3, #3
 800b2aa:	e048      	b.n	800b33e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f003 0304 	and.w	r3, r3, #4
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d031      	beq.n	800b31e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	69db      	ldr	r3, [r3, #28]
 800b2c0:	f003 0308 	and.w	r3, r3, #8
 800b2c4:	2b08      	cmp	r3, #8
 800b2c6:	d110      	bne.n	800b2ea <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	2208      	movs	r2, #8
 800b2ce:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800b2d0:	68f8      	ldr	r0, [r7, #12]
 800b2d2:	f000 f839 	bl	800b348 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	2208      	movs	r2, #8
 800b2da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	e029      	b.n	800b33e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	69db      	ldr	r3, [r3, #28]
 800b2f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b2f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b2f8:	d111      	bne.n	800b31e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b302:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b304:	68f8      	ldr	r0, [r7, #12]
 800b306:	f000 f81f 	bl	800b348 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	2220      	movs	r2, #32
 800b30e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	2200      	movs	r2, #0
 800b316:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b31a:	2303      	movs	r3, #3
 800b31c:	e00f      	b.n	800b33e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	69da      	ldr	r2, [r3, #28]
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	4013      	ands	r3, r2
 800b328:	68ba      	ldr	r2, [r7, #8]
 800b32a:	429a      	cmp	r2, r3
 800b32c:	bf0c      	ite	eq
 800b32e:	2301      	moveq	r3, #1
 800b330:	2300      	movne	r3, #0
 800b332:	b2db      	uxtb	r3, r3
 800b334:	461a      	mov	r2, r3
 800b336:	79fb      	ldrb	r3, [r7, #7]
 800b338:	429a      	cmp	r2, r3
 800b33a:	d0a6      	beq.n	800b28a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b33c:	2300      	movs	r3, #0
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3710      	adds	r7, #16
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}
	...

0800b348 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b348:	b480      	push	{r7}
 800b34a:	b095      	sub	sp, #84	; 0x54
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b358:	e853 3f00 	ldrex	r3, [r3]
 800b35c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b360:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b364:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	461a      	mov	r2, r3
 800b36c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b36e:	643b      	str	r3, [r7, #64]	; 0x40
 800b370:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b372:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b374:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b376:	e841 2300 	strex	r3, r2, [r1]
 800b37a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b37c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d1e6      	bne.n	800b350 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	3308      	adds	r3, #8
 800b388:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b38a:	6a3b      	ldr	r3, [r7, #32]
 800b38c:	e853 3f00 	ldrex	r3, [r3]
 800b390:	61fb      	str	r3, [r7, #28]
   return(result);
 800b392:	69fa      	ldr	r2, [r7, #28]
 800b394:	4b1e      	ldr	r3, [pc, #120]	; (800b410 <UART_EndRxTransfer+0xc8>)
 800b396:	4013      	ands	r3, r2
 800b398:	64bb      	str	r3, [r7, #72]	; 0x48
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	3308      	adds	r3, #8
 800b3a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b3a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b3a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b3a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3aa:	e841 2300 	strex	r3, r2, [r1]
 800b3ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d1e5      	bne.n	800b382 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3ba:	2b01      	cmp	r3, #1
 800b3bc:	d118      	bne.n	800b3f0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	e853 3f00 	ldrex	r3, [r3]
 800b3ca:	60bb      	str	r3, [r7, #8]
   return(result);
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	f023 0310 	bic.w	r3, r3, #16
 800b3d2:	647b      	str	r3, [r7, #68]	; 0x44
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	461a      	mov	r2, r3
 800b3da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3dc:	61bb      	str	r3, [r7, #24]
 800b3de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3e0:	6979      	ldr	r1, [r7, #20]
 800b3e2:	69ba      	ldr	r2, [r7, #24]
 800b3e4:	e841 2300 	strex	r3, r2, [r1]
 800b3e8:	613b      	str	r3, [r7, #16]
   return(result);
 800b3ea:	693b      	ldr	r3, [r7, #16]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d1e6      	bne.n	800b3be <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2220      	movs	r2, #32
 800b3f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2200      	movs	r2, #0
 800b402:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b404:	bf00      	nop
 800b406:	3754      	adds	r7, #84	; 0x54
 800b408:	46bd      	mov	sp, r7
 800b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40e:	4770      	bx	lr
 800b410:	effffffe 	.word	0xeffffffe

0800b414 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b414:	b480      	push	{r7}
 800b416:	b085      	sub	sp, #20
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b422:	2b01      	cmp	r3, #1
 800b424:	d101      	bne.n	800b42a <HAL_UARTEx_DisableFifoMode+0x16>
 800b426:	2302      	movs	r3, #2
 800b428:	e027      	b.n	800b47a <HAL_UARTEx_DisableFifoMode+0x66>
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2201      	movs	r2, #1
 800b42e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2224      	movs	r2, #36	; 0x24
 800b436:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	681a      	ldr	r2, [r3, #0]
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	f022 0201 	bic.w	r2, r2, #1
 800b450:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b458:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2200      	movs	r2, #0
 800b45e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	68fa      	ldr	r2, [r7, #12]
 800b466:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2220      	movs	r2, #32
 800b46c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2200      	movs	r2, #0
 800b474:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b478:	2300      	movs	r3, #0
}
 800b47a:	4618      	mov	r0, r3
 800b47c:	3714      	adds	r7, #20
 800b47e:	46bd      	mov	sp, r7
 800b480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b484:	4770      	bx	lr

0800b486 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b486:	b580      	push	{r7, lr}
 800b488:	b084      	sub	sp, #16
 800b48a:	af00      	add	r7, sp, #0
 800b48c:	6078      	str	r0, [r7, #4]
 800b48e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b496:	2b01      	cmp	r3, #1
 800b498:	d101      	bne.n	800b49e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b49a:	2302      	movs	r3, #2
 800b49c:	e02d      	b.n	800b4fa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	2201      	movs	r2, #1
 800b4a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2224      	movs	r2, #36	; 0x24
 800b4aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	681a      	ldr	r2, [r3, #0]
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	f022 0201 	bic.w	r2, r2, #1
 800b4c4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	689b      	ldr	r3, [r3, #8]
 800b4cc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	683a      	ldr	r2, [r7, #0]
 800b4d6:	430a      	orrs	r2, r1
 800b4d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f000 f850 	bl	800b580 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	68fa      	ldr	r2, [r7, #12]
 800b4e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2220      	movs	r2, #32
 800b4ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b4f8:	2300      	movs	r3, #0
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3710      	adds	r7, #16
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}

0800b502 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b502:	b580      	push	{r7, lr}
 800b504:	b084      	sub	sp, #16
 800b506:	af00      	add	r7, sp, #0
 800b508:	6078      	str	r0, [r7, #4]
 800b50a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b512:	2b01      	cmp	r3, #1
 800b514:	d101      	bne.n	800b51a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b516:	2302      	movs	r3, #2
 800b518:	e02d      	b.n	800b576 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2201      	movs	r2, #1
 800b51e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2224      	movs	r2, #36	; 0x24
 800b526:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	681a      	ldr	r2, [r3, #0]
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f022 0201 	bic.w	r2, r2, #1
 800b540:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	689b      	ldr	r3, [r3, #8]
 800b548:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	683a      	ldr	r2, [r7, #0]
 800b552:	430a      	orrs	r2, r1
 800b554:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f000 f812 	bl	800b580 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	68fa      	ldr	r2, [r7, #12]
 800b562:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2220      	movs	r2, #32
 800b568:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2200      	movs	r2, #0
 800b570:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b574:	2300      	movs	r3, #0
}
 800b576:	4618      	mov	r0, r3
 800b578:	3710      	adds	r7, #16
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}
	...

0800b580 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b580:	b480      	push	{r7}
 800b582:	b085      	sub	sp, #20
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d108      	bne.n	800b5a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2201      	movs	r2, #1
 800b594:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2201      	movs	r2, #1
 800b59c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b5a0:	e031      	b.n	800b606 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b5a2:	2310      	movs	r3, #16
 800b5a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b5a6:	2310      	movs	r3, #16
 800b5a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	689b      	ldr	r3, [r3, #8]
 800b5b0:	0e5b      	lsrs	r3, r3, #25
 800b5b2:	b2db      	uxtb	r3, r3
 800b5b4:	f003 0307 	and.w	r3, r3, #7
 800b5b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	689b      	ldr	r3, [r3, #8]
 800b5c0:	0f5b      	lsrs	r3, r3, #29
 800b5c2:	b2db      	uxtb	r3, r3
 800b5c4:	f003 0307 	and.w	r3, r3, #7
 800b5c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b5ca:	7bbb      	ldrb	r3, [r7, #14]
 800b5cc:	7b3a      	ldrb	r2, [r7, #12]
 800b5ce:	4911      	ldr	r1, [pc, #68]	; (800b614 <UARTEx_SetNbDataToProcess+0x94>)
 800b5d0:	5c8a      	ldrb	r2, [r1, r2]
 800b5d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b5d6:	7b3a      	ldrb	r2, [r7, #12]
 800b5d8:	490f      	ldr	r1, [pc, #60]	; (800b618 <UARTEx_SetNbDataToProcess+0x98>)
 800b5da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b5dc:	fb93 f3f2 	sdiv	r3, r3, r2
 800b5e0:	b29a      	uxth	r2, r3
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b5e8:	7bfb      	ldrb	r3, [r7, #15]
 800b5ea:	7b7a      	ldrb	r2, [r7, #13]
 800b5ec:	4909      	ldr	r1, [pc, #36]	; (800b614 <UARTEx_SetNbDataToProcess+0x94>)
 800b5ee:	5c8a      	ldrb	r2, [r1, r2]
 800b5f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b5f4:	7b7a      	ldrb	r2, [r7, #13]
 800b5f6:	4908      	ldr	r1, [pc, #32]	; (800b618 <UARTEx_SetNbDataToProcess+0x98>)
 800b5f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b5fa:	fb93 f3f2 	sdiv	r3, r3, r2
 800b5fe:	b29a      	uxth	r2, r3
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b606:	bf00      	nop
 800b608:	3714      	adds	r7, #20
 800b60a:	46bd      	mov	sp, r7
 800b60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b610:	4770      	bx	lr
 800b612:	bf00      	nop
 800b614:	0800c6a4 	.word	0x0800c6a4
 800b618:	0800c6ac 	.word	0x0800c6ac

0800b61c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b61c:	b084      	sub	sp, #16
 800b61e:	b480      	push	{r7}
 800b620:	b085      	sub	sp, #20
 800b622:	af00      	add	r7, sp, #0
 800b624:	6078      	str	r0, [r7, #4]
 800b626:	f107 001c 	add.w	r0, r7, #28
 800b62a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b62e:	2300      	movs	r3, #0
 800b630:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800b632:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800b634:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800b636:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800b638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800b63a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800b63c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800b63e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800b642:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800b644:	68fa      	ldr	r2, [r7, #12]
 800b646:	4313      	orrs	r3, r2
 800b648:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	685a      	ldr	r2, [r3, #4]
 800b64e:	4b07      	ldr	r3, [pc, #28]	; (800b66c <SDMMC_Init+0x50>)
 800b650:	4013      	ands	r3, r2
 800b652:	68fa      	ldr	r2, [r7, #12]
 800b654:	431a      	orrs	r2, r3
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b65a:	2300      	movs	r3, #0
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	3714      	adds	r7, #20
 800b660:	46bd      	mov	sp, r7
 800b662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b666:	b004      	add	sp, #16
 800b668:	4770      	bx	lr
 800b66a:	bf00      	nop
 800b66c:	ffc02c00 	.word	0xffc02c00

0800b670 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b670:	b480      	push	{r7}
 800b672:	b083      	sub	sp, #12
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b67e:	4618      	mov	r0, r3
 800b680:	370c      	adds	r7, #12
 800b682:	46bd      	mov	sp, r7
 800b684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b688:	4770      	bx	lr

0800b68a <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b68a:	b480      	push	{r7}
 800b68c:	b083      	sub	sp, #12
 800b68e:	af00      	add	r7, sp, #0
 800b690:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	f043 0203 	orr.w	r2, r3, #3
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b69e:	2300      	movs	r3, #0
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	370c      	adds	r7, #12
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr

0800b6ac <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b083      	sub	sp, #12
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	f003 0303 	and.w	r3, r3, #3
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	370c      	adds	r7, #12
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c6:	4770      	bx	lr

0800b6c8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b085      	sub	sp, #20
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
 800b6d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	681a      	ldr	r2, [r3, #0]
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b6e6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800b6ec:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800b6f2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b6f4:	68fa      	ldr	r2, [r7, #12]
 800b6f6:	4313      	orrs	r3, r2
 800b6f8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	68da      	ldr	r2, [r3, #12]
 800b6fe:	4b06      	ldr	r3, [pc, #24]	; (800b718 <SDMMC_SendCommand+0x50>)
 800b700:	4013      	ands	r3, r2
 800b702:	68fa      	ldr	r2, [r7, #12]
 800b704:	431a      	orrs	r2, r3
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b70a:	2300      	movs	r3, #0
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	3714      	adds	r7, #20
 800b710:	46bd      	mov	sp, r7
 800b712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b716:	4770      	bx	lr
 800b718:	fffee0c0 	.word	0xfffee0c0

0800b71c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b71c:	b480      	push	{r7}
 800b71e:	b083      	sub	sp, #12
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	691b      	ldr	r3, [r3, #16]
 800b728:	b2db      	uxtb	r3, r3
}
 800b72a:	4618      	mov	r0, r3
 800b72c:	370c      	adds	r7, #12
 800b72e:	46bd      	mov	sp, r7
 800b730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b734:	4770      	bx	lr

0800b736 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b736:	b480      	push	{r7}
 800b738:	b085      	sub	sp, #20
 800b73a:	af00      	add	r7, sp, #0
 800b73c:	6078      	str	r0, [r7, #4]
 800b73e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	3314      	adds	r3, #20
 800b744:	461a      	mov	r2, r3
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	4413      	add	r3, r2
 800b74a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	681b      	ldr	r3, [r3, #0]
}
 800b750:	4618      	mov	r0, r3
 800b752:	3714      	adds	r7, #20
 800b754:	46bd      	mov	sp, r7
 800b756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75a:	4770      	bx	lr

0800b75c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800b75c:	b480      	push	{r7}
 800b75e:	b085      	sub	sp, #20
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
 800b764:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b766:	2300      	movs	r3, #0
 800b768:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	681a      	ldr	r2, [r3, #0]
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	685a      	ldr	r2, [r3, #4]
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b782:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800b788:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800b78e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b790:	68fa      	ldr	r2, [r7, #12]
 800b792:	4313      	orrs	r3, r2
 800b794:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b79a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	431a      	orrs	r2, r3
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b7a6:	2300      	movs	r3, #0

}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3714      	adds	r7, #20
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b2:	4770      	bx	lr

0800b7b4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b088      	sub	sp, #32
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
 800b7bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b7c2:	2310      	movs	r3, #16
 800b7c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b7d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7d6:	f107 0308 	add.w	r3, r7, #8
 800b7da:	4619      	mov	r1, r3
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f7ff ff73 	bl	800b6c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b7e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7e6:	2110      	movs	r1, #16
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f000 f995 	bl	800bb18 <SDMMC_GetCmdResp1>
 800b7ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7f0:	69fb      	ldr	r3, [r7, #28]
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3720      	adds	r7, #32
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}

0800b7fa <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800b7fa:	b580      	push	{r7, lr}
 800b7fc:	b088      	sub	sp, #32
 800b7fe:	af00      	add	r7, sp, #0
 800b800:	6078      	str	r0, [r7, #4]
 800b802:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b808:	2307      	movs	r3, #7
 800b80a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b80c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b810:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b812:	2300      	movs	r3, #0
 800b814:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b816:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b81a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b81c:	f107 0308 	add.w	r3, r7, #8
 800b820:	4619      	mov	r1, r3
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f7ff ff50 	bl	800b6c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b828:	f241 3288 	movw	r2, #5000	; 0x1388
 800b82c:	2107      	movs	r1, #7
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f000 f972 	bl	800bb18 <SDMMC_GetCmdResp1>
 800b834:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b836:	69fb      	ldr	r3, [r7, #28]
}
 800b838:	4618      	mov	r0, r3
 800b83a:	3720      	adds	r7, #32
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}

0800b840 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b088      	sub	sp, #32
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b848:	2300      	movs	r3, #0
 800b84a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b84c:	2300      	movs	r3, #0
 800b84e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b850:	2300      	movs	r3, #0
 800b852:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b854:	2300      	movs	r3, #0
 800b856:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b858:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b85c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b85e:	f107 0308 	add.w	r3, r7, #8
 800b862:	4619      	mov	r1, r3
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f7ff ff2f 	bl	800b6c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b86a:	6878      	ldr	r0, [r7, #4]
 800b86c:	f000 fb96 	bl	800bf9c <SDMMC_GetCmdError>
 800b870:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b872:	69fb      	ldr	r3, [r7, #28]
}
 800b874:	4618      	mov	r0, r3
 800b876:	3720      	adds	r7, #32
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}

0800b87c <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b088      	sub	sp, #32
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b884:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b888:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b88a:	2308      	movs	r3, #8
 800b88c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b88e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b892:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b894:	2300      	movs	r3, #0
 800b896:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b898:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b89c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b89e:	f107 0308 	add.w	r3, r7, #8
 800b8a2:	4619      	mov	r1, r3
 800b8a4:	6878      	ldr	r0, [r7, #4]
 800b8a6:	f7ff ff0f 	bl	800b6c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f000 fb28 	bl	800bf00 <SDMMC_GetCmdResp7>
 800b8b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8b2:	69fb      	ldr	r3, [r7, #28]
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	3720      	adds	r7, #32
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}

0800b8bc <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b088      	sub	sp, #32
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
 800b8c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b8ca:	2337      	movs	r3, #55	; 0x37
 800b8cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b8ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b8d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b8dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8de:	f107 0308 	add.w	r3, r7, #8
 800b8e2:	4619      	mov	r1, r3
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	f7ff feef 	bl	800b6c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b8ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8ee:	2137      	movs	r1, #55	; 0x37
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f000 f911 	bl	800bb18 <SDMMC_GetCmdResp1>
 800b8f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8f8:	69fb      	ldr	r3, [r7, #28]
}
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	3720      	adds	r7, #32
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}

0800b902 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b902:	b580      	push	{r7, lr}
 800b904:	b088      	sub	sp, #32
 800b906:	af00      	add	r7, sp, #0
 800b908:	6078      	str	r0, [r7, #4]
 800b90a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b910:	2329      	movs	r3, #41	; 0x29
 800b912:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b914:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b918:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b91a:	2300      	movs	r3, #0
 800b91c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b91e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b922:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b924:	f107 0308 	add.w	r3, r7, #8
 800b928:	4619      	mov	r1, r3
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f7ff fecc 	bl	800b6c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b930:	6878      	ldr	r0, [r7, #4]
 800b932:	f000 fa2d 	bl	800bd90 <SDMMC_GetCmdResp3>
 800b936:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b938:	69fb      	ldr	r3, [r7, #28]
}
 800b93a:	4618      	mov	r0, r3
 800b93c:	3720      	adds	r7, #32
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd80      	pop	{r7, pc}

0800b942 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b942:	b580      	push	{r7, lr}
 800b944:	b088      	sub	sp, #32
 800b946:	af00      	add	r7, sp, #0
 800b948:	6078      	str	r0, [r7, #4]
 800b94a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b950:	2306      	movs	r3, #6
 800b952:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b954:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b958:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b95a:	2300      	movs	r3, #0
 800b95c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b95e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b962:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b964:	f107 0308 	add.w	r3, r7, #8
 800b968:	4619      	mov	r1, r3
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f7ff feac 	bl	800b6c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b970:	f241 3288 	movw	r2, #5000	; 0x1388
 800b974:	2106      	movs	r1, #6
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f000 f8ce 	bl	800bb18 <SDMMC_GetCmdResp1>
 800b97c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b97e:	69fb      	ldr	r3, [r7, #28]
}
 800b980:	4618      	mov	r0, r3
 800b982:	3720      	adds	r7, #32
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}

0800b988 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b088      	sub	sp, #32
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b990:	2300      	movs	r3, #0
 800b992:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b994:	2333      	movs	r3, #51	; 0x33
 800b996:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b998:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b99c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b99e:	2300      	movs	r3, #0
 800b9a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b9a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b9a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b9a8:	f107 0308 	add.w	r3, r7, #8
 800b9ac:	4619      	mov	r1, r3
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f7ff fe8a 	bl	800b6c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b9b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9b8:	2133      	movs	r1, #51	; 0x33
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f000 f8ac 	bl	800bb18 <SDMMC_GetCmdResp1>
 800b9c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b9c2:	69fb      	ldr	r3, [r7, #28]
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	3720      	adds	r7, #32
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}

0800b9cc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b088      	sub	sp, #32
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b9d8:	2302      	movs	r3, #2
 800b9da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b9dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b9e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b9e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b9ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b9ec:	f107 0308 	add.w	r3, r7, #8
 800b9f0:	4619      	mov	r1, r3
 800b9f2:	6878      	ldr	r0, [r7, #4]
 800b9f4:	f7ff fe68 	bl	800b6c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f000 f97f 	bl	800bcfc <SDMMC_GetCmdResp2>
 800b9fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba00:	69fb      	ldr	r3, [r7, #28]
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3720      	adds	r7, #32
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}

0800ba0a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ba0a:	b580      	push	{r7, lr}
 800ba0c:	b088      	sub	sp, #32
 800ba0e:	af00      	add	r7, sp, #0
 800ba10:	6078      	str	r0, [r7, #4]
 800ba12:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ba18:	2309      	movs	r3, #9
 800ba1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ba1c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ba20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba22:	2300      	movs	r3, #0
 800ba24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba2c:	f107 0308 	add.w	r3, r7, #8
 800ba30:	4619      	mov	r1, r3
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f7ff fe48 	bl	800b6c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	f000 f95f 	bl	800bcfc <SDMMC_GetCmdResp2>
 800ba3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba40:	69fb      	ldr	r3, [r7, #28]
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	3720      	adds	r7, #32
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}

0800ba4a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800ba4a:	b580      	push	{r7, lr}
 800ba4c:	b088      	sub	sp, #32
 800ba4e:	af00      	add	r7, sp, #0
 800ba50:	6078      	str	r0, [r7, #4]
 800ba52:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ba54:	2300      	movs	r3, #0
 800ba56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ba58:	2303      	movs	r3, #3
 800ba5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ba5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba62:	2300      	movs	r3, #0
 800ba64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ba6c:	f107 0308 	add.w	r3, r7, #8
 800ba70:	4619      	mov	r1, r3
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f7ff fe28 	bl	800b6c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ba78:	683a      	ldr	r2, [r7, #0]
 800ba7a:	2103      	movs	r1, #3
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f000 f9c7 	bl	800be10 <SDMMC_GetCmdResp6>
 800ba82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba84:	69fb      	ldr	r3, [r7, #28]
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3720      	adds	r7, #32
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}

0800ba8e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ba8e:	b580      	push	{r7, lr}
 800ba90:	b088      	sub	sp, #32
 800ba92:	af00      	add	r7, sp, #0
 800ba94:	6078      	str	r0, [r7, #4]
 800ba96:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ba9c:	230d      	movs	r3, #13
 800ba9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800baa0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800baa4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800baa6:	2300      	movs	r3, #0
 800baa8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800baaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800baae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bab0:	f107 0308 	add.w	r3, r7, #8
 800bab4:	4619      	mov	r1, r3
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f7ff fe06 	bl	800b6c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800babc:	f241 3288 	movw	r2, #5000	; 0x1388
 800bac0:	210d      	movs	r1, #13
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f000 f828 	bl	800bb18 <SDMMC_GetCmdResp1>
 800bac8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800baca:	69fb      	ldr	r3, [r7, #28]
}
 800bacc:	4618      	mov	r0, r3
 800bace:	3720      	adds	r7, #32
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}

0800bad4 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b088      	sub	sp, #32
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800badc:	2300      	movs	r3, #0
 800bade:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800bae0:	230d      	movs	r3, #13
 800bae2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bae4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bae8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800baea:	2300      	movs	r3, #0
 800baec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800baee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800baf2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800baf4:	f107 0308 	add.w	r3, r7, #8
 800baf8:	4619      	mov	r1, r3
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	f7ff fde4 	bl	800b6c8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800bb00:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb04:	210d      	movs	r1, #13
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f000 f806 	bl	800bb18 <SDMMC_GetCmdResp1>
 800bb0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb0e:	69fb      	ldr	r3, [r7, #28]
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3720      	adds	r7, #32
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}

0800bb18 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b088      	sub	sp, #32
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	60f8      	str	r0, [r7, #12]
 800bb20:	460b      	mov	r3, r1
 800bb22:	607a      	str	r2, [r7, #4]
 800bb24:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bb26:	4b70      	ldr	r3, [pc, #448]	; (800bce8 <SDMMC_GetCmdResp1+0x1d0>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	4a70      	ldr	r2, [pc, #448]	; (800bcec <SDMMC_GetCmdResp1+0x1d4>)
 800bb2c:	fba2 2303 	umull	r2, r3, r2, r3
 800bb30:	0a5a      	lsrs	r2, r3, #9
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	fb02 f303 	mul.w	r3, r2, r3
 800bb38:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800bb3a:	69fb      	ldr	r3, [r7, #28]
 800bb3c:	1e5a      	subs	r2, r3, #1
 800bb3e:	61fa      	str	r2, [r7, #28]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d102      	bne.n	800bb4a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bb44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bb48:	e0c9      	b.n	800bcde <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb4e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800bb50:	69ba      	ldr	r2, [r7, #24]
 800bb52:	4b67      	ldr	r3, [pc, #412]	; (800bcf0 <SDMMC_GetCmdResp1+0x1d8>)
 800bb54:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d0ef      	beq.n	800bb3a <SDMMC_GetCmdResp1+0x22>
 800bb5a:	69bb      	ldr	r3, [r7, #24]
 800bb5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d1ea      	bne.n	800bb3a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb68:	f003 0304 	and.w	r3, r3, #4
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d004      	beq.n	800bb7a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	2204      	movs	r2, #4
 800bb74:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bb76:	2304      	movs	r3, #4
 800bb78:	e0b1      	b.n	800bcde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb7e:	f003 0301 	and.w	r3, r3, #1
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d004      	beq.n	800bb90 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	2201      	movs	r2, #1
 800bb8a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	e0a6      	b.n	800bcde <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	4a58      	ldr	r2, [pc, #352]	; (800bcf4 <SDMMC_GetCmdResp1+0x1dc>)
 800bb94:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bb96:	68f8      	ldr	r0, [r7, #12]
 800bb98:	f7ff fdc0 	bl	800b71c <SDMMC_GetCommandResponse>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	461a      	mov	r2, r3
 800bba0:	7afb      	ldrb	r3, [r7, #11]
 800bba2:	4293      	cmp	r3, r2
 800bba4:	d001      	beq.n	800bbaa <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bba6:	2301      	movs	r3, #1
 800bba8:	e099      	b.n	800bcde <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bbaa:	2100      	movs	r1, #0
 800bbac:	68f8      	ldr	r0, [r7, #12]
 800bbae:	f7ff fdc2 	bl	800b736 <SDMMC_GetResponse>
 800bbb2:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bbb4:	697a      	ldr	r2, [r7, #20]
 800bbb6:	4b50      	ldr	r3, [pc, #320]	; (800bcf8 <SDMMC_GetCmdResp1+0x1e0>)
 800bbb8:	4013      	ands	r3, r2
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d101      	bne.n	800bbc2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	e08d      	b.n	800bcde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	da02      	bge.n	800bbce <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bbc8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bbcc:	e087      	b.n	800bcde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bbce:	697b      	ldr	r3, [r7, #20]
 800bbd0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d001      	beq.n	800bbdc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bbd8:	2340      	movs	r3, #64	; 0x40
 800bbda:	e080      	b.n	800bcde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bbdc:	697b      	ldr	r3, [r7, #20]
 800bbde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d001      	beq.n	800bbea <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bbe6:	2380      	movs	r3, #128	; 0x80
 800bbe8:	e079      	b.n	800bcde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bbea:	697b      	ldr	r3, [r7, #20]
 800bbec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d002      	beq.n	800bbfa <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bbf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bbf8:	e071      	b.n	800bcde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bbfa:	697b      	ldr	r3, [r7, #20]
 800bbfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d002      	beq.n	800bc0a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bc04:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc08:	e069      	b.n	800bcde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d002      	beq.n	800bc1a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bc14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc18:	e061      	b.n	800bcde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d002      	beq.n	800bc2a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bc24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bc28:	e059      	b.n	800bcde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bc2a:	697b      	ldr	r3, [r7, #20]
 800bc2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d002      	beq.n	800bc3a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bc34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc38:	e051      	b.n	800bcde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bc3a:	697b      	ldr	r3, [r7, #20]
 800bc3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d002      	beq.n	800bc4a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bc44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bc48:	e049      	b.n	800bcde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bc4a:	697b      	ldr	r3, [r7, #20]
 800bc4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d002      	beq.n	800bc5a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bc54:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bc58:	e041      	b.n	800bcde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bc5a:	697b      	ldr	r3, [r7, #20]
 800bc5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d002      	beq.n	800bc6a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800bc64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc68:	e039      	b.n	800bcde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bc6a:	697b      	ldr	r3, [r7, #20]
 800bc6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d002      	beq.n	800bc7a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bc74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bc78:	e031      	b.n	800bcde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bc7a:	697b      	ldr	r3, [r7, #20]
 800bc7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d002      	beq.n	800bc8a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bc84:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bc88:	e029      	b.n	800bcde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d002      	beq.n	800bc9a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bc94:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bc98:	e021      	b.n	800bcde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bc9a:	697b      	ldr	r3, [r7, #20]
 800bc9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d002      	beq.n	800bcaa <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bca4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bca8:	e019      	b.n	800bcde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d002      	beq.n	800bcba <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bcb4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800bcb8:	e011      	b.n	800bcde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bcba:	697b      	ldr	r3, [r7, #20]
 800bcbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d002      	beq.n	800bcca <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800bcc4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bcc8:	e009      	b.n	800bcde <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	f003 0308 	and.w	r3, r3, #8
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d002      	beq.n	800bcda <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800bcd4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800bcd8:	e001      	b.n	800bcde <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bcda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	3720      	adds	r7, #32
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}
 800bce6:	bf00      	nop
 800bce8:	24000000 	.word	0x24000000
 800bcec:	10624dd3 	.word	0x10624dd3
 800bcf0:	00200045 	.word	0x00200045
 800bcf4:	002000c5 	.word	0x002000c5
 800bcf8:	fdffe008 	.word	0xfdffe008

0800bcfc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b085      	sub	sp, #20
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bd04:	4b1f      	ldr	r3, [pc, #124]	; (800bd84 <SDMMC_GetCmdResp2+0x88>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	4a1f      	ldr	r2, [pc, #124]	; (800bd88 <SDMMC_GetCmdResp2+0x8c>)
 800bd0a:	fba2 2303 	umull	r2, r3, r2, r3
 800bd0e:	0a5b      	lsrs	r3, r3, #9
 800bd10:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd14:	fb02 f303 	mul.w	r3, r2, r3
 800bd18:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	1e5a      	subs	r2, r3, #1
 800bd1e:	60fa      	str	r2, [r7, #12]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d102      	bne.n	800bd2a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bd24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bd28:	e026      	b.n	800bd78 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd2e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d0ef      	beq.n	800bd1a <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bd3a:	68bb      	ldr	r3, [r7, #8]
 800bd3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d1ea      	bne.n	800bd1a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd48:	f003 0304 	and.w	r3, r3, #4
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d004      	beq.n	800bd5a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2204      	movs	r2, #4
 800bd54:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bd56:	2304      	movs	r3, #4
 800bd58:	e00e      	b.n	800bd78 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd5e:	f003 0301 	and.w	r3, r3, #1
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d004      	beq.n	800bd70 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2201      	movs	r2, #1
 800bd6a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	e003      	b.n	800bd78 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	4a06      	ldr	r2, [pc, #24]	; (800bd8c <SDMMC_GetCmdResp2+0x90>)
 800bd74:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bd76:	2300      	movs	r3, #0
}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	3714      	adds	r7, #20
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd82:	4770      	bx	lr
 800bd84:	24000000 	.word	0x24000000
 800bd88:	10624dd3 	.word	0x10624dd3
 800bd8c:	002000c5 	.word	0x002000c5

0800bd90 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800bd90:	b480      	push	{r7}
 800bd92:	b085      	sub	sp, #20
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bd98:	4b1a      	ldr	r3, [pc, #104]	; (800be04 <SDMMC_GetCmdResp3+0x74>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	4a1a      	ldr	r2, [pc, #104]	; (800be08 <SDMMC_GetCmdResp3+0x78>)
 800bd9e:	fba2 2303 	umull	r2, r3, r2, r3
 800bda2:	0a5b      	lsrs	r3, r3, #9
 800bda4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bda8:	fb02 f303 	mul.w	r3, r2, r3
 800bdac:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	1e5a      	subs	r2, r3, #1
 800bdb2:	60fa      	str	r2, [r7, #12]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d102      	bne.n	800bdbe <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bdb8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bdbc:	e01b      	b.n	800bdf6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdc2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d0ef      	beq.n	800bdae <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d1ea      	bne.n	800bdae <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bddc:	f003 0304 	and.w	r3, r3, #4
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d004      	beq.n	800bdee <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2204      	movs	r2, #4
 800bde8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bdea:	2304      	movs	r3, #4
 800bdec:	e003      	b.n	800bdf6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	4a06      	ldr	r2, [pc, #24]	; (800be0c <SDMMC_GetCmdResp3+0x7c>)
 800bdf2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bdf4:	2300      	movs	r3, #0
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3714      	adds	r7, #20
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be00:	4770      	bx	lr
 800be02:	bf00      	nop
 800be04:	24000000 	.word	0x24000000
 800be08:	10624dd3 	.word	0x10624dd3
 800be0c:	002000c5 	.word	0x002000c5

0800be10 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b088      	sub	sp, #32
 800be14:	af00      	add	r7, sp, #0
 800be16:	60f8      	str	r0, [r7, #12]
 800be18:	460b      	mov	r3, r1
 800be1a:	607a      	str	r2, [r7, #4]
 800be1c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800be1e:	4b35      	ldr	r3, [pc, #212]	; (800bef4 <SDMMC_GetCmdResp6+0xe4>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	4a35      	ldr	r2, [pc, #212]	; (800bef8 <SDMMC_GetCmdResp6+0xe8>)
 800be24:	fba2 2303 	umull	r2, r3, r2, r3
 800be28:	0a5b      	lsrs	r3, r3, #9
 800be2a:	f241 3288 	movw	r2, #5000	; 0x1388
 800be2e:	fb02 f303 	mul.w	r3, r2, r3
 800be32:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800be34:	69fb      	ldr	r3, [r7, #28]
 800be36:	1e5a      	subs	r2, r3, #1
 800be38:	61fa      	str	r2, [r7, #28]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d102      	bne.n	800be44 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800be3e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800be42:	e052      	b.n	800beea <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be48:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800be4a:	69bb      	ldr	r3, [r7, #24]
 800be4c:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800be50:	2b00      	cmp	r3, #0
 800be52:	d0ef      	beq.n	800be34 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800be54:	69bb      	ldr	r3, [r7, #24]
 800be56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d1ea      	bne.n	800be34 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be62:	f003 0304 	and.w	r3, r3, #4
 800be66:	2b00      	cmp	r3, #0
 800be68:	d004      	beq.n	800be74 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	2204      	movs	r2, #4
 800be6e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800be70:	2304      	movs	r3, #4
 800be72:	e03a      	b.n	800beea <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be78:	f003 0301 	and.w	r3, r3, #1
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d004      	beq.n	800be8a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	2201      	movs	r2, #1
 800be84:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800be86:	2301      	movs	r3, #1
 800be88:	e02f      	b.n	800beea <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800be8a:	68f8      	ldr	r0, [r7, #12]
 800be8c:	f7ff fc46 	bl	800b71c <SDMMC_GetCommandResponse>
 800be90:	4603      	mov	r3, r0
 800be92:	461a      	mov	r2, r3
 800be94:	7afb      	ldrb	r3, [r7, #11]
 800be96:	4293      	cmp	r3, r2
 800be98:	d001      	beq.n	800be9e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800be9a:	2301      	movs	r3, #1
 800be9c:	e025      	b.n	800beea <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	4a16      	ldr	r2, [pc, #88]	; (800befc <SDMMC_GetCmdResp6+0xec>)
 800bea2:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bea4:	2100      	movs	r1, #0
 800bea6:	68f8      	ldr	r0, [r7, #12]
 800bea8:	f7ff fc45 	bl	800b736 <SDMMC_GetResponse>
 800beac:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d106      	bne.n	800bec6 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800beb8:	697b      	ldr	r3, [r7, #20]
 800beba:	0c1b      	lsrs	r3, r3, #16
 800bebc:	b29a      	uxth	r2, r3
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800bec2:	2300      	movs	r3, #0
 800bec4:	e011      	b.n	800beea <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800becc:	2b00      	cmp	r3, #0
 800bece:	d002      	beq.n	800bed6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bed0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bed4:	e009      	b.n	800beea <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bed6:	697b      	ldr	r3, [r7, #20]
 800bed8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d002      	beq.n	800bee6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bee0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bee4:	e001      	b.n	800beea <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bee6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800beea:	4618      	mov	r0, r3
 800beec:	3720      	adds	r7, #32
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}
 800bef2:	bf00      	nop
 800bef4:	24000000 	.word	0x24000000
 800bef8:	10624dd3 	.word	0x10624dd3
 800befc:	002000c5 	.word	0x002000c5

0800bf00 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800bf00:	b480      	push	{r7}
 800bf02:	b085      	sub	sp, #20
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bf08:	4b22      	ldr	r3, [pc, #136]	; (800bf94 <SDMMC_GetCmdResp7+0x94>)
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	4a22      	ldr	r2, [pc, #136]	; (800bf98 <SDMMC_GetCmdResp7+0x98>)
 800bf0e:	fba2 2303 	umull	r2, r3, r2, r3
 800bf12:	0a5b      	lsrs	r3, r3, #9
 800bf14:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf18:	fb02 f303 	mul.w	r3, r2, r3
 800bf1c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	1e5a      	subs	r2, r3, #1
 800bf22:	60fa      	str	r2, [r7, #12]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d102      	bne.n	800bf2e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bf28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bf2c:	e02c      	b.n	800bf88 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf32:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d0ef      	beq.n	800bf1e <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d1ea      	bne.n	800bf1e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf4c:	f003 0304 	and.w	r3, r3, #4
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d004      	beq.n	800bf5e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2204      	movs	r2, #4
 800bf58:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bf5a:	2304      	movs	r3, #4
 800bf5c:	e014      	b.n	800bf88 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf62:	f003 0301 	and.w	r3, r3, #1
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d004      	beq.n	800bf74 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2201      	movs	r2, #1
 800bf6e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bf70:	2301      	movs	r3, #1
 800bf72:	e009      	b.n	800bf88 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d002      	beq.n	800bf86 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2240      	movs	r2, #64	; 0x40
 800bf84:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bf86:	2300      	movs	r3, #0

}
 800bf88:	4618      	mov	r0, r3
 800bf8a:	3714      	adds	r7, #20
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf92:	4770      	bx	lr
 800bf94:	24000000 	.word	0x24000000
 800bf98:	10624dd3 	.word	0x10624dd3

0800bf9c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	b085      	sub	sp, #20
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bfa4:	4b11      	ldr	r3, [pc, #68]	; (800bfec <SDMMC_GetCmdError+0x50>)
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	4a11      	ldr	r2, [pc, #68]	; (800bff0 <SDMMC_GetCmdError+0x54>)
 800bfaa:	fba2 2303 	umull	r2, r3, r2, r3
 800bfae:	0a5b      	lsrs	r3, r3, #9
 800bfb0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfb4:	fb02 f303 	mul.w	r3, r2, r3
 800bfb8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	1e5a      	subs	r2, r3, #1
 800bfbe:	60fa      	str	r2, [r7, #12]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d102      	bne.n	800bfca <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bfc4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bfc8:	e009      	b.n	800bfde <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d0f1      	beq.n	800bfba <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	4a06      	ldr	r2, [pc, #24]	; (800bff4 <SDMMC_GetCmdError+0x58>)
 800bfda:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800bfdc:	2300      	movs	r3, #0
}
 800bfde:	4618      	mov	r0, r3
 800bfe0:	3714      	adds	r7, #20
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe8:	4770      	bx	lr
 800bfea:	bf00      	nop
 800bfec:	24000000 	.word	0x24000000
 800bff0:	10624dd3 	.word	0x10624dd3
 800bff4:	002000c5 	.word	0x002000c5

0800bff8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bff8:	b084      	sub	sp, #16
 800bffa:	b580      	push	{r7, lr}
 800bffc:	b084      	sub	sp, #16
 800bffe:	af00      	add	r7, sp, #0
 800c000:	6078      	str	r0, [r7, #4]
 800c002:	f107 001c 	add.w	r0, r7, #28
 800c006:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c00c:	2b01      	cmp	r3, #1
 800c00e:	d120      	bne.n	800c052 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c014:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	68da      	ldr	r2, [r3, #12]
 800c020:	4b2a      	ldr	r3, [pc, #168]	; (800c0cc <USB_CoreInit+0xd4>)
 800c022:	4013      	ands	r3, r2
 800c024:	687a      	ldr	r2, [r7, #4]
 800c026:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	68db      	ldr	r3, [r3, #12]
 800c02c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c036:	2b01      	cmp	r3, #1
 800c038:	d105      	bne.n	800c046 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	68db      	ldr	r3, [r3, #12]
 800c03e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	f000 faac 	bl	800c5a4 <USB_CoreReset>
 800c04c:	4603      	mov	r3, r0
 800c04e:	73fb      	strb	r3, [r7, #15]
 800c050:	e01a      	b.n	800c088 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	68db      	ldr	r3, [r3, #12]
 800c056:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f000 faa0 	bl	800c5a4 <USB_CoreReset>
 800c064:	4603      	mov	r3, r0
 800c066:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d106      	bne.n	800c07c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c072:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	639a      	str	r2, [r3, #56]	; 0x38
 800c07a:	e005      	b.n	800c088 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c080:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c08a:	2b01      	cmp	r3, #1
 800c08c:	d116      	bne.n	800c0bc <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c092:	b29a      	uxth	r2, r3
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c09c:	4b0c      	ldr	r3, [pc, #48]	; (800c0d0 <USB_CoreInit+0xd8>)
 800c09e:	4313      	orrs	r3, r2
 800c0a0:	687a      	ldr	r2, [r7, #4]
 800c0a2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	689b      	ldr	r3, [r3, #8]
 800c0a8:	f043 0206 	orr.w	r2, r3, #6
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	689b      	ldr	r3, [r3, #8]
 800c0b4:	f043 0220 	orr.w	r2, r3, #32
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c0bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	3710      	adds	r7, #16
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c0c8:	b004      	add	sp, #16
 800c0ca:	4770      	bx	lr
 800c0cc:	ffbdffbf 	.word	0xffbdffbf
 800c0d0:	03ee0000 	.word	0x03ee0000

0800c0d4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c0d4:	b480      	push	{r7}
 800c0d6:	b083      	sub	sp, #12
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	689b      	ldr	r3, [r3, #8]
 800c0e0:	f023 0201 	bic.w	r2, r3, #1
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c0e8:	2300      	movs	r3, #0
}
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	370c      	adds	r7, #12
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f4:	4770      	bx	lr

0800c0f6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c0f6:	b580      	push	{r7, lr}
 800c0f8:	b084      	sub	sp, #16
 800c0fa:	af00      	add	r7, sp, #0
 800c0fc:	6078      	str	r0, [r7, #4]
 800c0fe:	460b      	mov	r3, r1
 800c100:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c102:	2300      	movs	r3, #0
 800c104:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	68db      	ldr	r3, [r3, #12]
 800c10a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c112:	78fb      	ldrb	r3, [r7, #3]
 800c114:	2b01      	cmp	r3, #1
 800c116:	d115      	bne.n	800c144 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	68db      	ldr	r3, [r3, #12]
 800c11c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c124:	2001      	movs	r0, #1
 800c126:	f7f6 f9a9 	bl	800247c <HAL_Delay>
      ms++;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	3301      	adds	r3, #1
 800c12e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f000 fa29 	bl	800c588 <USB_GetMode>
 800c136:	4603      	mov	r3, r0
 800c138:	2b01      	cmp	r3, #1
 800c13a:	d01e      	beq.n	800c17a <USB_SetCurrentMode+0x84>
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	2b31      	cmp	r3, #49	; 0x31
 800c140:	d9f0      	bls.n	800c124 <USB_SetCurrentMode+0x2e>
 800c142:	e01a      	b.n	800c17a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c144:	78fb      	ldrb	r3, [r7, #3]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d115      	bne.n	800c176 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	68db      	ldr	r3, [r3, #12]
 800c14e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c156:	2001      	movs	r0, #1
 800c158:	f7f6 f990 	bl	800247c <HAL_Delay>
      ms++;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	3301      	adds	r3, #1
 800c160:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	f000 fa10 	bl	800c588 <USB_GetMode>
 800c168:	4603      	mov	r3, r0
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d005      	beq.n	800c17a <USB_SetCurrentMode+0x84>
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	2b31      	cmp	r3, #49	; 0x31
 800c172:	d9f0      	bls.n	800c156 <USB_SetCurrentMode+0x60>
 800c174:	e001      	b.n	800c17a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c176:	2301      	movs	r3, #1
 800c178:	e005      	b.n	800c186 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	2b32      	cmp	r3, #50	; 0x32
 800c17e:	d101      	bne.n	800c184 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c180:	2301      	movs	r3, #1
 800c182:	e000      	b.n	800c186 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c184:	2300      	movs	r3, #0
}
 800c186:	4618      	mov	r0, r3
 800c188:	3710      	adds	r7, #16
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}
	...

0800c190 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c190:	b084      	sub	sp, #16
 800c192:	b580      	push	{r7, lr}
 800c194:	b086      	sub	sp, #24
 800c196:	af00      	add	r7, sp, #0
 800c198:	6078      	str	r0, [r7, #4]
 800c19a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c19e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	613b      	str	r3, [r7, #16]
 800c1ae:	e009      	b.n	800c1c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c1b0:	687a      	ldr	r2, [r7, #4]
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	3340      	adds	r3, #64	; 0x40
 800c1b6:	009b      	lsls	r3, r3, #2
 800c1b8:	4413      	add	r3, r2
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c1be:	693b      	ldr	r3, [r7, #16]
 800c1c0:	3301      	adds	r3, #1
 800c1c2:	613b      	str	r3, [r7, #16]
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	2b0e      	cmp	r3, #14
 800c1c8:	d9f2      	bls.n	800c1b0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c1ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d11c      	bne.n	800c20a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1d6:	685b      	ldr	r3, [r3, #4]
 800c1d8:	68fa      	ldr	r2, [r7, #12]
 800c1da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c1de:	f043 0302 	orr.w	r3, r3, #2
 800c1e2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1e8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	601a      	str	r2, [r3, #0]
 800c208:	e005      	b.n	800c216 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c20e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c21c:	461a      	mov	r2, r3
 800c21e:	2300      	movs	r3, #0
 800c220:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c228:	4619      	mov	r1, r3
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c230:	461a      	mov	r2, r3
 800c232:	680b      	ldr	r3, [r1, #0]
 800c234:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c238:	2b01      	cmp	r3, #1
 800c23a:	d10c      	bne.n	800c256 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d104      	bne.n	800c24c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c242:	2100      	movs	r1, #0
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f000 f965 	bl	800c514 <USB_SetDevSpeed>
 800c24a:	e008      	b.n	800c25e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c24c:	2101      	movs	r1, #1
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f000 f960 	bl	800c514 <USB_SetDevSpeed>
 800c254:	e003      	b.n	800c25e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c256:	2103      	movs	r1, #3
 800c258:	6878      	ldr	r0, [r7, #4]
 800c25a:	f000 f95b 	bl	800c514 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c25e:	2110      	movs	r1, #16
 800c260:	6878      	ldr	r0, [r7, #4]
 800c262:	f000 f8f3 	bl	800c44c <USB_FlushTxFifo>
 800c266:	4603      	mov	r3, r0
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d001      	beq.n	800c270 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c26c:	2301      	movs	r3, #1
 800c26e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c270:	6878      	ldr	r0, [r7, #4]
 800c272:	f000 f91f 	bl	800c4b4 <USB_FlushRxFifo>
 800c276:	4603      	mov	r3, r0
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d001      	beq.n	800c280 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c27c:	2301      	movs	r3, #1
 800c27e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c286:	461a      	mov	r2, r3
 800c288:	2300      	movs	r3, #0
 800c28a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c292:	461a      	mov	r2, r3
 800c294:	2300      	movs	r3, #0
 800c296:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c29e:	461a      	mov	r2, r3
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	613b      	str	r3, [r7, #16]
 800c2a8:	e043      	b.n	800c332 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c2aa:	693b      	ldr	r3, [r7, #16]
 800c2ac:	015a      	lsls	r2, r3, #5
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	4413      	add	r3, r2
 800c2b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c2bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c2c0:	d118      	bne.n	800c2f4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c2c2:	693b      	ldr	r3, [r7, #16]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d10a      	bne.n	800c2de <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c2c8:	693b      	ldr	r3, [r7, #16]
 800c2ca:	015a      	lsls	r2, r3, #5
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	4413      	add	r3, r2
 800c2d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2d4:	461a      	mov	r2, r3
 800c2d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c2da:	6013      	str	r3, [r2, #0]
 800c2dc:	e013      	b.n	800c306 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c2de:	693b      	ldr	r3, [r7, #16]
 800c2e0:	015a      	lsls	r2, r3, #5
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	4413      	add	r3, r2
 800c2e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2ea:	461a      	mov	r2, r3
 800c2ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c2f0:	6013      	str	r3, [r2, #0]
 800c2f2:	e008      	b.n	800c306 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c2f4:	693b      	ldr	r3, [r7, #16]
 800c2f6:	015a      	lsls	r2, r3, #5
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	4413      	add	r3, r2
 800c2fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c300:	461a      	mov	r2, r3
 800c302:	2300      	movs	r3, #0
 800c304:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c306:	693b      	ldr	r3, [r7, #16]
 800c308:	015a      	lsls	r2, r3, #5
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	4413      	add	r3, r2
 800c30e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c312:	461a      	mov	r2, r3
 800c314:	2300      	movs	r3, #0
 800c316:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c318:	693b      	ldr	r3, [r7, #16]
 800c31a:	015a      	lsls	r2, r3, #5
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	4413      	add	r3, r2
 800c320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c324:	461a      	mov	r2, r3
 800c326:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c32a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c32c:	693b      	ldr	r3, [r7, #16]
 800c32e:	3301      	adds	r3, #1
 800c330:	613b      	str	r3, [r7, #16]
 800c332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c334:	693a      	ldr	r2, [r7, #16]
 800c336:	429a      	cmp	r2, r3
 800c338:	d3b7      	bcc.n	800c2aa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c33a:	2300      	movs	r3, #0
 800c33c:	613b      	str	r3, [r7, #16]
 800c33e:	e043      	b.n	800c3c8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c340:	693b      	ldr	r3, [r7, #16]
 800c342:	015a      	lsls	r2, r3, #5
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	4413      	add	r3, r2
 800c348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c352:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c356:	d118      	bne.n	800c38a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800c358:	693b      	ldr	r3, [r7, #16]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d10a      	bne.n	800c374 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	015a      	lsls	r2, r3, #5
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	4413      	add	r3, r2
 800c366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c36a:	461a      	mov	r2, r3
 800c36c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c370:	6013      	str	r3, [r2, #0]
 800c372:	e013      	b.n	800c39c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c374:	693b      	ldr	r3, [r7, #16]
 800c376:	015a      	lsls	r2, r3, #5
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	4413      	add	r3, r2
 800c37c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c380:	461a      	mov	r2, r3
 800c382:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c386:	6013      	str	r3, [r2, #0]
 800c388:	e008      	b.n	800c39c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c38a:	693b      	ldr	r3, [r7, #16]
 800c38c:	015a      	lsls	r2, r3, #5
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	4413      	add	r3, r2
 800c392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c396:	461a      	mov	r2, r3
 800c398:	2300      	movs	r3, #0
 800c39a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c39c:	693b      	ldr	r3, [r7, #16]
 800c39e:	015a      	lsls	r2, r3, #5
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	4413      	add	r3, r2
 800c3a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3a8:	461a      	mov	r2, r3
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c3ae:	693b      	ldr	r3, [r7, #16]
 800c3b0:	015a      	lsls	r2, r3, #5
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	4413      	add	r3, r2
 800c3b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3ba:	461a      	mov	r2, r3
 800c3bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c3c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c3c2:	693b      	ldr	r3, [r7, #16]
 800c3c4:	3301      	adds	r3, #1
 800c3c6:	613b      	str	r3, [r7, #16]
 800c3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ca:	693a      	ldr	r2, [r7, #16]
 800c3cc:	429a      	cmp	r2, r3
 800c3ce:	d3b7      	bcc.n	800c340 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3d6:	691b      	ldr	r3, [r3, #16]
 800c3d8:	68fa      	ldr	r2, [r7, #12]
 800c3da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c3de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c3e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c3f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d105      	bne.n	800c404 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	699b      	ldr	r3, [r3, #24]
 800c3fc:	f043 0210 	orr.w	r2, r3, #16
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	699a      	ldr	r2, [r3, #24]
 800c408:	4b0e      	ldr	r3, [pc, #56]	; (800c444 <USB_DevInit+0x2b4>)
 800c40a:	4313      	orrs	r3, r2
 800c40c:	687a      	ldr	r2, [r7, #4]
 800c40e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c412:	2b00      	cmp	r3, #0
 800c414:	d005      	beq.n	800c422 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	699b      	ldr	r3, [r3, #24]
 800c41a:	f043 0208 	orr.w	r2, r3, #8
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c424:	2b01      	cmp	r3, #1
 800c426:	d105      	bne.n	800c434 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	699a      	ldr	r2, [r3, #24]
 800c42c:	4b06      	ldr	r3, [pc, #24]	; (800c448 <USB_DevInit+0x2b8>)
 800c42e:	4313      	orrs	r3, r2
 800c430:	687a      	ldr	r2, [r7, #4]
 800c432:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c434:	7dfb      	ldrb	r3, [r7, #23]
}
 800c436:	4618      	mov	r0, r3
 800c438:	3718      	adds	r7, #24
 800c43a:	46bd      	mov	sp, r7
 800c43c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c440:	b004      	add	sp, #16
 800c442:	4770      	bx	lr
 800c444:	803c3800 	.word	0x803c3800
 800c448:	40000004 	.word	0x40000004

0800c44c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c44c:	b480      	push	{r7}
 800c44e:	b085      	sub	sp, #20
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
 800c454:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c456:	2300      	movs	r3, #0
 800c458:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	3301      	adds	r3, #1
 800c45e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	4a13      	ldr	r2, [pc, #76]	; (800c4b0 <USB_FlushTxFifo+0x64>)
 800c464:	4293      	cmp	r3, r2
 800c466:	d901      	bls.n	800c46c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c468:	2303      	movs	r3, #3
 800c46a:	e01b      	b.n	800c4a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	691b      	ldr	r3, [r3, #16]
 800c470:	2b00      	cmp	r3, #0
 800c472:	daf2      	bge.n	800c45a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c474:	2300      	movs	r3, #0
 800c476:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	019b      	lsls	r3, r3, #6
 800c47c:	f043 0220 	orr.w	r2, r3, #32
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	3301      	adds	r3, #1
 800c488:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	4a08      	ldr	r2, [pc, #32]	; (800c4b0 <USB_FlushTxFifo+0x64>)
 800c48e:	4293      	cmp	r3, r2
 800c490:	d901      	bls.n	800c496 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c492:	2303      	movs	r3, #3
 800c494:	e006      	b.n	800c4a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	691b      	ldr	r3, [r3, #16]
 800c49a:	f003 0320 	and.w	r3, r3, #32
 800c49e:	2b20      	cmp	r3, #32
 800c4a0:	d0f0      	beq.n	800c484 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c4a2:	2300      	movs	r3, #0
}
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	3714      	adds	r7, #20
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ae:	4770      	bx	lr
 800c4b0:	00030d40 	.word	0x00030d40

0800c4b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	b085      	sub	sp, #20
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c4bc:	2300      	movs	r3, #0
 800c4be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	3301      	adds	r3, #1
 800c4c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	4a11      	ldr	r2, [pc, #68]	; (800c510 <USB_FlushRxFifo+0x5c>)
 800c4ca:	4293      	cmp	r3, r2
 800c4cc:	d901      	bls.n	800c4d2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c4ce:	2303      	movs	r3, #3
 800c4d0:	e018      	b.n	800c504 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	691b      	ldr	r3, [r3, #16]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	daf2      	bge.n	800c4c0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c4da:	2300      	movs	r3, #0
 800c4dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	2210      	movs	r2, #16
 800c4e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	3301      	adds	r3, #1
 800c4e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	4a08      	ldr	r2, [pc, #32]	; (800c510 <USB_FlushRxFifo+0x5c>)
 800c4ee:	4293      	cmp	r3, r2
 800c4f0:	d901      	bls.n	800c4f6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c4f2:	2303      	movs	r3, #3
 800c4f4:	e006      	b.n	800c504 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	691b      	ldr	r3, [r3, #16]
 800c4fa:	f003 0310 	and.w	r3, r3, #16
 800c4fe:	2b10      	cmp	r3, #16
 800c500:	d0f0      	beq.n	800c4e4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c502:	2300      	movs	r3, #0
}
 800c504:	4618      	mov	r0, r3
 800c506:	3714      	adds	r7, #20
 800c508:	46bd      	mov	sp, r7
 800c50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50e:	4770      	bx	lr
 800c510:	00030d40 	.word	0x00030d40

0800c514 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c514:	b480      	push	{r7}
 800c516:	b085      	sub	sp, #20
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
 800c51c:	460b      	mov	r3, r1
 800c51e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c52a:	681a      	ldr	r2, [r3, #0]
 800c52c:	78fb      	ldrb	r3, [r7, #3]
 800c52e:	68f9      	ldr	r1, [r7, #12]
 800c530:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c534:	4313      	orrs	r3, r2
 800c536:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c538:	2300      	movs	r3, #0
}
 800c53a:	4618      	mov	r0, r3
 800c53c:	3714      	adds	r7, #20
 800c53e:	46bd      	mov	sp, r7
 800c540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c544:	4770      	bx	lr

0800c546 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c546:	b480      	push	{r7}
 800c548:	b085      	sub	sp, #20
 800c54a:	af00      	add	r7, sp, #0
 800c54c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	68fa      	ldr	r2, [r7, #12]
 800c55c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c560:	f023 0303 	bic.w	r3, r3, #3
 800c564:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c56c:	685b      	ldr	r3, [r3, #4]
 800c56e:	68fa      	ldr	r2, [r7, #12]
 800c570:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c574:	f043 0302 	orr.w	r3, r3, #2
 800c578:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c57a:	2300      	movs	r3, #0
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	3714      	adds	r7, #20
 800c580:	46bd      	mov	sp, r7
 800c582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c586:	4770      	bx	lr

0800c588 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c588:	b480      	push	{r7}
 800c58a:	b083      	sub	sp, #12
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	695b      	ldr	r3, [r3, #20]
 800c594:	f003 0301 	and.w	r3, r3, #1
}
 800c598:	4618      	mov	r0, r3
 800c59a:	370c      	adds	r7, #12
 800c59c:	46bd      	mov	sp, r7
 800c59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a2:	4770      	bx	lr

0800c5a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c5a4:	b480      	push	{r7}
 800c5a6:	b085      	sub	sp, #20
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	3301      	adds	r3, #1
 800c5b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	4a13      	ldr	r2, [pc, #76]	; (800c608 <USB_CoreReset+0x64>)
 800c5ba:	4293      	cmp	r3, r2
 800c5bc:	d901      	bls.n	800c5c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c5be:	2303      	movs	r3, #3
 800c5c0:	e01b      	b.n	800c5fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	691b      	ldr	r3, [r3, #16]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	daf2      	bge.n	800c5b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	691b      	ldr	r3, [r3, #16]
 800c5d2:	f043 0201 	orr.w	r2, r3, #1
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	3301      	adds	r3, #1
 800c5de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	4a09      	ldr	r2, [pc, #36]	; (800c608 <USB_CoreReset+0x64>)
 800c5e4:	4293      	cmp	r3, r2
 800c5e6:	d901      	bls.n	800c5ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c5e8:	2303      	movs	r3, #3
 800c5ea:	e006      	b.n	800c5fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	691b      	ldr	r3, [r3, #16]
 800c5f0:	f003 0301 	and.w	r3, r3, #1
 800c5f4:	2b01      	cmp	r3, #1
 800c5f6:	d0f0      	beq.n	800c5da <USB_CoreReset+0x36>

  return HAL_OK;
 800c5f8:	2300      	movs	r3, #0
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	3714      	adds	r7, #20
 800c5fe:	46bd      	mov	sp, r7
 800c600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c604:	4770      	bx	lr
 800c606:	bf00      	nop
 800c608:	00030d40 	.word	0x00030d40

0800c60c <memset>:
 800c60c:	4402      	add	r2, r0
 800c60e:	4603      	mov	r3, r0
 800c610:	4293      	cmp	r3, r2
 800c612:	d100      	bne.n	800c616 <memset+0xa>
 800c614:	4770      	bx	lr
 800c616:	f803 1b01 	strb.w	r1, [r3], #1
 800c61a:	e7f9      	b.n	800c610 <memset+0x4>

0800c61c <__libc_init_array>:
 800c61c:	b570      	push	{r4, r5, r6, lr}
 800c61e:	4d0d      	ldr	r5, [pc, #52]	; (800c654 <__libc_init_array+0x38>)
 800c620:	4c0d      	ldr	r4, [pc, #52]	; (800c658 <__libc_init_array+0x3c>)
 800c622:	1b64      	subs	r4, r4, r5
 800c624:	10a4      	asrs	r4, r4, #2
 800c626:	2600      	movs	r6, #0
 800c628:	42a6      	cmp	r6, r4
 800c62a:	d109      	bne.n	800c640 <__libc_init_array+0x24>
 800c62c:	4d0b      	ldr	r5, [pc, #44]	; (800c65c <__libc_init_array+0x40>)
 800c62e:	4c0c      	ldr	r4, [pc, #48]	; (800c660 <__libc_init_array+0x44>)
 800c630:	f000 f818 	bl	800c664 <_init>
 800c634:	1b64      	subs	r4, r4, r5
 800c636:	10a4      	asrs	r4, r4, #2
 800c638:	2600      	movs	r6, #0
 800c63a:	42a6      	cmp	r6, r4
 800c63c:	d105      	bne.n	800c64a <__libc_init_array+0x2e>
 800c63e:	bd70      	pop	{r4, r5, r6, pc}
 800c640:	f855 3b04 	ldr.w	r3, [r5], #4
 800c644:	4798      	blx	r3
 800c646:	3601      	adds	r6, #1
 800c648:	e7ee      	b.n	800c628 <__libc_init_array+0xc>
 800c64a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c64e:	4798      	blx	r3
 800c650:	3601      	adds	r6, #1
 800c652:	e7f2      	b.n	800c63a <__libc_init_array+0x1e>
 800c654:	0800c6bc 	.word	0x0800c6bc
 800c658:	0800c6bc 	.word	0x0800c6bc
 800c65c:	0800c6bc 	.word	0x0800c6bc
 800c660:	0800c6c0 	.word	0x0800c6c0

0800c664 <_init>:
 800c664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c666:	bf00      	nop
 800c668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c66a:	bc08      	pop	{r3}
 800c66c:	469e      	mov	lr, r3
 800c66e:	4770      	bx	lr

0800c670 <_fini>:
 800c670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c672:	bf00      	nop
 800c674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c676:	bc08      	pop	{r3}
 800c678:	469e      	mov	lr, r3
 800c67a:	4770      	bx	lr
