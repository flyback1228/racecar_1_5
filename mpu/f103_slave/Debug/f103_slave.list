
f103_slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044c0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015b4  080045cc  080045cc  000145cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b80  08005b80  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005b80  08005b80  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b80  08005b80  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b80  08005b80  00015b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b84  08005b84  00015b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005b88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006fc  20000074  08005bfc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000770  08005bfc  00020770  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ea76  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000220a  00000000  00000000  0002eb56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ef8  00000000  00000000  00030d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bb9  00000000  00000000  00031c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001861c  00000000  00000000  00032811  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001069f  00000000  00000000  0004ae2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ce7b  00000000  00000000  0005b4cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004418  00000000  00000000  000e8348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000ec760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	080045b4 	.word	0x080045b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	080045b4 	.word	0x080045b4

0800014c <DWT_Init>:
#define INC_UTILITY_H_

#include "main.h"

static inline void DWT_Init(void)
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; //
 8000150:	4b07      	ldr	r3, [pc, #28]	; (8000170 <DWT_Init+0x24>)
 8000152:	68db      	ldr	r3, [r3, #12]
 8000154:	4a06      	ldr	r2, [pc, #24]	; (8000170 <DWT_Init+0x24>)
 8000156:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800015a:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   //
 800015c:	4b05      	ldr	r3, [pc, #20]	; (8000174 <DWT_Init+0x28>)
 800015e:	681b      	ldr	r3, [r3, #0]
 8000160:	4a04      	ldr	r2, [pc, #16]	; (8000174 <DWT_Init+0x28>)
 8000162:	f043 0301 	orr.w	r3, r3, #1
 8000166:	6013      	str	r3, [r2, #0]
}
 8000168:	bf00      	nop
 800016a:	46bd      	mov	sp, r7
 800016c:	bc80      	pop	{r7}
 800016e:	4770      	bx	lr
 8000170:	e000edf0 	.word	0xe000edf0
 8000174:	e0001000 	.word	0xe0001000

08000178 <micros>:
	uint32_t us_count_tic =  us * (SystemCoreClock / 1000000U);
	DWT->CYCCNT = 0U;
	while(DWT->CYCCNT < us_count_tic);
}

static inline uint32_t micros(void){
 8000178:	b480      	push	{r7}
 800017a:	af00      	add	r7, sp, #0
	return  DWT->CYCCNT / (SystemCoreClock / 1000000U);
 800017c:	4b06      	ldr	r3, [pc, #24]	; (8000198 <micros+0x20>)
 800017e:	685a      	ldr	r2, [r3, #4]
 8000180:	4b06      	ldr	r3, [pc, #24]	; (800019c <micros+0x24>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4906      	ldr	r1, [pc, #24]	; (80001a0 <micros+0x28>)
 8000186:	fba1 1303 	umull	r1, r3, r1, r3
 800018a:	0c9b      	lsrs	r3, r3, #18
 800018c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000190:	4618      	mov	r0, r3
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr
 8000198:	e0001000 	.word	0xe0001000
 800019c:	20000018 	.word	0x20000018
 80001a0:	431bde83 	.word	0x431bde83

080001a4 <millis>:

static inline uint32_t millis(void){
 80001a4:	b480      	push	{r7}
 80001a6:	af00      	add	r7, sp, #0
	return  DWT->CYCCNT / (SystemCoreClock / 1000U);
 80001a8:	4b06      	ldr	r3, [pc, #24]	; (80001c4 <millis+0x20>)
 80001aa:	685a      	ldr	r2, [r3, #4]
 80001ac:	4b06      	ldr	r3, [pc, #24]	; (80001c8 <millis+0x24>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	4906      	ldr	r1, [pc, #24]	; (80001cc <millis+0x28>)
 80001b2:	fba1 1303 	umull	r1, r3, r1, r3
 80001b6:	099b      	lsrs	r3, r3, #6
 80001b8:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80001bc:	4618      	mov	r0, r3
 80001be:	46bd      	mov	sp, r7
 80001c0:	bc80      	pop	{r7}
 80001c2:	4770      	bx	lr
 80001c4:	e0001000 	.word	0xe0001000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	10624dd3 	.word	0x10624dd3

080001d0 <HAL_GPIO_EXTI_Callback>:
//}
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80001d0:	b5b0      	push	{r4, r5, r7, lr}
 80001d2:	b084      	sub	sp, #16
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	4603      	mov	r3, r0
 80001d8:	80fb      	strh	r3, [r7, #6]

	uint8_t index;
	switch(GPIO_Pin){
 80001da:	88fb      	ldrh	r3, [r7, #6]
 80001dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80001e0:	f000 80b8 	beq.w	8000354 <HAL_GPIO_EXTI_Callback+0x184>
 80001e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80001e8:	f300 80b7 	bgt.w	800035a <HAL_GPIO_EXTI_Callback+0x18a>
 80001ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80001f0:	f000 80ad 	beq.w	800034e <HAL_GPIO_EXTI_Callback+0x17e>
 80001f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80001f8:	f300 80af 	bgt.w	800035a <HAL_GPIO_EXTI_Callback+0x18a>
 80001fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000200:	f000 80a2 	beq.w	8000348 <HAL_GPIO_EXTI_Callback+0x178>
 8000204:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000208:	f300 80a7 	bgt.w	800035a <HAL_GPIO_EXTI_Callback+0x18a>
 800020c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000210:	f000 8097 	beq.w	8000342 <HAL_GPIO_EXTI_Callback+0x172>
 8000214:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000218:	f300 809f 	bgt.w	800035a <HAL_GPIO_EXTI_Callback+0x18a>
 800021c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000220:	f000 808c 	beq.w	800033c <HAL_GPIO_EXTI_Callback+0x16c>
 8000224:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000228:	f300 8097 	bgt.w	800035a <HAL_GPIO_EXTI_Callback+0x18a>
 800022c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000230:	f000 8081 	beq.w	8000336 <HAL_GPIO_EXTI_Callback+0x166>
 8000234:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000238:	f300 808f 	bgt.w	800035a <HAL_GPIO_EXTI_Callback+0x18a>
 800023c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000240:	d076      	beq.n	8000330 <HAL_GPIO_EXTI_Callback+0x160>
 8000242:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000246:	f300 8088 	bgt.w	800035a <HAL_GPIO_EXTI_Callback+0x18a>
 800024a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800024e:	d06c      	beq.n	800032a <HAL_GPIO_EXTI_Callback+0x15a>
 8000250:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000254:	f300 8081 	bgt.w	800035a <HAL_GPIO_EXTI_Callback+0x18a>
 8000258:	2b80      	cmp	r3, #128	; 0x80
 800025a:	d063      	beq.n	8000324 <HAL_GPIO_EXTI_Callback+0x154>
 800025c:	2b80      	cmp	r3, #128	; 0x80
 800025e:	dc7c      	bgt.n	800035a <HAL_GPIO_EXTI_Callback+0x18a>
 8000260:	2b20      	cmp	r3, #32
 8000262:	dc47      	bgt.n	80002f4 <HAL_GPIO_EXTI_Callback+0x124>
 8000264:	2b00      	cmp	r3, #0
 8000266:	dd78      	ble.n	800035a <HAL_GPIO_EXTI_Callback+0x18a>
 8000268:	3b01      	subs	r3, #1
 800026a:	2b1f      	cmp	r3, #31
 800026c:	d875      	bhi.n	800035a <HAL_GPIO_EXTI_Callback+0x18a>
 800026e:	a201      	add	r2, pc, #4	; (adr r2, 8000274 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000274:	080002fb 	.word	0x080002fb
 8000278:	08000301 	.word	0x08000301
 800027c:	0800035b 	.word	0x0800035b
 8000280:	08000307 	.word	0x08000307
 8000284:	0800035b 	.word	0x0800035b
 8000288:	0800035b 	.word	0x0800035b
 800028c:	0800035b 	.word	0x0800035b
 8000290:	0800030d 	.word	0x0800030d
 8000294:	0800035b 	.word	0x0800035b
 8000298:	0800035b 	.word	0x0800035b
 800029c:	0800035b 	.word	0x0800035b
 80002a0:	0800035b 	.word	0x0800035b
 80002a4:	0800035b 	.word	0x0800035b
 80002a8:	0800035b 	.word	0x0800035b
 80002ac:	0800035b 	.word	0x0800035b
 80002b0:	08000313 	.word	0x08000313
 80002b4:	0800035b 	.word	0x0800035b
 80002b8:	0800035b 	.word	0x0800035b
 80002bc:	0800035b 	.word	0x0800035b
 80002c0:	0800035b 	.word	0x0800035b
 80002c4:	0800035b 	.word	0x0800035b
 80002c8:	0800035b 	.word	0x0800035b
 80002cc:	0800035b 	.word	0x0800035b
 80002d0:	0800035b 	.word	0x0800035b
 80002d4:	0800035b 	.word	0x0800035b
 80002d8:	0800035b 	.word	0x0800035b
 80002dc:	0800035b 	.word	0x0800035b
 80002e0:	0800035b 	.word	0x0800035b
 80002e4:	0800035b 	.word	0x0800035b
 80002e8:	0800035b 	.word	0x0800035b
 80002ec:	0800035b 	.word	0x0800035b
 80002f0:	08000319 	.word	0x08000319
 80002f4:	2b40      	cmp	r3, #64	; 0x40
 80002f6:	d012      	beq.n	800031e <HAL_GPIO_EXTI_Callback+0x14e>
 80002f8:	e02f      	b.n	800035a <HAL_GPIO_EXTI_Callback+0x18a>
	case S00_Pin:
		index = 0;
 80002fa:	2300      	movs	r3, #0
 80002fc:	73fb      	strb	r3, [r7, #15]
		break;
 80002fe:	e02c      	b.n	800035a <HAL_GPIO_EXTI_Callback+0x18a>
	case S01_Pin:
		index=1;
 8000300:	2301      	movs	r3, #1
 8000302:	73fb      	strb	r3, [r7, #15]
		break;
 8000304:	e029      	b.n	800035a <HAL_GPIO_EXTI_Callback+0x18a>
	case S02_Pin:
		index = 2;
 8000306:	2302      	movs	r3, #2
 8000308:	73fb      	strb	r3, [r7, #15]
		break;
 800030a:	e026      	b.n	800035a <HAL_GPIO_EXTI_Callback+0x18a>
	case S03_Pin:
		index = 3;
 800030c:	2303      	movs	r3, #3
 800030e:	73fb      	strb	r3, [r7, #15]
		break;
 8000310:	e023      	b.n	800035a <HAL_GPIO_EXTI_Callback+0x18a>
	case S04_Pin:
		index = 4;
 8000312:	2304      	movs	r3, #4
 8000314:	73fb      	strb	r3, [r7, #15]
		break;
 8000316:	e020      	b.n	800035a <HAL_GPIO_EXTI_Callback+0x18a>
	case S05_Pin:
		index = 5;
 8000318:	2305      	movs	r3, #5
 800031a:	73fb      	strb	r3, [r7, #15]
		break;
 800031c:	e01d      	b.n	800035a <HAL_GPIO_EXTI_Callback+0x18a>
	case S06_Pin:
		index = 6;
 800031e:	2306      	movs	r3, #6
 8000320:	73fb      	strb	r3, [r7, #15]
		break;
 8000322:	e01a      	b.n	800035a <HAL_GPIO_EXTI_Callback+0x18a>
	case S07_Pin:
		index = 7;
 8000324:	2307      	movs	r3, #7
 8000326:	73fb      	strb	r3, [r7, #15]
		break;
 8000328:	e017      	b.n	800035a <HAL_GPIO_EXTI_Callback+0x18a>
	case S08_Pin:
		index = 8;
 800032a:	2308      	movs	r3, #8
 800032c:	73fb      	strb	r3, [r7, #15]
		break;
 800032e:	e014      	b.n	800035a <HAL_GPIO_EXTI_Callback+0x18a>
	case S09_Pin:
		index = 9;
 8000330:	2309      	movs	r3, #9
 8000332:	73fb      	strb	r3, [r7, #15]
		break;
 8000334:	e011      	b.n	800035a <HAL_GPIO_EXTI_Callback+0x18a>
	case S10_Pin:
		index = 10;
 8000336:	230a      	movs	r3, #10
 8000338:	73fb      	strb	r3, [r7, #15]
		break;
 800033a:	e00e      	b.n	800035a <HAL_GPIO_EXTI_Callback+0x18a>
	case S11_Pin:
		index = 11;
 800033c:	230b      	movs	r3, #11
 800033e:	73fb      	strb	r3, [r7, #15]
		break;
 8000340:	e00b      	b.n	800035a <HAL_GPIO_EXTI_Callback+0x18a>
	case S12_Pin:
		index = 12;
 8000342:	230c      	movs	r3, #12
 8000344:	73fb      	strb	r3, [r7, #15]
		break;
 8000346:	e008      	b.n	800035a <HAL_GPIO_EXTI_Callback+0x18a>
	case S13_Pin:
		index = 13;
 8000348:	230d      	movs	r3, #13
 800034a:	73fb      	strb	r3, [r7, #15]
		break;
 800034c:	e005      	b.n	800035a <HAL_GPIO_EXTI_Callback+0x18a>
	case S14_Pin:
		index = 14;
 800034e:	230e      	movs	r3, #14
 8000350:	73fb      	strb	r3, [r7, #15]
		break;
 8000352:	e002      	b.n	800035a <HAL_GPIO_EXTI_Callback+0x18a>
	case S15_Pin:
		index = 15;
 8000354:	230f      	movs	r3, #15
 8000356:	73fb      	strb	r3, [r7, #15]
		break;
 8000358:	bf00      	nop
	}
	pulse[index][pulse_pointer[index]]=micros();
 800035a:	7bfc      	ldrb	r4, [r7, #15]
 800035c:	7bfb      	ldrb	r3, [r7, #15]
 800035e:	4a11      	ldr	r2, [pc, #68]	; (80003a4 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000360:	5cd3      	ldrb	r3, [r2, r3]
 8000362:	461d      	mov	r5, r3
 8000364:	f7ff ff08 	bl	8000178 <micros>
 8000368:	4602      	mov	r2, r0
 800036a:	490f      	ldr	r1, [pc, #60]	; (80003a8 <HAL_GPIO_EXTI_Callback+0x1d8>)
 800036c:	0123      	lsls	r3, r4, #4
 800036e:	442b      	add	r3, r5
 8000370:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	++pulse_pointer[index];
 8000374:	7bfb      	ldrb	r3, [r7, #15]
 8000376:	4a0b      	ldr	r2, [pc, #44]	; (80003a4 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000378:	5cd2      	ldrb	r2, [r2, r3]
 800037a:	3201      	adds	r2, #1
 800037c:	b2d1      	uxtb	r1, r2
 800037e:	4a09      	ldr	r2, [pc, #36]	; (80003a4 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000380:	54d1      	strb	r1, [r2, r3]
	pulse_pointer[index]%=SPEED_BUFFER_SIZE;
 8000382:	7bfb      	ldrb	r3, [r7, #15]
 8000384:	4a07      	ldr	r2, [pc, #28]	; (80003a4 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000386:	5cd2      	ldrb	r2, [r2, r3]
 8000388:	7bfb      	ldrb	r3, [r7, #15]
 800038a:	f002 020f 	and.w	r2, r2, #15
 800038e:	b2d1      	uxtb	r1, r2
 8000390:	4a04      	ldr	r2, [pc, #16]	; (80003a4 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000392:	54d1      	strb	r1, [r2, r3]
	increment_count[index]=0;
 8000394:	7bfb      	ldrb	r3, [r7, #15]
 8000396:	4a05      	ldr	r2, [pc, #20]	; (80003ac <HAL_GPIO_EXTI_Callback+0x1dc>)
 8000398:	2100      	movs	r1, #0
 800039a:	54d1      	strb	r1, [r2, r3]
}
 800039c:	bf00      	nop
 800039e:	3710      	adds	r7, #16
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bdb0      	pop	{r4, r5, r7, pc}
 80003a4:	200001c0 	.word	0x200001c0
 80003a8:	20000220 	.word	0x20000220
 80003ac:	200001d0 	.word	0x200001d0

080003b0 <calcVelocity>:

void calcVelocity(){
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0

	for(uint8_t i=0;i<SPEED_PIN_COUNT;++i){
 80003b6:	2300      	movs	r3, #0
 80003b8:	71fb      	strb	r3, [r7, #7]
 80003ba:	e03b      	b.n	8000434 <calcVelocity+0x84>
		if(increment_count[i]>=SPEED_MAX_INCREMENT){
 80003bc:	79fb      	ldrb	r3, [r7, #7]
 80003be:	4a22      	ldr	r2, [pc, #136]	; (8000448 <calcVelocity+0x98>)
 80003c0:	5cd3      	ldrb	r3, [r2, r3]
 80003c2:	2b04      	cmp	r3, #4
 80003c4:	d905      	bls.n	80003d2 <calcVelocity+0x22>
			speed_on_single_pin[i]=0;
 80003c6:	79fb      	ldrb	r3, [r7, #7]
 80003c8:	4a20      	ldr	r2, [pc, #128]	; (800044c <calcVelocity+0x9c>)
 80003ca:	2100      	movs	r1, #0
 80003cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			continue;
 80003d0:	e02d      	b.n	800042e <calcVelocity+0x7e>
		}
		uint32_t s=pulse[i][(pulse_pointer[i]+SPEED_BUFFER_SIZE-1)%SPEED_BUFFER_SIZE]-pulse[i][pulse_pointer[i]];
 80003d2:	79fa      	ldrb	r2, [r7, #7]
 80003d4:	79fb      	ldrb	r3, [r7, #7]
 80003d6:	491e      	ldr	r1, [pc, #120]	; (8000450 <calcVelocity+0xa0>)
 80003d8:	5ccb      	ldrb	r3, [r1, r3]
 80003da:	330f      	adds	r3, #15
 80003dc:	4259      	negs	r1, r3
 80003de:	f003 030f 	and.w	r3, r3, #15
 80003e2:	f001 010f 	and.w	r1, r1, #15
 80003e6:	bf58      	it	pl
 80003e8:	424b      	negpl	r3, r1
 80003ea:	491a      	ldr	r1, [pc, #104]	; (8000454 <calcVelocity+0xa4>)
 80003ec:	0112      	lsls	r2, r2, #4
 80003ee:	4413      	add	r3, r2
 80003f0:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80003f4:	79fb      	ldrb	r3, [r7, #7]
 80003f6:	79f9      	ldrb	r1, [r7, #7]
 80003f8:	4815      	ldr	r0, [pc, #84]	; (8000450 <calcVelocity+0xa0>)
 80003fa:	5c41      	ldrb	r1, [r0, r1]
 80003fc:	4608      	mov	r0, r1
 80003fe:	4915      	ldr	r1, [pc, #84]	; (8000454 <calcVelocity+0xa4>)
 8000400:	011b      	lsls	r3, r3, #4
 8000402:	4403      	add	r3, r0
 8000404:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000408:	1ad3      	subs	r3, r2, r3
 800040a:	603b      	str	r3, [r7, #0]
		if(s==0){
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	2b00      	cmp	r3, #0
 8000410:	d105      	bne.n	800041e <calcVelocity+0x6e>
			speed_on_single_pin[i]=0;
 8000412:	79fb      	ldrb	r3, [r7, #7]
 8000414:	4a0d      	ldr	r2, [pc, #52]	; (800044c <calcVelocity+0x9c>)
 8000416:	2100      	movs	r1, #0
 8000418:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800041c:	e007      	b.n	800042e <calcVelocity+0x7e>
		}
		else{
			speed_on_single_pin[i] = (SPEED_BUFFER_SIZE-1)*1000000U/s;
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	490d      	ldr	r1, [pc, #52]	; (8000458 <calcVelocity+0xa8>)
 8000422:	683a      	ldr	r2, [r7, #0]
 8000424:	fbb1 f2f2 	udiv	r2, r1, r2
 8000428:	4908      	ldr	r1, [pc, #32]	; (800044c <calcVelocity+0x9c>)
 800042a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(uint8_t i=0;i<SPEED_PIN_COUNT;++i){
 800042e:	79fb      	ldrb	r3, [r7, #7]
 8000430:	3301      	adds	r3, #1
 8000432:	71fb      	strb	r3, [r7, #7]
 8000434:	79fb      	ldrb	r3, [r7, #7]
 8000436:	2b0f      	cmp	r3, #15
 8000438:	d9c0      	bls.n	80003bc <calcVelocity+0xc>
		}
	}
}
 800043a:	bf00      	nop
 800043c:	bf00      	nop
 800043e:	370c      	adds	r7, #12
 8000440:	46bd      	mov	sp, r7
 8000442:	bc80      	pop	{r7}
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	200001d0 	.word	0x200001d0
 800044c:	200001e0 	.word	0x200001e0
 8000450:	200001c0 	.word	0x200001c0
 8000454:	20000220 	.word	0x20000220
 8000458:	00e4e1c0 	.word	0x00e4e1c0

0800045c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
	calcVelocity();
 8000464:	f7ff ffa4 	bl	80003b0 <calcVelocity>
//	HAL_UART_Transmit(&huart1, (uint8_t*)"hello", 5);
	HAL_UART_Transmit(&huart1, (uint8_t*)speed_on_single_pin, sizeof(uint32_t)*SPEED_PIN_COUNT,10);
 8000468:	230a      	movs	r3, #10
 800046a:	2240      	movs	r2, #64	; 0x40
 800046c:	4903      	ldr	r1, [pc, #12]	; (800047c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800046e:	4804      	ldr	r0, [pc, #16]	; (8000480 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000470:	f002 fe1a 	bl	80030a8 <HAL_UART_Transmit>

//	__NOP();
}
 8000474:	bf00      	nop
 8000476:	3708      	adds	r7, #8
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	200001e0 	.word	0x200001e0
 8000480:	20000130 	.word	0x20000130

08000484 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000486:	b089      	sub	sp, #36	; 0x24
 8000488:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800048a:	f000 ff2d 	bl	80012e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800048e:	f000 f8cd 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000492:	f000 f9eb 	bl	800086c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000496:	f000 f90f 	bl	80006b8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800049a:	f000 f993 	bl	80007c4 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800049e:	f000 f941 	bl	8000724 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80004a2:	f000 f9b9 	bl	8000818 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80004a6:	2201      	movs	r2, #1
 80004a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004ac:	4856      	ldr	r0, [pc, #344]	; (8000608 <main+0x184>)
 80004ae:	f001 fae5 	bl	8001a7c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_LED_GPIO_Port, LCD_LED_Pin, GPIO_PIN_SET);
 80004b2:	2201      	movs	r2, #1
 80004b4:	2101      	movs	r1, #1
 80004b6:	4855      	ldr	r0, [pc, #340]	; (800060c <main+0x188>)
 80004b8:	f001 fae0 	bl	8001a7c <HAL_GPIO_WritePin>
  DWT_Init();
 80004bc:	f7ff fe46 	bl	800014c <DWT_Init>
  ST7735_Init();
 80004c0:	f000 fb80 	bl	8000bc4 <ST7735_Init>
  ST7735_FillScreen(ST7735_BLACK);
 80004c4:	2000      	movs	r0, #0
 80004c6:	f000 fcd7 	bl	8000e78 <ST7735_FillScreen>
  HAL_TIM_Base_Start_IT(&htim1);
 80004ca:	4851      	ldr	r0, [pc, #324]	; (8000610 <main+0x18c>)
 80004cc:	f002 f9ee 	bl	80028ac <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t t = millis();
 80004d0:	f7ff fe68 	bl	80001a4 <millis>
 80004d4:	60f8      	str	r0, [r7, #12]
  while (1)
  {
	for(uint8_t i=0;i<SPEED_PIN_COUNT;++i){
 80004d6:	2300      	movs	r3, #0
 80004d8:	72fb      	strb	r3, [r7, #11]
 80004da:	e009      	b.n	80004f0 <main+0x6c>
		increment_count[i]++;
 80004dc:	7afb      	ldrb	r3, [r7, #11]
 80004de:	4a4d      	ldr	r2, [pc, #308]	; (8000614 <main+0x190>)
 80004e0:	5cd2      	ldrb	r2, [r2, r3]
 80004e2:	3201      	adds	r2, #1
 80004e4:	b2d1      	uxtb	r1, r2
 80004e6:	4a4b      	ldr	r2, [pc, #300]	; (8000614 <main+0x190>)
 80004e8:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<SPEED_PIN_COUNT;++i){
 80004ea:	7afb      	ldrb	r3, [r7, #11]
 80004ec:	3301      	adds	r3, #1
 80004ee:	72fb      	strb	r3, [r7, #11]
 80004f0:	7afb      	ldrb	r3, [r7, #11]
 80004f2:	2b0f      	cmp	r3, #15
 80004f4:	d9f2      	bls.n	80004dc <main+0x58>
	}
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80004f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004fa:	4843      	ldr	r0, [pc, #268]	; (8000608 <main+0x184>)
 80004fc:	f001 fad6 	bl	8001aac <HAL_GPIO_TogglePin>

    ST7735_WriteString(0, 0, "Frequence", Font_11x18, ST7735_RED, ST7735_BLACK);
 8000500:	4b45      	ldr	r3, [pc, #276]	; (8000618 <main+0x194>)
 8000502:	2200      	movs	r2, #0
 8000504:	9203      	str	r2, [sp, #12]
 8000506:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800050a:	9202      	str	r2, [sp, #8]
 800050c:	466c      	mov	r4, sp
 800050e:	1d1a      	adds	r2, r3, #4
 8000510:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000514:	e884 0003 	stmia.w	r4, {r0, r1}
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a40      	ldr	r2, [pc, #256]	; (800061c <main+0x198>)
 800051c:	2100      	movs	r1, #0
 800051e:	2000      	movs	r0, #0
 8000520:	f000 fbe3 	bl	8000cea <ST7735_WriteString>
    char str[3];
    for(uint8_t i=0;i<8;++i){
 8000524:	2300      	movs	r3, #0
 8000526:	72bb      	strb	r3, [r7, #10]
 8000528:	e028      	b.n	800057c <main+0xf8>
		sprintf(str,"%03d", speed_on_single_pin[2*i]);
 800052a:	7abb      	ldrb	r3, [r7, #10]
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	4a3c      	ldr	r2, [pc, #240]	; (8000620 <main+0x19c>)
 8000530:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000534:	463b      	mov	r3, r7
 8000536:	493b      	ldr	r1, [pc, #236]	; (8000624 <main+0x1a0>)
 8000538:	4618      	mov	r0, r3
 800053a:	f003 fc35 	bl	8003da8 <siprintf>
		ST7735_WriteString(5, 18+i*10, str, Font_7x10, ST7735_GREEN, ST7735_BLACK);
 800053e:	7abb      	ldrb	r3, [r7, #10]
 8000540:	b29b      	uxth	r3, r3
 8000542:	461a      	mov	r2, r3
 8000544:	0092      	lsls	r2, r2, #2
 8000546:	4413      	add	r3, r2
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	b29b      	uxth	r3, r3
 800054c:	3312      	adds	r3, #18
 800054e:	b29c      	uxth	r4, r3
 8000550:	4b35      	ldr	r3, [pc, #212]	; (8000628 <main+0x1a4>)
 8000552:	463d      	mov	r5, r7
 8000554:	2200      	movs	r2, #0
 8000556:	9203      	str	r2, [sp, #12]
 8000558:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800055c:	9202      	str	r2, [sp, #8]
 800055e:	466e      	mov	r6, sp
 8000560:	1d1a      	adds	r2, r3, #4
 8000562:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000566:	e886 0003 	stmia.w	r6, {r0, r1}
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	462a      	mov	r2, r5
 800056e:	4621      	mov	r1, r4
 8000570:	2005      	movs	r0, #5
 8000572:	f000 fbba 	bl	8000cea <ST7735_WriteString>
    for(uint8_t i=0;i<8;++i){
 8000576:	7abb      	ldrb	r3, [r7, #10]
 8000578:	3301      	adds	r3, #1
 800057a:	72bb      	strb	r3, [r7, #10]
 800057c:	7abb      	ldrb	r3, [r7, #10]
 800057e:	2b07      	cmp	r3, #7
 8000580:	d9d3      	bls.n	800052a <main+0xa6>
    }
    for(uint8_t i=0;i<8;++i){
 8000582:	2300      	movs	r3, #0
 8000584:	727b      	strb	r3, [r7, #9]
 8000586:	e029      	b.n	80005dc <main+0x158>
		sprintf(str,"%03d", speed_on_single_pin[2*i+1]);
 8000588:	7a7b      	ldrb	r3, [r7, #9]
 800058a:	005b      	lsls	r3, r3, #1
 800058c:	3301      	adds	r3, #1
 800058e:	4a24      	ldr	r2, [pc, #144]	; (8000620 <main+0x19c>)
 8000590:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000594:	463b      	mov	r3, r7
 8000596:	4923      	ldr	r1, [pc, #140]	; (8000624 <main+0x1a0>)
 8000598:	4618      	mov	r0, r3
 800059a:	f003 fc05 	bl	8003da8 <siprintf>
		ST7735_WriteString(64+5, 18+i*10, str, Font_7x10, ST7735_GREEN, ST7735_BLACK);
 800059e:	7a7b      	ldrb	r3, [r7, #9]
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	461a      	mov	r2, r3
 80005a4:	0092      	lsls	r2, r2, #2
 80005a6:	4413      	add	r3, r2
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	b29b      	uxth	r3, r3
 80005ac:	3312      	adds	r3, #18
 80005ae:	b29c      	uxth	r4, r3
 80005b0:	4b1d      	ldr	r3, [pc, #116]	; (8000628 <main+0x1a4>)
 80005b2:	463d      	mov	r5, r7
 80005b4:	2200      	movs	r2, #0
 80005b6:	9203      	str	r2, [sp, #12]
 80005b8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80005bc:	9202      	str	r2, [sp, #8]
 80005be:	466e      	mov	r6, sp
 80005c0:	1d1a      	adds	r2, r3, #4
 80005c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005c6:	e886 0003 	stmia.w	r6, {r0, r1}
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	462a      	mov	r2, r5
 80005ce:	4621      	mov	r1, r4
 80005d0:	2045      	movs	r0, #69	; 0x45
 80005d2:	f000 fb8a 	bl	8000cea <ST7735_WriteString>
    for(uint8_t i=0;i<8;++i){
 80005d6:	7a7b      	ldrb	r3, [r7, #9]
 80005d8:	3301      	adds	r3, #1
 80005da:	727b      	strb	r3, [r7, #9]
 80005dc:	7a7b      	ldrb	r3, [r7, #9]
 80005de:	2b07      	cmp	r3, #7
 80005e0:	d9d2      	bls.n	8000588 <main+0x104>
    }

    uint32_t h = millis();
 80005e2:	f7ff fddf 	bl	80001a4 <millis>
 80005e6:	6078      	str	r0, [r7, #4]
    while(h-t<500){
 80005e8:	e005      	b.n	80005f6 <main+0x172>
    	h = millis();
 80005ea:	f7ff fddb 	bl	80001a4 <millis>
 80005ee:	6078      	str	r0, [r7, #4]
    	HAL_Delay(1);
 80005f0:	2001      	movs	r0, #1
 80005f2:	f000 fedb 	bl	80013ac <HAL_Delay>
    while(h-t<500){
 80005f6:	687a      	ldr	r2, [r7, #4]
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	1ad3      	subs	r3, r2, r3
 80005fc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000600:	d3f3      	bcc.n	80005ea <main+0x166>
    }
    t = h;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	60fb      	str	r3, [r7, #12]
  {
 8000606:	e766      	b.n	80004d6 <main+0x52>
 8000608:	40010c00 	.word	0x40010c00
 800060c:	40010800 	.word	0x40010800
 8000610:	200000e8 	.word	0x200000e8
 8000614:	200001d0 	.word	0x200001d0
 8000618:	2000000c 	.word	0x2000000c
 800061c:	080045cc 	.word	0x080045cc
 8000620:	200001e0 	.word	0x200001e0
 8000624:	080045d8 	.word	0x080045d8
 8000628:	20000000 	.word	0x20000000

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b090      	sub	sp, #64	; 0x40
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0318 	add.w	r3, r7, #24
 8000636:	2228      	movs	r2, #40	; 0x28
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f003 fbd4 	bl	8003de8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]
 800064c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800064e:	2301      	movs	r3, #1
 8000650:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000652:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000656:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800065c:	2301      	movs	r3, #1
 800065e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000660:	2302      	movs	r3, #2
 8000662:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000664:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000668:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800066a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800066e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	f107 0318 	add.w	r3, r7, #24
 8000674:	4618      	mov	r0, r3
 8000676:	f001 fa4b 	bl	8001b10 <HAL_RCC_OscConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000680:	f000 f9b4 	bl	80009ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000684:	230f      	movs	r3, #15
 8000686:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000688:	2302      	movs	r3, #2
 800068a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000690:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000694:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000696:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800069a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	2102      	movs	r1, #2
 80006a0:	4618      	mov	r0, r3
 80006a2:	f001 fcb7 	bl	8002014 <HAL_RCC_ClockConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006ac:	f000 f99e 	bl	80009ec <Error_Handler>
  }
}
 80006b0:	bf00      	nop
 80006b2:	3740      	adds	r7, #64	; 0x40
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006bc:	4b17      	ldr	r3, [pc, #92]	; (800071c <MX_SPI1_Init+0x64>)
 80006be:	4a18      	ldr	r2, [pc, #96]	; (8000720 <MX_SPI1_Init+0x68>)
 80006c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006c2:	4b16      	ldr	r3, [pc, #88]	; (800071c <MX_SPI1_Init+0x64>)
 80006c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ca:	4b14      	ldr	r3, [pc, #80]	; (800071c <MX_SPI1_Init+0x64>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <MX_SPI1_Init+0x64>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_SPI1_Init+0x64>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_SPI1_Init+0x64>)
 80006de:	2200      	movs	r2, #0
 80006e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_SPI1_Init+0x64>)
 80006e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006ea:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_SPI1_Init+0x64>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006f0:	4b0a      	ldr	r3, [pc, #40]	; (800071c <MX_SPI1_Init+0x64>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_SPI1_Init+0x64>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006fc:	4b07      	ldr	r3, [pc, #28]	; (800071c <MX_SPI1_Init+0x64>)
 80006fe:	2200      	movs	r2, #0
 8000700:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_SPI1_Init+0x64>)
 8000704:	220a      	movs	r2, #10
 8000706:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000708:	4804      	ldr	r0, [pc, #16]	; (800071c <MX_SPI1_Init+0x64>)
 800070a:	f001 fe11 	bl	8002330 <HAL_SPI_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000714:	f000 f96a 	bl	80009ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000090 	.word	0x20000090
 8000720:	40013000 	.word	0x40013000

08000724 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800072a:	f107 0308 	add.w	r3, r7, #8
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000738:	463b      	mov	r3, r7
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000740:	4b1e      	ldr	r3, [pc, #120]	; (80007bc <MX_TIM1_Init+0x98>)
 8000742:	4a1f      	ldr	r2, [pc, #124]	; (80007c0 <MX_TIM1_Init+0x9c>)
 8000744:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35;
 8000746:	4b1d      	ldr	r3, [pc, #116]	; (80007bc <MX_TIM1_Init+0x98>)
 8000748:	2223      	movs	r2, #35	; 0x23
 800074a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800074c:	4b1b      	ldr	r3, [pc, #108]	; (80007bc <MX_TIM1_Init+0x98>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000-1;
 8000752:	4b1a      	ldr	r3, [pc, #104]	; (80007bc <MX_TIM1_Init+0x98>)
 8000754:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000758:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800075a:	4b18      	ldr	r3, [pc, #96]	; (80007bc <MX_TIM1_Init+0x98>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000760:	4b16      	ldr	r3, [pc, #88]	; (80007bc <MX_TIM1_Init+0x98>)
 8000762:	2200      	movs	r2, #0
 8000764:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000766:	4b15      	ldr	r3, [pc, #84]	; (80007bc <MX_TIM1_Init+0x98>)
 8000768:	2280      	movs	r2, #128	; 0x80
 800076a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800076c:	4813      	ldr	r0, [pc, #76]	; (80007bc <MX_TIM1_Init+0x98>)
 800076e:	f002 f84d 	bl	800280c <HAL_TIM_Base_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000778:	f000 f938 	bl	80009ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800077c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000780:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000782:	f107 0308 	add.w	r3, r7, #8
 8000786:	4619      	mov	r1, r3
 8000788:	480c      	ldr	r0, [pc, #48]	; (80007bc <MX_TIM1_Init+0x98>)
 800078a:	f002 f9e9 	bl	8002b60 <HAL_TIM_ConfigClockSource>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000794:	f000 f92a 	bl	80009ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000798:	2300      	movs	r3, #0
 800079a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800079c:	2300      	movs	r3, #0
 800079e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007a0:	463b      	mov	r3, r7
 80007a2:	4619      	mov	r1, r3
 80007a4:	4805      	ldr	r0, [pc, #20]	; (80007bc <MX_TIM1_Init+0x98>)
 80007a6:	f002 fbbf 	bl	8002f28 <HAL_TIMEx_MasterConfigSynchronization>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80007b0:	f000 f91c 	bl	80009ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007b4:	bf00      	nop
 80007b6:	3718      	adds	r7, #24
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	200000e8 	.word	0x200000e8
 80007c0:	40012c00 	.word	0x40012c00

080007c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007c8:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_USART1_UART_Init+0x4c>)
 80007ca:	4a12      	ldr	r2, [pc, #72]	; (8000814 <MX_USART1_UART_Init+0x50>)
 80007cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007ce:	4b10      	ldr	r3, [pc, #64]	; (8000810 <MX_USART1_UART_Init+0x4c>)
 80007d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <MX_USART1_UART_Init+0x4c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007dc:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <MX_USART1_UART_Init+0x4c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007e2:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <MX_USART1_UART_Init+0x4c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007e8:	4b09      	ldr	r3, [pc, #36]	; (8000810 <MX_USART1_UART_Init+0x4c>)
 80007ea:	220c      	movs	r2, #12
 80007ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ee:	4b08      	ldr	r3, [pc, #32]	; (8000810 <MX_USART1_UART_Init+0x4c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <MX_USART1_UART_Init+0x4c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007fa:	4805      	ldr	r0, [pc, #20]	; (8000810 <MX_USART1_UART_Init+0x4c>)
 80007fc:	f002 fc04 	bl	8003008 <HAL_UART_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000806:	f000 f8f1 	bl	80009ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000130 	.word	0x20000130
 8000814:	40013800 	.word	0x40013800

08000818 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800081c:	4b11      	ldr	r3, [pc, #68]	; (8000864 <MX_USART2_UART_Init+0x4c>)
 800081e:	4a12      	ldr	r2, [pc, #72]	; (8000868 <MX_USART2_UART_Init+0x50>)
 8000820:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000822:	4b10      	ldr	r3, [pc, #64]	; (8000864 <MX_USART2_UART_Init+0x4c>)
 8000824:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000828:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_USART2_UART_Init+0x4c>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_USART2_UART_Init+0x4c>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <MX_USART2_UART_Init+0x4c>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_USART2_UART_Init+0x4c>)
 800083e:	220c      	movs	r2, #12
 8000840:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <MX_USART2_UART_Init+0x4c>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_USART2_UART_Init+0x4c>)
 800084a:	2200      	movs	r2, #0
 800084c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_USART2_UART_Init+0x4c>)
 8000850:	f002 fbda 	bl	8003008 <HAL_UART_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800085a:	f000 f8c7 	bl	80009ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000178 	.word	0x20000178
 8000868:	40004400 	.word	0x40004400

0800086c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b088      	sub	sp, #32
 8000870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000872:	f107 0310 	add.w	r3, r7, #16
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000880:	4b56      	ldr	r3, [pc, #344]	; (80009dc <MX_GPIO_Init+0x170>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	4a55      	ldr	r2, [pc, #340]	; (80009dc <MX_GPIO_Init+0x170>)
 8000886:	f043 0310 	orr.w	r3, r3, #16
 800088a:	6193      	str	r3, [r2, #24]
 800088c:	4b53      	ldr	r3, [pc, #332]	; (80009dc <MX_GPIO_Init+0x170>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	f003 0310 	and.w	r3, r3, #16
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000898:	4b50      	ldr	r3, [pc, #320]	; (80009dc <MX_GPIO_Init+0x170>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	4a4f      	ldr	r2, [pc, #316]	; (80009dc <MX_GPIO_Init+0x170>)
 800089e:	f043 0320 	orr.w	r3, r3, #32
 80008a2:	6193      	str	r3, [r2, #24]
 80008a4:	4b4d      	ldr	r3, [pc, #308]	; (80009dc <MX_GPIO_Init+0x170>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	f003 0320 	and.w	r3, r3, #32
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b0:	4b4a      	ldr	r3, [pc, #296]	; (80009dc <MX_GPIO_Init+0x170>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	4a49      	ldr	r2, [pc, #292]	; (80009dc <MX_GPIO_Init+0x170>)
 80008b6:	f043 0304 	orr.w	r3, r3, #4
 80008ba:	6193      	str	r3, [r2, #24]
 80008bc:	4b47      	ldr	r3, [pc, #284]	; (80009dc <MX_GPIO_Init+0x170>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	f003 0304 	and.w	r3, r3, #4
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c8:	4b44      	ldr	r3, [pc, #272]	; (80009dc <MX_GPIO_Init+0x170>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	4a43      	ldr	r2, [pc, #268]	; (80009dc <MX_GPIO_Init+0x170>)
 80008ce:	f043 0308 	orr.w	r3, r3, #8
 80008d2:	6193      	str	r3, [r2, #24]
 80008d4:	4b41      	ldr	r3, [pc, #260]	; (80009dc <MX_GPIO_Init+0x170>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	f003 0308 	and.w	r3, r3, #8
 80008dc:	603b      	str	r3, [r7, #0]
 80008de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_LED_Pin|LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 80008e0:	2200      	movs	r2, #0
 80008e2:	2153      	movs	r1, #83	; 0x53
 80008e4:	483e      	ldr	r0, [pc, #248]	; (80009e0 <MX_GPIO_Init+0x174>)
 80008e6:	f001 f8c9 	bl	8001a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008f0:	483c      	ldr	r0, [pc, #240]	; (80009e4 <MX_GPIO_Init+0x178>)
 80008f2:	f001 f8c3 	bl	8001a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_LED_Pin LCD_CS_Pin LCD_RST_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_LED_Pin|LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin;
 80008f6:	2353      	movs	r3, #83	; 0x53
 80008f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fa:	2301      	movs	r3, #1
 80008fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2302      	movs	r3, #2
 8000904:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000906:	f107 0310 	add.w	r3, r7, #16
 800090a:	4619      	mov	r1, r3
 800090c:	4834      	ldr	r0, [pc, #208]	; (80009e0 <MX_GPIO_Init+0x174>)
 800090e:	f000 ff31 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pins : S00_Pin S01_Pin S02_Pin S10_Pin
                           S11_Pin S13_Pin S14_Pin S15_Pin
                           S03_Pin S04_Pin S05_Pin S06_Pin
                           S07_Pin S08_Pin S09_Pin */
  GPIO_InitStruct.Pin = S00_Pin|S01_Pin|S02_Pin|S10_Pin
 8000912:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000916:	613b      	str	r3, [r7, #16]
                          |S11_Pin|S13_Pin|S14_Pin|S15_Pin
                          |S03_Pin|S04_Pin|S05_Pin|S06_Pin
                          |S07_Pin|S08_Pin|S09_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000918:	4b33      	ldr	r3, [pc, #204]	; (80009e8 <MX_GPIO_Init+0x17c>)
 800091a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000920:	f107 0310 	add.w	r3, r7, #16
 8000924:	4619      	mov	r1, r3
 8000926:	482f      	ldr	r0, [pc, #188]	; (80009e4 <MX_GPIO_Init+0x178>)
 8000928:	f000 ff24 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800092c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000930:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000932:	2301      	movs	r3, #1
 8000934:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2302      	movs	r3, #2
 800093c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800093e:	f107 0310 	add.w	r3, r7, #16
 8000942:	4619      	mov	r1, r3
 8000944:	4827      	ldr	r0, [pc, #156]	; (80009e4 <MX_GPIO_Init+0x178>)
 8000946:	f000 ff15 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : S12_Pin */
  GPIO_InitStruct.Pin = S12_Pin;
 800094a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800094e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000950:	4b25      	ldr	r3, [pc, #148]	; (80009e8 <MX_GPIO_Init+0x17c>)
 8000952:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(S12_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 0310 	add.w	r3, r7, #16
 800095c:	4619      	mov	r1, r3
 800095e:	4820      	ldr	r0, [pc, #128]	; (80009e0 <MX_GPIO_Init+0x174>)
 8000960:	f000 ff08 	bl	8001774 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000964:	2200      	movs	r2, #0
 8000966:	2100      	movs	r1, #0
 8000968:	2006      	movs	r0, #6
 800096a:	f000 fe1a 	bl	80015a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800096e:	2006      	movs	r0, #6
 8000970:	f000 fe33 	bl	80015da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000974:	2200      	movs	r2, #0
 8000976:	2100      	movs	r1, #0
 8000978:	2007      	movs	r0, #7
 800097a:	f000 fe12 	bl	80015a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800097e:	2007      	movs	r0, #7
 8000980:	f000 fe2b 	bl	80015da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000984:	2200      	movs	r2, #0
 8000986:	2100      	movs	r1, #0
 8000988:	2008      	movs	r0, #8
 800098a:	f000 fe0a 	bl	80015a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800098e:	2008      	movs	r0, #8
 8000990:	f000 fe23 	bl	80015da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000994:	2200      	movs	r2, #0
 8000996:	2100      	movs	r1, #0
 8000998:	2009      	movs	r0, #9
 800099a:	f000 fe02 	bl	80015a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800099e:	2009      	movs	r0, #9
 80009a0:	f000 fe1b 	bl	80015da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80009a4:	2200      	movs	r2, #0
 80009a6:	2100      	movs	r1, #0
 80009a8:	200a      	movs	r0, #10
 80009aa:	f000 fdfa 	bl	80015a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80009ae:	200a      	movs	r0, #10
 80009b0:	f000 fe13 	bl	80015da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2100      	movs	r1, #0
 80009b8:	2017      	movs	r0, #23
 80009ba:	f000 fdf2 	bl	80015a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80009be:	2017      	movs	r0, #23
 80009c0:	f000 fe0b 	bl	80015da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2100      	movs	r1, #0
 80009c8:	2028      	movs	r0, #40	; 0x28
 80009ca:	f000 fdea 	bl	80015a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009ce:	2028      	movs	r0, #40	; 0x28
 80009d0:	f000 fe03 	bl	80015da <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009d4:	bf00      	nop
 80009d6:	3720      	adds	r7, #32
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40021000 	.word	0x40021000
 80009e0:	40010800 	.word	0x40010800
 80009e4:	40010c00 	.word	0x40010c00
 80009e8:	10110000 	.word	0x10110000

080009ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f0:	b672      	cpsid	i
}
 80009f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <Error_Handler+0x8>
	...

080009f8 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 80009fc:	2200      	movs	r2, #0
 80009fe:	2102      	movs	r1, #2
 8000a00:	4802      	ldr	r0, [pc, #8]	; (8000a0c <ST7735_Select+0x14>)
 8000a02:	f001 f83b 	bl	8001a7c <HAL_GPIO_WritePin>
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40010800 	.word	0x40010800

08000a10 <ST7735_Unselect>:

void ST7735_Unselect() {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8000a14:	2201      	movs	r2, #1
 8000a16:	2102      	movs	r1, #2
 8000a18:	4802      	ldr	r0, [pc, #8]	; (8000a24 <ST7735_Unselect+0x14>)
 8000a1a:	f001 f82f 	bl	8001a7c <HAL_GPIO_WritePin>
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40010800 	.word	0x40010800

08000a28 <ST7735_Reset>:

static void ST7735_Reset() {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2110      	movs	r1, #16
 8000a30:	4806      	ldr	r0, [pc, #24]	; (8000a4c <ST7735_Reset+0x24>)
 8000a32:	f001 f823 	bl	8001a7c <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000a36:	2005      	movs	r0, #5
 8000a38:	f000 fcb8 	bl	80013ac <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	2110      	movs	r1, #16
 8000a40:	4802      	ldr	r0, [pc, #8]	; (8000a4c <ST7735_Reset+0x24>)
 8000a42:	f001 f81b 	bl	8001a7c <HAL_GPIO_WritePin>
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40010800 	.word	0x40010800

08000a50 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2140      	movs	r1, #64	; 0x40
 8000a5e:	4807      	ldr	r0, [pc, #28]	; (8000a7c <ST7735_WriteCommand+0x2c>)
 8000a60:	f001 f80c 	bl	8001a7c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000a64:	1df9      	adds	r1, r7, #7
 8000a66:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	4804      	ldr	r0, [pc, #16]	; (8000a80 <ST7735_WriteCommand+0x30>)
 8000a6e:	f001 fce3 	bl	8002438 <HAL_SPI_Transmit>
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40010800 	.word	0x40010800
 8000a80:	20000090 	.word	0x20000090

08000a84 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8000a8e:	2201      	movs	r2, #1
 8000a90:	2140      	movs	r1, #64	; 0x40
 8000a92:	4807      	ldr	r0, [pc, #28]	; (8000ab0 <ST7735_WriteData+0x2c>)
 8000a94:	f000 fff2 	bl	8001a7c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	b29a      	uxth	r2, r3
 8000a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa0:	6879      	ldr	r1, [r7, #4]
 8000aa2:	4804      	ldr	r0, [pc, #16]	; (8000ab4 <ST7735_WriteData+0x30>)
 8000aa4:	f001 fcc8 	bl	8002438 <HAL_SPI_Transmit>
}
 8000aa8:	bf00      	nop
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40010800 	.word	0x40010800
 8000ab4:	20000090 	.word	0x20000090

08000ab8 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	1c5a      	adds	r2, r3, #1
 8000ac4:	607a      	str	r2, [r7, #4]
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8000aca:	e034      	b.n	8000b36 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	1c5a      	adds	r2, r3, #1
 8000ad0:	607a      	str	r2, [r7, #4]
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000ad6:	7afb      	ldrb	r3, [r7, #11]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff ffb9 	bl	8000a50 <ST7735_WriteCommand>

        numArgs = *addr++;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	1c5a      	adds	r2, r3, #1
 8000ae2:	607a      	str	r2, [r7, #4]
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000ae8:	7abb      	ldrb	r3, [r7, #10]
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000af0:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000af2:	7abb      	ldrb	r3, [r7, #10]
 8000af4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000af8:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8000afa:	7abb      	ldrb	r3, [r7, #10]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d008      	beq.n	8000b12 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000b00:	7abb      	ldrb	r3, [r7, #10]
 8000b02:	4619      	mov	r1, r3
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	f7ff ffbd 	bl	8000a84 <ST7735_WriteData>
            addr += numArgs;
 8000b0a:	7abb      	ldrb	r3, [r7, #10]
 8000b0c:	687a      	ldr	r2, [r7, #4]
 8000b0e:	4413      	add	r3, r2
 8000b10:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000b12:	89bb      	ldrh	r3, [r7, #12]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d00e      	beq.n	8000b36 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	1c5a      	adds	r2, r3, #1
 8000b1c:	607a      	str	r2, [r7, #4]
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000b22:	89bb      	ldrh	r3, [r7, #12]
 8000b24:	2bff      	cmp	r3, #255	; 0xff
 8000b26:	d102      	bne.n	8000b2e <ST7735_ExecuteCommandList+0x76>
 8000b28:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b2c:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000b2e:	89bb      	ldrh	r3, [r7, #12]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f000 fc3b 	bl	80013ac <HAL_Delay>
    while(numCommands--) {
 8000b36:	7bfb      	ldrb	r3, [r7, #15]
 8000b38:	1e5a      	subs	r2, r3, #1
 8000b3a:	73fa      	strb	r2, [r7, #15]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d1c5      	bne.n	8000acc <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8000b40:	bf00      	nop
 8000b42:	bf00      	nop
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8000b4a:	b590      	push	{r4, r7, lr}
 8000b4c:	b085      	sub	sp, #20
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	4604      	mov	r4, r0
 8000b52:	4608      	mov	r0, r1
 8000b54:	4611      	mov	r1, r2
 8000b56:	461a      	mov	r2, r3
 8000b58:	4623      	mov	r3, r4
 8000b5a:	71fb      	strb	r3, [r7, #7]
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	71bb      	strb	r3, [r7, #6]
 8000b60:	460b      	mov	r3, r1
 8000b62:	717b      	strb	r3, [r7, #5]
 8000b64:	4613      	mov	r3, r2
 8000b66:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000b68:	202a      	movs	r0, #42	; 0x2a
 8000b6a:	f7ff ff71 	bl	8000a50 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8000b6e:	2300      	movs	r3, #0
 8000b70:	733b      	strb	r3, [r7, #12]
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	3302      	adds	r3, #2
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	737b      	strb	r3, [r7, #13]
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	73bb      	strb	r3, [r7, #14]
 8000b7e:	797b      	ldrb	r3, [r7, #5]
 8000b80:	3302      	adds	r3, #2
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000b86:	f107 030c 	add.w	r3, r7, #12
 8000b8a:	2104      	movs	r1, #4
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff ff79 	bl	8000a84 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000b92:	202b      	movs	r0, #43	; 0x2b
 8000b94:	f7ff ff5c 	bl	8000a50 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8000b98:	79bb      	ldrb	r3, [r7, #6]
 8000b9a:	3303      	adds	r3, #3
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8000ba0:	793b      	ldrb	r3, [r7, #4]
 8000ba2:	3303      	adds	r3, #3
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000ba8:	f107 030c 	add.w	r3, r7, #12
 8000bac:	2104      	movs	r1, #4
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff ff68 	bl	8000a84 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000bb4:	202c      	movs	r0, #44	; 0x2c
 8000bb6:	f7ff ff4b 	bl	8000a50 <ST7735_WriteCommand>
}
 8000bba:	bf00      	nop
 8000bbc:	3714      	adds	r7, #20
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd90      	pop	{r4, r7, pc}
	...

08000bc4 <ST7735_Init>:

void ST7735_Init() {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
    ST7735_Select();
 8000bc8:	f7ff ff16 	bl	80009f8 <ST7735_Select>
    ST7735_Reset();
 8000bcc:	f7ff ff2c 	bl	8000a28 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8000bd0:	4806      	ldr	r0, [pc, #24]	; (8000bec <ST7735_Init+0x28>)
 8000bd2:	f7ff ff71 	bl	8000ab8 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8000bd6:	4806      	ldr	r0, [pc, #24]	; (8000bf0 <ST7735_Init+0x2c>)
 8000bd8:	f7ff ff6e 	bl	8000ab8 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8000bdc:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <ST7735_Init+0x30>)
 8000bde:	f7ff ff6b 	bl	8000ab8 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8000be2:	f7ff ff15 	bl	8000a10 <ST7735_Unselect>
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	08005aa8 	.word	0x08005aa8
 8000bf0:	08005ae4 	.word	0x08005ae4
 8000bf4:	08005af4 	.word	0x08005af4

08000bf8 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000bf8:	b082      	sub	sp, #8
 8000bfa:	b590      	push	{r4, r7, lr}
 8000bfc:	b089      	sub	sp, #36	; 0x24
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	637b      	str	r3, [r7, #52]	; 0x34
 8000c02:	4603      	mov	r3, r0
 8000c04:	80fb      	strh	r3, [r7, #6]
 8000c06:	460b      	mov	r3, r1
 8000c08:	80bb      	strh	r3, [r7, #4]
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000c0e:	88fb      	ldrh	r3, [r7, #6]
 8000c10:	b2d8      	uxtb	r0, r3
 8000c12:	88bb      	ldrh	r3, [r7, #4]
 8000c14:	b2d9      	uxtb	r1, r3
 8000c16:	88fb      	ldrh	r3, [r7, #6]
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000c1e:	4413      	add	r3, r2
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	3b01      	subs	r3, #1
 8000c24:	b2dc      	uxtb	r4, r3
 8000c26:	88bb      	ldrh	r3, [r7, #4]
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000c2e:	4413      	add	r3, r2
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	3b01      	subs	r3, #1
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	4622      	mov	r2, r4
 8000c38:	f7ff ff87 	bl	8000b4a <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61fb      	str	r3, [r7, #28]
 8000c40:	e045      	b.n	8000cce <ST7735_WriteChar+0xd6>
        b = font.data[(ch - 32) * font.height + i];
 8000c42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000c44:	78fb      	ldrb	r3, [r7, #3]
 8000c46:	3b20      	subs	r3, #32
 8000c48:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000c4c:	fb01 f303 	mul.w	r3, r1, r3
 8000c50:	4619      	mov	r1, r3
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	440b      	add	r3, r1
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	4413      	add	r3, r2
 8000c5a:	881b      	ldrh	r3, [r3, #0]
 8000c5c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61bb      	str	r3, [r7, #24]
 8000c62:	e02b      	b.n	8000cbc <ST7735_WriteChar+0xc4>
            if((b << j) & 0x8000)  {
 8000c64:	697a      	ldr	r2, [r7, #20]
 8000c66:	69bb      	ldr	r3, [r7, #24]
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d010      	beq.n	8000c96 <ST7735_WriteChar+0x9e>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000c74:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000c78:	0a1b      	lsrs	r3, r3, #8
 8000c7a:	b29b      	uxth	r3, r3
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	743b      	strb	r3, [r7, #16]
 8000c80:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8000c88:	f107 0310 	add.w	r3, r7, #16
 8000c8c:	2102      	movs	r1, #2
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff fef8 	bl	8000a84 <ST7735_WriteData>
 8000c94:	e00f      	b.n	8000cb6 <ST7735_WriteChar+0xbe>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000c96:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8000c9a:	0a1b      	lsrs	r3, r3, #8
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	733b      	strb	r3, [r7, #12]
 8000ca2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8000caa:	f107 030c 	add.w	r3, r7, #12
 8000cae:	2102      	movs	r1, #2
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff fee7 	bl	8000a84 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8000cb6:	69bb      	ldr	r3, [r7, #24]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	61bb      	str	r3, [r7, #24]
 8000cbc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	69bb      	ldr	r3, [r7, #24]
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d3cd      	bcc.n	8000c64 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	61fb      	str	r3, [r7, #28]
 8000cce:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d3b3      	bcc.n	8000c42 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8000cda:	bf00      	nop
 8000cdc:	bf00      	nop
 8000cde:	3724      	adds	r7, #36	; 0x24
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000ce6:	b002      	add	sp, #8
 8000ce8:	4770      	bx	lr

08000cea <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000cea:	b082      	sub	sp, #8
 8000cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cee:	b087      	sub	sp, #28
 8000cf0:	af04      	add	r7, sp, #16
 8000cf2:	603a      	str	r2, [r7, #0]
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	80fb      	strh	r3, [r7, #6]
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8000cfe:	f7ff fe7b 	bl	80009f8 <ST7735_Select>

    while(*str) {
 8000d02:	e038      	b.n	8000d76 <ST7735_WriteString+0x8c>
        if(x + font.width >= ST7735_WIDTH) {
 8000d04:	88fb      	ldrh	r3, [r7, #6]
 8000d06:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000d0a:	4413      	add	r3, r2
 8000d0c:	2b7f      	cmp	r3, #127	; 0x7f
 8000d0e:	dd15      	ble.n	8000d3c <ST7735_WriteString+0x52>
            x = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000d14:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000d18:	b29a      	uxth	r2, r3
 8000d1a:	88bb      	ldrh	r3, [r7, #4]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8000d20:	88bb      	ldrh	r3, [r7, #4]
 8000d22:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8000d26:	4413      	add	r3, r2
 8000d28:	2b7f      	cmp	r3, #127	; 0x7f
 8000d2a:	dc29      	bgt.n	8000d80 <ST7735_WriteString+0x96>
                break;
            }

            if(*str == ' ') {
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b20      	cmp	r3, #32
 8000d32:	d103      	bne.n	8000d3c <ST7735_WriteString+0x52>
                // skip spaces in the beginning of the new line
                str++;
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	3301      	adds	r3, #1
 8000d38:	603b      	str	r3, [r7, #0]
                continue;
 8000d3a:	e01c      	b.n	8000d76 <ST7735_WriteString+0x8c>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	781a      	ldrb	r2, [r3, #0]
 8000d40:	88bd      	ldrh	r5, [r7, #4]
 8000d42:	88fc      	ldrh	r4, [r7, #6]
 8000d44:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000d46:	9303      	str	r3, [sp, #12]
 8000d48:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000d4a:	9302      	str	r3, [sp, #8]
 8000d4c:	466e      	mov	r6, sp
 8000d4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d52:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000d56:	e886 0003 	stmia.w	r6, {r0, r1}
 8000d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5c:	4629      	mov	r1, r5
 8000d5e:	4620      	mov	r0, r4
 8000d60:	f7ff ff4a 	bl	8000bf8 <ST7735_WriteChar>
        x += font.width;
 8000d64:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d68:	b29a      	uxth	r2, r3
 8000d6a:	88fb      	ldrh	r3, [r7, #6]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	80fb      	strh	r3, [r7, #6]
        str++;
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	3301      	adds	r3, #1
 8000d74:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d1c2      	bne.n	8000d04 <ST7735_WriteString+0x1a>
 8000d7e:	e000      	b.n	8000d82 <ST7735_WriteString+0x98>
                break;
 8000d80:	bf00      	nop
    }

    ST7735_Unselect();
 8000d82:	f7ff fe45 	bl	8000a10 <ST7735_Unselect>
}
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8000d90:	b002      	add	sp, #8
 8000d92:	4770      	bx	lr

08000d94 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000d94:	b590      	push	{r4, r7, lr}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	4611      	mov	r1, r2
 8000da0:	461a      	mov	r2, r3
 8000da2:	4623      	mov	r3, r4
 8000da4:	80fb      	strh	r3, [r7, #6]
 8000da6:	4603      	mov	r3, r0
 8000da8:	80bb      	strh	r3, [r7, #4]
 8000daa:	460b      	mov	r3, r1
 8000dac:	807b      	strh	r3, [r7, #2]
 8000dae:	4613      	mov	r3, r2
 8000db0:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000db2:	88fb      	ldrh	r3, [r7, #6]
 8000db4:	2b7f      	cmp	r3, #127	; 0x7f
 8000db6:	d857      	bhi.n	8000e68 <ST7735_FillRectangle+0xd4>
 8000db8:	88bb      	ldrh	r3, [r7, #4]
 8000dba:	2b7f      	cmp	r3, #127	; 0x7f
 8000dbc:	d854      	bhi.n	8000e68 <ST7735_FillRectangle+0xd4>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8000dbe:	88fa      	ldrh	r2, [r7, #6]
 8000dc0:	887b      	ldrh	r3, [r7, #2]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	2b80      	cmp	r3, #128	; 0x80
 8000dc6:	dd03      	ble.n	8000dd0 <ST7735_FillRectangle+0x3c>
 8000dc8:	88fb      	ldrh	r3, [r7, #6]
 8000dca:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000dce:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8000dd0:	88ba      	ldrh	r2, [r7, #4]
 8000dd2:	883b      	ldrh	r3, [r7, #0]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	2b80      	cmp	r3, #128	; 0x80
 8000dd8:	dd03      	ble.n	8000de2 <ST7735_FillRectangle+0x4e>
 8000dda:	88bb      	ldrh	r3, [r7, #4]
 8000ddc:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000de0:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000de2:	f7ff fe09 	bl	80009f8 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000de6:	88fb      	ldrh	r3, [r7, #6]
 8000de8:	b2d8      	uxtb	r0, r3
 8000dea:	88bb      	ldrh	r3, [r7, #4]
 8000dec:	b2d9      	uxtb	r1, r3
 8000dee:	88fb      	ldrh	r3, [r7, #6]
 8000df0:	b2da      	uxtb	r2, r3
 8000df2:	887b      	ldrh	r3, [r7, #2]
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	4413      	add	r3, r2
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	b2dc      	uxtb	r4, r3
 8000dfe:	88bb      	ldrh	r3, [r7, #4]
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	883b      	ldrh	r3, [r7, #0]
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	4413      	add	r3, r2
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	4622      	mov	r2, r4
 8000e10:	f7ff fe9b 	bl	8000b4a <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000e14:	8c3b      	ldrh	r3, [r7, #32]
 8000e16:	0a1b      	lsrs	r3, r3, #8
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	733b      	strb	r3, [r7, #12]
 8000e1e:	8c3b      	ldrh	r3, [r7, #32]
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8000e24:	2201      	movs	r2, #1
 8000e26:	2140      	movs	r1, #64	; 0x40
 8000e28:	4811      	ldr	r0, [pc, #68]	; (8000e70 <ST7735_FillRectangle+0xdc>)
 8000e2a:	f000 fe27 	bl	8001a7c <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000e2e:	883b      	ldrh	r3, [r7, #0]
 8000e30:	80bb      	strh	r3, [r7, #4]
 8000e32:	e013      	b.n	8000e5c <ST7735_FillRectangle+0xc8>
        for(x = w; x > 0; x--) {
 8000e34:	887b      	ldrh	r3, [r7, #2]
 8000e36:	80fb      	strh	r3, [r7, #6]
 8000e38:	e00a      	b.n	8000e50 <ST7735_FillRectangle+0xbc>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000e3a:	f107 010c 	add.w	r1, r7, #12
 8000e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e42:	2202      	movs	r2, #2
 8000e44:	480b      	ldr	r0, [pc, #44]	; (8000e74 <ST7735_FillRectangle+0xe0>)
 8000e46:	f001 faf7 	bl	8002438 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000e4a:	88fb      	ldrh	r3, [r7, #6]
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	80fb      	strh	r3, [r7, #6]
 8000e50:	88fb      	ldrh	r3, [r7, #6]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d1f1      	bne.n	8000e3a <ST7735_FillRectangle+0xa6>
    for(y = h; y > 0; y--) {
 8000e56:	88bb      	ldrh	r3, [r7, #4]
 8000e58:	3b01      	subs	r3, #1
 8000e5a:	80bb      	strh	r3, [r7, #4]
 8000e5c:	88bb      	ldrh	r3, [r7, #4]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d1e8      	bne.n	8000e34 <ST7735_FillRectangle+0xa0>
        }
    }

    ST7735_Unselect();
 8000e62:	f7ff fdd5 	bl	8000a10 <ST7735_Unselect>
 8000e66:	e000      	b.n	8000e6a <ST7735_FillRectangle+0xd6>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000e68:	bf00      	nop
}
 8000e6a:	3714      	adds	r7, #20
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd90      	pop	{r4, r7, pc}
 8000e70:	40010800 	.word	0x40010800
 8000e74:	20000090 	.word	0x20000090

08000e78 <ST7735_FillScreen>:

    free(line);
    ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af02      	add	r7, sp, #8
 8000e7e:	4603      	mov	r3, r0
 8000e80:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8000e82:	88fb      	ldrh	r3, [r7, #6]
 8000e84:	9300      	str	r3, [sp, #0]
 8000e86:	2380      	movs	r3, #128	; 0x80
 8000e88:	2280      	movs	r2, #128	; 0x80
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	f7ff ff81 	bl	8000d94 <ST7735_FillRectangle>
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ea2:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <HAL_MspInit+0x5c>)
 8000ea4:	699b      	ldr	r3, [r3, #24]
 8000ea6:	4a14      	ldr	r2, [pc, #80]	; (8000ef8 <HAL_MspInit+0x5c>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	6193      	str	r3, [r2, #24]
 8000eae:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <HAL_MspInit+0x5c>)
 8000eb0:	699b      	ldr	r3, [r3, #24]
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	60bb      	str	r3, [r7, #8]
 8000eb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eba:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <HAL_MspInit+0x5c>)
 8000ebc:	69db      	ldr	r3, [r3, #28]
 8000ebe:	4a0e      	ldr	r2, [pc, #56]	; (8000ef8 <HAL_MspInit+0x5c>)
 8000ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec4:	61d3      	str	r3, [r2, #28]
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <HAL_MspInit+0x5c>)
 8000ec8:	69db      	ldr	r3, [r3, #28]
 8000eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ed2:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <HAL_MspInit+0x60>)
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	4a04      	ldr	r2, [pc, #16]	; (8000efc <HAL_MspInit+0x60>)
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	40010000 	.word	0x40010000

08000f00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b088      	sub	sp, #32
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 0310 	add.w	r3, r7, #16
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a15      	ldr	r2, [pc, #84]	; (8000f70 <HAL_SPI_MspInit+0x70>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d123      	bne.n	8000f68 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f20:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <HAL_SPI_MspInit+0x74>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	4a13      	ldr	r2, [pc, #76]	; (8000f74 <HAL_SPI_MspInit+0x74>)
 8000f26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f2a:	6193      	str	r3, [r2, #24]
 8000f2c:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <HAL_SPI_MspInit+0x74>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f38:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <HAL_SPI_MspInit+0x74>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	4a0d      	ldr	r2, [pc, #52]	; (8000f74 <HAL_SPI_MspInit+0x74>)
 8000f3e:	f043 0304 	orr.w	r3, r3, #4
 8000f42:	6193      	str	r3, [r2, #24]
 8000f44:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <HAL_SPI_MspInit+0x74>)
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	f003 0304 	and.w	r3, r3, #4
 8000f4c:	60bb      	str	r3, [r7, #8]
 8000f4e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MOSI_Pin;
 8000f50:	23a0      	movs	r3, #160	; 0xa0
 8000f52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f54:	2302      	movs	r3, #2
 8000f56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5c:	f107 0310 	add.w	r3, r7, #16
 8000f60:	4619      	mov	r1, r3
 8000f62:	4805      	ldr	r0, [pc, #20]	; (8000f78 <HAL_SPI_MspInit+0x78>)
 8000f64:	f000 fc06 	bl	8001774 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f68:	bf00      	nop
 8000f6a:	3720      	adds	r7, #32
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40013000 	.word	0x40013000
 8000f74:	40021000 	.word	0x40021000
 8000f78:	40010800 	.word	0x40010800

08000f7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a11      	ldr	r2, [pc, #68]	; (8000fd0 <HAL_TIM_Base_MspInit+0x54>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d11b      	bne.n	8000fc6 <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f8e:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <HAL_TIM_Base_MspInit+0x58>)
 8000f90:	699b      	ldr	r3, [r3, #24]
 8000f92:	4a10      	ldr	r2, [pc, #64]	; (8000fd4 <HAL_TIM_Base_MspInit+0x58>)
 8000f94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f98:	6193      	str	r3, [r2, #24]
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <HAL_TIM_Base_MspInit+0x58>)
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2100      	movs	r1, #0
 8000faa:	2018      	movs	r0, #24
 8000fac:	f000 faf9 	bl	80015a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8000fb0:	2018      	movs	r0, #24
 8000fb2:	f000 fb12 	bl	80015da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2100      	movs	r1, #0
 8000fba:	2019      	movs	r0, #25
 8000fbc:	f000 faf1 	bl	80015a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000fc0:	2019      	movs	r0, #25
 8000fc2:	f000 fb0a 	bl	80015da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40012c00 	.word	0x40012c00
 8000fd4:	40021000 	.word	0x40021000

08000fd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08a      	sub	sp, #40	; 0x28
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 0318 	add.w	r3, r7, #24
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a3b      	ldr	r2, [pc, #236]	; (80010e0 <HAL_UART_MspInit+0x108>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d132      	bne.n	800105e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ff8:	4b3a      	ldr	r3, [pc, #232]	; (80010e4 <HAL_UART_MspInit+0x10c>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	4a39      	ldr	r2, [pc, #228]	; (80010e4 <HAL_UART_MspInit+0x10c>)
 8000ffe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001002:	6193      	str	r3, [r2, #24]
 8001004:	4b37      	ldr	r3, [pc, #220]	; (80010e4 <HAL_UART_MspInit+0x10c>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800100c:	617b      	str	r3, [r7, #20]
 800100e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001010:	4b34      	ldr	r3, [pc, #208]	; (80010e4 <HAL_UART_MspInit+0x10c>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	4a33      	ldr	r2, [pc, #204]	; (80010e4 <HAL_UART_MspInit+0x10c>)
 8001016:	f043 0304 	orr.w	r3, r3, #4
 800101a:	6193      	str	r3, [r2, #24]
 800101c:	4b31      	ldr	r3, [pc, #196]	; (80010e4 <HAL_UART_MspInit+0x10c>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	f003 0304 	and.w	r3, r3, #4
 8001024:	613b      	str	r3, [r7, #16]
 8001026:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001028:	f44f 7300 	mov.w	r3, #512	; 0x200
 800102c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102e:	2302      	movs	r3, #2
 8001030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001032:	2303      	movs	r3, #3
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001036:	f107 0318 	add.w	r3, r7, #24
 800103a:	4619      	mov	r1, r3
 800103c:	482a      	ldr	r0, [pc, #168]	; (80010e8 <HAL_UART_MspInit+0x110>)
 800103e:	f000 fb99 	bl	8001774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001042:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001046:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001048:	2300      	movs	r3, #0
 800104a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001050:	f107 0318 	add.w	r3, r7, #24
 8001054:	4619      	mov	r1, r3
 8001056:	4824      	ldr	r0, [pc, #144]	; (80010e8 <HAL_UART_MspInit+0x110>)
 8001058:	f000 fb8c 	bl	8001774 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800105c:	e03c      	b.n	80010d8 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a22      	ldr	r2, [pc, #136]	; (80010ec <HAL_UART_MspInit+0x114>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d137      	bne.n	80010d8 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001068:	4b1e      	ldr	r3, [pc, #120]	; (80010e4 <HAL_UART_MspInit+0x10c>)
 800106a:	69db      	ldr	r3, [r3, #28]
 800106c:	4a1d      	ldr	r2, [pc, #116]	; (80010e4 <HAL_UART_MspInit+0x10c>)
 800106e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001072:	61d3      	str	r3, [r2, #28]
 8001074:	4b1b      	ldr	r3, [pc, #108]	; (80010e4 <HAL_UART_MspInit+0x10c>)
 8001076:	69db      	ldr	r3, [r3, #28]
 8001078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001080:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <HAL_UART_MspInit+0x10c>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	4a17      	ldr	r2, [pc, #92]	; (80010e4 <HAL_UART_MspInit+0x10c>)
 8001086:	f043 0304 	orr.w	r3, r3, #4
 800108a:	6193      	str	r3, [r2, #24]
 800108c:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <HAL_UART_MspInit+0x10c>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	f003 0304 	and.w	r3, r3, #4
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001098:	2304      	movs	r3, #4
 800109a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109c:	2302      	movs	r3, #2
 800109e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010a0:	2303      	movs	r3, #3
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a4:	f107 0318 	add.w	r3, r7, #24
 80010a8:	4619      	mov	r1, r3
 80010aa:	480f      	ldr	r0, [pc, #60]	; (80010e8 <HAL_UART_MspInit+0x110>)
 80010ac:	f000 fb62 	bl	8001774 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010b0:	2308      	movs	r3, #8
 80010b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010bc:	f107 0318 	add.w	r3, r7, #24
 80010c0:	4619      	mov	r1, r3
 80010c2:	4809      	ldr	r0, [pc, #36]	; (80010e8 <HAL_UART_MspInit+0x110>)
 80010c4:	f000 fb56 	bl	8001774 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80010c8:	2200      	movs	r2, #0
 80010ca:	2100      	movs	r1, #0
 80010cc:	2026      	movs	r0, #38	; 0x26
 80010ce:	f000 fa68 	bl	80015a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010d2:	2026      	movs	r0, #38	; 0x26
 80010d4:	f000 fa81 	bl	80015da <HAL_NVIC_EnableIRQ>
}
 80010d8:	bf00      	nop
 80010da:	3728      	adds	r7, #40	; 0x28
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40013800 	.word	0x40013800
 80010e4:	40021000 	.word	0x40021000
 80010e8:	40010800 	.word	0x40010800
 80010ec:	40004400 	.word	0x40004400

080010f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <NMI_Handler+0x4>

080010f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010fa:	e7fe      	b.n	80010fa <HardFault_Handler+0x4>

080010fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001100:	e7fe      	b.n	8001100 <MemManage_Handler+0x4>

08001102 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001106:	e7fe      	b.n	8001106 <BusFault_Handler+0x4>

08001108 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800110c:	e7fe      	b.n	800110c <UsageFault_Handler+0x4>

0800110e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr

0800111a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr

08001126 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	46bd      	mov	sp, r7
 800112e:	bc80      	pop	{r7}
 8001130:	4770      	bx	lr

08001132 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001136:	f000 f91d 	bl	8001374 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}

0800113e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S00_Pin);
 8001142:	2001      	movs	r0, #1
 8001144:	f000 fccc 	bl	8001ae0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}

0800114c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S01_Pin);
 8001150:	2002      	movs	r0, #2
 8001152:	f000 fcc5 	bl	8001ae0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}

0800115a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S02_Pin);
 800115e:	2004      	movs	r0, #4
 8001160:	f000 fcbe 	bl	8001ae0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}

08001168 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S03_Pin);
 800116c:	2008      	movs	r0, #8
 800116e:	f000 fcb7 	bl	8001ae0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}

08001176 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S04_Pin);
 800117a:	2010      	movs	r0, #16
 800117c:	f000 fcb0 	bl	8001ae0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}

08001184 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S05_Pin);
 8001188:	2020      	movs	r0, #32
 800118a:	f000 fca9 	bl	8001ae0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S06_Pin);
 800118e:	2040      	movs	r0, #64	; 0x40
 8001190:	f000 fca6 	bl	8001ae0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S07_Pin);
 8001194:	2080      	movs	r0, #128	; 0x80
 8001196:	f000 fca3 	bl	8001ae0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S08_Pin);
 800119a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800119e:	f000 fc9f 	bl	8001ae0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S09_Pin);
 80011a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011a6:	f000 fc9b 	bl	8001ae0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011b4:	4802      	ldr	r0, [pc, #8]	; (80011c0 <TIM1_BRK_IRQHandler+0x10>)
 80011b6:	f001 fbcb 	bl	8002950 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	200000e8 	.word	0x200000e8

080011c4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011c8:	4802      	ldr	r0, [pc, #8]	; (80011d4 <TIM1_UP_IRQHandler+0x10>)
 80011ca:	f001 fbc1 	bl	8002950 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200000e8 	.word	0x200000e8

080011d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011dc:	4802      	ldr	r0, [pc, #8]	; (80011e8 <USART2_IRQHandler+0x10>)
 80011de:	f001 ffe7 	bl	80031b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000178 	.word	0x20000178

080011ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S10_Pin);
 80011f0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80011f4:	f000 fc74 	bl	8001ae0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S11_Pin);
 80011f8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80011fc:	f000 fc70 	bl	8001ae0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S12_Pin);
 8001200:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001204:	f000 fc6c 	bl	8001ae0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S13_Pin);
 8001208:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800120c:	f000 fc68 	bl	8001ae0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S14_Pin);
 8001210:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001214:	f000 fc64 	bl	8001ae0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S15_Pin);
 8001218:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800121c:	f000 fc60 	bl	8001ae0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}

08001224 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800122c:	4a14      	ldr	r2, [pc, #80]	; (8001280 <_sbrk+0x5c>)
 800122e:	4b15      	ldr	r3, [pc, #84]	; (8001284 <_sbrk+0x60>)
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001238:	4b13      	ldr	r3, [pc, #76]	; (8001288 <_sbrk+0x64>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d102      	bne.n	8001246 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001240:	4b11      	ldr	r3, [pc, #68]	; (8001288 <_sbrk+0x64>)
 8001242:	4a12      	ldr	r2, [pc, #72]	; (800128c <_sbrk+0x68>)
 8001244:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001246:	4b10      	ldr	r3, [pc, #64]	; (8001288 <_sbrk+0x64>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4413      	add	r3, r2
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	429a      	cmp	r2, r3
 8001252:	d207      	bcs.n	8001264 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001254:	f002 fde0 	bl	8003e18 <__errno>
 8001258:	4603      	mov	r3, r0
 800125a:	220c      	movs	r2, #12
 800125c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800125e:	f04f 33ff 	mov.w	r3, #4294967295
 8001262:	e009      	b.n	8001278 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001264:	4b08      	ldr	r3, [pc, #32]	; (8001288 <_sbrk+0x64>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800126a:	4b07      	ldr	r3, [pc, #28]	; (8001288 <_sbrk+0x64>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4413      	add	r3, r2
 8001272:	4a05      	ldr	r2, [pc, #20]	; (8001288 <_sbrk+0x64>)
 8001274:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001276:	68fb      	ldr	r3, [r7, #12]
}
 8001278:	4618      	mov	r0, r3
 800127a:	3718      	adds	r7, #24
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20005000 	.word	0x20005000
 8001284:	00000400 	.word	0x00000400
 8001288:	20000620 	.word	0x20000620
 800128c:	20000770 	.word	0x20000770

08001290 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr

0800129c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800129c:	f7ff fff8 	bl	8001290 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012a0:	480b      	ldr	r0, [pc, #44]	; (80012d0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80012a2:	490c      	ldr	r1, [pc, #48]	; (80012d4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80012a4:	4a0c      	ldr	r2, [pc, #48]	; (80012d8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80012a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a8:	e002      	b.n	80012b0 <LoopCopyDataInit>

080012aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ae:	3304      	adds	r3, #4

080012b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b4:	d3f9      	bcc.n	80012aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012b6:	4a09      	ldr	r2, [pc, #36]	; (80012dc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80012b8:	4c09      	ldr	r4, [pc, #36]	; (80012e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012bc:	e001      	b.n	80012c2 <LoopFillZerobss>

080012be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c0:	3204      	adds	r2, #4

080012c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c4:	d3fb      	bcc.n	80012be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012c6:	f002 fdad 	bl	8003e24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012ca:	f7ff f8db 	bl	8000484 <main>
  bx lr
 80012ce:	4770      	bx	lr
  ldr r0, =_sdata
 80012d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012d4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80012d8:	08005b88 	.word	0x08005b88
  ldr r2, =_sbss
 80012dc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80012e0:	20000770 	.word	0x20000770

080012e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012e4:	e7fe      	b.n	80012e4 <ADC1_2_IRQHandler>
	...

080012e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012ec:	4b08      	ldr	r3, [pc, #32]	; (8001310 <HAL_Init+0x28>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a07      	ldr	r2, [pc, #28]	; (8001310 <HAL_Init+0x28>)
 80012f2:	f043 0310 	orr.w	r3, r3, #16
 80012f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f8:	2003      	movs	r0, #3
 80012fa:	f000 f947 	bl	800158c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012fe:	200f      	movs	r0, #15
 8001300:	f000 f808 	bl	8001314 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001304:	f7ff fdca 	bl	8000e9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40022000 	.word	0x40022000

08001314 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800131c:	4b12      	ldr	r3, [pc, #72]	; (8001368 <HAL_InitTick+0x54>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	4b12      	ldr	r3, [pc, #72]	; (800136c <HAL_InitTick+0x58>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	4619      	mov	r1, r3
 8001326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132a:	fbb3 f3f1 	udiv	r3, r3, r1
 800132e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001332:	4618      	mov	r0, r3
 8001334:	f000 f95f 	bl	80015f6 <HAL_SYSTICK_Config>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e00e      	b.n	8001360 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2b0f      	cmp	r3, #15
 8001346:	d80a      	bhi.n	800135e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001348:	2200      	movs	r2, #0
 800134a:	6879      	ldr	r1, [r7, #4]
 800134c:	f04f 30ff 	mov.w	r0, #4294967295
 8001350:	f000 f927 	bl	80015a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001354:	4a06      	ldr	r2, [pc, #24]	; (8001370 <HAL_InitTick+0x5c>)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800135a:	2300      	movs	r3, #0
 800135c:	e000      	b.n	8001360 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
}
 8001360:	4618      	mov	r0, r3
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20000018 	.word	0x20000018
 800136c:	20000020 	.word	0x20000020
 8001370:	2000001c 	.word	0x2000001c

08001374 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001378:	4b05      	ldr	r3, [pc, #20]	; (8001390 <HAL_IncTick+0x1c>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	461a      	mov	r2, r3
 800137e:	4b05      	ldr	r3, [pc, #20]	; (8001394 <HAL_IncTick+0x20>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4413      	add	r3, r2
 8001384:	4a03      	ldr	r2, [pc, #12]	; (8001394 <HAL_IncTick+0x20>)
 8001386:	6013      	str	r3, [r2, #0]
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr
 8001390:	20000020 	.word	0x20000020
 8001394:	20000624 	.word	0x20000624

08001398 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  return uwTick;
 800139c:	4b02      	ldr	r3, [pc, #8]	; (80013a8 <HAL_GetTick+0x10>)
 800139e:	681b      	ldr	r3, [r3, #0]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr
 80013a8:	20000624 	.word	0x20000624

080013ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013b4:	f7ff fff0 	bl	8001398 <HAL_GetTick>
 80013b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c4:	d005      	beq.n	80013d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013c6:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <HAL_Delay+0x44>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	461a      	mov	r2, r3
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4413      	add	r3, r2
 80013d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013d2:	bf00      	nop
 80013d4:	f7ff ffe0 	bl	8001398 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d8f7      	bhi.n	80013d4 <HAL_Delay+0x28>
  {
  }
}
 80013e4:	bf00      	nop
 80013e6:	bf00      	nop
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000020 	.word	0x20000020

080013f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001404:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <__NVIC_SetPriorityGrouping+0x44>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800140a:	68ba      	ldr	r2, [r7, #8]
 800140c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001410:	4013      	ands	r3, r2
 8001412:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800141c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001426:	4a04      	ldr	r2, [pc, #16]	; (8001438 <__NVIC_SetPriorityGrouping+0x44>)
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	60d3      	str	r3, [r2, #12]
}
 800142c:	bf00      	nop
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	bc80      	pop	{r7}
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001440:	4b04      	ldr	r3, [pc, #16]	; (8001454 <__NVIC_GetPriorityGrouping+0x18>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	0a1b      	lsrs	r3, r3, #8
 8001446:	f003 0307 	and.w	r3, r3, #7
}
 800144a:	4618      	mov	r0, r3
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001466:	2b00      	cmp	r3, #0
 8001468:	db0b      	blt.n	8001482 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	f003 021f 	and.w	r2, r3, #31
 8001470:	4906      	ldr	r1, [pc, #24]	; (800148c <__NVIC_EnableIRQ+0x34>)
 8001472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001476:	095b      	lsrs	r3, r3, #5
 8001478:	2001      	movs	r0, #1
 800147a:	fa00 f202 	lsl.w	r2, r0, r2
 800147e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr
 800148c:	e000e100 	.word	0xe000e100

08001490 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	6039      	str	r1, [r7, #0]
 800149a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800149c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	db0a      	blt.n	80014ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	b2da      	uxtb	r2, r3
 80014a8:	490c      	ldr	r1, [pc, #48]	; (80014dc <__NVIC_SetPriority+0x4c>)
 80014aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ae:	0112      	lsls	r2, r2, #4
 80014b0:	b2d2      	uxtb	r2, r2
 80014b2:	440b      	add	r3, r1
 80014b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014b8:	e00a      	b.n	80014d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	4908      	ldr	r1, [pc, #32]	; (80014e0 <__NVIC_SetPriority+0x50>)
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	f003 030f 	and.w	r3, r3, #15
 80014c6:	3b04      	subs	r3, #4
 80014c8:	0112      	lsls	r2, r2, #4
 80014ca:	b2d2      	uxtb	r2, r2
 80014cc:	440b      	add	r3, r1
 80014ce:	761a      	strb	r2, [r3, #24]
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	e000e100 	.word	0xe000e100
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b089      	sub	sp, #36	; 0x24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	f1c3 0307 	rsb	r3, r3, #7
 80014fe:	2b04      	cmp	r3, #4
 8001500:	bf28      	it	cs
 8001502:	2304      	movcs	r3, #4
 8001504:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3304      	adds	r3, #4
 800150a:	2b06      	cmp	r3, #6
 800150c:	d902      	bls.n	8001514 <NVIC_EncodePriority+0x30>
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	3b03      	subs	r3, #3
 8001512:	e000      	b.n	8001516 <NVIC_EncodePriority+0x32>
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001518:	f04f 32ff 	mov.w	r2, #4294967295
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43da      	mvns	r2, r3
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	401a      	ands	r2, r3
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800152c:	f04f 31ff 	mov.w	r1, #4294967295
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	fa01 f303 	lsl.w	r3, r1, r3
 8001536:	43d9      	mvns	r1, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800153c:	4313      	orrs	r3, r2
         );
}
 800153e:	4618      	mov	r0, r3
 8001540:	3724      	adds	r7, #36	; 0x24
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr

08001548 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3b01      	subs	r3, #1
 8001554:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001558:	d301      	bcc.n	800155e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800155a:	2301      	movs	r3, #1
 800155c:	e00f      	b.n	800157e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800155e:	4a0a      	ldr	r2, [pc, #40]	; (8001588 <SysTick_Config+0x40>)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3b01      	subs	r3, #1
 8001564:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001566:	210f      	movs	r1, #15
 8001568:	f04f 30ff 	mov.w	r0, #4294967295
 800156c:	f7ff ff90 	bl	8001490 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001570:	4b05      	ldr	r3, [pc, #20]	; (8001588 <SysTick_Config+0x40>)
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001576:	4b04      	ldr	r3, [pc, #16]	; (8001588 <SysTick_Config+0x40>)
 8001578:	2207      	movs	r2, #7
 800157a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	e000e010 	.word	0xe000e010

0800158c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f7ff ff2d 	bl	80013f4 <__NVIC_SetPriorityGrouping>
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b086      	sub	sp, #24
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	4603      	mov	r3, r0
 80015aa:	60b9      	str	r1, [r7, #8]
 80015ac:	607a      	str	r2, [r7, #4]
 80015ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015b4:	f7ff ff42 	bl	800143c <__NVIC_GetPriorityGrouping>
 80015b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	68b9      	ldr	r1, [r7, #8]
 80015be:	6978      	ldr	r0, [r7, #20]
 80015c0:	f7ff ff90 	bl	80014e4 <NVIC_EncodePriority>
 80015c4:	4602      	mov	r2, r0
 80015c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ca:	4611      	mov	r1, r2
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff ff5f 	bl	8001490 <__NVIC_SetPriority>
}
 80015d2:	bf00      	nop
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b082      	sub	sp, #8
 80015de:	af00      	add	r7, sp, #0
 80015e0:	4603      	mov	r3, r0
 80015e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ff35 	bl	8001458 <__NVIC_EnableIRQ>
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff ffa2 	bl	8001548 <SysTick_Config>
 8001604:	4603      	mov	r3, r0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800160e:	b480      	push	{r7}
 8001610:	b085      	sub	sp, #20
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001616:	2300      	movs	r3, #0
 8001618:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d008      	beq.n	8001638 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2204      	movs	r2, #4
 800162a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e020      	b.n	800167a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f022 020e 	bic.w	r2, r2, #14
 8001646:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f022 0201 	bic.w	r2, r2, #1
 8001656:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001660:	2101      	movs	r1, #1
 8001662:	fa01 f202 	lsl.w	r2, r1, r2
 8001666:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2201      	movs	r2, #1
 800166c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001678:	7bfb      	ldrb	r3, [r7, #15]
}
 800167a:	4618      	mov	r0, r3
 800167c:	3714      	adds	r7, #20
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr

08001684 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800168c:	2300      	movs	r3, #0
 800168e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001696:	b2db      	uxtb	r3, r3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d005      	beq.n	80016a8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2204      	movs	r2, #4
 80016a0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	73fb      	strb	r3, [r7, #15]
 80016a6:	e051      	b.n	800174c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f022 020e 	bic.w	r2, r2, #14
 80016b6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f022 0201 	bic.w	r2, r2, #1
 80016c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a22      	ldr	r2, [pc, #136]	; (8001758 <HAL_DMA_Abort_IT+0xd4>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d029      	beq.n	8001726 <HAL_DMA_Abort_IT+0xa2>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a21      	ldr	r2, [pc, #132]	; (800175c <HAL_DMA_Abort_IT+0xd8>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d022      	beq.n	8001722 <HAL_DMA_Abort_IT+0x9e>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a1f      	ldr	r2, [pc, #124]	; (8001760 <HAL_DMA_Abort_IT+0xdc>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d01a      	beq.n	800171c <HAL_DMA_Abort_IT+0x98>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a1e      	ldr	r2, [pc, #120]	; (8001764 <HAL_DMA_Abort_IT+0xe0>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d012      	beq.n	8001716 <HAL_DMA_Abort_IT+0x92>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a1c      	ldr	r2, [pc, #112]	; (8001768 <HAL_DMA_Abort_IT+0xe4>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d00a      	beq.n	8001710 <HAL_DMA_Abort_IT+0x8c>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a1b      	ldr	r2, [pc, #108]	; (800176c <HAL_DMA_Abort_IT+0xe8>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d102      	bne.n	800170a <HAL_DMA_Abort_IT+0x86>
 8001704:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001708:	e00e      	b.n	8001728 <HAL_DMA_Abort_IT+0xa4>
 800170a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800170e:	e00b      	b.n	8001728 <HAL_DMA_Abort_IT+0xa4>
 8001710:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001714:	e008      	b.n	8001728 <HAL_DMA_Abort_IT+0xa4>
 8001716:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800171a:	e005      	b.n	8001728 <HAL_DMA_Abort_IT+0xa4>
 800171c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001720:	e002      	b.n	8001728 <HAL_DMA_Abort_IT+0xa4>
 8001722:	2310      	movs	r3, #16
 8001724:	e000      	b.n	8001728 <HAL_DMA_Abort_IT+0xa4>
 8001726:	2301      	movs	r3, #1
 8001728:	4a11      	ldr	r2, [pc, #68]	; (8001770 <HAL_DMA_Abort_IT+0xec>)
 800172a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2201      	movs	r2, #1
 8001730:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001740:	2b00      	cmp	r3, #0
 8001742:	d003      	beq.n	800174c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	4798      	blx	r3
    } 
  }
  return status;
 800174c:	7bfb      	ldrb	r3, [r7, #15]
}
 800174e:	4618      	mov	r0, r3
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40020008 	.word	0x40020008
 800175c:	4002001c 	.word	0x4002001c
 8001760:	40020030 	.word	0x40020030
 8001764:	40020044 	.word	0x40020044
 8001768:	40020058 	.word	0x40020058
 800176c:	4002006c 	.word	0x4002006c
 8001770:	40020000 	.word	0x40020000

08001774 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001774:	b480      	push	{r7}
 8001776:	b08b      	sub	sp, #44	; 0x2c
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800177e:	2300      	movs	r3, #0
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001782:	2300      	movs	r3, #0
 8001784:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001786:	e169      	b.n	8001a5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001788:	2201      	movs	r2, #1
 800178a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	69fa      	ldr	r2, [r7, #28]
 8001798:	4013      	ands	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	f040 8158 	bne.w	8001a56 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	4a9a      	ldr	r2, [pc, #616]	; (8001a14 <HAL_GPIO_Init+0x2a0>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d05e      	beq.n	800186e <HAL_GPIO_Init+0xfa>
 80017b0:	4a98      	ldr	r2, [pc, #608]	; (8001a14 <HAL_GPIO_Init+0x2a0>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d875      	bhi.n	80018a2 <HAL_GPIO_Init+0x12e>
 80017b6:	4a98      	ldr	r2, [pc, #608]	; (8001a18 <HAL_GPIO_Init+0x2a4>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d058      	beq.n	800186e <HAL_GPIO_Init+0xfa>
 80017bc:	4a96      	ldr	r2, [pc, #600]	; (8001a18 <HAL_GPIO_Init+0x2a4>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d86f      	bhi.n	80018a2 <HAL_GPIO_Init+0x12e>
 80017c2:	4a96      	ldr	r2, [pc, #600]	; (8001a1c <HAL_GPIO_Init+0x2a8>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d052      	beq.n	800186e <HAL_GPIO_Init+0xfa>
 80017c8:	4a94      	ldr	r2, [pc, #592]	; (8001a1c <HAL_GPIO_Init+0x2a8>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d869      	bhi.n	80018a2 <HAL_GPIO_Init+0x12e>
 80017ce:	4a94      	ldr	r2, [pc, #592]	; (8001a20 <HAL_GPIO_Init+0x2ac>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d04c      	beq.n	800186e <HAL_GPIO_Init+0xfa>
 80017d4:	4a92      	ldr	r2, [pc, #584]	; (8001a20 <HAL_GPIO_Init+0x2ac>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d863      	bhi.n	80018a2 <HAL_GPIO_Init+0x12e>
 80017da:	4a92      	ldr	r2, [pc, #584]	; (8001a24 <HAL_GPIO_Init+0x2b0>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d046      	beq.n	800186e <HAL_GPIO_Init+0xfa>
 80017e0:	4a90      	ldr	r2, [pc, #576]	; (8001a24 <HAL_GPIO_Init+0x2b0>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d85d      	bhi.n	80018a2 <HAL_GPIO_Init+0x12e>
 80017e6:	2b12      	cmp	r3, #18
 80017e8:	d82a      	bhi.n	8001840 <HAL_GPIO_Init+0xcc>
 80017ea:	2b12      	cmp	r3, #18
 80017ec:	d859      	bhi.n	80018a2 <HAL_GPIO_Init+0x12e>
 80017ee:	a201      	add	r2, pc, #4	; (adr r2, 80017f4 <HAL_GPIO_Init+0x80>)
 80017f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f4:	0800186f 	.word	0x0800186f
 80017f8:	08001849 	.word	0x08001849
 80017fc:	0800185b 	.word	0x0800185b
 8001800:	0800189d 	.word	0x0800189d
 8001804:	080018a3 	.word	0x080018a3
 8001808:	080018a3 	.word	0x080018a3
 800180c:	080018a3 	.word	0x080018a3
 8001810:	080018a3 	.word	0x080018a3
 8001814:	080018a3 	.word	0x080018a3
 8001818:	080018a3 	.word	0x080018a3
 800181c:	080018a3 	.word	0x080018a3
 8001820:	080018a3 	.word	0x080018a3
 8001824:	080018a3 	.word	0x080018a3
 8001828:	080018a3 	.word	0x080018a3
 800182c:	080018a3 	.word	0x080018a3
 8001830:	080018a3 	.word	0x080018a3
 8001834:	080018a3 	.word	0x080018a3
 8001838:	08001851 	.word	0x08001851
 800183c:	08001865 	.word	0x08001865
 8001840:	4a79      	ldr	r2, [pc, #484]	; (8001a28 <HAL_GPIO_Init+0x2b4>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d013      	beq.n	800186e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001846:	e02c      	b.n	80018a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	623b      	str	r3, [r7, #32]
          break;
 800184e:	e029      	b.n	80018a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	3304      	adds	r3, #4
 8001856:	623b      	str	r3, [r7, #32]
          break;
 8001858:	e024      	b.n	80018a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	3308      	adds	r3, #8
 8001860:	623b      	str	r3, [r7, #32]
          break;
 8001862:	e01f      	b.n	80018a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	330c      	adds	r3, #12
 800186a:	623b      	str	r3, [r7, #32]
          break;
 800186c:	e01a      	b.n	80018a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d102      	bne.n	800187c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001876:	2304      	movs	r3, #4
 8001878:	623b      	str	r3, [r7, #32]
          break;
 800187a:	e013      	b.n	80018a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d105      	bne.n	8001890 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001884:	2308      	movs	r3, #8
 8001886:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	69fa      	ldr	r2, [r7, #28]
 800188c:	611a      	str	r2, [r3, #16]
          break;
 800188e:	e009      	b.n	80018a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001890:	2308      	movs	r3, #8
 8001892:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	69fa      	ldr	r2, [r7, #28]
 8001898:	615a      	str	r2, [r3, #20]
          break;
 800189a:	e003      	b.n	80018a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800189c:	2300      	movs	r3, #0
 800189e:	623b      	str	r3, [r7, #32]
          break;
 80018a0:	e000      	b.n	80018a4 <HAL_GPIO_Init+0x130>
          break;
 80018a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	2bff      	cmp	r3, #255	; 0xff
 80018a8:	d801      	bhi.n	80018ae <HAL_GPIO_Init+0x13a>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	e001      	b.n	80018b2 <HAL_GPIO_Init+0x13e>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	3304      	adds	r3, #4
 80018b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	2bff      	cmp	r3, #255	; 0xff
 80018b8:	d802      	bhi.n	80018c0 <HAL_GPIO_Init+0x14c>
 80018ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	e002      	b.n	80018c6 <HAL_GPIO_Init+0x152>
 80018c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c2:	3b08      	subs	r3, #8
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	210f      	movs	r1, #15
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	fa01 f303 	lsl.w	r3, r1, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	401a      	ands	r2, r3
 80018d8:	6a39      	ldr	r1, [r7, #32]
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	fa01 f303 	lsl.w	r3, r1, r3
 80018e0:	431a      	orrs	r2, r3
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f000 80b1 	beq.w	8001a56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018f4:	4b4d      	ldr	r3, [pc, #308]	; (8001a2c <HAL_GPIO_Init+0x2b8>)
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	4a4c      	ldr	r2, [pc, #304]	; (8001a2c <HAL_GPIO_Init+0x2b8>)
 80018fa:	f043 0301 	orr.w	r3, r3, #1
 80018fe:	6193      	str	r3, [r2, #24]
 8001900:	4b4a      	ldr	r3, [pc, #296]	; (8001a2c <HAL_GPIO_Init+0x2b8>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800190c:	4a48      	ldr	r2, [pc, #288]	; (8001a30 <HAL_GPIO_Init+0x2bc>)
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	089b      	lsrs	r3, r3, #2
 8001912:	3302      	adds	r3, #2
 8001914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001918:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191c:	f003 0303 	and.w	r3, r3, #3
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	220f      	movs	r2, #15
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	4013      	ands	r3, r2
 800192e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a40      	ldr	r2, [pc, #256]	; (8001a34 <HAL_GPIO_Init+0x2c0>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d013      	beq.n	8001960 <HAL_GPIO_Init+0x1ec>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a3f      	ldr	r2, [pc, #252]	; (8001a38 <HAL_GPIO_Init+0x2c4>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d00d      	beq.n	800195c <HAL_GPIO_Init+0x1e8>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a3e      	ldr	r2, [pc, #248]	; (8001a3c <HAL_GPIO_Init+0x2c8>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d007      	beq.n	8001958 <HAL_GPIO_Init+0x1e4>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a3d      	ldr	r2, [pc, #244]	; (8001a40 <HAL_GPIO_Init+0x2cc>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d101      	bne.n	8001954 <HAL_GPIO_Init+0x1e0>
 8001950:	2303      	movs	r3, #3
 8001952:	e006      	b.n	8001962 <HAL_GPIO_Init+0x1ee>
 8001954:	2304      	movs	r3, #4
 8001956:	e004      	b.n	8001962 <HAL_GPIO_Init+0x1ee>
 8001958:	2302      	movs	r3, #2
 800195a:	e002      	b.n	8001962 <HAL_GPIO_Init+0x1ee>
 800195c:	2301      	movs	r3, #1
 800195e:	e000      	b.n	8001962 <HAL_GPIO_Init+0x1ee>
 8001960:	2300      	movs	r3, #0
 8001962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001964:	f002 0203 	and.w	r2, r2, #3
 8001968:	0092      	lsls	r2, r2, #2
 800196a:	4093      	lsls	r3, r2
 800196c:	68fa      	ldr	r2, [r7, #12]
 800196e:	4313      	orrs	r3, r2
 8001970:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001972:	492f      	ldr	r1, [pc, #188]	; (8001a30 <HAL_GPIO_Init+0x2bc>)
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	089b      	lsrs	r3, r3, #2
 8001978:	3302      	adds	r3, #2
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d006      	beq.n	800199a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800198c:	4b2d      	ldr	r3, [pc, #180]	; (8001a44 <HAL_GPIO_Init+0x2d0>)
 800198e:	689a      	ldr	r2, [r3, #8]
 8001990:	492c      	ldr	r1, [pc, #176]	; (8001a44 <HAL_GPIO_Init+0x2d0>)
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	4313      	orrs	r3, r2
 8001996:	608b      	str	r3, [r1, #8]
 8001998:	e006      	b.n	80019a8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800199a:	4b2a      	ldr	r3, [pc, #168]	; (8001a44 <HAL_GPIO_Init+0x2d0>)
 800199c:	689a      	ldr	r2, [r3, #8]
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	43db      	mvns	r3, r3
 80019a2:	4928      	ldr	r1, [pc, #160]	; (8001a44 <HAL_GPIO_Init+0x2d0>)
 80019a4:	4013      	ands	r3, r2
 80019a6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d006      	beq.n	80019c2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019b4:	4b23      	ldr	r3, [pc, #140]	; (8001a44 <HAL_GPIO_Init+0x2d0>)
 80019b6:	68da      	ldr	r2, [r3, #12]
 80019b8:	4922      	ldr	r1, [pc, #136]	; (8001a44 <HAL_GPIO_Init+0x2d0>)
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	4313      	orrs	r3, r2
 80019be:	60cb      	str	r3, [r1, #12]
 80019c0:	e006      	b.n	80019d0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019c2:	4b20      	ldr	r3, [pc, #128]	; (8001a44 <HAL_GPIO_Init+0x2d0>)
 80019c4:	68da      	ldr	r2, [r3, #12]
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	43db      	mvns	r3, r3
 80019ca:	491e      	ldr	r1, [pc, #120]	; (8001a44 <HAL_GPIO_Init+0x2d0>)
 80019cc:	4013      	ands	r3, r2
 80019ce:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d006      	beq.n	80019ea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019dc:	4b19      	ldr	r3, [pc, #100]	; (8001a44 <HAL_GPIO_Init+0x2d0>)
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	4918      	ldr	r1, [pc, #96]	; (8001a44 <HAL_GPIO_Init+0x2d0>)
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	604b      	str	r3, [r1, #4]
 80019e8:	e006      	b.n	80019f8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019ea:	4b16      	ldr	r3, [pc, #88]	; (8001a44 <HAL_GPIO_Init+0x2d0>)
 80019ec:	685a      	ldr	r2, [r3, #4]
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	43db      	mvns	r3, r3
 80019f2:	4914      	ldr	r1, [pc, #80]	; (8001a44 <HAL_GPIO_Init+0x2d0>)
 80019f4:	4013      	ands	r3, r2
 80019f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d021      	beq.n	8001a48 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a04:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <HAL_GPIO_Init+0x2d0>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	490e      	ldr	r1, [pc, #56]	; (8001a44 <HAL_GPIO_Init+0x2d0>)
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	600b      	str	r3, [r1, #0]
 8001a10:	e021      	b.n	8001a56 <HAL_GPIO_Init+0x2e2>
 8001a12:	bf00      	nop
 8001a14:	10320000 	.word	0x10320000
 8001a18:	10310000 	.word	0x10310000
 8001a1c:	10220000 	.word	0x10220000
 8001a20:	10210000 	.word	0x10210000
 8001a24:	10120000 	.word	0x10120000
 8001a28:	10110000 	.word	0x10110000
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	40010000 	.word	0x40010000
 8001a34:	40010800 	.word	0x40010800
 8001a38:	40010c00 	.word	0x40010c00
 8001a3c:	40011000 	.word	0x40011000
 8001a40:	40011400 	.word	0x40011400
 8001a44:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a48:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <HAL_GPIO_Init+0x304>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	4909      	ldr	r1, [pc, #36]	; (8001a78 <HAL_GPIO_Init+0x304>)
 8001a52:	4013      	ands	r3, r2
 8001a54:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	3301      	adds	r3, #1
 8001a5a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a62:	fa22 f303 	lsr.w	r3, r2, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f47f ae8e 	bne.w	8001788 <HAL_GPIO_Init+0x14>
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	bf00      	nop
 8001a70:	372c      	adds	r7, #44	; 0x2c
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr
 8001a78:	40010400 	.word	0x40010400

08001a7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	460b      	mov	r3, r1
 8001a86:	807b      	strh	r3, [r7, #2]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a8c:	787b      	ldrb	r3, [r7, #1]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a92:	887a      	ldrh	r2, [r7, #2]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a98:	e003      	b.n	8001aa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a9a:	887b      	ldrh	r3, [r7, #2]
 8001a9c:	041a      	lsls	r2, r3, #16
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	611a      	str	r2, [r3, #16]
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr

08001aac <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001abe:	887a      	ldrh	r2, [r7, #2]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	041a      	lsls	r2, r3, #16
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	43d9      	mvns	r1, r3
 8001aca:	887b      	ldrh	r3, [r7, #2]
 8001acc:	400b      	ands	r3, r1
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	611a      	str	r2, [r3, #16]
}
 8001ad4:	bf00      	nop
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr
	...

08001ae0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001aea:	4b08      	ldr	r3, [pc, #32]	; (8001b0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001aec:	695a      	ldr	r2, [r3, #20]
 8001aee:	88fb      	ldrh	r3, [r7, #6]
 8001af0:	4013      	ands	r3, r2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d006      	beq.n	8001b04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001af6:	4a05      	ldr	r2, [pc, #20]	; (8001b0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001af8:	88fb      	ldrh	r3, [r7, #6]
 8001afa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001afc:	88fb      	ldrh	r3, [r7, #6]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7fe fb66 	bl	80001d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b04:	bf00      	nop
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40010400 	.word	0x40010400

08001b10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e272      	b.n	8002008 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f000 8087 	beq.w	8001c3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b30:	4b92      	ldr	r3, [pc, #584]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 030c 	and.w	r3, r3, #12
 8001b38:	2b04      	cmp	r3, #4
 8001b3a:	d00c      	beq.n	8001b56 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b3c:	4b8f      	ldr	r3, [pc, #572]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f003 030c 	and.w	r3, r3, #12
 8001b44:	2b08      	cmp	r3, #8
 8001b46:	d112      	bne.n	8001b6e <HAL_RCC_OscConfig+0x5e>
 8001b48:	4b8c      	ldr	r3, [pc, #560]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b54:	d10b      	bne.n	8001b6e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b56:	4b89      	ldr	r3, [pc, #548]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d06c      	beq.n	8001c3c <HAL_RCC_OscConfig+0x12c>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d168      	bne.n	8001c3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e24c      	b.n	8002008 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b76:	d106      	bne.n	8001b86 <HAL_RCC_OscConfig+0x76>
 8001b78:	4b80      	ldr	r3, [pc, #512]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a7f      	ldr	r2, [pc, #508]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001b7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b82:	6013      	str	r3, [r2, #0]
 8001b84:	e02e      	b.n	8001be4 <HAL_RCC_OscConfig+0xd4>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d10c      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x98>
 8001b8e:	4b7b      	ldr	r3, [pc, #492]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a7a      	ldr	r2, [pc, #488]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001b94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	4b78      	ldr	r3, [pc, #480]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a77      	ldr	r2, [pc, #476]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	e01d      	b.n	8001be4 <HAL_RCC_OscConfig+0xd4>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bb0:	d10c      	bne.n	8001bcc <HAL_RCC_OscConfig+0xbc>
 8001bb2:	4b72      	ldr	r3, [pc, #456]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a71      	ldr	r2, [pc, #452]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bbc:	6013      	str	r3, [r2, #0]
 8001bbe:	4b6f      	ldr	r3, [pc, #444]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a6e      	ldr	r2, [pc, #440]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bc8:	6013      	str	r3, [r2, #0]
 8001bca:	e00b      	b.n	8001be4 <HAL_RCC_OscConfig+0xd4>
 8001bcc:	4b6b      	ldr	r3, [pc, #428]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a6a      	ldr	r2, [pc, #424]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001bd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bd6:	6013      	str	r3, [r2, #0]
 8001bd8:	4b68      	ldr	r3, [pc, #416]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a67      	ldr	r2, [pc, #412]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001bde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001be2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d013      	beq.n	8001c14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bec:	f7ff fbd4 	bl	8001398 <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bf4:	f7ff fbd0 	bl	8001398 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b64      	cmp	r3, #100	; 0x64
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e200      	b.n	8002008 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c06:	4b5d      	ldr	r3, [pc, #372]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d0f0      	beq.n	8001bf4 <HAL_RCC_OscConfig+0xe4>
 8001c12:	e014      	b.n	8001c3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c14:	f7ff fbc0 	bl	8001398 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c1c:	f7ff fbbc 	bl	8001398 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b64      	cmp	r3, #100	; 0x64
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e1ec      	b.n	8002008 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c2e:	4b53      	ldr	r3, [pc, #332]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1f0      	bne.n	8001c1c <HAL_RCC_OscConfig+0x10c>
 8001c3a:	e000      	b.n	8001c3e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d063      	beq.n	8001d12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c4a:	4b4c      	ldr	r3, [pc, #304]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f003 030c 	and.w	r3, r3, #12
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d00b      	beq.n	8001c6e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c56:	4b49      	ldr	r3, [pc, #292]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f003 030c 	and.w	r3, r3, #12
 8001c5e:	2b08      	cmp	r3, #8
 8001c60:	d11c      	bne.n	8001c9c <HAL_RCC_OscConfig+0x18c>
 8001c62:	4b46      	ldr	r3, [pc, #280]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d116      	bne.n	8001c9c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c6e:	4b43      	ldr	r3, [pc, #268]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d005      	beq.n	8001c86 <HAL_RCC_OscConfig+0x176>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d001      	beq.n	8001c86 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e1c0      	b.n	8002008 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c86:	4b3d      	ldr	r3, [pc, #244]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	4939      	ldr	r1, [pc, #228]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c9a:	e03a      	b.n	8001d12 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d020      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ca4:	4b36      	ldr	r3, [pc, #216]	; (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001caa:	f7ff fb75 	bl	8001398 <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cb2:	f7ff fb71 	bl	8001398 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e1a1      	b.n	8002008 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc4:	4b2d      	ldr	r3, [pc, #180]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0f0      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd0:	4b2a      	ldr	r3, [pc, #168]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	695b      	ldr	r3, [r3, #20]
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	4927      	ldr	r1, [pc, #156]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	600b      	str	r3, [r1, #0]
 8001ce4:	e015      	b.n	8001d12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ce6:	4b26      	ldr	r3, [pc, #152]	; (8001d80 <HAL_RCC_OscConfig+0x270>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cec:	f7ff fb54 	bl	8001398 <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cf4:	f7ff fb50 	bl	8001398 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e180      	b.n	8002008 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d06:	4b1d      	ldr	r3, [pc, #116]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1f0      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0308 	and.w	r3, r3, #8
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d03a      	beq.n	8001d94 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d019      	beq.n	8001d5a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d26:	4b17      	ldr	r3, [pc, #92]	; (8001d84 <HAL_RCC_OscConfig+0x274>)
 8001d28:	2201      	movs	r2, #1
 8001d2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d2c:	f7ff fb34 	bl	8001398 <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d34:	f7ff fb30 	bl	8001398 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e160      	b.n	8002008 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d46:	4b0d      	ldr	r3, [pc, #52]	; (8001d7c <HAL_RCC_OscConfig+0x26c>)
 8001d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d0f0      	beq.n	8001d34 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d52:	2001      	movs	r0, #1
 8001d54:	f000 face 	bl	80022f4 <RCC_Delay>
 8001d58:	e01c      	b.n	8001d94 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d5a:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <HAL_RCC_OscConfig+0x274>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d60:	f7ff fb1a 	bl	8001398 <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d66:	e00f      	b.n	8001d88 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d68:	f7ff fb16 	bl	8001398 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d908      	bls.n	8001d88 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e146      	b.n	8002008 <HAL_RCC_OscConfig+0x4f8>
 8001d7a:	bf00      	nop
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	42420000 	.word	0x42420000
 8001d84:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d88:	4b92      	ldr	r3, [pc, #584]	; (8001fd4 <HAL_RCC_OscConfig+0x4c4>)
 8001d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d1e9      	bne.n	8001d68 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0304 	and.w	r3, r3, #4
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f000 80a6 	beq.w	8001eee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001da2:	2300      	movs	r3, #0
 8001da4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001da6:	4b8b      	ldr	r3, [pc, #556]	; (8001fd4 <HAL_RCC_OscConfig+0x4c4>)
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d10d      	bne.n	8001dce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001db2:	4b88      	ldr	r3, [pc, #544]	; (8001fd4 <HAL_RCC_OscConfig+0x4c4>)
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	4a87      	ldr	r2, [pc, #540]	; (8001fd4 <HAL_RCC_OscConfig+0x4c4>)
 8001db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dbc:	61d3      	str	r3, [r2, #28]
 8001dbe:	4b85      	ldr	r3, [pc, #532]	; (8001fd4 <HAL_RCC_OscConfig+0x4c4>)
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc6:	60bb      	str	r3, [r7, #8]
 8001dc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dce:	4b82      	ldr	r3, [pc, #520]	; (8001fd8 <HAL_RCC_OscConfig+0x4c8>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d118      	bne.n	8001e0c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dda:	4b7f      	ldr	r3, [pc, #508]	; (8001fd8 <HAL_RCC_OscConfig+0x4c8>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a7e      	ldr	r2, [pc, #504]	; (8001fd8 <HAL_RCC_OscConfig+0x4c8>)
 8001de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001de6:	f7ff fad7 	bl	8001398 <HAL_GetTick>
 8001dea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dec:	e008      	b.n	8001e00 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dee:	f7ff fad3 	bl	8001398 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b64      	cmp	r3, #100	; 0x64
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e103      	b.n	8002008 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e00:	4b75      	ldr	r3, [pc, #468]	; (8001fd8 <HAL_RCC_OscConfig+0x4c8>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d0f0      	beq.n	8001dee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d106      	bne.n	8001e22 <HAL_RCC_OscConfig+0x312>
 8001e14:	4b6f      	ldr	r3, [pc, #444]	; (8001fd4 <HAL_RCC_OscConfig+0x4c4>)
 8001e16:	6a1b      	ldr	r3, [r3, #32]
 8001e18:	4a6e      	ldr	r2, [pc, #440]	; (8001fd4 <HAL_RCC_OscConfig+0x4c4>)
 8001e1a:	f043 0301 	orr.w	r3, r3, #1
 8001e1e:	6213      	str	r3, [r2, #32]
 8001e20:	e02d      	b.n	8001e7e <HAL_RCC_OscConfig+0x36e>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d10c      	bne.n	8001e44 <HAL_RCC_OscConfig+0x334>
 8001e2a:	4b6a      	ldr	r3, [pc, #424]	; (8001fd4 <HAL_RCC_OscConfig+0x4c4>)
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
 8001e2e:	4a69      	ldr	r2, [pc, #420]	; (8001fd4 <HAL_RCC_OscConfig+0x4c4>)
 8001e30:	f023 0301 	bic.w	r3, r3, #1
 8001e34:	6213      	str	r3, [r2, #32]
 8001e36:	4b67      	ldr	r3, [pc, #412]	; (8001fd4 <HAL_RCC_OscConfig+0x4c4>)
 8001e38:	6a1b      	ldr	r3, [r3, #32]
 8001e3a:	4a66      	ldr	r2, [pc, #408]	; (8001fd4 <HAL_RCC_OscConfig+0x4c4>)
 8001e3c:	f023 0304 	bic.w	r3, r3, #4
 8001e40:	6213      	str	r3, [r2, #32]
 8001e42:	e01c      	b.n	8001e7e <HAL_RCC_OscConfig+0x36e>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	2b05      	cmp	r3, #5
 8001e4a:	d10c      	bne.n	8001e66 <HAL_RCC_OscConfig+0x356>
 8001e4c:	4b61      	ldr	r3, [pc, #388]	; (8001fd4 <HAL_RCC_OscConfig+0x4c4>)
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	4a60      	ldr	r2, [pc, #384]	; (8001fd4 <HAL_RCC_OscConfig+0x4c4>)
 8001e52:	f043 0304 	orr.w	r3, r3, #4
 8001e56:	6213      	str	r3, [r2, #32]
 8001e58:	4b5e      	ldr	r3, [pc, #376]	; (8001fd4 <HAL_RCC_OscConfig+0x4c4>)
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	4a5d      	ldr	r2, [pc, #372]	; (8001fd4 <HAL_RCC_OscConfig+0x4c4>)
 8001e5e:	f043 0301 	orr.w	r3, r3, #1
 8001e62:	6213      	str	r3, [r2, #32]
 8001e64:	e00b      	b.n	8001e7e <HAL_RCC_OscConfig+0x36e>
 8001e66:	4b5b      	ldr	r3, [pc, #364]	; (8001fd4 <HAL_RCC_OscConfig+0x4c4>)
 8001e68:	6a1b      	ldr	r3, [r3, #32]
 8001e6a:	4a5a      	ldr	r2, [pc, #360]	; (8001fd4 <HAL_RCC_OscConfig+0x4c4>)
 8001e6c:	f023 0301 	bic.w	r3, r3, #1
 8001e70:	6213      	str	r3, [r2, #32]
 8001e72:	4b58      	ldr	r3, [pc, #352]	; (8001fd4 <HAL_RCC_OscConfig+0x4c4>)
 8001e74:	6a1b      	ldr	r3, [r3, #32]
 8001e76:	4a57      	ldr	r2, [pc, #348]	; (8001fd4 <HAL_RCC_OscConfig+0x4c4>)
 8001e78:	f023 0304 	bic.w	r3, r3, #4
 8001e7c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d015      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e86:	f7ff fa87 	bl	8001398 <HAL_GetTick>
 8001e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e8c:	e00a      	b.n	8001ea4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e8e:	f7ff fa83 	bl	8001398 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e0b1      	b.n	8002008 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ea4:	4b4b      	ldr	r3, [pc, #300]	; (8001fd4 <HAL_RCC_OscConfig+0x4c4>)
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d0ee      	beq.n	8001e8e <HAL_RCC_OscConfig+0x37e>
 8001eb0:	e014      	b.n	8001edc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb2:	f7ff fa71 	bl	8001398 <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eb8:	e00a      	b.n	8001ed0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eba:	f7ff fa6d 	bl	8001398 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e09b      	b.n	8002008 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ed0:	4b40      	ldr	r3, [pc, #256]	; (8001fd4 <HAL_RCC_OscConfig+0x4c4>)
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1ee      	bne.n	8001eba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001edc:	7dfb      	ldrb	r3, [r7, #23]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d105      	bne.n	8001eee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ee2:	4b3c      	ldr	r3, [pc, #240]	; (8001fd4 <HAL_RCC_OscConfig+0x4c4>)
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	4a3b      	ldr	r2, [pc, #236]	; (8001fd4 <HAL_RCC_OscConfig+0x4c4>)
 8001ee8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69db      	ldr	r3, [r3, #28]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f000 8087 	beq.w	8002006 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ef8:	4b36      	ldr	r3, [pc, #216]	; (8001fd4 <HAL_RCC_OscConfig+0x4c4>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f003 030c 	and.w	r3, r3, #12
 8001f00:	2b08      	cmp	r3, #8
 8001f02:	d061      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	69db      	ldr	r3, [r3, #28]
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d146      	bne.n	8001f9a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f0c:	4b33      	ldr	r3, [pc, #204]	; (8001fdc <HAL_RCC_OscConfig+0x4cc>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f12:	f7ff fa41 	bl	8001398 <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f18:	e008      	b.n	8001f2c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f1a:	f7ff fa3d 	bl	8001398 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e06d      	b.n	8002008 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f2c:	4b29      	ldr	r3, [pc, #164]	; (8001fd4 <HAL_RCC_OscConfig+0x4c4>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1f0      	bne.n	8001f1a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a1b      	ldr	r3, [r3, #32]
 8001f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f40:	d108      	bne.n	8001f54 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f42:	4b24      	ldr	r3, [pc, #144]	; (8001fd4 <HAL_RCC_OscConfig+0x4c4>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	4921      	ldr	r1, [pc, #132]	; (8001fd4 <HAL_RCC_OscConfig+0x4c4>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f54:	4b1f      	ldr	r3, [pc, #124]	; (8001fd4 <HAL_RCC_OscConfig+0x4c4>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a19      	ldr	r1, [r3, #32]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f64:	430b      	orrs	r3, r1
 8001f66:	491b      	ldr	r1, [pc, #108]	; (8001fd4 <HAL_RCC_OscConfig+0x4c4>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f6c:	4b1b      	ldr	r3, [pc, #108]	; (8001fdc <HAL_RCC_OscConfig+0x4cc>)
 8001f6e:	2201      	movs	r2, #1
 8001f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f72:	f7ff fa11 	bl	8001398 <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f78:	e008      	b.n	8001f8c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f7a:	f7ff fa0d 	bl	8001398 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e03d      	b.n	8002008 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f8c:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <HAL_RCC_OscConfig+0x4c4>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d0f0      	beq.n	8001f7a <HAL_RCC_OscConfig+0x46a>
 8001f98:	e035      	b.n	8002006 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f9a:	4b10      	ldr	r3, [pc, #64]	; (8001fdc <HAL_RCC_OscConfig+0x4cc>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa0:	f7ff f9fa 	bl	8001398 <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa8:	f7ff f9f6 	bl	8001398 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e026      	b.n	8002008 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fba:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <HAL_RCC_OscConfig+0x4c4>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d1f0      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x498>
 8001fc6:	e01e      	b.n	8002006 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	69db      	ldr	r3, [r3, #28]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d107      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e019      	b.n	8002008 <HAL_RCC_OscConfig+0x4f8>
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	40007000 	.word	0x40007000
 8001fdc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fe0:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <HAL_RCC_OscConfig+0x500>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d106      	bne.n	8002002 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d001      	beq.n	8002006 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e000      	b.n	8002008 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	3718      	adds	r7, #24
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40021000 	.word	0x40021000

08002014 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d101      	bne.n	8002028 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e0d0      	b.n	80021ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002028:	4b6a      	ldr	r3, [pc, #424]	; (80021d4 <HAL_RCC_ClockConfig+0x1c0>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0307 	and.w	r3, r3, #7
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	429a      	cmp	r2, r3
 8002034:	d910      	bls.n	8002058 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002036:	4b67      	ldr	r3, [pc, #412]	; (80021d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f023 0207 	bic.w	r2, r3, #7
 800203e:	4965      	ldr	r1, [pc, #404]	; (80021d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	4313      	orrs	r3, r2
 8002044:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002046:	4b63      	ldr	r3, [pc, #396]	; (80021d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	429a      	cmp	r2, r3
 8002052:	d001      	beq.n	8002058 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e0b8      	b.n	80021ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d020      	beq.n	80020a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	2b00      	cmp	r3, #0
 800206e:	d005      	beq.n	800207c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002070:	4b59      	ldr	r3, [pc, #356]	; (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	4a58      	ldr	r2, [pc, #352]	; (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002076:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800207a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0308 	and.w	r3, r3, #8
 8002084:	2b00      	cmp	r3, #0
 8002086:	d005      	beq.n	8002094 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002088:	4b53      	ldr	r3, [pc, #332]	; (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	4a52      	ldr	r2, [pc, #328]	; (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 800208e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002092:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002094:	4b50      	ldr	r3, [pc, #320]	; (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	494d      	ldr	r1, [pc, #308]	; (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d040      	beq.n	8002134 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d107      	bne.n	80020ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ba:	4b47      	ldr	r3, [pc, #284]	; (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d115      	bne.n	80020f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e07f      	b.n	80021ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d107      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020d2:	4b41      	ldr	r3, [pc, #260]	; (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d109      	bne.n	80020f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e073      	b.n	80021ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e2:	4b3d      	ldr	r3, [pc, #244]	; (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e06b      	b.n	80021ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020f2:	4b39      	ldr	r3, [pc, #228]	; (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f023 0203 	bic.w	r2, r3, #3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	4936      	ldr	r1, [pc, #216]	; (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002100:	4313      	orrs	r3, r2
 8002102:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002104:	f7ff f948 	bl	8001398 <HAL_GetTick>
 8002108:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800210a:	e00a      	b.n	8002122 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800210c:	f7ff f944 	bl	8001398 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	f241 3288 	movw	r2, #5000	; 0x1388
 800211a:	4293      	cmp	r3, r2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e053      	b.n	80021ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002122:	4b2d      	ldr	r3, [pc, #180]	; (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f003 020c 	and.w	r2, r3, #12
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	429a      	cmp	r2, r3
 8002132:	d1eb      	bne.n	800210c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002134:	4b27      	ldr	r3, [pc, #156]	; (80021d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0307 	and.w	r3, r3, #7
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	429a      	cmp	r2, r3
 8002140:	d210      	bcs.n	8002164 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002142:	4b24      	ldr	r3, [pc, #144]	; (80021d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f023 0207 	bic.w	r2, r3, #7
 800214a:	4922      	ldr	r1, [pc, #136]	; (80021d4 <HAL_RCC_ClockConfig+0x1c0>)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	4313      	orrs	r3, r2
 8002150:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002152:	4b20      	ldr	r3, [pc, #128]	; (80021d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	429a      	cmp	r2, r3
 800215e:	d001      	beq.n	8002164 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e032      	b.n	80021ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0304 	and.w	r3, r3, #4
 800216c:	2b00      	cmp	r3, #0
 800216e:	d008      	beq.n	8002182 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002170:	4b19      	ldr	r3, [pc, #100]	; (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	4916      	ldr	r1, [pc, #88]	; (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 800217e:	4313      	orrs	r3, r2
 8002180:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0308 	and.w	r3, r3, #8
 800218a:	2b00      	cmp	r3, #0
 800218c:	d009      	beq.n	80021a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800218e:	4b12      	ldr	r3, [pc, #72]	; (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	490e      	ldr	r1, [pc, #56]	; (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021a2:	f000 f821 	bl	80021e8 <HAL_RCC_GetSysClockFreq>
 80021a6:	4602      	mov	r2, r0
 80021a8:	4b0b      	ldr	r3, [pc, #44]	; (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	091b      	lsrs	r3, r3, #4
 80021ae:	f003 030f 	and.w	r3, r3, #15
 80021b2:	490a      	ldr	r1, [pc, #40]	; (80021dc <HAL_RCC_ClockConfig+0x1c8>)
 80021b4:	5ccb      	ldrb	r3, [r1, r3]
 80021b6:	fa22 f303 	lsr.w	r3, r2, r3
 80021ba:	4a09      	ldr	r2, [pc, #36]	; (80021e0 <HAL_RCC_ClockConfig+0x1cc>)
 80021bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021be:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <HAL_RCC_ClockConfig+0x1d0>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff f8a6 	bl	8001314 <HAL_InitTick>

  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40022000 	.word	0x40022000
 80021d8:	40021000 	.word	0x40021000
 80021dc:	08005b20 	.word	0x08005b20
 80021e0:	20000018 	.word	0x20000018
 80021e4:	2000001c 	.word	0x2000001c

080021e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b087      	sub	sp, #28
 80021ec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	2300      	movs	r3, #0
 80021f4:	60bb      	str	r3, [r7, #8]
 80021f6:	2300      	movs	r3, #0
 80021f8:	617b      	str	r3, [r7, #20]
 80021fa:	2300      	movs	r3, #0
 80021fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021fe:	2300      	movs	r3, #0
 8002200:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002202:	4b1e      	ldr	r3, [pc, #120]	; (800227c <HAL_RCC_GetSysClockFreq+0x94>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f003 030c 	and.w	r3, r3, #12
 800220e:	2b04      	cmp	r3, #4
 8002210:	d002      	beq.n	8002218 <HAL_RCC_GetSysClockFreq+0x30>
 8002212:	2b08      	cmp	r3, #8
 8002214:	d003      	beq.n	800221e <HAL_RCC_GetSysClockFreq+0x36>
 8002216:	e027      	b.n	8002268 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002218:	4b19      	ldr	r3, [pc, #100]	; (8002280 <HAL_RCC_GetSysClockFreq+0x98>)
 800221a:	613b      	str	r3, [r7, #16]
      break;
 800221c:	e027      	b.n	800226e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	0c9b      	lsrs	r3, r3, #18
 8002222:	f003 030f 	and.w	r3, r3, #15
 8002226:	4a17      	ldr	r2, [pc, #92]	; (8002284 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002228:	5cd3      	ldrb	r3, [r2, r3]
 800222a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d010      	beq.n	8002258 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002236:	4b11      	ldr	r3, [pc, #68]	; (800227c <HAL_RCC_GetSysClockFreq+0x94>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	0c5b      	lsrs	r3, r3, #17
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	4a11      	ldr	r2, [pc, #68]	; (8002288 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002242:	5cd3      	ldrb	r3, [r2, r3]
 8002244:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a0d      	ldr	r2, [pc, #52]	; (8002280 <HAL_RCC_GetSysClockFreq+0x98>)
 800224a:	fb03 f202 	mul.w	r2, r3, r2
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	fbb2 f3f3 	udiv	r3, r2, r3
 8002254:	617b      	str	r3, [r7, #20]
 8002256:	e004      	b.n	8002262 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a0c      	ldr	r2, [pc, #48]	; (800228c <HAL_RCC_GetSysClockFreq+0xa4>)
 800225c:	fb02 f303 	mul.w	r3, r2, r3
 8002260:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	613b      	str	r3, [r7, #16]
      break;
 8002266:	e002      	b.n	800226e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002268:	4b05      	ldr	r3, [pc, #20]	; (8002280 <HAL_RCC_GetSysClockFreq+0x98>)
 800226a:	613b      	str	r3, [r7, #16]
      break;
 800226c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800226e:	693b      	ldr	r3, [r7, #16]
}
 8002270:	4618      	mov	r0, r3
 8002272:	371c      	adds	r7, #28
 8002274:	46bd      	mov	sp, r7
 8002276:	bc80      	pop	{r7}
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	40021000 	.word	0x40021000
 8002280:	007a1200 	.word	0x007a1200
 8002284:	08005b38 	.word	0x08005b38
 8002288:	08005b48 	.word	0x08005b48
 800228c:	003d0900 	.word	0x003d0900

08002290 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002294:	4b02      	ldr	r3, [pc, #8]	; (80022a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002296:	681b      	ldr	r3, [r3, #0]
}
 8002298:	4618      	mov	r0, r3
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr
 80022a0:	20000018 	.word	0x20000018

080022a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022a8:	f7ff fff2 	bl	8002290 <HAL_RCC_GetHCLKFreq>
 80022ac:	4602      	mov	r2, r0
 80022ae:	4b05      	ldr	r3, [pc, #20]	; (80022c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	0a1b      	lsrs	r3, r3, #8
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	4903      	ldr	r1, [pc, #12]	; (80022c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022ba:	5ccb      	ldrb	r3, [r1, r3]
 80022bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40021000 	.word	0x40021000
 80022c8:	08005b30 	.word	0x08005b30

080022cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022d0:	f7ff ffde 	bl	8002290 <HAL_RCC_GetHCLKFreq>
 80022d4:	4602      	mov	r2, r0
 80022d6:	4b05      	ldr	r3, [pc, #20]	; (80022ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	0adb      	lsrs	r3, r3, #11
 80022dc:	f003 0307 	and.w	r3, r3, #7
 80022e0:	4903      	ldr	r1, [pc, #12]	; (80022f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022e2:	5ccb      	ldrb	r3, [r1, r3]
 80022e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40021000 	.word	0x40021000
 80022f0:	08005b30 	.word	0x08005b30

080022f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022fc:	4b0a      	ldr	r3, [pc, #40]	; (8002328 <RCC_Delay+0x34>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a0a      	ldr	r2, [pc, #40]	; (800232c <RCC_Delay+0x38>)
 8002302:	fba2 2303 	umull	r2, r3, r2, r3
 8002306:	0a5b      	lsrs	r3, r3, #9
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	fb02 f303 	mul.w	r3, r2, r3
 800230e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002310:	bf00      	nop
  }
  while (Delay --);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	1e5a      	subs	r2, r3, #1
 8002316:	60fa      	str	r2, [r7, #12]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1f9      	bne.n	8002310 <RCC_Delay+0x1c>
}
 800231c:	bf00      	nop
 800231e:	bf00      	nop
 8002320:	3714      	adds	r7, #20
 8002322:	46bd      	mov	sp, r7
 8002324:	bc80      	pop	{r7}
 8002326:	4770      	bx	lr
 8002328:	20000018 	.word	0x20000018
 800232c:	10624dd3 	.word	0x10624dd3

08002330 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e076      	b.n	8002430 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002346:	2b00      	cmp	r3, #0
 8002348:	d108      	bne.n	800235c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002352:	d009      	beq.n	8002368 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	61da      	str	r2, [r3, #28]
 800235a:	e005      	b.n	8002368 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d106      	bne.n	8002388 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7fe fdbc 	bl	8000f00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2202      	movs	r2, #2
 800238c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800239e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80023b0:	431a      	orrs	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023ba:	431a      	orrs	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	431a      	orrs	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	431a      	orrs	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023d8:	431a      	orrs	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023e2:	431a      	orrs	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ec:	ea42 0103 	orr.w	r1, r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	430a      	orrs	r2, r1
 80023fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	0c1a      	lsrs	r2, r3, #16
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f002 0204 	and.w	r2, r2, #4
 800240e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	69da      	ldr	r2, [r3, #28]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800241e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b088      	sub	sp, #32
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	603b      	str	r3, [r7, #0]
 8002444:	4613      	mov	r3, r2
 8002446:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002448:	2300      	movs	r3, #0
 800244a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002452:	2b01      	cmp	r3, #1
 8002454:	d101      	bne.n	800245a <HAL_SPI_Transmit+0x22>
 8002456:	2302      	movs	r3, #2
 8002458:	e12d      	b.n	80026b6 <HAL_SPI_Transmit+0x27e>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002462:	f7fe ff99 	bl	8001398 <HAL_GetTick>
 8002466:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002468:	88fb      	ldrh	r3, [r7, #6]
 800246a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b01      	cmp	r3, #1
 8002476:	d002      	beq.n	800247e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002478:	2302      	movs	r3, #2
 800247a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800247c:	e116      	b.n	80026ac <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d002      	beq.n	800248a <HAL_SPI_Transmit+0x52>
 8002484:	88fb      	ldrh	r3, [r7, #6]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d102      	bne.n	8002490 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800248e:	e10d      	b.n	80026ac <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2203      	movs	r2, #3
 8002494:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	68ba      	ldr	r2, [r7, #8]
 80024a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	88fa      	ldrh	r2, [r7, #6]
 80024a8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	88fa      	ldrh	r2, [r7, #6]
 80024ae:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024d6:	d10f      	bne.n	80024f8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024f6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002502:	2b40      	cmp	r3, #64	; 0x40
 8002504:	d007      	beq.n	8002516 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002514:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800251e:	d14f      	bne.n	80025c0 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d002      	beq.n	800252e <HAL_SPI_Transmit+0xf6>
 8002528:	8afb      	ldrh	r3, [r7, #22]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d142      	bne.n	80025b4 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	881a      	ldrh	r2, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	1c9a      	adds	r2, r3, #2
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002548:	b29b      	uxth	r3, r3
 800254a:	3b01      	subs	r3, #1
 800254c:	b29a      	uxth	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002552:	e02f      	b.n	80025b4 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b02      	cmp	r3, #2
 8002560:	d112      	bne.n	8002588 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	881a      	ldrh	r2, [r3, #0]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	1c9a      	adds	r2, r3, #2
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800257c:	b29b      	uxth	r3, r3
 800257e:	3b01      	subs	r3, #1
 8002580:	b29a      	uxth	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	86da      	strh	r2, [r3, #54]	; 0x36
 8002586:	e015      	b.n	80025b4 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002588:	f7fe ff06 	bl	8001398 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	429a      	cmp	r2, r3
 8002596:	d803      	bhi.n	80025a0 <HAL_SPI_Transmit+0x168>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800259e:	d102      	bne.n	80025a6 <HAL_SPI_Transmit+0x16e>
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d106      	bne.n	80025b4 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80025b2:	e07b      	b.n	80026ac <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1ca      	bne.n	8002554 <HAL_SPI_Transmit+0x11c>
 80025be:	e050      	b.n	8002662 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d002      	beq.n	80025ce <HAL_SPI_Transmit+0x196>
 80025c8:	8afb      	ldrh	r3, [r7, #22]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d144      	bne.n	8002658 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	330c      	adds	r3, #12
 80025d8:	7812      	ldrb	r2, [r2, #0]
 80025da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e0:	1c5a      	adds	r2, r3, #1
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	3b01      	subs	r3, #1
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80025f4:	e030      	b.n	8002658 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b02      	cmp	r3, #2
 8002602:	d113      	bne.n	800262c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	330c      	adds	r3, #12
 800260e:	7812      	ldrb	r2, [r2, #0]
 8002610:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	1c5a      	adds	r2, r3, #1
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002620:	b29b      	uxth	r3, r3
 8002622:	3b01      	subs	r3, #1
 8002624:	b29a      	uxth	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	86da      	strh	r2, [r3, #54]	; 0x36
 800262a:	e015      	b.n	8002658 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800262c:	f7fe feb4 	bl	8001398 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	429a      	cmp	r2, r3
 800263a:	d803      	bhi.n	8002644 <HAL_SPI_Transmit+0x20c>
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002642:	d102      	bne.n	800264a <HAL_SPI_Transmit+0x212>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d106      	bne.n	8002658 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002656:	e029      	b.n	80026ac <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800265c:	b29b      	uxth	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1c9      	bne.n	80025f6 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	6839      	ldr	r1, [r7, #0]
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f000 f8b2 	bl	80027d0 <SPI_EndRxTxTransaction>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d002      	beq.n	8002678 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2220      	movs	r2, #32
 8002676:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10a      	bne.n	8002696 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002680:	2300      	movs	r3, #0
 8002682:	613b      	str	r3, [r7, #16]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	613b      	str	r3, [r7, #16]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	613b      	str	r3, [r7, #16]
 8002694:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800269a:	2b00      	cmp	r3, #0
 800269c:	d002      	beq.n	80026a4 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	77fb      	strb	r3, [r7, #31]
 80026a2:	e003      	b.n	80026ac <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80026b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3720      	adds	r7, #32
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
	...

080026c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b088      	sub	sp, #32
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	603b      	str	r3, [r7, #0]
 80026cc:	4613      	mov	r3, r2
 80026ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80026d0:	f7fe fe62 	bl	8001398 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d8:	1a9b      	subs	r3, r3, r2
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	4413      	add	r3, r2
 80026de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80026e0:	f7fe fe5a 	bl	8001398 <HAL_GetTick>
 80026e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80026e6:	4b39      	ldr	r3, [pc, #228]	; (80027cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	015b      	lsls	r3, r3, #5
 80026ec:	0d1b      	lsrs	r3, r3, #20
 80026ee:	69fa      	ldr	r2, [r7, #28]
 80026f0:	fb02 f303 	mul.w	r3, r2, r3
 80026f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026f6:	e054      	b.n	80027a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026fe:	d050      	beq.n	80027a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002700:	f7fe fe4a 	bl	8001398 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	69fa      	ldr	r2, [r7, #28]
 800270c:	429a      	cmp	r2, r3
 800270e:	d902      	bls.n	8002716 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d13d      	bne.n	8002792 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002724:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800272e:	d111      	bne.n	8002754 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002738:	d004      	beq.n	8002744 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002742:	d107      	bne.n	8002754 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002752:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002758:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800275c:	d10f      	bne.n	800277e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800277c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e017      	b.n	80027c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002798:	2300      	movs	r3, #0
 800279a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	3b01      	subs	r3, #1
 80027a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	4013      	ands	r3, r2
 80027ac:	68ba      	ldr	r2, [r7, #8]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	bf0c      	ite	eq
 80027b2:	2301      	moveq	r3, #1
 80027b4:	2300      	movne	r3, #0
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	461a      	mov	r2, r3
 80027ba:	79fb      	ldrb	r3, [r7, #7]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d19b      	bne.n	80026f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3720      	adds	r7, #32
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	20000018 	.word	0x20000018

080027d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af02      	add	r7, sp, #8
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2200      	movs	r2, #0
 80027e4:	2180      	movs	r1, #128	; 0x80
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f7ff ff6a 	bl	80026c0 <SPI_WaitFlagStateUntilTimeout>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d007      	beq.n	8002802 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f6:	f043 0220 	orr.w	r2, r3, #32
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e000      	b.n	8002804 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e041      	b.n	80028a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d106      	bne.n	8002838 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7fe fba2 	bl	8000f7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2202      	movs	r2, #2
 800283c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3304      	adds	r3, #4
 8002848:	4619      	mov	r1, r3
 800284a:	4610      	mov	r0, r2
 800284c:	f000 fa74 	bl	8002d38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
	...

080028ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d001      	beq.n	80028c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e03a      	b.n	800293a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2202      	movs	r2, #2
 80028c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68da      	ldr	r2, [r3, #12]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0201 	orr.w	r2, r2, #1
 80028da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a18      	ldr	r2, [pc, #96]	; (8002944 <HAL_TIM_Base_Start_IT+0x98>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d00e      	beq.n	8002904 <HAL_TIM_Base_Start_IT+0x58>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ee:	d009      	beq.n	8002904 <HAL_TIM_Base_Start_IT+0x58>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a14      	ldr	r2, [pc, #80]	; (8002948 <HAL_TIM_Base_Start_IT+0x9c>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d004      	beq.n	8002904 <HAL_TIM_Base_Start_IT+0x58>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a13      	ldr	r2, [pc, #76]	; (800294c <HAL_TIM_Base_Start_IT+0xa0>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d111      	bne.n	8002928 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2b06      	cmp	r3, #6
 8002914:	d010      	beq.n	8002938 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f042 0201 	orr.w	r2, r2, #1
 8002924:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002926:	e007      	b.n	8002938 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0201 	orr.w	r2, r2, #1
 8002936:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3714      	adds	r7, #20
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr
 8002944:	40012c00 	.word	0x40012c00
 8002948:	40000400 	.word	0x40000400
 800294c:	40000800 	.word	0x40000800

08002950 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b02      	cmp	r3, #2
 8002964:	d122      	bne.n	80029ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b02      	cmp	r3, #2
 8002972:	d11b      	bne.n	80029ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f06f 0202 	mvn.w	r2, #2
 800297c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f9b4 	bl	8002d00 <HAL_TIM_IC_CaptureCallback>
 8002998:	e005      	b.n	80029a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 f9a7 	bl	8002cee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 f9b6 	bl	8002d12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	f003 0304 	and.w	r3, r3, #4
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	d122      	bne.n	8002a00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	2b04      	cmp	r3, #4
 80029c6:	d11b      	bne.n	8002a00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f06f 0204 	mvn.w	r2, #4
 80029d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2202      	movs	r2, #2
 80029d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f98a 	bl	8002d00 <HAL_TIM_IC_CaptureCallback>
 80029ec:	e005      	b.n	80029fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 f97d 	bl	8002cee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f000 f98c 	bl	8002d12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	f003 0308 	and.w	r3, r3, #8
 8002a0a:	2b08      	cmp	r3, #8
 8002a0c:	d122      	bne.n	8002a54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	f003 0308 	and.w	r3, r3, #8
 8002a18:	2b08      	cmp	r3, #8
 8002a1a:	d11b      	bne.n	8002a54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f06f 0208 	mvn.w	r2, #8
 8002a24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2204      	movs	r2, #4
 8002a2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f960 	bl	8002d00 <HAL_TIM_IC_CaptureCallback>
 8002a40:	e005      	b.n	8002a4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f953 	bl	8002cee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 f962 	bl	8002d12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	f003 0310 	and.w	r3, r3, #16
 8002a5e:	2b10      	cmp	r3, #16
 8002a60:	d122      	bne.n	8002aa8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	f003 0310 	and.w	r3, r3, #16
 8002a6c:	2b10      	cmp	r3, #16
 8002a6e:	d11b      	bne.n	8002aa8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f06f 0210 	mvn.w	r2, #16
 8002a78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2208      	movs	r2, #8
 8002a7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f936 	bl	8002d00 <HAL_TIM_IC_CaptureCallback>
 8002a94:	e005      	b.n	8002aa2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 f929 	bl	8002cee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 f938 	bl	8002d12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d10e      	bne.n	8002ad4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d107      	bne.n	8002ad4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f06f 0201 	mvn.w	r2, #1
 8002acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7fd fcc4 	bl	800045c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ade:	2b80      	cmp	r3, #128	; 0x80
 8002ae0:	d10e      	bne.n	8002b00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aec:	2b80      	cmp	r3, #128	; 0x80
 8002aee:	d107      	bne.n	8002b00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 fa7b 	bl	8002ff6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b0a:	2b40      	cmp	r3, #64	; 0x40
 8002b0c:	d10e      	bne.n	8002b2c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b18:	2b40      	cmp	r3, #64	; 0x40
 8002b1a:	d107      	bne.n	8002b2c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f8fc 	bl	8002d24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	f003 0320 	and.w	r3, r3, #32
 8002b36:	2b20      	cmp	r3, #32
 8002b38:	d10e      	bne.n	8002b58 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	f003 0320 	and.w	r3, r3, #32
 8002b44:	2b20      	cmp	r3, #32
 8002b46:	d107      	bne.n	8002b58 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f06f 0220 	mvn.w	r2, #32
 8002b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 fa46 	bl	8002fe4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b58:	bf00      	nop
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d101      	bne.n	8002b7c <HAL_TIM_ConfigClockSource+0x1c>
 8002b78:	2302      	movs	r3, #2
 8002b7a:	e0b4      	b.n	8002ce6 <HAL_TIM_ConfigClockSource+0x186>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2202      	movs	r2, #2
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ba2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68ba      	ldr	r2, [r7, #8]
 8002baa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bb4:	d03e      	beq.n	8002c34 <HAL_TIM_ConfigClockSource+0xd4>
 8002bb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bba:	f200 8087 	bhi.w	8002ccc <HAL_TIM_ConfigClockSource+0x16c>
 8002bbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bc2:	f000 8086 	beq.w	8002cd2 <HAL_TIM_ConfigClockSource+0x172>
 8002bc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bca:	d87f      	bhi.n	8002ccc <HAL_TIM_ConfigClockSource+0x16c>
 8002bcc:	2b70      	cmp	r3, #112	; 0x70
 8002bce:	d01a      	beq.n	8002c06 <HAL_TIM_ConfigClockSource+0xa6>
 8002bd0:	2b70      	cmp	r3, #112	; 0x70
 8002bd2:	d87b      	bhi.n	8002ccc <HAL_TIM_ConfigClockSource+0x16c>
 8002bd4:	2b60      	cmp	r3, #96	; 0x60
 8002bd6:	d050      	beq.n	8002c7a <HAL_TIM_ConfigClockSource+0x11a>
 8002bd8:	2b60      	cmp	r3, #96	; 0x60
 8002bda:	d877      	bhi.n	8002ccc <HAL_TIM_ConfigClockSource+0x16c>
 8002bdc:	2b50      	cmp	r3, #80	; 0x50
 8002bde:	d03c      	beq.n	8002c5a <HAL_TIM_ConfigClockSource+0xfa>
 8002be0:	2b50      	cmp	r3, #80	; 0x50
 8002be2:	d873      	bhi.n	8002ccc <HAL_TIM_ConfigClockSource+0x16c>
 8002be4:	2b40      	cmp	r3, #64	; 0x40
 8002be6:	d058      	beq.n	8002c9a <HAL_TIM_ConfigClockSource+0x13a>
 8002be8:	2b40      	cmp	r3, #64	; 0x40
 8002bea:	d86f      	bhi.n	8002ccc <HAL_TIM_ConfigClockSource+0x16c>
 8002bec:	2b30      	cmp	r3, #48	; 0x30
 8002bee:	d064      	beq.n	8002cba <HAL_TIM_ConfigClockSource+0x15a>
 8002bf0:	2b30      	cmp	r3, #48	; 0x30
 8002bf2:	d86b      	bhi.n	8002ccc <HAL_TIM_ConfigClockSource+0x16c>
 8002bf4:	2b20      	cmp	r3, #32
 8002bf6:	d060      	beq.n	8002cba <HAL_TIM_ConfigClockSource+0x15a>
 8002bf8:	2b20      	cmp	r3, #32
 8002bfa:	d867      	bhi.n	8002ccc <HAL_TIM_ConfigClockSource+0x16c>
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d05c      	beq.n	8002cba <HAL_TIM_ConfigClockSource+0x15a>
 8002c00:	2b10      	cmp	r3, #16
 8002c02:	d05a      	beq.n	8002cba <HAL_TIM_ConfigClockSource+0x15a>
 8002c04:	e062      	b.n	8002ccc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c16:	f000 f968 	bl	8002eea <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68ba      	ldr	r2, [r7, #8]
 8002c30:	609a      	str	r2, [r3, #8]
      break;
 8002c32:	e04f      	b.n	8002cd4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c44:	f000 f951 	bl	8002eea <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689a      	ldr	r2, [r3, #8]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c56:	609a      	str	r2, [r3, #8]
      break;
 8002c58:	e03c      	b.n	8002cd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c66:	461a      	mov	r2, r3
 8002c68:	f000 f8c8 	bl	8002dfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2150      	movs	r1, #80	; 0x50
 8002c72:	4618      	mov	r0, r3
 8002c74:	f000 f91f 	bl	8002eb6 <TIM_ITRx_SetConfig>
      break;
 8002c78:	e02c      	b.n	8002cd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c86:	461a      	mov	r2, r3
 8002c88:	f000 f8e6 	bl	8002e58 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2160      	movs	r1, #96	; 0x60
 8002c92:	4618      	mov	r0, r3
 8002c94:	f000 f90f 	bl	8002eb6 <TIM_ITRx_SetConfig>
      break;
 8002c98:	e01c      	b.n	8002cd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	f000 f8a8 	bl	8002dfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2140      	movs	r1, #64	; 0x40
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f000 f8ff 	bl	8002eb6 <TIM_ITRx_SetConfig>
      break;
 8002cb8:	e00c      	b.n	8002cd4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	4610      	mov	r0, r2
 8002cc6:	f000 f8f6 	bl	8002eb6 <TIM_ITRx_SetConfig>
      break;
 8002cca:	e003      	b.n	8002cd4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	73fb      	strb	r3, [r7, #15]
      break;
 8002cd0:	e000      	b.n	8002cd4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002cd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr

08002d00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bc80      	pop	{r7}
 8002d10:	4770      	bx	lr

08002d12 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b083      	sub	sp, #12
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr

08002d24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bc80      	pop	{r7}
 8002d34:	4770      	bx	lr
	...

08002d38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a29      	ldr	r2, [pc, #164]	; (8002df0 <TIM_Base_SetConfig+0xb8>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d00b      	beq.n	8002d68 <TIM_Base_SetConfig+0x30>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d56:	d007      	beq.n	8002d68 <TIM_Base_SetConfig+0x30>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a26      	ldr	r2, [pc, #152]	; (8002df4 <TIM_Base_SetConfig+0xbc>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d003      	beq.n	8002d68 <TIM_Base_SetConfig+0x30>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a25      	ldr	r2, [pc, #148]	; (8002df8 <TIM_Base_SetConfig+0xc0>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d108      	bne.n	8002d7a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a1c      	ldr	r2, [pc, #112]	; (8002df0 <TIM_Base_SetConfig+0xb8>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d00b      	beq.n	8002d9a <TIM_Base_SetConfig+0x62>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d88:	d007      	beq.n	8002d9a <TIM_Base_SetConfig+0x62>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a19      	ldr	r2, [pc, #100]	; (8002df4 <TIM_Base_SetConfig+0xbc>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d003      	beq.n	8002d9a <TIM_Base_SetConfig+0x62>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a18      	ldr	r2, [pc, #96]	; (8002df8 <TIM_Base_SetConfig+0xc0>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d108      	bne.n	8002dac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002da0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a07      	ldr	r2, [pc, #28]	; (8002df0 <TIM_Base_SetConfig+0xb8>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d103      	bne.n	8002de0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	691a      	ldr	r2, [r3, #16]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	615a      	str	r2, [r3, #20]
}
 8002de6:	bf00      	nop
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bc80      	pop	{r7}
 8002dee:	4770      	bx	lr
 8002df0:	40012c00 	.word	0x40012c00
 8002df4:	40000400 	.word	0x40000400
 8002df8:	40000800 	.word	0x40000800

08002dfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b087      	sub	sp, #28
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	f023 0201 	bic.w	r2, r3, #1
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	011b      	lsls	r3, r3, #4
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	f023 030a 	bic.w	r3, r3, #10
 8002e38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	621a      	str	r2, [r3, #32]
}
 8002e4e:	bf00      	nop
 8002e50:	371c      	adds	r7, #28
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bc80      	pop	{r7}
 8002e56:	4770      	bx	lr

08002e58 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b087      	sub	sp, #28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	f023 0210 	bic.w	r2, r3, #16
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	031b      	lsls	r3, r3, #12
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e94:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	011b      	lsls	r3, r3, #4
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	621a      	str	r2, [r3, #32]
}
 8002eac:	bf00      	nop
 8002eae:	371c      	adds	r7, #28
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bc80      	pop	{r7}
 8002eb4:	4770      	bx	lr

08002eb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b085      	sub	sp, #20
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
 8002ebe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ecc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	f043 0307 	orr.w	r3, r3, #7
 8002ed8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	609a      	str	r2, [r3, #8]
}
 8002ee0:	bf00      	nop
 8002ee2:	3714      	adds	r7, #20
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bc80      	pop	{r7}
 8002ee8:	4770      	bx	lr

08002eea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002eea:	b480      	push	{r7}
 8002eec:	b087      	sub	sp, #28
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	60f8      	str	r0, [r7, #12]
 8002ef2:	60b9      	str	r1, [r7, #8]
 8002ef4:	607a      	str	r2, [r7, #4]
 8002ef6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f04:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	021a      	lsls	r2, r3, #8
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	609a      	str	r2, [r3, #8]
}
 8002f1e:	bf00      	nop
 8002f20:	371c      	adds	r7, #28
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc80      	pop	{r7}
 8002f26:	4770      	bx	lr

08002f28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d101      	bne.n	8002f40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	e046      	b.n	8002fce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a16      	ldr	r2, [pc, #88]	; (8002fd8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d00e      	beq.n	8002fa2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f8c:	d009      	beq.n	8002fa2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a12      	ldr	r2, [pc, #72]	; (8002fdc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d004      	beq.n	8002fa2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a10      	ldr	r2, [pc, #64]	; (8002fe0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d10c      	bne.n	8002fbc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fa8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68ba      	ldr	r2, [r7, #8]
 8002fba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3714      	adds	r7, #20
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bc80      	pop	{r7}
 8002fd6:	4770      	bx	lr
 8002fd8:	40012c00 	.word	0x40012c00
 8002fdc:	40000400 	.word	0x40000400
 8002fe0:	40000800 	.word	0x40000800

08002fe4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bc80      	pop	{r7}
 8002ff4:	4770      	bx	lr

08002ff6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	b083      	sub	sp, #12
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ffe:	bf00      	nop
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	bc80      	pop	{r7}
 8003006:	4770      	bx	lr

08003008 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e042      	b.n	80030a0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d106      	bne.n	8003034 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7fd ffd2 	bl	8000fd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2224      	movs	r2, #36	; 0x24
 8003038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68da      	ldr	r2, [r3, #12]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800304a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f000 fd71 	bl	8003b34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	691a      	ldr	r2, [r3, #16]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003060:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	695a      	ldr	r2, [r3, #20]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003070:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68da      	ldr	r2, [r3, #12]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003080:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2220      	movs	r2, #32
 800308c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2220      	movs	r2, #32
 8003094:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b08a      	sub	sp, #40	; 0x28
 80030ac:	af02      	add	r7, sp, #8
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	603b      	str	r3, [r7, #0]
 80030b4:	4613      	mov	r3, r2
 80030b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030b8:	2300      	movs	r3, #0
 80030ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b20      	cmp	r3, #32
 80030c6:	d16d      	bne.n	80031a4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d002      	beq.n	80030d4 <HAL_UART_Transmit+0x2c>
 80030ce:	88fb      	ldrh	r3, [r7, #6]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e066      	b.n	80031a6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2221      	movs	r2, #33	; 0x21
 80030e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030e6:	f7fe f957 	bl	8001398 <HAL_GetTick>
 80030ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	88fa      	ldrh	r2, [r7, #6]
 80030f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	88fa      	ldrh	r2, [r7, #6]
 80030f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003100:	d108      	bne.n	8003114 <HAL_UART_Transmit+0x6c>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d104      	bne.n	8003114 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800310a:	2300      	movs	r3, #0
 800310c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	61bb      	str	r3, [r7, #24]
 8003112:	e003      	b.n	800311c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003118:	2300      	movs	r3, #0
 800311a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800311c:	e02a      	b.n	8003174 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	9300      	str	r3, [sp, #0]
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	2200      	movs	r2, #0
 8003126:	2180      	movs	r1, #128	; 0x80
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f000 faf9 	bl	8003720 <UART_WaitOnFlagUntilTimeout>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e036      	b.n	80031a6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10b      	bne.n	8003156 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	881b      	ldrh	r3, [r3, #0]
 8003142:	461a      	mov	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800314c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	3302      	adds	r3, #2
 8003152:	61bb      	str	r3, [r7, #24]
 8003154:	e007      	b.n	8003166 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	781a      	ldrb	r2, [r3, #0]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	3301      	adds	r3, #1
 8003164:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800316a:	b29b      	uxth	r3, r3
 800316c:	3b01      	subs	r3, #1
 800316e:	b29a      	uxth	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003178:	b29b      	uxth	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1cf      	bne.n	800311e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	2200      	movs	r2, #0
 8003186:	2140      	movs	r1, #64	; 0x40
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f000 fac9 	bl	8003720 <UART_WaitOnFlagUntilTimeout>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e006      	b.n	80031a6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2220      	movs	r2, #32
 800319c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80031a0:	2300      	movs	r3, #0
 80031a2:	e000      	b.n	80031a6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80031a4:	2302      	movs	r3, #2
  }
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3720      	adds	r7, #32
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
	...

080031b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b0ba      	sub	sp, #232	; 0xe8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80031d6:	2300      	movs	r3, #0
 80031d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80031dc:	2300      	movs	r3, #0
 80031de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80031e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80031ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10f      	bne.n	8003216 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031fa:	f003 0320 	and.w	r3, r3, #32
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d009      	beq.n	8003216 <HAL_UART_IRQHandler+0x66>
 8003202:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003206:	f003 0320 	and.w	r3, r3, #32
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 fbd1 	bl	80039b6 <UART_Receive_IT>
      return;
 8003214:	e25b      	b.n	80036ce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003216:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800321a:	2b00      	cmp	r3, #0
 800321c:	f000 80de 	beq.w	80033dc <HAL_UART_IRQHandler+0x22c>
 8003220:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	2b00      	cmp	r3, #0
 800322a:	d106      	bne.n	800323a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800322c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003230:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003234:	2b00      	cmp	r3, #0
 8003236:	f000 80d1 	beq.w	80033dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800323a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00b      	beq.n	800325e <HAL_UART_IRQHandler+0xae>
 8003246:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800324a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324e:	2b00      	cmp	r3, #0
 8003250:	d005      	beq.n	800325e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003256:	f043 0201 	orr.w	r2, r3, #1
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800325e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003262:	f003 0304 	and.w	r3, r3, #4
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00b      	beq.n	8003282 <HAL_UART_IRQHandler+0xd2>
 800326a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d005      	beq.n	8003282 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327a:	f043 0202 	orr.w	r2, r3, #2
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00b      	beq.n	80032a6 <HAL_UART_IRQHandler+0xf6>
 800328e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b00      	cmp	r3, #0
 8003298:	d005      	beq.n	80032a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329e:	f043 0204 	orr.w	r2, r3, #4
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80032a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032aa:	f003 0308 	and.w	r3, r3, #8
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d011      	beq.n	80032d6 <HAL_UART_IRQHandler+0x126>
 80032b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032b6:	f003 0320 	and.w	r3, r3, #32
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d105      	bne.n	80032ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80032be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d005      	beq.n	80032d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ce:	f043 0208 	orr.w	r2, r3, #8
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f000 81f2 	beq.w	80036c4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032e4:	f003 0320 	and.w	r3, r3, #32
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d008      	beq.n	80032fe <HAL_UART_IRQHandler+0x14e>
 80032ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032f0:	f003 0320 	and.w	r3, r3, #32
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d002      	beq.n	80032fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 fb5c 	bl	80039b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	695b      	ldr	r3, [r3, #20]
 8003304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003308:	2b00      	cmp	r3, #0
 800330a:	bf14      	ite	ne
 800330c:	2301      	movne	r3, #1
 800330e:	2300      	moveq	r3, #0
 8003310:	b2db      	uxtb	r3, r3
 8003312:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331a:	f003 0308 	and.w	r3, r3, #8
 800331e:	2b00      	cmp	r3, #0
 8003320:	d103      	bne.n	800332a <HAL_UART_IRQHandler+0x17a>
 8003322:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003326:	2b00      	cmp	r3, #0
 8003328:	d04f      	beq.n	80033ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 fa66 	bl	80037fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800333a:	2b00      	cmp	r3, #0
 800333c:	d041      	beq.n	80033c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	3314      	adds	r3, #20
 8003344:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003348:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800334c:	e853 3f00 	ldrex	r3, [r3]
 8003350:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003354:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003358:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800335c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	3314      	adds	r3, #20
 8003366:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800336a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800336e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003372:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003376:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800337a:	e841 2300 	strex	r3, r2, [r1]
 800337e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003382:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1d9      	bne.n	800333e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800338e:	2b00      	cmp	r3, #0
 8003390:	d013      	beq.n	80033ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003396:	4a7e      	ldr	r2, [pc, #504]	; (8003590 <HAL_UART_IRQHandler+0x3e0>)
 8003398:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fe f970 	bl	8001684 <HAL_DMA_Abort_IT>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d016      	beq.n	80033d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80033b4:	4610      	mov	r0, r2
 80033b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b8:	e00e      	b.n	80033d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f99c 	bl	80036f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c0:	e00a      	b.n	80033d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 f998 	bl	80036f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c8:	e006      	b.n	80033d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f994 	bl	80036f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80033d6:	e175      	b.n	80036c4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033d8:	bf00      	nop
    return;
 80033da:	e173      	b.n	80036c4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	f040 814f 	bne.w	8003684 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80033e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033ea:	f003 0310 	and.w	r3, r3, #16
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f000 8148 	beq.w	8003684 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80033f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033f8:	f003 0310 	and.w	r3, r3, #16
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f000 8141 	beq.w	8003684 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003402:	2300      	movs	r3, #0
 8003404:	60bb      	str	r3, [r7, #8]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	60bb      	str	r3, [r7, #8]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	60bb      	str	r3, [r7, #8]
 8003416:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 80b6 	beq.w	8003594 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003434:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003438:	2b00      	cmp	r3, #0
 800343a:	f000 8145 	beq.w	80036c8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003442:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003446:	429a      	cmp	r2, r3
 8003448:	f080 813e 	bcs.w	80036c8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003452:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	2b20      	cmp	r3, #32
 800345c:	f000 8088 	beq.w	8003570 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	330c      	adds	r3, #12
 8003466:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800346e:	e853 3f00 	ldrex	r3, [r3]
 8003472:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003476:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800347a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800347e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	330c      	adds	r3, #12
 8003488:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800348c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003490:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003494:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003498:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800349c:	e841 2300 	strex	r3, r2, [r1]
 80034a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80034a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1d9      	bne.n	8003460 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	3314      	adds	r3, #20
 80034b2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034b6:	e853 3f00 	ldrex	r3, [r3]
 80034ba:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80034bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034be:	f023 0301 	bic.w	r3, r3, #1
 80034c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	3314      	adds	r3, #20
 80034cc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80034d0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80034d4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80034d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80034dc:	e841 2300 	strex	r3, r2, [r1]
 80034e0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80034e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1e1      	bne.n	80034ac <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	3314      	adds	r3, #20
 80034ee:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034f2:	e853 3f00 	ldrex	r3, [r3]
 80034f6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80034f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	3314      	adds	r3, #20
 8003508:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800350c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800350e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003510:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003512:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003514:	e841 2300 	strex	r3, r2, [r1]
 8003518:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800351a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1e3      	bne.n	80034e8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2220      	movs	r2, #32
 8003524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	330c      	adds	r3, #12
 8003534:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003538:	e853 3f00 	ldrex	r3, [r3]
 800353c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800353e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003540:	f023 0310 	bic.w	r3, r3, #16
 8003544:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	330c      	adds	r3, #12
 800354e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003552:	65ba      	str	r2, [r7, #88]	; 0x58
 8003554:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003556:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003558:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800355a:	e841 2300 	strex	r3, r2, [r1]
 800355e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003560:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1e3      	bne.n	800352e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356a:	4618      	mov	r0, r3
 800356c:	f7fe f84f 	bl	800160e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2202      	movs	r2, #2
 8003574:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800357e:	b29b      	uxth	r3, r3
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	b29b      	uxth	r3, r3
 8003584:	4619      	mov	r1, r3
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f8bf 	bl	800370a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800358c:	e09c      	b.n	80036c8 <HAL_UART_IRQHandler+0x518>
 800358e:	bf00      	nop
 8003590:	080038c1 	.word	0x080038c1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800359c:	b29b      	uxth	r3, r3
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f000 808e 	beq.w	80036cc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80035b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 8089 	beq.w	80036cc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	330c      	adds	r3, #12
 80035c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c4:	e853 3f00 	ldrex	r3, [r3]
 80035c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80035ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	330c      	adds	r3, #12
 80035da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80035de:	647a      	str	r2, [r7, #68]	; 0x44
 80035e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80035e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035e6:	e841 2300 	strex	r3, r2, [r1]
 80035ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80035ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1e3      	bne.n	80035ba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	3314      	adds	r3, #20
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	e853 3f00 	ldrex	r3, [r3]
 8003600:	623b      	str	r3, [r7, #32]
   return(result);
 8003602:	6a3b      	ldr	r3, [r7, #32]
 8003604:	f023 0301 	bic.w	r3, r3, #1
 8003608:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	3314      	adds	r3, #20
 8003612:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003616:	633a      	str	r2, [r7, #48]	; 0x30
 8003618:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800361a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800361c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800361e:	e841 2300 	strex	r3, r2, [r1]
 8003622:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1e3      	bne.n	80035f2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2220      	movs	r2, #32
 800362e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	330c      	adds	r3, #12
 800363e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	e853 3f00 	ldrex	r3, [r3]
 8003646:	60fb      	str	r3, [r7, #12]
   return(result);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f023 0310 	bic.w	r3, r3, #16
 800364e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	330c      	adds	r3, #12
 8003658:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800365c:	61fa      	str	r2, [r7, #28]
 800365e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003660:	69b9      	ldr	r1, [r7, #24]
 8003662:	69fa      	ldr	r2, [r7, #28]
 8003664:	e841 2300 	strex	r3, r2, [r1]
 8003668:	617b      	str	r3, [r7, #20]
   return(result);
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1e3      	bne.n	8003638 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2202      	movs	r2, #2
 8003674:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003676:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800367a:	4619      	mov	r1, r3
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 f844 	bl	800370a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003682:	e023      	b.n	80036cc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800368c:	2b00      	cmp	r3, #0
 800368e:	d009      	beq.n	80036a4 <HAL_UART_IRQHandler+0x4f4>
 8003690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003698:	2b00      	cmp	r3, #0
 800369a:	d003      	beq.n	80036a4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 f923 	bl	80038e8 <UART_Transmit_IT>
    return;
 80036a2:	e014      	b.n	80036ce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80036a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00e      	beq.n	80036ce <HAL_UART_IRQHandler+0x51e>
 80036b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d008      	beq.n	80036ce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 f962 	bl	8003986 <UART_EndTransmit_IT>
    return;
 80036c2:	e004      	b.n	80036ce <HAL_UART_IRQHandler+0x51e>
    return;
 80036c4:	bf00      	nop
 80036c6:	e002      	b.n	80036ce <HAL_UART_IRQHandler+0x51e>
      return;
 80036c8:	bf00      	nop
 80036ca:	e000      	b.n	80036ce <HAL_UART_IRQHandler+0x51e>
      return;
 80036cc:	bf00      	nop
  }
}
 80036ce:	37e8      	adds	r7, #232	; 0xe8
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bc80      	pop	{r7}
 80036e4:	4770      	bx	lr

080036e6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b083      	sub	sp, #12
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80036ee:	bf00      	nop
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bc80      	pop	{r7}
 80036f6:	4770      	bx	lr

080036f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	bc80      	pop	{r7}
 8003708:	4770      	bx	lr

0800370a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
 8003712:	460b      	mov	r3, r1
 8003714:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003716:	bf00      	nop
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	bc80      	pop	{r7}
 800371e:	4770      	bx	lr

08003720 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b090      	sub	sp, #64	; 0x40
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	603b      	str	r3, [r7, #0]
 800372c:	4613      	mov	r3, r2
 800372e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003730:	e050      	b.n	80037d4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003738:	d04c      	beq.n	80037d4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800373a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800373c:	2b00      	cmp	r3, #0
 800373e:	d007      	beq.n	8003750 <UART_WaitOnFlagUntilTimeout+0x30>
 8003740:	f7fd fe2a 	bl	8001398 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800374c:	429a      	cmp	r2, r3
 800374e:	d241      	bcs.n	80037d4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	330c      	adds	r3, #12
 8003756:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800375a:	e853 3f00 	ldrex	r3, [r3]
 800375e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003762:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003766:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	330c      	adds	r3, #12
 800376e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003770:	637a      	str	r2, [r7, #52]	; 0x34
 8003772:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003774:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003776:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003778:	e841 2300 	strex	r3, r2, [r1]
 800377c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800377e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1e5      	bne.n	8003750 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	3314      	adds	r3, #20
 800378a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	e853 3f00 	ldrex	r3, [r3]
 8003792:	613b      	str	r3, [r7, #16]
   return(result);
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	f023 0301 	bic.w	r3, r3, #1
 800379a:	63bb      	str	r3, [r7, #56]	; 0x38
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	3314      	adds	r3, #20
 80037a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037a4:	623a      	str	r2, [r7, #32]
 80037a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a8:	69f9      	ldr	r1, [r7, #28]
 80037aa:	6a3a      	ldr	r2, [r7, #32]
 80037ac:	e841 2300 	strex	r3, r2, [r1]
 80037b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1e5      	bne.n	8003784 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2220      	movs	r2, #32
 80037bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2220      	movs	r2, #32
 80037c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e00f      	b.n	80037f4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	4013      	ands	r3, r2
 80037de:	68ba      	ldr	r2, [r7, #8]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	bf0c      	ite	eq
 80037e4:	2301      	moveq	r3, #1
 80037e6:	2300      	movne	r3, #0
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	461a      	mov	r2, r3
 80037ec:	79fb      	ldrb	r3, [r7, #7]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d09f      	beq.n	8003732 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3740      	adds	r7, #64	; 0x40
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b095      	sub	sp, #84	; 0x54
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	330c      	adds	r3, #12
 800380a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800380c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800380e:	e853 3f00 	ldrex	r3, [r3]
 8003812:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003816:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800381a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	330c      	adds	r3, #12
 8003822:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003824:	643a      	str	r2, [r7, #64]	; 0x40
 8003826:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003828:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800382a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800382c:	e841 2300 	strex	r3, r2, [r1]
 8003830:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1e5      	bne.n	8003804 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	3314      	adds	r3, #20
 800383e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003840:	6a3b      	ldr	r3, [r7, #32]
 8003842:	e853 3f00 	ldrex	r3, [r3]
 8003846:	61fb      	str	r3, [r7, #28]
   return(result);
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	f023 0301 	bic.w	r3, r3, #1
 800384e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	3314      	adds	r3, #20
 8003856:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003858:	62fa      	str	r2, [r7, #44]	; 0x2c
 800385a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800385e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003860:	e841 2300 	strex	r3, r2, [r1]
 8003864:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1e5      	bne.n	8003838 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003870:	2b01      	cmp	r3, #1
 8003872:	d119      	bne.n	80038a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	330c      	adds	r3, #12
 800387a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	e853 3f00 	ldrex	r3, [r3]
 8003882:	60bb      	str	r3, [r7, #8]
   return(result);
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	f023 0310 	bic.w	r3, r3, #16
 800388a:	647b      	str	r3, [r7, #68]	; 0x44
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	330c      	adds	r3, #12
 8003892:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003894:	61ba      	str	r2, [r7, #24]
 8003896:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003898:	6979      	ldr	r1, [r7, #20]
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	e841 2300 	strex	r3, r2, [r1]
 80038a0:	613b      	str	r3, [r7, #16]
   return(result);
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1e5      	bne.n	8003874 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2220      	movs	r2, #32
 80038ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80038b6:	bf00      	nop
 80038b8:	3754      	adds	r7, #84	; 0x54
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bc80      	pop	{r7}
 80038be:	4770      	bx	lr

080038c0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f7ff ff0c 	bl	80036f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038e0:	bf00      	nop
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b21      	cmp	r3, #33	; 0x21
 80038fa:	d13e      	bne.n	800397a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003904:	d114      	bne.n	8003930 <UART_Transmit_IT+0x48>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d110      	bne.n	8003930 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	881b      	ldrh	r3, [r3, #0]
 8003918:	461a      	mov	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003922:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a1b      	ldr	r3, [r3, #32]
 8003928:	1c9a      	adds	r2, r3, #2
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	621a      	str	r2, [r3, #32]
 800392e:	e008      	b.n	8003942 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	1c59      	adds	r1, r3, #1
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	6211      	str	r1, [r2, #32]
 800393a:	781a      	ldrb	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003946:	b29b      	uxth	r3, r3
 8003948:	3b01      	subs	r3, #1
 800394a:	b29b      	uxth	r3, r3
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	4619      	mov	r1, r3
 8003950:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10f      	bne.n	8003976 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68da      	ldr	r2, [r3, #12]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003964:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68da      	ldr	r2, [r3, #12]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003974:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003976:	2300      	movs	r3, #0
 8003978:	e000      	b.n	800397c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800397a:	2302      	movs	r3, #2
  }
}
 800397c:	4618      	mov	r0, r3
 800397e:	3714      	adds	r7, #20
 8003980:	46bd      	mov	sp, r7
 8003982:	bc80      	pop	{r7}
 8003984:	4770      	bx	lr

08003986 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b082      	sub	sp, #8
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68da      	ldr	r2, [r3, #12]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800399c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2220      	movs	r2, #32
 80039a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7ff fe94 	bl	80036d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b08c      	sub	sp, #48	; 0x30
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b22      	cmp	r3, #34	; 0x22
 80039c8:	f040 80ae 	bne.w	8003b28 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039d4:	d117      	bne.n	8003a06 <UART_Receive_IT+0x50>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d113      	bne.n	8003a06 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80039de:	2300      	movs	r3, #0
 80039e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fe:	1c9a      	adds	r2, r3, #2
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	629a      	str	r2, [r3, #40]	; 0x28
 8003a04:	e026      	b.n	8003a54 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a18:	d007      	beq.n	8003a2a <UART_Receive_IT+0x74>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10a      	bne.n	8003a38 <UART_Receive_IT+0x82>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d106      	bne.n	8003a38 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a34:	701a      	strb	r2, [r3, #0]
 8003a36:	e008      	b.n	8003a4a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a44:	b2da      	uxtb	r2, r3
 8003a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a48:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4e:	1c5a      	adds	r2, r3, #1
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	4619      	mov	r1, r3
 8003a62:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d15d      	bne.n	8003b24 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68da      	ldr	r2, [r3, #12]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0220 	bic.w	r2, r2, #32
 8003a76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68da      	ldr	r2, [r3, #12]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	695a      	ldr	r2, [r3, #20]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 0201 	bic.w	r2, r2, #1
 8003a96:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d135      	bne.n	8003b1a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	330c      	adds	r3, #12
 8003aba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	e853 3f00 	ldrex	r3, [r3]
 8003ac2:	613b      	str	r3, [r7, #16]
   return(result);
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	f023 0310 	bic.w	r3, r3, #16
 8003aca:	627b      	str	r3, [r7, #36]	; 0x24
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	330c      	adds	r3, #12
 8003ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ad4:	623a      	str	r2, [r7, #32]
 8003ad6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad8:	69f9      	ldr	r1, [r7, #28]
 8003ada:	6a3a      	ldr	r2, [r7, #32]
 8003adc:	e841 2300 	strex	r3, r2, [r1]
 8003ae0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1e5      	bne.n	8003ab4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0310 	and.w	r3, r3, #16
 8003af2:	2b10      	cmp	r3, #16
 8003af4:	d10a      	bne.n	8003b0c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003af6:	2300      	movs	r3, #0
 8003af8:	60fb      	str	r3, [r7, #12]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	60fb      	str	r3, [r7, #12]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	60fb      	str	r3, [r7, #12]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b10:	4619      	mov	r1, r3
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f7ff fdf9 	bl	800370a <HAL_UARTEx_RxEventCallback>
 8003b18:	e002      	b.n	8003b20 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7ff fde3 	bl	80036e6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003b20:	2300      	movs	r3, #0
 8003b22:	e002      	b.n	8003b2a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003b24:	2300      	movs	r3, #0
 8003b26:	e000      	b.n	8003b2a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003b28:	2302      	movs	r3, #2
  }
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3730      	adds	r7, #48	; 0x30
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
	...

08003b34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68da      	ldr	r2, [r3, #12]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689a      	ldr	r2, [r3, #8]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003b6e:	f023 030c 	bic.w	r3, r3, #12
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	6812      	ldr	r2, [r2, #0]
 8003b76:	68b9      	ldr	r1, [r7, #8]
 8003b78:	430b      	orrs	r3, r1
 8003b7a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	699a      	ldr	r2, [r3, #24]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a2c      	ldr	r2, [pc, #176]	; (8003c48 <UART_SetConfig+0x114>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d103      	bne.n	8003ba4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b9c:	f7fe fb96 	bl	80022cc <HAL_RCC_GetPCLK2Freq>
 8003ba0:	60f8      	str	r0, [r7, #12]
 8003ba2:	e002      	b.n	8003baa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003ba4:	f7fe fb7e 	bl	80022a4 <HAL_RCC_GetPCLK1Freq>
 8003ba8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	4613      	mov	r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	4413      	add	r3, r2
 8003bb2:	009a      	lsls	r2, r3, #2
 8003bb4:	441a      	add	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc0:	4a22      	ldr	r2, [pc, #136]	; (8003c4c <UART_SetConfig+0x118>)
 8003bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc6:	095b      	lsrs	r3, r3, #5
 8003bc8:	0119      	lsls	r1, r3, #4
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4413      	add	r3, r2
 8003bd2:	009a      	lsls	r2, r3, #2
 8003bd4:	441a      	add	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003be0:	4b1a      	ldr	r3, [pc, #104]	; (8003c4c <UART_SetConfig+0x118>)
 8003be2:	fba3 0302 	umull	r0, r3, r3, r2
 8003be6:	095b      	lsrs	r3, r3, #5
 8003be8:	2064      	movs	r0, #100	; 0x64
 8003bea:	fb00 f303 	mul.w	r3, r0, r3
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	011b      	lsls	r3, r3, #4
 8003bf2:	3332      	adds	r3, #50	; 0x32
 8003bf4:	4a15      	ldr	r2, [pc, #84]	; (8003c4c <UART_SetConfig+0x118>)
 8003bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfa:	095b      	lsrs	r3, r3, #5
 8003bfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c00:	4419      	add	r1, r3
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	4613      	mov	r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	4413      	add	r3, r2
 8003c0a:	009a      	lsls	r2, r3, #2
 8003c0c:	441a      	add	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c18:	4b0c      	ldr	r3, [pc, #48]	; (8003c4c <UART_SetConfig+0x118>)
 8003c1a:	fba3 0302 	umull	r0, r3, r3, r2
 8003c1e:	095b      	lsrs	r3, r3, #5
 8003c20:	2064      	movs	r0, #100	; 0x64
 8003c22:	fb00 f303 	mul.w	r3, r0, r3
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	011b      	lsls	r3, r3, #4
 8003c2a:	3332      	adds	r3, #50	; 0x32
 8003c2c:	4a07      	ldr	r2, [pc, #28]	; (8003c4c <UART_SetConfig+0x118>)
 8003c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c32:	095b      	lsrs	r3, r3, #5
 8003c34:	f003 020f 	and.w	r2, r3, #15
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	440a      	add	r2, r1
 8003c3e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003c40:	bf00      	nop
 8003c42:	3710      	adds	r7, #16
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	40013800 	.word	0x40013800
 8003c4c:	51eb851f 	.word	0x51eb851f

08003c50 <sbrk_aligned>:
 8003c50:	b570      	push	{r4, r5, r6, lr}
 8003c52:	4e0e      	ldr	r6, [pc, #56]	; (8003c8c <sbrk_aligned+0x3c>)
 8003c54:	460c      	mov	r4, r1
 8003c56:	6831      	ldr	r1, [r6, #0]
 8003c58:	4605      	mov	r5, r0
 8003c5a:	b911      	cbnz	r1, 8003c62 <sbrk_aligned+0x12>
 8003c5c:	f000 f8cc 	bl	8003df8 <_sbrk_r>
 8003c60:	6030      	str	r0, [r6, #0]
 8003c62:	4621      	mov	r1, r4
 8003c64:	4628      	mov	r0, r5
 8003c66:	f000 f8c7 	bl	8003df8 <_sbrk_r>
 8003c6a:	1c43      	adds	r3, r0, #1
 8003c6c:	d00a      	beq.n	8003c84 <sbrk_aligned+0x34>
 8003c6e:	1cc4      	adds	r4, r0, #3
 8003c70:	f024 0403 	bic.w	r4, r4, #3
 8003c74:	42a0      	cmp	r0, r4
 8003c76:	d007      	beq.n	8003c88 <sbrk_aligned+0x38>
 8003c78:	1a21      	subs	r1, r4, r0
 8003c7a:	4628      	mov	r0, r5
 8003c7c:	f000 f8bc 	bl	8003df8 <_sbrk_r>
 8003c80:	3001      	adds	r0, #1
 8003c82:	d101      	bne.n	8003c88 <sbrk_aligned+0x38>
 8003c84:	f04f 34ff 	mov.w	r4, #4294967295
 8003c88:	4620      	mov	r0, r4
 8003c8a:	bd70      	pop	{r4, r5, r6, pc}
 8003c8c:	2000062c 	.word	0x2000062c

08003c90 <_malloc_r>:
 8003c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c94:	1ccd      	adds	r5, r1, #3
 8003c96:	f025 0503 	bic.w	r5, r5, #3
 8003c9a:	3508      	adds	r5, #8
 8003c9c:	2d0c      	cmp	r5, #12
 8003c9e:	bf38      	it	cc
 8003ca0:	250c      	movcc	r5, #12
 8003ca2:	2d00      	cmp	r5, #0
 8003ca4:	4607      	mov	r7, r0
 8003ca6:	db01      	blt.n	8003cac <_malloc_r+0x1c>
 8003ca8:	42a9      	cmp	r1, r5
 8003caa:	d905      	bls.n	8003cb8 <_malloc_r+0x28>
 8003cac:	230c      	movs	r3, #12
 8003cae:	2600      	movs	r6, #0
 8003cb0:	603b      	str	r3, [r7, #0]
 8003cb2:	4630      	mov	r0, r6
 8003cb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cb8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003d8c <_malloc_r+0xfc>
 8003cbc:	f000 f868 	bl	8003d90 <__malloc_lock>
 8003cc0:	f8d8 3000 	ldr.w	r3, [r8]
 8003cc4:	461c      	mov	r4, r3
 8003cc6:	bb5c      	cbnz	r4, 8003d20 <_malloc_r+0x90>
 8003cc8:	4629      	mov	r1, r5
 8003cca:	4638      	mov	r0, r7
 8003ccc:	f7ff ffc0 	bl	8003c50 <sbrk_aligned>
 8003cd0:	1c43      	adds	r3, r0, #1
 8003cd2:	4604      	mov	r4, r0
 8003cd4:	d155      	bne.n	8003d82 <_malloc_r+0xf2>
 8003cd6:	f8d8 4000 	ldr.w	r4, [r8]
 8003cda:	4626      	mov	r6, r4
 8003cdc:	2e00      	cmp	r6, #0
 8003cde:	d145      	bne.n	8003d6c <_malloc_r+0xdc>
 8003ce0:	2c00      	cmp	r4, #0
 8003ce2:	d048      	beq.n	8003d76 <_malloc_r+0xe6>
 8003ce4:	6823      	ldr	r3, [r4, #0]
 8003ce6:	4631      	mov	r1, r6
 8003ce8:	4638      	mov	r0, r7
 8003cea:	eb04 0903 	add.w	r9, r4, r3
 8003cee:	f000 f883 	bl	8003df8 <_sbrk_r>
 8003cf2:	4581      	cmp	r9, r0
 8003cf4:	d13f      	bne.n	8003d76 <_malloc_r+0xe6>
 8003cf6:	6821      	ldr	r1, [r4, #0]
 8003cf8:	4638      	mov	r0, r7
 8003cfa:	1a6d      	subs	r5, r5, r1
 8003cfc:	4629      	mov	r1, r5
 8003cfe:	f7ff ffa7 	bl	8003c50 <sbrk_aligned>
 8003d02:	3001      	adds	r0, #1
 8003d04:	d037      	beq.n	8003d76 <_malloc_r+0xe6>
 8003d06:	6823      	ldr	r3, [r4, #0]
 8003d08:	442b      	add	r3, r5
 8003d0a:	6023      	str	r3, [r4, #0]
 8003d0c:	f8d8 3000 	ldr.w	r3, [r8]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d038      	beq.n	8003d86 <_malloc_r+0xf6>
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	42a2      	cmp	r2, r4
 8003d18:	d12b      	bne.n	8003d72 <_malloc_r+0xe2>
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	605a      	str	r2, [r3, #4]
 8003d1e:	e00f      	b.n	8003d40 <_malloc_r+0xb0>
 8003d20:	6822      	ldr	r2, [r4, #0]
 8003d22:	1b52      	subs	r2, r2, r5
 8003d24:	d41f      	bmi.n	8003d66 <_malloc_r+0xd6>
 8003d26:	2a0b      	cmp	r2, #11
 8003d28:	d917      	bls.n	8003d5a <_malloc_r+0xca>
 8003d2a:	1961      	adds	r1, r4, r5
 8003d2c:	42a3      	cmp	r3, r4
 8003d2e:	6025      	str	r5, [r4, #0]
 8003d30:	bf18      	it	ne
 8003d32:	6059      	strne	r1, [r3, #4]
 8003d34:	6863      	ldr	r3, [r4, #4]
 8003d36:	bf08      	it	eq
 8003d38:	f8c8 1000 	streq.w	r1, [r8]
 8003d3c:	5162      	str	r2, [r4, r5]
 8003d3e:	604b      	str	r3, [r1, #4]
 8003d40:	4638      	mov	r0, r7
 8003d42:	f104 060b 	add.w	r6, r4, #11
 8003d46:	f000 f829 	bl	8003d9c <__malloc_unlock>
 8003d4a:	f026 0607 	bic.w	r6, r6, #7
 8003d4e:	1d23      	adds	r3, r4, #4
 8003d50:	1af2      	subs	r2, r6, r3
 8003d52:	d0ae      	beq.n	8003cb2 <_malloc_r+0x22>
 8003d54:	1b9b      	subs	r3, r3, r6
 8003d56:	50a3      	str	r3, [r4, r2]
 8003d58:	e7ab      	b.n	8003cb2 <_malloc_r+0x22>
 8003d5a:	42a3      	cmp	r3, r4
 8003d5c:	6862      	ldr	r2, [r4, #4]
 8003d5e:	d1dd      	bne.n	8003d1c <_malloc_r+0x8c>
 8003d60:	f8c8 2000 	str.w	r2, [r8]
 8003d64:	e7ec      	b.n	8003d40 <_malloc_r+0xb0>
 8003d66:	4623      	mov	r3, r4
 8003d68:	6864      	ldr	r4, [r4, #4]
 8003d6a:	e7ac      	b.n	8003cc6 <_malloc_r+0x36>
 8003d6c:	4634      	mov	r4, r6
 8003d6e:	6876      	ldr	r6, [r6, #4]
 8003d70:	e7b4      	b.n	8003cdc <_malloc_r+0x4c>
 8003d72:	4613      	mov	r3, r2
 8003d74:	e7cc      	b.n	8003d10 <_malloc_r+0x80>
 8003d76:	230c      	movs	r3, #12
 8003d78:	4638      	mov	r0, r7
 8003d7a:	603b      	str	r3, [r7, #0]
 8003d7c:	f000 f80e 	bl	8003d9c <__malloc_unlock>
 8003d80:	e797      	b.n	8003cb2 <_malloc_r+0x22>
 8003d82:	6025      	str	r5, [r4, #0]
 8003d84:	e7dc      	b.n	8003d40 <_malloc_r+0xb0>
 8003d86:	605b      	str	r3, [r3, #4]
 8003d88:	deff      	udf	#255	; 0xff
 8003d8a:	bf00      	nop
 8003d8c:	20000628 	.word	0x20000628

08003d90 <__malloc_lock>:
 8003d90:	4801      	ldr	r0, [pc, #4]	; (8003d98 <__malloc_lock+0x8>)
 8003d92:	f000 b86b 	b.w	8003e6c <__retarget_lock_acquire_recursive>
 8003d96:	bf00      	nop
 8003d98:	2000076c 	.word	0x2000076c

08003d9c <__malloc_unlock>:
 8003d9c:	4801      	ldr	r0, [pc, #4]	; (8003da4 <__malloc_unlock+0x8>)
 8003d9e:	f000 b866 	b.w	8003e6e <__retarget_lock_release_recursive>
 8003da2:	bf00      	nop
 8003da4:	2000076c 	.word	0x2000076c

08003da8 <siprintf>:
 8003da8:	b40e      	push	{r1, r2, r3}
 8003daa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003dae:	b500      	push	{lr}
 8003db0:	b09c      	sub	sp, #112	; 0x70
 8003db2:	ab1d      	add	r3, sp, #116	; 0x74
 8003db4:	9002      	str	r0, [sp, #8]
 8003db6:	9006      	str	r0, [sp, #24]
 8003db8:	9107      	str	r1, [sp, #28]
 8003dba:	9104      	str	r1, [sp, #16]
 8003dbc:	4808      	ldr	r0, [pc, #32]	; (8003de0 <siprintf+0x38>)
 8003dbe:	4909      	ldr	r1, [pc, #36]	; (8003de4 <siprintf+0x3c>)
 8003dc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003dc4:	9105      	str	r1, [sp, #20]
 8003dc6:	6800      	ldr	r0, [r0, #0]
 8003dc8:	a902      	add	r1, sp, #8
 8003dca:	9301      	str	r3, [sp, #4]
 8003dcc:	f000 f8f2 	bl	8003fb4 <_svfiprintf_r>
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	9b02      	ldr	r3, [sp, #8]
 8003dd4:	701a      	strb	r2, [r3, #0]
 8003dd6:	b01c      	add	sp, #112	; 0x70
 8003dd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ddc:	b003      	add	sp, #12
 8003dde:	4770      	bx	lr
 8003de0:	20000070 	.word	0x20000070
 8003de4:	ffff0208 	.word	0xffff0208

08003de8 <memset>:
 8003de8:	4603      	mov	r3, r0
 8003dea:	4402      	add	r2, r0
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d100      	bne.n	8003df2 <memset+0xa>
 8003df0:	4770      	bx	lr
 8003df2:	f803 1b01 	strb.w	r1, [r3], #1
 8003df6:	e7f9      	b.n	8003dec <memset+0x4>

08003df8 <_sbrk_r>:
 8003df8:	b538      	push	{r3, r4, r5, lr}
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	4d05      	ldr	r5, [pc, #20]	; (8003e14 <_sbrk_r+0x1c>)
 8003dfe:	4604      	mov	r4, r0
 8003e00:	4608      	mov	r0, r1
 8003e02:	602b      	str	r3, [r5, #0]
 8003e04:	f7fd fa0e 	bl	8001224 <_sbrk>
 8003e08:	1c43      	adds	r3, r0, #1
 8003e0a:	d102      	bne.n	8003e12 <_sbrk_r+0x1a>
 8003e0c:	682b      	ldr	r3, [r5, #0]
 8003e0e:	b103      	cbz	r3, 8003e12 <_sbrk_r+0x1a>
 8003e10:	6023      	str	r3, [r4, #0]
 8003e12:	bd38      	pop	{r3, r4, r5, pc}
 8003e14:	20000768 	.word	0x20000768

08003e18 <__errno>:
 8003e18:	4b01      	ldr	r3, [pc, #4]	; (8003e20 <__errno+0x8>)
 8003e1a:	6818      	ldr	r0, [r3, #0]
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	20000070 	.word	0x20000070

08003e24 <__libc_init_array>:
 8003e24:	b570      	push	{r4, r5, r6, lr}
 8003e26:	2600      	movs	r6, #0
 8003e28:	4d0c      	ldr	r5, [pc, #48]	; (8003e5c <__libc_init_array+0x38>)
 8003e2a:	4c0d      	ldr	r4, [pc, #52]	; (8003e60 <__libc_init_array+0x3c>)
 8003e2c:	1b64      	subs	r4, r4, r5
 8003e2e:	10a4      	asrs	r4, r4, #2
 8003e30:	42a6      	cmp	r6, r4
 8003e32:	d109      	bne.n	8003e48 <__libc_init_array+0x24>
 8003e34:	f000 fbbe 	bl	80045b4 <_init>
 8003e38:	2600      	movs	r6, #0
 8003e3a:	4d0a      	ldr	r5, [pc, #40]	; (8003e64 <__libc_init_array+0x40>)
 8003e3c:	4c0a      	ldr	r4, [pc, #40]	; (8003e68 <__libc_init_array+0x44>)
 8003e3e:	1b64      	subs	r4, r4, r5
 8003e40:	10a4      	asrs	r4, r4, #2
 8003e42:	42a6      	cmp	r6, r4
 8003e44:	d105      	bne.n	8003e52 <__libc_init_array+0x2e>
 8003e46:	bd70      	pop	{r4, r5, r6, pc}
 8003e48:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e4c:	4798      	blx	r3
 8003e4e:	3601      	adds	r6, #1
 8003e50:	e7ee      	b.n	8003e30 <__libc_init_array+0xc>
 8003e52:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e56:	4798      	blx	r3
 8003e58:	3601      	adds	r6, #1
 8003e5a:	e7f2      	b.n	8003e42 <__libc_init_array+0x1e>
 8003e5c:	08005b80 	.word	0x08005b80
 8003e60:	08005b80 	.word	0x08005b80
 8003e64:	08005b80 	.word	0x08005b80
 8003e68:	08005b84 	.word	0x08005b84

08003e6c <__retarget_lock_acquire_recursive>:
 8003e6c:	4770      	bx	lr

08003e6e <__retarget_lock_release_recursive>:
 8003e6e:	4770      	bx	lr

08003e70 <_free_r>:
 8003e70:	b538      	push	{r3, r4, r5, lr}
 8003e72:	4605      	mov	r5, r0
 8003e74:	2900      	cmp	r1, #0
 8003e76:	d040      	beq.n	8003efa <_free_r+0x8a>
 8003e78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e7c:	1f0c      	subs	r4, r1, #4
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	bfb8      	it	lt
 8003e82:	18e4      	addlt	r4, r4, r3
 8003e84:	f7ff ff84 	bl	8003d90 <__malloc_lock>
 8003e88:	4a1c      	ldr	r2, [pc, #112]	; (8003efc <_free_r+0x8c>)
 8003e8a:	6813      	ldr	r3, [r2, #0]
 8003e8c:	b933      	cbnz	r3, 8003e9c <_free_r+0x2c>
 8003e8e:	6063      	str	r3, [r4, #4]
 8003e90:	6014      	str	r4, [r2, #0]
 8003e92:	4628      	mov	r0, r5
 8003e94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e98:	f7ff bf80 	b.w	8003d9c <__malloc_unlock>
 8003e9c:	42a3      	cmp	r3, r4
 8003e9e:	d908      	bls.n	8003eb2 <_free_r+0x42>
 8003ea0:	6820      	ldr	r0, [r4, #0]
 8003ea2:	1821      	adds	r1, r4, r0
 8003ea4:	428b      	cmp	r3, r1
 8003ea6:	bf01      	itttt	eq
 8003ea8:	6819      	ldreq	r1, [r3, #0]
 8003eaa:	685b      	ldreq	r3, [r3, #4]
 8003eac:	1809      	addeq	r1, r1, r0
 8003eae:	6021      	streq	r1, [r4, #0]
 8003eb0:	e7ed      	b.n	8003e8e <_free_r+0x1e>
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	b10b      	cbz	r3, 8003ebc <_free_r+0x4c>
 8003eb8:	42a3      	cmp	r3, r4
 8003eba:	d9fa      	bls.n	8003eb2 <_free_r+0x42>
 8003ebc:	6811      	ldr	r1, [r2, #0]
 8003ebe:	1850      	adds	r0, r2, r1
 8003ec0:	42a0      	cmp	r0, r4
 8003ec2:	d10b      	bne.n	8003edc <_free_r+0x6c>
 8003ec4:	6820      	ldr	r0, [r4, #0]
 8003ec6:	4401      	add	r1, r0
 8003ec8:	1850      	adds	r0, r2, r1
 8003eca:	4283      	cmp	r3, r0
 8003ecc:	6011      	str	r1, [r2, #0]
 8003ece:	d1e0      	bne.n	8003e92 <_free_r+0x22>
 8003ed0:	6818      	ldr	r0, [r3, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	4408      	add	r0, r1
 8003ed6:	6010      	str	r0, [r2, #0]
 8003ed8:	6053      	str	r3, [r2, #4]
 8003eda:	e7da      	b.n	8003e92 <_free_r+0x22>
 8003edc:	d902      	bls.n	8003ee4 <_free_r+0x74>
 8003ede:	230c      	movs	r3, #12
 8003ee0:	602b      	str	r3, [r5, #0]
 8003ee2:	e7d6      	b.n	8003e92 <_free_r+0x22>
 8003ee4:	6820      	ldr	r0, [r4, #0]
 8003ee6:	1821      	adds	r1, r4, r0
 8003ee8:	428b      	cmp	r3, r1
 8003eea:	bf01      	itttt	eq
 8003eec:	6819      	ldreq	r1, [r3, #0]
 8003eee:	685b      	ldreq	r3, [r3, #4]
 8003ef0:	1809      	addeq	r1, r1, r0
 8003ef2:	6021      	streq	r1, [r4, #0]
 8003ef4:	6063      	str	r3, [r4, #4]
 8003ef6:	6054      	str	r4, [r2, #4]
 8003ef8:	e7cb      	b.n	8003e92 <_free_r+0x22>
 8003efa:	bd38      	pop	{r3, r4, r5, pc}
 8003efc:	20000628 	.word	0x20000628

08003f00 <__ssputs_r>:
 8003f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f04:	461f      	mov	r7, r3
 8003f06:	688e      	ldr	r6, [r1, #8]
 8003f08:	4682      	mov	sl, r0
 8003f0a:	42be      	cmp	r6, r7
 8003f0c:	460c      	mov	r4, r1
 8003f0e:	4690      	mov	r8, r2
 8003f10:	680b      	ldr	r3, [r1, #0]
 8003f12:	d82c      	bhi.n	8003f6e <__ssputs_r+0x6e>
 8003f14:	898a      	ldrh	r2, [r1, #12]
 8003f16:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003f1a:	d026      	beq.n	8003f6a <__ssputs_r+0x6a>
 8003f1c:	6965      	ldr	r5, [r4, #20]
 8003f1e:	6909      	ldr	r1, [r1, #16]
 8003f20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f24:	eba3 0901 	sub.w	r9, r3, r1
 8003f28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f2c:	1c7b      	adds	r3, r7, #1
 8003f2e:	444b      	add	r3, r9
 8003f30:	106d      	asrs	r5, r5, #1
 8003f32:	429d      	cmp	r5, r3
 8003f34:	bf38      	it	cc
 8003f36:	461d      	movcc	r5, r3
 8003f38:	0553      	lsls	r3, r2, #21
 8003f3a:	d527      	bpl.n	8003f8c <__ssputs_r+0x8c>
 8003f3c:	4629      	mov	r1, r5
 8003f3e:	f7ff fea7 	bl	8003c90 <_malloc_r>
 8003f42:	4606      	mov	r6, r0
 8003f44:	b360      	cbz	r0, 8003fa0 <__ssputs_r+0xa0>
 8003f46:	464a      	mov	r2, r9
 8003f48:	6921      	ldr	r1, [r4, #16]
 8003f4a:	f000 faed 	bl	8004528 <memcpy>
 8003f4e:	89a3      	ldrh	r3, [r4, #12]
 8003f50:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f58:	81a3      	strh	r3, [r4, #12]
 8003f5a:	6126      	str	r6, [r4, #16]
 8003f5c:	444e      	add	r6, r9
 8003f5e:	6026      	str	r6, [r4, #0]
 8003f60:	463e      	mov	r6, r7
 8003f62:	6165      	str	r5, [r4, #20]
 8003f64:	eba5 0509 	sub.w	r5, r5, r9
 8003f68:	60a5      	str	r5, [r4, #8]
 8003f6a:	42be      	cmp	r6, r7
 8003f6c:	d900      	bls.n	8003f70 <__ssputs_r+0x70>
 8003f6e:	463e      	mov	r6, r7
 8003f70:	4632      	mov	r2, r6
 8003f72:	4641      	mov	r1, r8
 8003f74:	6820      	ldr	r0, [r4, #0]
 8003f76:	f000 faaf 	bl	80044d8 <memmove>
 8003f7a:	2000      	movs	r0, #0
 8003f7c:	68a3      	ldr	r3, [r4, #8]
 8003f7e:	1b9b      	subs	r3, r3, r6
 8003f80:	60a3      	str	r3, [r4, #8]
 8003f82:	6823      	ldr	r3, [r4, #0]
 8003f84:	4433      	add	r3, r6
 8003f86:	6023      	str	r3, [r4, #0]
 8003f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f8c:	462a      	mov	r2, r5
 8003f8e:	f000 fad9 	bl	8004544 <_realloc_r>
 8003f92:	4606      	mov	r6, r0
 8003f94:	2800      	cmp	r0, #0
 8003f96:	d1e0      	bne.n	8003f5a <__ssputs_r+0x5a>
 8003f98:	4650      	mov	r0, sl
 8003f9a:	6921      	ldr	r1, [r4, #16]
 8003f9c:	f7ff ff68 	bl	8003e70 <_free_r>
 8003fa0:	230c      	movs	r3, #12
 8003fa2:	f8ca 3000 	str.w	r3, [sl]
 8003fa6:	89a3      	ldrh	r3, [r4, #12]
 8003fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fb0:	81a3      	strh	r3, [r4, #12]
 8003fb2:	e7e9      	b.n	8003f88 <__ssputs_r+0x88>

08003fb4 <_svfiprintf_r>:
 8003fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fb8:	4698      	mov	r8, r3
 8003fba:	898b      	ldrh	r3, [r1, #12]
 8003fbc:	4607      	mov	r7, r0
 8003fbe:	061b      	lsls	r3, r3, #24
 8003fc0:	460d      	mov	r5, r1
 8003fc2:	4614      	mov	r4, r2
 8003fc4:	b09d      	sub	sp, #116	; 0x74
 8003fc6:	d50e      	bpl.n	8003fe6 <_svfiprintf_r+0x32>
 8003fc8:	690b      	ldr	r3, [r1, #16]
 8003fca:	b963      	cbnz	r3, 8003fe6 <_svfiprintf_r+0x32>
 8003fcc:	2140      	movs	r1, #64	; 0x40
 8003fce:	f7ff fe5f 	bl	8003c90 <_malloc_r>
 8003fd2:	6028      	str	r0, [r5, #0]
 8003fd4:	6128      	str	r0, [r5, #16]
 8003fd6:	b920      	cbnz	r0, 8003fe2 <_svfiprintf_r+0x2e>
 8003fd8:	230c      	movs	r3, #12
 8003fda:	603b      	str	r3, [r7, #0]
 8003fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8003fe0:	e0d0      	b.n	8004184 <_svfiprintf_r+0x1d0>
 8003fe2:	2340      	movs	r3, #64	; 0x40
 8003fe4:	616b      	str	r3, [r5, #20]
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	9309      	str	r3, [sp, #36]	; 0x24
 8003fea:	2320      	movs	r3, #32
 8003fec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ff0:	2330      	movs	r3, #48	; 0x30
 8003ff2:	f04f 0901 	mov.w	r9, #1
 8003ff6:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ffa:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800419c <_svfiprintf_r+0x1e8>
 8003ffe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004002:	4623      	mov	r3, r4
 8004004:	469a      	mov	sl, r3
 8004006:	f813 2b01 	ldrb.w	r2, [r3], #1
 800400a:	b10a      	cbz	r2, 8004010 <_svfiprintf_r+0x5c>
 800400c:	2a25      	cmp	r2, #37	; 0x25
 800400e:	d1f9      	bne.n	8004004 <_svfiprintf_r+0x50>
 8004010:	ebba 0b04 	subs.w	fp, sl, r4
 8004014:	d00b      	beq.n	800402e <_svfiprintf_r+0x7a>
 8004016:	465b      	mov	r3, fp
 8004018:	4622      	mov	r2, r4
 800401a:	4629      	mov	r1, r5
 800401c:	4638      	mov	r0, r7
 800401e:	f7ff ff6f 	bl	8003f00 <__ssputs_r>
 8004022:	3001      	adds	r0, #1
 8004024:	f000 80a9 	beq.w	800417a <_svfiprintf_r+0x1c6>
 8004028:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800402a:	445a      	add	r2, fp
 800402c:	9209      	str	r2, [sp, #36]	; 0x24
 800402e:	f89a 3000 	ldrb.w	r3, [sl]
 8004032:	2b00      	cmp	r3, #0
 8004034:	f000 80a1 	beq.w	800417a <_svfiprintf_r+0x1c6>
 8004038:	2300      	movs	r3, #0
 800403a:	f04f 32ff 	mov.w	r2, #4294967295
 800403e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004042:	f10a 0a01 	add.w	sl, sl, #1
 8004046:	9304      	str	r3, [sp, #16]
 8004048:	9307      	str	r3, [sp, #28]
 800404a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800404e:	931a      	str	r3, [sp, #104]	; 0x68
 8004050:	4654      	mov	r4, sl
 8004052:	2205      	movs	r2, #5
 8004054:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004058:	4850      	ldr	r0, [pc, #320]	; (800419c <_svfiprintf_r+0x1e8>)
 800405a:	f000 fa57 	bl	800450c <memchr>
 800405e:	9a04      	ldr	r2, [sp, #16]
 8004060:	b9d8      	cbnz	r0, 800409a <_svfiprintf_r+0xe6>
 8004062:	06d0      	lsls	r0, r2, #27
 8004064:	bf44      	itt	mi
 8004066:	2320      	movmi	r3, #32
 8004068:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800406c:	0711      	lsls	r1, r2, #28
 800406e:	bf44      	itt	mi
 8004070:	232b      	movmi	r3, #43	; 0x2b
 8004072:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004076:	f89a 3000 	ldrb.w	r3, [sl]
 800407a:	2b2a      	cmp	r3, #42	; 0x2a
 800407c:	d015      	beq.n	80040aa <_svfiprintf_r+0xf6>
 800407e:	4654      	mov	r4, sl
 8004080:	2000      	movs	r0, #0
 8004082:	f04f 0c0a 	mov.w	ip, #10
 8004086:	9a07      	ldr	r2, [sp, #28]
 8004088:	4621      	mov	r1, r4
 800408a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800408e:	3b30      	subs	r3, #48	; 0x30
 8004090:	2b09      	cmp	r3, #9
 8004092:	d94d      	bls.n	8004130 <_svfiprintf_r+0x17c>
 8004094:	b1b0      	cbz	r0, 80040c4 <_svfiprintf_r+0x110>
 8004096:	9207      	str	r2, [sp, #28]
 8004098:	e014      	b.n	80040c4 <_svfiprintf_r+0x110>
 800409a:	eba0 0308 	sub.w	r3, r0, r8
 800409e:	fa09 f303 	lsl.w	r3, r9, r3
 80040a2:	4313      	orrs	r3, r2
 80040a4:	46a2      	mov	sl, r4
 80040a6:	9304      	str	r3, [sp, #16]
 80040a8:	e7d2      	b.n	8004050 <_svfiprintf_r+0x9c>
 80040aa:	9b03      	ldr	r3, [sp, #12]
 80040ac:	1d19      	adds	r1, r3, #4
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	9103      	str	r1, [sp, #12]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	bfbb      	ittet	lt
 80040b6:	425b      	neglt	r3, r3
 80040b8:	f042 0202 	orrlt.w	r2, r2, #2
 80040bc:	9307      	strge	r3, [sp, #28]
 80040be:	9307      	strlt	r3, [sp, #28]
 80040c0:	bfb8      	it	lt
 80040c2:	9204      	strlt	r2, [sp, #16]
 80040c4:	7823      	ldrb	r3, [r4, #0]
 80040c6:	2b2e      	cmp	r3, #46	; 0x2e
 80040c8:	d10c      	bne.n	80040e4 <_svfiprintf_r+0x130>
 80040ca:	7863      	ldrb	r3, [r4, #1]
 80040cc:	2b2a      	cmp	r3, #42	; 0x2a
 80040ce:	d134      	bne.n	800413a <_svfiprintf_r+0x186>
 80040d0:	9b03      	ldr	r3, [sp, #12]
 80040d2:	3402      	adds	r4, #2
 80040d4:	1d1a      	adds	r2, r3, #4
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	9203      	str	r2, [sp, #12]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	bfb8      	it	lt
 80040de:	f04f 33ff 	movlt.w	r3, #4294967295
 80040e2:	9305      	str	r3, [sp, #20]
 80040e4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80041a0 <_svfiprintf_r+0x1ec>
 80040e8:	2203      	movs	r2, #3
 80040ea:	4650      	mov	r0, sl
 80040ec:	7821      	ldrb	r1, [r4, #0]
 80040ee:	f000 fa0d 	bl	800450c <memchr>
 80040f2:	b138      	cbz	r0, 8004104 <_svfiprintf_r+0x150>
 80040f4:	2240      	movs	r2, #64	; 0x40
 80040f6:	9b04      	ldr	r3, [sp, #16]
 80040f8:	eba0 000a 	sub.w	r0, r0, sl
 80040fc:	4082      	lsls	r2, r0
 80040fe:	4313      	orrs	r3, r2
 8004100:	3401      	adds	r4, #1
 8004102:	9304      	str	r3, [sp, #16]
 8004104:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004108:	2206      	movs	r2, #6
 800410a:	4826      	ldr	r0, [pc, #152]	; (80041a4 <_svfiprintf_r+0x1f0>)
 800410c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004110:	f000 f9fc 	bl	800450c <memchr>
 8004114:	2800      	cmp	r0, #0
 8004116:	d038      	beq.n	800418a <_svfiprintf_r+0x1d6>
 8004118:	4b23      	ldr	r3, [pc, #140]	; (80041a8 <_svfiprintf_r+0x1f4>)
 800411a:	bb1b      	cbnz	r3, 8004164 <_svfiprintf_r+0x1b0>
 800411c:	9b03      	ldr	r3, [sp, #12]
 800411e:	3307      	adds	r3, #7
 8004120:	f023 0307 	bic.w	r3, r3, #7
 8004124:	3308      	adds	r3, #8
 8004126:	9303      	str	r3, [sp, #12]
 8004128:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800412a:	4433      	add	r3, r6
 800412c:	9309      	str	r3, [sp, #36]	; 0x24
 800412e:	e768      	b.n	8004002 <_svfiprintf_r+0x4e>
 8004130:	460c      	mov	r4, r1
 8004132:	2001      	movs	r0, #1
 8004134:	fb0c 3202 	mla	r2, ip, r2, r3
 8004138:	e7a6      	b.n	8004088 <_svfiprintf_r+0xd4>
 800413a:	2300      	movs	r3, #0
 800413c:	f04f 0c0a 	mov.w	ip, #10
 8004140:	4619      	mov	r1, r3
 8004142:	3401      	adds	r4, #1
 8004144:	9305      	str	r3, [sp, #20]
 8004146:	4620      	mov	r0, r4
 8004148:	f810 2b01 	ldrb.w	r2, [r0], #1
 800414c:	3a30      	subs	r2, #48	; 0x30
 800414e:	2a09      	cmp	r2, #9
 8004150:	d903      	bls.n	800415a <_svfiprintf_r+0x1a6>
 8004152:	2b00      	cmp	r3, #0
 8004154:	d0c6      	beq.n	80040e4 <_svfiprintf_r+0x130>
 8004156:	9105      	str	r1, [sp, #20]
 8004158:	e7c4      	b.n	80040e4 <_svfiprintf_r+0x130>
 800415a:	4604      	mov	r4, r0
 800415c:	2301      	movs	r3, #1
 800415e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004162:	e7f0      	b.n	8004146 <_svfiprintf_r+0x192>
 8004164:	ab03      	add	r3, sp, #12
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	462a      	mov	r2, r5
 800416a:	4638      	mov	r0, r7
 800416c:	4b0f      	ldr	r3, [pc, #60]	; (80041ac <_svfiprintf_r+0x1f8>)
 800416e:	a904      	add	r1, sp, #16
 8004170:	f3af 8000 	nop.w
 8004174:	1c42      	adds	r2, r0, #1
 8004176:	4606      	mov	r6, r0
 8004178:	d1d6      	bne.n	8004128 <_svfiprintf_r+0x174>
 800417a:	89ab      	ldrh	r3, [r5, #12]
 800417c:	065b      	lsls	r3, r3, #25
 800417e:	f53f af2d 	bmi.w	8003fdc <_svfiprintf_r+0x28>
 8004182:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004184:	b01d      	add	sp, #116	; 0x74
 8004186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800418a:	ab03      	add	r3, sp, #12
 800418c:	9300      	str	r3, [sp, #0]
 800418e:	462a      	mov	r2, r5
 8004190:	4638      	mov	r0, r7
 8004192:	4b06      	ldr	r3, [pc, #24]	; (80041ac <_svfiprintf_r+0x1f8>)
 8004194:	a904      	add	r1, sp, #16
 8004196:	f000 f87d 	bl	8004294 <_printf_i>
 800419a:	e7eb      	b.n	8004174 <_svfiprintf_r+0x1c0>
 800419c:	08005b4a 	.word	0x08005b4a
 80041a0:	08005b50 	.word	0x08005b50
 80041a4:	08005b54 	.word	0x08005b54
 80041a8:	00000000 	.word	0x00000000
 80041ac:	08003f01 	.word	0x08003f01

080041b0 <_printf_common>:
 80041b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041b4:	4616      	mov	r6, r2
 80041b6:	4699      	mov	r9, r3
 80041b8:	688a      	ldr	r2, [r1, #8]
 80041ba:	690b      	ldr	r3, [r1, #16]
 80041bc:	4607      	mov	r7, r0
 80041be:	4293      	cmp	r3, r2
 80041c0:	bfb8      	it	lt
 80041c2:	4613      	movlt	r3, r2
 80041c4:	6033      	str	r3, [r6, #0]
 80041c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80041ca:	460c      	mov	r4, r1
 80041cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80041d0:	b10a      	cbz	r2, 80041d6 <_printf_common+0x26>
 80041d2:	3301      	adds	r3, #1
 80041d4:	6033      	str	r3, [r6, #0]
 80041d6:	6823      	ldr	r3, [r4, #0]
 80041d8:	0699      	lsls	r1, r3, #26
 80041da:	bf42      	ittt	mi
 80041dc:	6833      	ldrmi	r3, [r6, #0]
 80041de:	3302      	addmi	r3, #2
 80041e0:	6033      	strmi	r3, [r6, #0]
 80041e2:	6825      	ldr	r5, [r4, #0]
 80041e4:	f015 0506 	ands.w	r5, r5, #6
 80041e8:	d106      	bne.n	80041f8 <_printf_common+0x48>
 80041ea:	f104 0a19 	add.w	sl, r4, #25
 80041ee:	68e3      	ldr	r3, [r4, #12]
 80041f0:	6832      	ldr	r2, [r6, #0]
 80041f2:	1a9b      	subs	r3, r3, r2
 80041f4:	42ab      	cmp	r3, r5
 80041f6:	dc2b      	bgt.n	8004250 <_printf_common+0xa0>
 80041f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80041fc:	1e13      	subs	r3, r2, #0
 80041fe:	6822      	ldr	r2, [r4, #0]
 8004200:	bf18      	it	ne
 8004202:	2301      	movne	r3, #1
 8004204:	0692      	lsls	r2, r2, #26
 8004206:	d430      	bmi.n	800426a <_printf_common+0xba>
 8004208:	4649      	mov	r1, r9
 800420a:	4638      	mov	r0, r7
 800420c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004210:	47c0      	blx	r8
 8004212:	3001      	adds	r0, #1
 8004214:	d023      	beq.n	800425e <_printf_common+0xae>
 8004216:	6823      	ldr	r3, [r4, #0]
 8004218:	6922      	ldr	r2, [r4, #16]
 800421a:	f003 0306 	and.w	r3, r3, #6
 800421e:	2b04      	cmp	r3, #4
 8004220:	bf14      	ite	ne
 8004222:	2500      	movne	r5, #0
 8004224:	6833      	ldreq	r3, [r6, #0]
 8004226:	f04f 0600 	mov.w	r6, #0
 800422a:	bf08      	it	eq
 800422c:	68e5      	ldreq	r5, [r4, #12]
 800422e:	f104 041a 	add.w	r4, r4, #26
 8004232:	bf08      	it	eq
 8004234:	1aed      	subeq	r5, r5, r3
 8004236:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800423a:	bf08      	it	eq
 800423c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004240:	4293      	cmp	r3, r2
 8004242:	bfc4      	itt	gt
 8004244:	1a9b      	subgt	r3, r3, r2
 8004246:	18ed      	addgt	r5, r5, r3
 8004248:	42b5      	cmp	r5, r6
 800424a:	d11a      	bne.n	8004282 <_printf_common+0xd2>
 800424c:	2000      	movs	r0, #0
 800424e:	e008      	b.n	8004262 <_printf_common+0xb2>
 8004250:	2301      	movs	r3, #1
 8004252:	4652      	mov	r2, sl
 8004254:	4649      	mov	r1, r9
 8004256:	4638      	mov	r0, r7
 8004258:	47c0      	blx	r8
 800425a:	3001      	adds	r0, #1
 800425c:	d103      	bne.n	8004266 <_printf_common+0xb6>
 800425e:	f04f 30ff 	mov.w	r0, #4294967295
 8004262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004266:	3501      	adds	r5, #1
 8004268:	e7c1      	b.n	80041ee <_printf_common+0x3e>
 800426a:	2030      	movs	r0, #48	; 0x30
 800426c:	18e1      	adds	r1, r4, r3
 800426e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004272:	1c5a      	adds	r2, r3, #1
 8004274:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004278:	4422      	add	r2, r4
 800427a:	3302      	adds	r3, #2
 800427c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004280:	e7c2      	b.n	8004208 <_printf_common+0x58>
 8004282:	2301      	movs	r3, #1
 8004284:	4622      	mov	r2, r4
 8004286:	4649      	mov	r1, r9
 8004288:	4638      	mov	r0, r7
 800428a:	47c0      	blx	r8
 800428c:	3001      	adds	r0, #1
 800428e:	d0e6      	beq.n	800425e <_printf_common+0xae>
 8004290:	3601      	adds	r6, #1
 8004292:	e7d9      	b.n	8004248 <_printf_common+0x98>

08004294 <_printf_i>:
 8004294:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004298:	7e0f      	ldrb	r7, [r1, #24]
 800429a:	4691      	mov	r9, r2
 800429c:	2f78      	cmp	r7, #120	; 0x78
 800429e:	4680      	mov	r8, r0
 80042a0:	460c      	mov	r4, r1
 80042a2:	469a      	mov	sl, r3
 80042a4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80042a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80042aa:	d807      	bhi.n	80042bc <_printf_i+0x28>
 80042ac:	2f62      	cmp	r7, #98	; 0x62
 80042ae:	d80a      	bhi.n	80042c6 <_printf_i+0x32>
 80042b0:	2f00      	cmp	r7, #0
 80042b2:	f000 80d5 	beq.w	8004460 <_printf_i+0x1cc>
 80042b6:	2f58      	cmp	r7, #88	; 0x58
 80042b8:	f000 80c1 	beq.w	800443e <_printf_i+0x1aa>
 80042bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80042c4:	e03a      	b.n	800433c <_printf_i+0xa8>
 80042c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80042ca:	2b15      	cmp	r3, #21
 80042cc:	d8f6      	bhi.n	80042bc <_printf_i+0x28>
 80042ce:	a101      	add	r1, pc, #4	; (adr r1, 80042d4 <_printf_i+0x40>)
 80042d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042d4:	0800432d 	.word	0x0800432d
 80042d8:	08004341 	.word	0x08004341
 80042dc:	080042bd 	.word	0x080042bd
 80042e0:	080042bd 	.word	0x080042bd
 80042e4:	080042bd 	.word	0x080042bd
 80042e8:	080042bd 	.word	0x080042bd
 80042ec:	08004341 	.word	0x08004341
 80042f0:	080042bd 	.word	0x080042bd
 80042f4:	080042bd 	.word	0x080042bd
 80042f8:	080042bd 	.word	0x080042bd
 80042fc:	080042bd 	.word	0x080042bd
 8004300:	08004447 	.word	0x08004447
 8004304:	0800436d 	.word	0x0800436d
 8004308:	08004401 	.word	0x08004401
 800430c:	080042bd 	.word	0x080042bd
 8004310:	080042bd 	.word	0x080042bd
 8004314:	08004469 	.word	0x08004469
 8004318:	080042bd 	.word	0x080042bd
 800431c:	0800436d 	.word	0x0800436d
 8004320:	080042bd 	.word	0x080042bd
 8004324:	080042bd 	.word	0x080042bd
 8004328:	08004409 	.word	0x08004409
 800432c:	682b      	ldr	r3, [r5, #0]
 800432e:	1d1a      	adds	r2, r3, #4
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	602a      	str	r2, [r5, #0]
 8004334:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004338:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800433c:	2301      	movs	r3, #1
 800433e:	e0a0      	b.n	8004482 <_printf_i+0x1ee>
 8004340:	6820      	ldr	r0, [r4, #0]
 8004342:	682b      	ldr	r3, [r5, #0]
 8004344:	0607      	lsls	r7, r0, #24
 8004346:	f103 0104 	add.w	r1, r3, #4
 800434a:	6029      	str	r1, [r5, #0]
 800434c:	d501      	bpl.n	8004352 <_printf_i+0xbe>
 800434e:	681e      	ldr	r6, [r3, #0]
 8004350:	e003      	b.n	800435a <_printf_i+0xc6>
 8004352:	0646      	lsls	r6, r0, #25
 8004354:	d5fb      	bpl.n	800434e <_printf_i+0xba>
 8004356:	f9b3 6000 	ldrsh.w	r6, [r3]
 800435a:	2e00      	cmp	r6, #0
 800435c:	da03      	bge.n	8004366 <_printf_i+0xd2>
 800435e:	232d      	movs	r3, #45	; 0x2d
 8004360:	4276      	negs	r6, r6
 8004362:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004366:	230a      	movs	r3, #10
 8004368:	4859      	ldr	r0, [pc, #356]	; (80044d0 <_printf_i+0x23c>)
 800436a:	e012      	b.n	8004392 <_printf_i+0xfe>
 800436c:	682b      	ldr	r3, [r5, #0]
 800436e:	6820      	ldr	r0, [r4, #0]
 8004370:	1d19      	adds	r1, r3, #4
 8004372:	6029      	str	r1, [r5, #0]
 8004374:	0605      	lsls	r5, r0, #24
 8004376:	d501      	bpl.n	800437c <_printf_i+0xe8>
 8004378:	681e      	ldr	r6, [r3, #0]
 800437a:	e002      	b.n	8004382 <_printf_i+0xee>
 800437c:	0641      	lsls	r1, r0, #25
 800437e:	d5fb      	bpl.n	8004378 <_printf_i+0xe4>
 8004380:	881e      	ldrh	r6, [r3, #0]
 8004382:	2f6f      	cmp	r7, #111	; 0x6f
 8004384:	bf0c      	ite	eq
 8004386:	2308      	moveq	r3, #8
 8004388:	230a      	movne	r3, #10
 800438a:	4851      	ldr	r0, [pc, #324]	; (80044d0 <_printf_i+0x23c>)
 800438c:	2100      	movs	r1, #0
 800438e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004392:	6865      	ldr	r5, [r4, #4]
 8004394:	2d00      	cmp	r5, #0
 8004396:	bfa8      	it	ge
 8004398:	6821      	ldrge	r1, [r4, #0]
 800439a:	60a5      	str	r5, [r4, #8]
 800439c:	bfa4      	itt	ge
 800439e:	f021 0104 	bicge.w	r1, r1, #4
 80043a2:	6021      	strge	r1, [r4, #0]
 80043a4:	b90e      	cbnz	r6, 80043aa <_printf_i+0x116>
 80043a6:	2d00      	cmp	r5, #0
 80043a8:	d04b      	beq.n	8004442 <_printf_i+0x1ae>
 80043aa:	4615      	mov	r5, r2
 80043ac:	fbb6 f1f3 	udiv	r1, r6, r3
 80043b0:	fb03 6711 	mls	r7, r3, r1, r6
 80043b4:	5dc7      	ldrb	r7, [r0, r7]
 80043b6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80043ba:	4637      	mov	r7, r6
 80043bc:	42bb      	cmp	r3, r7
 80043be:	460e      	mov	r6, r1
 80043c0:	d9f4      	bls.n	80043ac <_printf_i+0x118>
 80043c2:	2b08      	cmp	r3, #8
 80043c4:	d10b      	bne.n	80043de <_printf_i+0x14a>
 80043c6:	6823      	ldr	r3, [r4, #0]
 80043c8:	07de      	lsls	r6, r3, #31
 80043ca:	d508      	bpl.n	80043de <_printf_i+0x14a>
 80043cc:	6923      	ldr	r3, [r4, #16]
 80043ce:	6861      	ldr	r1, [r4, #4]
 80043d0:	4299      	cmp	r1, r3
 80043d2:	bfde      	ittt	le
 80043d4:	2330      	movle	r3, #48	; 0x30
 80043d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80043da:	f105 35ff 	addle.w	r5, r5, #4294967295
 80043de:	1b52      	subs	r2, r2, r5
 80043e0:	6122      	str	r2, [r4, #16]
 80043e2:	464b      	mov	r3, r9
 80043e4:	4621      	mov	r1, r4
 80043e6:	4640      	mov	r0, r8
 80043e8:	f8cd a000 	str.w	sl, [sp]
 80043ec:	aa03      	add	r2, sp, #12
 80043ee:	f7ff fedf 	bl	80041b0 <_printf_common>
 80043f2:	3001      	adds	r0, #1
 80043f4:	d14a      	bne.n	800448c <_printf_i+0x1f8>
 80043f6:	f04f 30ff 	mov.w	r0, #4294967295
 80043fa:	b004      	add	sp, #16
 80043fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004400:	6823      	ldr	r3, [r4, #0]
 8004402:	f043 0320 	orr.w	r3, r3, #32
 8004406:	6023      	str	r3, [r4, #0]
 8004408:	2778      	movs	r7, #120	; 0x78
 800440a:	4832      	ldr	r0, [pc, #200]	; (80044d4 <_printf_i+0x240>)
 800440c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004410:	6823      	ldr	r3, [r4, #0]
 8004412:	6829      	ldr	r1, [r5, #0]
 8004414:	061f      	lsls	r7, r3, #24
 8004416:	f851 6b04 	ldr.w	r6, [r1], #4
 800441a:	d402      	bmi.n	8004422 <_printf_i+0x18e>
 800441c:	065f      	lsls	r7, r3, #25
 800441e:	bf48      	it	mi
 8004420:	b2b6      	uxthmi	r6, r6
 8004422:	07df      	lsls	r7, r3, #31
 8004424:	bf48      	it	mi
 8004426:	f043 0320 	orrmi.w	r3, r3, #32
 800442a:	6029      	str	r1, [r5, #0]
 800442c:	bf48      	it	mi
 800442e:	6023      	strmi	r3, [r4, #0]
 8004430:	b91e      	cbnz	r6, 800443a <_printf_i+0x1a6>
 8004432:	6823      	ldr	r3, [r4, #0]
 8004434:	f023 0320 	bic.w	r3, r3, #32
 8004438:	6023      	str	r3, [r4, #0]
 800443a:	2310      	movs	r3, #16
 800443c:	e7a6      	b.n	800438c <_printf_i+0xf8>
 800443e:	4824      	ldr	r0, [pc, #144]	; (80044d0 <_printf_i+0x23c>)
 8004440:	e7e4      	b.n	800440c <_printf_i+0x178>
 8004442:	4615      	mov	r5, r2
 8004444:	e7bd      	b.n	80043c2 <_printf_i+0x12e>
 8004446:	682b      	ldr	r3, [r5, #0]
 8004448:	6826      	ldr	r6, [r4, #0]
 800444a:	1d18      	adds	r0, r3, #4
 800444c:	6961      	ldr	r1, [r4, #20]
 800444e:	6028      	str	r0, [r5, #0]
 8004450:	0635      	lsls	r5, r6, #24
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	d501      	bpl.n	800445a <_printf_i+0x1c6>
 8004456:	6019      	str	r1, [r3, #0]
 8004458:	e002      	b.n	8004460 <_printf_i+0x1cc>
 800445a:	0670      	lsls	r0, r6, #25
 800445c:	d5fb      	bpl.n	8004456 <_printf_i+0x1c2>
 800445e:	8019      	strh	r1, [r3, #0]
 8004460:	2300      	movs	r3, #0
 8004462:	4615      	mov	r5, r2
 8004464:	6123      	str	r3, [r4, #16]
 8004466:	e7bc      	b.n	80043e2 <_printf_i+0x14e>
 8004468:	682b      	ldr	r3, [r5, #0]
 800446a:	2100      	movs	r1, #0
 800446c:	1d1a      	adds	r2, r3, #4
 800446e:	602a      	str	r2, [r5, #0]
 8004470:	681d      	ldr	r5, [r3, #0]
 8004472:	6862      	ldr	r2, [r4, #4]
 8004474:	4628      	mov	r0, r5
 8004476:	f000 f849 	bl	800450c <memchr>
 800447a:	b108      	cbz	r0, 8004480 <_printf_i+0x1ec>
 800447c:	1b40      	subs	r0, r0, r5
 800447e:	6060      	str	r0, [r4, #4]
 8004480:	6863      	ldr	r3, [r4, #4]
 8004482:	6123      	str	r3, [r4, #16]
 8004484:	2300      	movs	r3, #0
 8004486:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800448a:	e7aa      	b.n	80043e2 <_printf_i+0x14e>
 800448c:	462a      	mov	r2, r5
 800448e:	4649      	mov	r1, r9
 8004490:	4640      	mov	r0, r8
 8004492:	6923      	ldr	r3, [r4, #16]
 8004494:	47d0      	blx	sl
 8004496:	3001      	adds	r0, #1
 8004498:	d0ad      	beq.n	80043f6 <_printf_i+0x162>
 800449a:	6823      	ldr	r3, [r4, #0]
 800449c:	079b      	lsls	r3, r3, #30
 800449e:	d413      	bmi.n	80044c8 <_printf_i+0x234>
 80044a0:	68e0      	ldr	r0, [r4, #12]
 80044a2:	9b03      	ldr	r3, [sp, #12]
 80044a4:	4298      	cmp	r0, r3
 80044a6:	bfb8      	it	lt
 80044a8:	4618      	movlt	r0, r3
 80044aa:	e7a6      	b.n	80043fa <_printf_i+0x166>
 80044ac:	2301      	movs	r3, #1
 80044ae:	4632      	mov	r2, r6
 80044b0:	4649      	mov	r1, r9
 80044b2:	4640      	mov	r0, r8
 80044b4:	47d0      	blx	sl
 80044b6:	3001      	adds	r0, #1
 80044b8:	d09d      	beq.n	80043f6 <_printf_i+0x162>
 80044ba:	3501      	adds	r5, #1
 80044bc:	68e3      	ldr	r3, [r4, #12]
 80044be:	9903      	ldr	r1, [sp, #12]
 80044c0:	1a5b      	subs	r3, r3, r1
 80044c2:	42ab      	cmp	r3, r5
 80044c4:	dcf2      	bgt.n	80044ac <_printf_i+0x218>
 80044c6:	e7eb      	b.n	80044a0 <_printf_i+0x20c>
 80044c8:	2500      	movs	r5, #0
 80044ca:	f104 0619 	add.w	r6, r4, #25
 80044ce:	e7f5      	b.n	80044bc <_printf_i+0x228>
 80044d0:	08005b5b 	.word	0x08005b5b
 80044d4:	08005b6c 	.word	0x08005b6c

080044d8 <memmove>:
 80044d8:	4288      	cmp	r0, r1
 80044da:	b510      	push	{r4, lr}
 80044dc:	eb01 0402 	add.w	r4, r1, r2
 80044e0:	d902      	bls.n	80044e8 <memmove+0x10>
 80044e2:	4284      	cmp	r4, r0
 80044e4:	4623      	mov	r3, r4
 80044e6:	d807      	bhi.n	80044f8 <memmove+0x20>
 80044e8:	1e43      	subs	r3, r0, #1
 80044ea:	42a1      	cmp	r1, r4
 80044ec:	d008      	beq.n	8004500 <memmove+0x28>
 80044ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80044f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80044f6:	e7f8      	b.n	80044ea <memmove+0x12>
 80044f8:	4601      	mov	r1, r0
 80044fa:	4402      	add	r2, r0
 80044fc:	428a      	cmp	r2, r1
 80044fe:	d100      	bne.n	8004502 <memmove+0x2a>
 8004500:	bd10      	pop	{r4, pc}
 8004502:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004506:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800450a:	e7f7      	b.n	80044fc <memmove+0x24>

0800450c <memchr>:
 800450c:	4603      	mov	r3, r0
 800450e:	b510      	push	{r4, lr}
 8004510:	b2c9      	uxtb	r1, r1
 8004512:	4402      	add	r2, r0
 8004514:	4293      	cmp	r3, r2
 8004516:	4618      	mov	r0, r3
 8004518:	d101      	bne.n	800451e <memchr+0x12>
 800451a:	2000      	movs	r0, #0
 800451c:	e003      	b.n	8004526 <memchr+0x1a>
 800451e:	7804      	ldrb	r4, [r0, #0]
 8004520:	3301      	adds	r3, #1
 8004522:	428c      	cmp	r4, r1
 8004524:	d1f6      	bne.n	8004514 <memchr+0x8>
 8004526:	bd10      	pop	{r4, pc}

08004528 <memcpy>:
 8004528:	440a      	add	r2, r1
 800452a:	4291      	cmp	r1, r2
 800452c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004530:	d100      	bne.n	8004534 <memcpy+0xc>
 8004532:	4770      	bx	lr
 8004534:	b510      	push	{r4, lr}
 8004536:	f811 4b01 	ldrb.w	r4, [r1], #1
 800453a:	4291      	cmp	r1, r2
 800453c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004540:	d1f9      	bne.n	8004536 <memcpy+0xe>
 8004542:	bd10      	pop	{r4, pc}

08004544 <_realloc_r>:
 8004544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004548:	4680      	mov	r8, r0
 800454a:	4614      	mov	r4, r2
 800454c:	460e      	mov	r6, r1
 800454e:	b921      	cbnz	r1, 800455a <_realloc_r+0x16>
 8004550:	4611      	mov	r1, r2
 8004552:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004556:	f7ff bb9b 	b.w	8003c90 <_malloc_r>
 800455a:	b92a      	cbnz	r2, 8004568 <_realloc_r+0x24>
 800455c:	f7ff fc88 	bl	8003e70 <_free_r>
 8004560:	4625      	mov	r5, r4
 8004562:	4628      	mov	r0, r5
 8004564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004568:	f000 f81b 	bl	80045a2 <_malloc_usable_size_r>
 800456c:	4284      	cmp	r4, r0
 800456e:	4607      	mov	r7, r0
 8004570:	d802      	bhi.n	8004578 <_realloc_r+0x34>
 8004572:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004576:	d812      	bhi.n	800459e <_realloc_r+0x5a>
 8004578:	4621      	mov	r1, r4
 800457a:	4640      	mov	r0, r8
 800457c:	f7ff fb88 	bl	8003c90 <_malloc_r>
 8004580:	4605      	mov	r5, r0
 8004582:	2800      	cmp	r0, #0
 8004584:	d0ed      	beq.n	8004562 <_realloc_r+0x1e>
 8004586:	42bc      	cmp	r4, r7
 8004588:	4622      	mov	r2, r4
 800458a:	4631      	mov	r1, r6
 800458c:	bf28      	it	cs
 800458e:	463a      	movcs	r2, r7
 8004590:	f7ff ffca 	bl	8004528 <memcpy>
 8004594:	4631      	mov	r1, r6
 8004596:	4640      	mov	r0, r8
 8004598:	f7ff fc6a 	bl	8003e70 <_free_r>
 800459c:	e7e1      	b.n	8004562 <_realloc_r+0x1e>
 800459e:	4635      	mov	r5, r6
 80045a0:	e7df      	b.n	8004562 <_realloc_r+0x1e>

080045a2 <_malloc_usable_size_r>:
 80045a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045a6:	1f18      	subs	r0, r3, #4
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	bfbc      	itt	lt
 80045ac:	580b      	ldrlt	r3, [r1, r0]
 80045ae:	18c0      	addlt	r0, r0, r3
 80045b0:	4770      	bx	lr
	...

080045b4 <_init>:
 80045b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045b6:	bf00      	nop
 80045b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ba:	bc08      	pop	{r3}
 80045bc:	469e      	mov	lr, r3
 80045be:	4770      	bx	lr

080045c0 <_fini>:
 80045c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045c2:	bf00      	nop
 80045c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045c6:	bc08      	pop	{r3}
 80045c8:	469e      	mov	lr, r3
 80045ca:	4770      	bx	lr
