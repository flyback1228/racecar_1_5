
f103_slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a34  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000da4  08004b44  08004b44  00014b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058e8  080058e8  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  080058e8  080058e8  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080058e8  080058e8  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058e8  080058e8  000158e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058ec  080058ec  000158ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080058f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000594  2000001c  0800590c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005b0  0800590c  000205b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f420  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000232f  00000000  00000000  0002f4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f18  00000000  00000000  000317d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bd9  00000000  00000000  000326f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000183c0  00000000  00000000  000332c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001004c  00000000  00000000  0004b689  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c827  00000000  00000000  0005b6d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000040f0  00000000  00000000  000e7efc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000ebfec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000001c 	.word	0x2000001c
 800012c:	00000000 	.word	0x00000000
 8000130:	08004b2c 	.word	0x08004b2c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000020 	.word	0x20000020
 800014c:	08004b2c 	.word	0x08004b2c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <__aeabi_d2f>:
 800092c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000930:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000934:	bf24      	itt	cs
 8000936:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800093a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800093e:	d90d      	bls.n	800095c <__aeabi_d2f+0x30>
 8000940:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000944:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000948:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800094c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000950:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000954:	bf08      	it	eq
 8000956:	f020 0001 	biceq.w	r0, r0, #1
 800095a:	4770      	bx	lr
 800095c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000960:	d121      	bne.n	80009a6 <__aeabi_d2f+0x7a>
 8000962:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000966:	bfbc      	itt	lt
 8000968:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800096c:	4770      	bxlt	lr
 800096e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000972:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000976:	f1c2 0218 	rsb	r2, r2, #24
 800097a:	f1c2 0c20 	rsb	ip, r2, #32
 800097e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000982:	fa20 f002 	lsr.w	r0, r0, r2
 8000986:	bf18      	it	ne
 8000988:	f040 0001 	orrne.w	r0, r0, #1
 800098c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000990:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000994:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000998:	ea40 000c 	orr.w	r0, r0, ip
 800099c:	fa23 f302 	lsr.w	r3, r3, r2
 80009a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009a4:	e7cc      	b.n	8000940 <__aeabi_d2f+0x14>
 80009a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009aa:	d107      	bne.n	80009bc <__aeabi_d2f+0x90>
 80009ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009b0:	bf1e      	ittt	ne
 80009b2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009b6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ba:	4770      	bxne	lr
 80009bc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_frsub>:
 80009cc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009d0:	e002      	b.n	80009d8 <__addsf3>
 80009d2:	bf00      	nop

080009d4 <__aeabi_fsub>:
 80009d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009d8 <__addsf3>:
 80009d8:	0042      	lsls	r2, r0, #1
 80009da:	bf1f      	itttt	ne
 80009dc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009e0:	ea92 0f03 	teqne	r2, r3
 80009e4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009e8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ec:	d06a      	beq.n	8000ac4 <__addsf3+0xec>
 80009ee:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009f2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009f6:	bfc1      	itttt	gt
 80009f8:	18d2      	addgt	r2, r2, r3
 80009fa:	4041      	eorgt	r1, r0
 80009fc:	4048      	eorgt	r0, r1
 80009fe:	4041      	eorgt	r1, r0
 8000a00:	bfb8      	it	lt
 8000a02:	425b      	neglt	r3, r3
 8000a04:	2b19      	cmp	r3, #25
 8000a06:	bf88      	it	hi
 8000a08:	4770      	bxhi	lr
 8000a0a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a12:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a16:	bf18      	it	ne
 8000a18:	4240      	negne	r0, r0
 8000a1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a1e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a22:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4249      	negne	r1, r1
 8000a2a:	ea92 0f03 	teq	r2, r3
 8000a2e:	d03f      	beq.n	8000ab0 <__addsf3+0xd8>
 8000a30:	f1a2 0201 	sub.w	r2, r2, #1
 8000a34:	fa41 fc03 	asr.w	ip, r1, r3
 8000a38:	eb10 000c 	adds.w	r0, r0, ip
 8000a3c:	f1c3 0320 	rsb	r3, r3, #32
 8000a40:	fa01 f103 	lsl.w	r1, r1, r3
 8000a44:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a48:	d502      	bpl.n	8000a50 <__addsf3+0x78>
 8000a4a:	4249      	negs	r1, r1
 8000a4c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a50:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a54:	d313      	bcc.n	8000a7e <__addsf3+0xa6>
 8000a56:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a5a:	d306      	bcc.n	8000a6a <__addsf3+0x92>
 8000a5c:	0840      	lsrs	r0, r0, #1
 8000a5e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a62:	f102 0201 	add.w	r2, r2, #1
 8000a66:	2afe      	cmp	r2, #254	; 0xfe
 8000a68:	d251      	bcs.n	8000b0e <__addsf3+0x136>
 8000a6a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a72:	bf08      	it	eq
 8000a74:	f020 0001 	biceq.w	r0, r0, #1
 8000a78:	ea40 0003 	orr.w	r0, r0, r3
 8000a7c:	4770      	bx	lr
 8000a7e:	0049      	lsls	r1, r1, #1
 8000a80:	eb40 0000 	adc.w	r0, r0, r0
 8000a84:	3a01      	subs	r2, #1
 8000a86:	bf28      	it	cs
 8000a88:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a8c:	d2ed      	bcs.n	8000a6a <__addsf3+0x92>
 8000a8e:	fab0 fc80 	clz	ip, r0
 8000a92:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a96:	ebb2 020c 	subs.w	r2, r2, ip
 8000a9a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a9e:	bfaa      	itet	ge
 8000aa0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000aa4:	4252      	neglt	r2, r2
 8000aa6:	4318      	orrge	r0, r3
 8000aa8:	bfbc      	itt	lt
 8000aaa:	40d0      	lsrlt	r0, r2
 8000aac:	4318      	orrlt	r0, r3
 8000aae:	4770      	bx	lr
 8000ab0:	f092 0f00 	teq	r2, #0
 8000ab4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ab8:	bf06      	itte	eq
 8000aba:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000abe:	3201      	addeq	r2, #1
 8000ac0:	3b01      	subne	r3, #1
 8000ac2:	e7b5      	b.n	8000a30 <__addsf3+0x58>
 8000ac4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ac8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000acc:	bf18      	it	ne
 8000ace:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad2:	d021      	beq.n	8000b18 <__addsf3+0x140>
 8000ad4:	ea92 0f03 	teq	r2, r3
 8000ad8:	d004      	beq.n	8000ae4 <__addsf3+0x10c>
 8000ada:	f092 0f00 	teq	r2, #0
 8000ade:	bf08      	it	eq
 8000ae0:	4608      	moveq	r0, r1
 8000ae2:	4770      	bx	lr
 8000ae4:	ea90 0f01 	teq	r0, r1
 8000ae8:	bf1c      	itt	ne
 8000aea:	2000      	movne	r0, #0
 8000aec:	4770      	bxne	lr
 8000aee:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000af2:	d104      	bne.n	8000afe <__addsf3+0x126>
 8000af4:	0040      	lsls	r0, r0, #1
 8000af6:	bf28      	it	cs
 8000af8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000afc:	4770      	bx	lr
 8000afe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b02:	bf3c      	itt	cc
 8000b04:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bxcc	lr
 8000b0a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b0e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b16:	4770      	bx	lr
 8000b18:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b1c:	bf16      	itet	ne
 8000b1e:	4608      	movne	r0, r1
 8000b20:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b24:	4601      	movne	r1, r0
 8000b26:	0242      	lsls	r2, r0, #9
 8000b28:	bf06      	itte	eq
 8000b2a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b2e:	ea90 0f01 	teqeq	r0, r1
 8000b32:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b36:	4770      	bx	lr

08000b38 <__aeabi_ui2f>:
 8000b38:	f04f 0300 	mov.w	r3, #0
 8000b3c:	e004      	b.n	8000b48 <__aeabi_i2f+0x8>
 8000b3e:	bf00      	nop

08000b40 <__aeabi_i2f>:
 8000b40:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	bf48      	it	mi
 8000b46:	4240      	negmi	r0, r0
 8000b48:	ea5f 0c00 	movs.w	ip, r0
 8000b4c:	bf08      	it	eq
 8000b4e:	4770      	bxeq	lr
 8000b50:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b54:	4601      	mov	r1, r0
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	e01c      	b.n	8000b96 <__aeabi_l2f+0x2a>

08000b5c <__aeabi_ul2f>:
 8000b5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b60:	bf08      	it	eq
 8000b62:	4770      	bxeq	lr
 8000b64:	f04f 0300 	mov.w	r3, #0
 8000b68:	e00a      	b.n	8000b80 <__aeabi_l2f+0x14>
 8000b6a:	bf00      	nop

08000b6c <__aeabi_l2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b78:	d502      	bpl.n	8000b80 <__aeabi_l2f+0x14>
 8000b7a:	4240      	negs	r0, r0
 8000b7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b80:	ea5f 0c01 	movs.w	ip, r1
 8000b84:	bf02      	ittt	eq
 8000b86:	4684      	moveq	ip, r0
 8000b88:	4601      	moveq	r1, r0
 8000b8a:	2000      	moveq	r0, #0
 8000b8c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b90:	bf08      	it	eq
 8000b92:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b96:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b9a:	fabc f28c 	clz	r2, ip
 8000b9e:	3a08      	subs	r2, #8
 8000ba0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ba4:	db10      	blt.n	8000bc8 <__aeabi_l2f+0x5c>
 8000ba6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000baa:	4463      	add	r3, ip
 8000bac:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bb0:	f1c2 0220 	rsb	r2, r2, #32
 8000bb4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bbc:	eb43 0002 	adc.w	r0, r3, r2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f102 0220 	add.w	r2, r2, #32
 8000bcc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bd0:	f1c2 0220 	rsb	r2, r2, #32
 8000bd4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bd8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bdc:	eb43 0002 	adc.w	r0, r3, r2
 8000be0:	bf08      	it	eq
 8000be2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_f2uiz>:
 8000be8:	0042      	lsls	r2, r0, #1
 8000bea:	d20e      	bcs.n	8000c0a <__aeabi_f2uiz+0x22>
 8000bec:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000bf0:	d30b      	bcc.n	8000c0a <__aeabi_f2uiz+0x22>
 8000bf2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000bf6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000bfa:	d409      	bmi.n	8000c10 <__aeabi_f2uiz+0x28>
 8000bfc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c04:	fa23 f002 	lsr.w	r0, r3, r2
 8000c08:	4770      	bx	lr
 8000c0a:	f04f 0000 	mov.w	r0, #0
 8000c0e:	4770      	bx	lr
 8000c10:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c14:	d101      	bne.n	8000c1a <__aeabi_f2uiz+0x32>
 8000c16:	0242      	lsls	r2, r0, #9
 8000c18:	d102      	bne.n	8000c20 <__aeabi_f2uiz+0x38>
 8000c1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <ILI9341_Write_Char>:
	ILI9341_Draw_Rectangle(MIN(x0,x1), MIN(y0,y1), abs((int)x1-(int)x0), abs((int)y1-(int)y0), colour);
}


void ILI9341_Write_Char(char ch, uint16_t x, uint16_t y, FontDef* font, uint16_t colour, uint16_t background_colour)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b088      	sub	sp, #32
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	4603      	mov	r3, r0
 8000c32:	73fb      	strb	r3, [r7, #15]
 8000c34:	460b      	mov	r3, r1
 8000c36:	81bb      	strh	r3, [r7, #12]
 8000c38:	4613      	mov	r3, r2
 8000c3a:	817b      	strh	r3, [r7, #10]
    uint32_t i, b, j;
	for(i = 0; i < font->height; i++) {
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61fb      	str	r3, [r7, #28]
 8000c40:	e042      	b.n	8000cc8 <ILI9341_Write_Char+0xa0>
		b = font->data[(ch - 32) * font->height + i];
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	689a      	ldr	r2, [r3, #8]
 8000c46:	7bfb      	ldrb	r3, [r7, #15]
 8000c48:	3b20      	subs	r3, #32
 8000c4a:	6879      	ldr	r1, [r7, #4]
 8000c4c:	7849      	ldrb	r1, [r1, #1]
 8000c4e:	fb01 f303 	mul.w	r3, r1, r3
 8000c52:	4619      	mov	r1, r3
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	440b      	add	r3, r1
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	4413      	add	r3, r2
 8000c5c:	881b      	ldrh	r3, [r3, #0]
 8000c5e:	617b      	str	r3, [r7, #20]
		for(j = 0; j < font->width; j++) {
 8000c60:	2300      	movs	r3, #0
 8000c62:	61bb      	str	r3, [r7, #24]
 8000c64:	e027      	b.n	8000cb6 <ILI9341_Write_Char+0x8e>
			if((b << j) & 0x8000)  {
 8000c66:	697a      	ldr	r2, [r7, #20]
 8000c68:	69bb      	ldr	r3, [r7, #24]
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d00e      	beq.n	8000c94 <ILI9341_Write_Char+0x6c>
				ILI9341_Draw_Pixel(x+j, y+i, colour);
 8000c76:	69bb      	ldr	r3, [r7, #24]
 8000c78:	b29a      	uxth	r2, r3
 8000c7a:	89bb      	ldrh	r3, [r7, #12]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	b298      	uxth	r0, r3
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	b29a      	uxth	r2, r3
 8000c84:	897b      	ldrh	r3, [r7, #10]
 8000c86:	4413      	add	r3, r2
 8000c88:	b29b      	uxth	r3, r3
 8000c8a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	f000 fb59 	bl	8001344 <ILI9341_Draw_Pixel>
 8000c92:	e00d      	b.n	8000cb0 <ILI9341_Write_Char+0x88>
			} else {
				ILI9341_Draw_Pixel(x+j, y+i, background_colour);
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	b29a      	uxth	r2, r3
 8000c98:	89bb      	ldrh	r3, [r7, #12]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	b298      	uxth	r0, r3
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	b29a      	uxth	r2, r3
 8000ca2:	897b      	ldrh	r3, [r7, #10]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000caa:	4619      	mov	r1, r3
 8000cac:	f000 fb4a 	bl	8001344 <ILI9341_Draw_Pixel>
		for(j = 0; j < font->width; j++) {
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	61bb      	str	r3, [r7, #24]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	461a      	mov	r2, r3
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d3d1      	bcc.n	8000c66 <ILI9341_Write_Char+0x3e>
	for(i = 0; i < font->height; i++) {
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	61fb      	str	r3, [r7, #28]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	785b      	ldrb	r3, [r3, #1]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d3b6      	bcc.n	8000c42 <ILI9341_Write_Char+0x1a>
			}
		}
	}


}
 8000cd4:	bf00      	nop
 8000cd6:	bf00      	nop
 8000cd8:	3720      	adds	r7, #32
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <ILI9341_Write_Text>:

void ILI9341_Write_Text(const char* text, uint16_t x, uint16_t y, FontDef* font_def,  uint16_t color, uint16_t background_color)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b086      	sub	sp, #24
 8000ce2:	af02      	add	r7, sp, #8
 8000ce4:	60f8      	str	r0, [r7, #12]
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	460b      	mov	r3, r1
 8000cea:	817b      	strh	r3, [r7, #10]
 8000cec:	4613      	mov	r3, r2
 8000cee:	813b      	strh	r3, [r7, #8]


    while(*text) {
 8000cf0:	e030      	b.n	8000d54 <ILI9341_Write_Text+0x76>
        if(x + font_def->width >= ILI9341_SCREEN_WIDTH) {
 8000cf2:	897b      	ldrh	r3, [r7, #10]
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	7812      	ldrb	r2, [r2, #0]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000cfe:	db15      	blt.n	8000d2c <ILI9341_Write_Text+0x4e>
            x = 0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	817b      	strh	r3, [r7, #10]
            y += font_def->height;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	785b      	ldrb	r3, [r3, #1]
 8000d08:	b29a      	uxth	r2, r3
 8000d0a:	893b      	ldrh	r3, [r7, #8]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	813b      	strh	r3, [r7, #8]
            if(y + font_def->height >= ILI9341_SCREEN_HEIGHT) {
 8000d10:	893b      	ldrh	r3, [r7, #8]
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	7852      	ldrb	r2, [r2, #1]
 8000d16:	4413      	add	r3, r2
 8000d18:	2bef      	cmp	r3, #239	; 0xef
 8000d1a:	dc20      	bgt.n	8000d5e <ILI9341_Write_Text+0x80>
                break;
            }

            if(*text == ' ') {
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b20      	cmp	r3, #32
 8000d22:	d103      	bne.n	8000d2c <ILI9341_Write_Text+0x4e>
                // skip spaces in the beginning of the new line
            	text++;
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	3301      	adds	r3, #1
 8000d28:	60fb      	str	r3, [r7, #12]
                continue;
 8000d2a:	e013      	b.n	8000d54 <ILI9341_Write_Text+0x76>
            }
        }

        ILI9341_Write_Char(*text, x, y, font_def, color, background_color);
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	7818      	ldrb	r0, [r3, #0]
 8000d30:	893a      	ldrh	r2, [r7, #8]
 8000d32:	8979      	ldrh	r1, [r7, #10]
 8000d34:	8bbb      	ldrh	r3, [r7, #28]
 8000d36:	9301      	str	r3, [sp, #4]
 8000d38:	8b3b      	ldrh	r3, [r7, #24]
 8000d3a:	9300      	str	r3, [sp, #0]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f7ff ff73 	bl	8000c28 <ILI9341_Write_Char>
        x += font_def->width;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	b29a      	uxth	r2, r3
 8000d48:	897b      	ldrh	r3, [r7, #10]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	817b      	strh	r3, [r7, #10]
        text++;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	3301      	adds	r3, #1
 8000d52:	60fb      	str	r3, [r7, #12]
    while(*text) {
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d1ca      	bne.n	8000cf2 <ILI9341_Write_Text+0x14>
    }

}
 8000d5c:	e000      	b.n	8000d60 <ILI9341_Write_Text+0x82>
                break;
 8000d5e:	bf00      	nop
}
 8000d60:	bf00      	nop
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
//MX_SPI5_Init();																							//SPI INIT
//MX_GPIO_Init();																							//GPIO INIT
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2102      	movs	r1, #2
 8000d70:	4802      	ldr	r0, [pc, #8]	; (8000d7c <ILI9341_SPI_Init+0x14>)
 8000d72:	f001 fdc5 	bl	8002900 <HAL_GPIO_WritePin>
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40010800 	.word	0x40010800

08000d80 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&ILI9341_SPI, &SPI_Data, 1, 1);
 8000d8a:	1df9      	adds	r1, r7, #7
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	2201      	movs	r2, #1
 8000d90:	4803      	ldr	r0, [pc, #12]	; (8000da0 <ILI9341_SPI_Send+0x20>)
 8000d92:	f002 fa93 	bl	80032bc <HAL_SPI_Transmit>
}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000038 	.word	0x20000038

08000da4 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2102      	movs	r1, #2
 8000db2:	480a      	ldr	r0, [pc, #40]	; (8000ddc <ILI9341_Write_Command+0x38>)
 8000db4:	f001 fda4 	bl	8002900 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000db8:	2200      	movs	r2, #0
 8000dba:	2140      	movs	r1, #64	; 0x40
 8000dbc:	4807      	ldr	r0, [pc, #28]	; (8000ddc <ILI9341_Write_Command+0x38>)
 8000dbe:	f001 fd9f 	bl	8002900 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ffdb 	bl	8000d80 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8000dca:	2201      	movs	r2, #1
 8000dcc:	2102      	movs	r1, #2
 8000dce:	4803      	ldr	r0, [pc, #12]	; (8000ddc <ILI9341_Write_Command+0x38>)
 8000dd0:	f001 fd96 	bl	8002900 <HAL_GPIO_WritePin>
}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40010800 	.word	0x40010800

08000de0 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000dea:	2201      	movs	r2, #1
 8000dec:	2140      	movs	r1, #64	; 0x40
 8000dee:	480a      	ldr	r0, [pc, #40]	; (8000e18 <ILI9341_Write_Data+0x38>)
 8000df0:	f001 fd86 	bl	8002900 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000df4:	2200      	movs	r2, #0
 8000df6:	2102      	movs	r1, #2
 8000df8:	4807      	ldr	r0, [pc, #28]	; (8000e18 <ILI9341_Write_Data+0x38>)
 8000dfa:	f001 fd81 	bl	8002900 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff ffbd 	bl	8000d80 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000e06:	2201      	movs	r2, #1
 8000e08:	2102      	movs	r1, #2
 8000e0a:	4803      	ldr	r0, [pc, #12]	; (8000e18 <ILI9341_Write_Data+0x38>)
 8000e0c:	f001 fd78 	bl	8002900 <HAL_GPIO_WritePin>
}
 8000e10:	bf00      	nop
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40010800 	.word	0x40010800

08000e1c <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8000e1c:	b590      	push	{r4, r7, lr}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4604      	mov	r4, r0
 8000e24:	4608      	mov	r0, r1
 8000e26:	4611      	mov	r1, r2
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4623      	mov	r3, r4
 8000e2c:	80fb      	strh	r3, [r7, #6]
 8000e2e:	4603      	mov	r3, r0
 8000e30:	80bb      	strh	r3, [r7, #4]
 8000e32:	460b      	mov	r3, r1
 8000e34:	807b      	strh	r3, [r7, #2]
 8000e36:	4613      	mov	r3, r2
 8000e38:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8000e3a:	202a      	movs	r0, #42	; 0x2a
 8000e3c:	f7ff ffb2 	bl	8000da4 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8000e40:	88fb      	ldrh	r3, [r7, #6]
 8000e42:	0a1b      	lsrs	r3, r3, #8
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff ffc9 	bl	8000de0 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8000e4e:	88fb      	ldrh	r3, [r7, #6]
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff ffc4 	bl	8000de0 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8000e58:	887b      	ldrh	r3, [r7, #2]
 8000e5a:	0a1b      	lsrs	r3, r3, #8
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff ffbd 	bl	8000de0 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8000e66:	887b      	ldrh	r3, [r7, #2]
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff ffb8 	bl	8000de0 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8000e70:	202b      	movs	r0, #43	; 0x2b
 8000e72:	f7ff ff97 	bl	8000da4 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8000e76:	88bb      	ldrh	r3, [r7, #4]
 8000e78:	0a1b      	lsrs	r3, r3, #8
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff ffae 	bl	8000de0 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8000e84:	88bb      	ldrh	r3, [r7, #4]
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff ffa9 	bl	8000de0 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8000e8e:	883b      	ldrh	r3, [r7, #0]
 8000e90:	0a1b      	lsrs	r3, r3, #8
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff ffa2 	bl	8000de0 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8000e9c:	883b      	ldrh	r3, [r7, #0]
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff ff9d 	bl	8000de0 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8000ea6:	202c      	movs	r0, #44	; 0x2c
 8000ea8:	f7ff ff7c 	bl	8000da4 <ILI9341_Write_Command>
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd90      	pop	{r4, r7, pc}

08000eb4 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	2110      	movs	r1, #16
 8000ebc:	480a      	ldr	r0, [pc, #40]	; (8000ee8 <ILI9341_Reset+0x34>)
 8000ebe:	f001 fd1f 	bl	8002900 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000ec2:	20c8      	movs	r0, #200	; 0xc8
 8000ec4:	f001 f9b4 	bl	8002230 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2102      	movs	r1, #2
 8000ecc:	4806      	ldr	r0, [pc, #24]	; (8000ee8 <ILI9341_Reset+0x34>)
 8000ece:	f001 fd17 	bl	8002900 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000ed2:	20c8      	movs	r0, #200	; 0xc8
 8000ed4:	f001 f9ac 	bl	8002230 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8000ed8:	2201      	movs	r2, #1
 8000eda:	2110      	movs	r1, #16
 8000edc:	4802      	ldr	r0, [pc, #8]	; (8000ee8 <ILI9341_Reset+0x34>)
 8000ede:	f001 fd0f 	bl	8002900 <HAL_GPIO_WritePin>
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40010800 	.word	0x40010800

08000eec <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8000efa:	2036      	movs	r0, #54	; 0x36
 8000efc:	f7ff ff52 	bl	8000da4 <ILI9341_Write_Command>
HAL_Delay(1);
 8000f00:	2001      	movs	r0, #1
 8000f02:	f001 f995 	bl	8002230 <HAL_Delay>
	
switch(screen_rotation) 
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	2b03      	cmp	r3, #3
 8000f0a:	d837      	bhi.n	8000f7c <ILI9341_Set_Rotation+0x90>
 8000f0c:	a201      	add	r2, pc, #4	; (adr r2, 8000f14 <ILI9341_Set_Rotation+0x28>)
 8000f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f12:	bf00      	nop
 8000f14:	08000f25 	.word	0x08000f25
 8000f18:	08000f3b 	.word	0x08000f3b
 8000f1c:	08000f51 	.word	0x08000f51
 8000f20:	08000f67 	.word	0x08000f67
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8000f24:	2048      	movs	r0, #72	; 0x48
 8000f26:	f7ff ff5b 	bl	8000de0 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8000f2a:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <ILI9341_Set_Rotation+0x9c>)
 8000f2c:	22f0      	movs	r2, #240	; 0xf0
 8000f2e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000f30:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <ILI9341_Set_Rotation+0xa0>)
 8000f32:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000f36:	801a      	strh	r2, [r3, #0]
			break;
 8000f38:	e021      	b.n	8000f7e <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8000f3a:	2028      	movs	r0, #40	; 0x28
 8000f3c:	f7ff ff50 	bl	8000de0 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <ILI9341_Set_Rotation+0x9c>)
 8000f42:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000f46:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000f48:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <ILI9341_Set_Rotation+0xa0>)
 8000f4a:	22f0      	movs	r2, #240	; 0xf0
 8000f4c:	801a      	strh	r2, [r3, #0]
			break;
 8000f4e:	e016      	b.n	8000f7e <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8000f50:	2088      	movs	r0, #136	; 0x88
 8000f52:	f7ff ff45 	bl	8000de0 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8000f56:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <ILI9341_Set_Rotation+0x9c>)
 8000f58:	22f0      	movs	r2, #240	; 0xf0
 8000f5a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000f5c:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <ILI9341_Set_Rotation+0xa0>)
 8000f5e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000f62:	801a      	strh	r2, [r3, #0]
			break;
 8000f64:	e00b      	b.n	8000f7e <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8000f66:	20e8      	movs	r0, #232	; 0xe8
 8000f68:	f7ff ff3a 	bl	8000de0 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <ILI9341_Set_Rotation+0x9c>)
 8000f6e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000f72:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000f74:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <ILI9341_Set_Rotation+0xa0>)
 8000f76:	22f0      	movs	r2, #240	; 0xf0
 8000f78:	801a      	strh	r2, [r3, #0]
			break;
 8000f7a:	e000      	b.n	8000f7e <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8000f7c:	bf00      	nop
	}
}
 8000f7e:	bf00      	nop
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000002 	.word	0x20000002
 8000f8c:	20000000 	.word	0x20000000

08000f90 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8000f94:	2201      	movs	r2, #1
 8000f96:	2110      	movs	r1, #16
 8000f98:	4802      	ldr	r0, [pc, #8]	; (8000fa4 <ILI9341_Enable+0x14>)
 8000f9a:	f001 fcb1 	bl	8002900 <HAL_GPIO_WritePin>
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40010800 	.word	0x40010800

08000fa8 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8000fac:	f7ff fff0 	bl	8000f90 <ILI9341_Enable>
ILI9341_SPI_Init();
 8000fb0:	f7ff feda 	bl	8000d68 <ILI9341_SPI_Init>
ILI9341_Reset();
 8000fb4:	f7ff ff7e 	bl	8000eb4 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8000fb8:	2001      	movs	r0, #1
 8000fba:	f7ff fef3 	bl	8000da4 <ILI9341_Write_Command>
HAL_Delay(1000);
 8000fbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fc2:	f001 f935 	bl	8002230 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8000fc6:	20cb      	movs	r0, #203	; 0xcb
 8000fc8:	f7ff feec 	bl	8000da4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8000fcc:	2039      	movs	r0, #57	; 0x39
 8000fce:	f7ff ff07 	bl	8000de0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8000fd2:	202c      	movs	r0, #44	; 0x2c
 8000fd4:	f7ff ff04 	bl	8000de0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000fd8:	2000      	movs	r0, #0
 8000fda:	f7ff ff01 	bl	8000de0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8000fde:	2034      	movs	r0, #52	; 0x34
 8000fe0:	f7ff fefe 	bl	8000de0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8000fe4:	2002      	movs	r0, #2
 8000fe6:	f7ff fefb 	bl	8000de0 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8000fea:	20cf      	movs	r0, #207	; 0xcf
 8000fec:	f7ff feda 	bl	8000da4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	f7ff fef5 	bl	8000de0 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8000ff6:	20c1      	movs	r0, #193	; 0xc1
 8000ff8:	f7ff fef2 	bl	8000de0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8000ffc:	2030      	movs	r0, #48	; 0x30
 8000ffe:	f7ff feef 	bl	8000de0 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8001002:	20e8      	movs	r0, #232	; 0xe8
 8001004:	f7ff fece 	bl	8000da4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8001008:	2085      	movs	r0, #133	; 0x85
 800100a:	f7ff fee9 	bl	8000de0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800100e:	2000      	movs	r0, #0
 8001010:	f7ff fee6 	bl	8000de0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8001014:	2078      	movs	r0, #120	; 0x78
 8001016:	f7ff fee3 	bl	8000de0 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 800101a:	20ea      	movs	r0, #234	; 0xea
 800101c:	f7ff fec2 	bl	8000da4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001020:	2000      	movs	r0, #0
 8001022:	f7ff fedd 	bl	8000de0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001026:	2000      	movs	r0, #0
 8001028:	f7ff feda 	bl	8000de0 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 800102c:	20ed      	movs	r0, #237	; 0xed
 800102e:	f7ff feb9 	bl	8000da4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8001032:	2064      	movs	r0, #100	; 0x64
 8001034:	f7ff fed4 	bl	8000de0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001038:	2003      	movs	r0, #3
 800103a:	f7ff fed1 	bl	8000de0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 800103e:	2012      	movs	r0, #18
 8001040:	f7ff fece 	bl	8000de0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8001044:	2081      	movs	r0, #129	; 0x81
 8001046:	f7ff fecb 	bl	8000de0 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 800104a:	20f7      	movs	r0, #247	; 0xf7
 800104c:	f7ff feaa 	bl	8000da4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8001050:	2020      	movs	r0, #32
 8001052:	f7ff fec5 	bl	8000de0 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8001056:	20c0      	movs	r0, #192	; 0xc0
 8001058:	f7ff fea4 	bl	8000da4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 800105c:	2023      	movs	r0, #35	; 0x23
 800105e:	f7ff febf 	bl	8000de0 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8001062:	20c1      	movs	r0, #193	; 0xc1
 8001064:	f7ff fe9e 	bl	8000da4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8001068:	2010      	movs	r0, #16
 800106a:	f7ff feb9 	bl	8000de0 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 800106e:	20c5      	movs	r0, #197	; 0xc5
 8001070:	f7ff fe98 	bl	8000da4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8001074:	203e      	movs	r0, #62	; 0x3e
 8001076:	f7ff feb3 	bl	8000de0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 800107a:	2028      	movs	r0, #40	; 0x28
 800107c:	f7ff feb0 	bl	8000de0 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8001080:	20c7      	movs	r0, #199	; 0xc7
 8001082:	f7ff fe8f 	bl	8000da4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8001086:	2086      	movs	r0, #134	; 0x86
 8001088:	f7ff feaa 	bl	8000de0 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 800108c:	2036      	movs	r0, #54	; 0x36
 800108e:	f7ff fe89 	bl	8000da4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8001092:	2048      	movs	r0, #72	; 0x48
 8001094:	f7ff fea4 	bl	8000de0 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8001098:	203a      	movs	r0, #58	; 0x3a
 800109a:	f7ff fe83 	bl	8000da4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 800109e:	2055      	movs	r0, #85	; 0x55
 80010a0:	f7ff fe9e 	bl	8000de0 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 80010a4:	20b1      	movs	r0, #177	; 0xb1
 80010a6:	f7ff fe7d 	bl	8000da4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80010aa:	2000      	movs	r0, #0
 80010ac:	f7ff fe98 	bl	8000de0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 80010b0:	2018      	movs	r0, #24
 80010b2:	f7ff fe95 	bl	8000de0 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 80010b6:	20b6      	movs	r0, #182	; 0xb6
 80010b8:	f7ff fe74 	bl	8000da4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 80010bc:	2008      	movs	r0, #8
 80010be:	f7ff fe8f 	bl	8000de0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 80010c2:	2082      	movs	r0, #130	; 0x82
 80010c4:	f7ff fe8c 	bl	8000de0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 80010c8:	2027      	movs	r0, #39	; 0x27
 80010ca:	f7ff fe89 	bl	8000de0 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 80010ce:	20f2      	movs	r0, #242	; 0xf2
 80010d0:	f7ff fe68 	bl	8000da4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80010d4:	2000      	movs	r0, #0
 80010d6:	f7ff fe83 	bl	8000de0 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 80010da:	2026      	movs	r0, #38	; 0x26
 80010dc:	f7ff fe62 	bl	8000da4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 80010e0:	2001      	movs	r0, #1
 80010e2:	f7ff fe7d 	bl	8000de0 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 80010e6:	20e0      	movs	r0, #224	; 0xe0
 80010e8:	f7ff fe5c 	bl	8000da4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 80010ec:	200f      	movs	r0, #15
 80010ee:	f7ff fe77 	bl	8000de0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80010f2:	2031      	movs	r0, #49	; 0x31
 80010f4:	f7ff fe74 	bl	8000de0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 80010f8:	202b      	movs	r0, #43	; 0x2b
 80010fa:	f7ff fe71 	bl	8000de0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80010fe:	200c      	movs	r0, #12
 8001100:	f7ff fe6e 	bl	8000de0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001104:	200e      	movs	r0, #14
 8001106:	f7ff fe6b 	bl	8000de0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 800110a:	2008      	movs	r0, #8
 800110c:	f7ff fe68 	bl	8000de0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8001110:	204e      	movs	r0, #78	; 0x4e
 8001112:	f7ff fe65 	bl	8000de0 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8001116:	20f1      	movs	r0, #241	; 0xf1
 8001118:	f7ff fe62 	bl	8000de0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 800111c:	2037      	movs	r0, #55	; 0x37
 800111e:	f7ff fe5f 	bl	8000de0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8001122:	2007      	movs	r0, #7
 8001124:	f7ff fe5c 	bl	8000de0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8001128:	2010      	movs	r0, #16
 800112a:	f7ff fe59 	bl	8000de0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800112e:	2003      	movs	r0, #3
 8001130:	f7ff fe56 	bl	8000de0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001134:	200e      	movs	r0, #14
 8001136:	f7ff fe53 	bl	8000de0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 800113a:	2009      	movs	r0, #9
 800113c:	f7ff fe50 	bl	8000de0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001140:	2000      	movs	r0, #0
 8001142:	f7ff fe4d 	bl	8000de0 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8001146:	20e1      	movs	r0, #225	; 0xe1
 8001148:	f7ff fe2c 	bl	8000da4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800114c:	2000      	movs	r0, #0
 800114e:	f7ff fe47 	bl	8000de0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001152:	200e      	movs	r0, #14
 8001154:	f7ff fe44 	bl	8000de0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8001158:	2014      	movs	r0, #20
 800115a:	f7ff fe41 	bl	8000de0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800115e:	2003      	movs	r0, #3
 8001160:	f7ff fe3e 	bl	8000de0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8001164:	2011      	movs	r0, #17
 8001166:	f7ff fe3b 	bl	8000de0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 800116a:	2007      	movs	r0, #7
 800116c:	f7ff fe38 	bl	8000de0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001170:	2031      	movs	r0, #49	; 0x31
 8001172:	f7ff fe35 	bl	8000de0 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8001176:	20c1      	movs	r0, #193	; 0xc1
 8001178:	f7ff fe32 	bl	8000de0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 800117c:	2048      	movs	r0, #72	; 0x48
 800117e:	f7ff fe2f 	bl	8000de0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8001182:	2008      	movs	r0, #8
 8001184:	f7ff fe2c 	bl	8000de0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8001188:	200f      	movs	r0, #15
 800118a:	f7ff fe29 	bl	8000de0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 800118e:	200c      	movs	r0, #12
 8001190:	f7ff fe26 	bl	8000de0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001194:	2031      	movs	r0, #49	; 0x31
 8001196:	f7ff fe23 	bl	8000de0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 800119a:	2036      	movs	r0, #54	; 0x36
 800119c:	f7ff fe20 	bl	8000de0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80011a0:	200f      	movs	r0, #15
 80011a2:	f7ff fe1d 	bl	8000de0 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 80011a6:	2011      	movs	r0, #17
 80011a8:	f7ff fdfc 	bl	8000da4 <ILI9341_Write_Command>
HAL_Delay(120);
 80011ac:	2078      	movs	r0, #120	; 0x78
 80011ae:	f001 f83f 	bl	8002230 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 80011b2:	2029      	movs	r0, #41	; 0x29
 80011b4:	f7ff fdf6 	bl	8000da4 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 80011b8:	2000      	movs	r0, #0
 80011ba:	f7ff fe97 	bl	8000eec <ILI9341_Set_Rotation>
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 80011c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011c8:	b08d      	sub	sp, #52	; 0x34
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	4603      	mov	r3, r0
 80011ce:	6039      	str	r1, [r7, #0]
 80011d0:	80fb      	strh	r3, [r7, #6]
 80011d2:	466b      	mov	r3, sp
 80011d4:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	62fb      	str	r3, [r7, #44]	; 0x2c
if((Size*2) < BURST_MAX_SIZE)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011e2:	d202      	bcs.n	80011ea <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011e8:	e002      	b.n	80011f0 <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 80011ea:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011ee:	62fb      	str	r3, [r7, #44]	; 0x2c
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80011f0:	2201      	movs	r2, #1
 80011f2:	2140      	movs	r1, #64	; 0x40
 80011f4:	483e      	ldr	r0, [pc, #248]	; (80012f0 <ILI9341_Draw_Colour_Burst+0x12c>)
 80011f6:	f001 fb83 	bl	8002900 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2102      	movs	r1, #2
 80011fe:	483c      	ldr	r0, [pc, #240]	; (80012f0 <ILI9341_Draw_Colour_Burst+0x12c>)
 8001200:	f001 fb7e 	bl	8002900 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8001204:	88fb      	ldrh	r3, [r7, #6]
 8001206:	0a1b      	lsrs	r3, r3, #8
 8001208:	b29b      	uxth	r3, r3
 800120a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 800120e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001210:	460b      	mov	r3, r1
 8001212:	3b01      	subs	r3, #1
 8001214:	61fb      	str	r3, [r7, #28]
 8001216:	2300      	movs	r3, #0
 8001218:	4688      	mov	r8, r1
 800121a:	4699      	mov	r9, r3
 800121c:	f04f 0200 	mov.w	r2, #0
 8001220:	f04f 0300 	mov.w	r3, #0
 8001224:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001228:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800122c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001230:	2300      	movs	r3, #0
 8001232:	460c      	mov	r4, r1
 8001234:	461d      	mov	r5, r3
 8001236:	f04f 0200 	mov.w	r2, #0
 800123a:	f04f 0300 	mov.w	r3, #0
 800123e:	00eb      	lsls	r3, r5, #3
 8001240:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001244:	00e2      	lsls	r2, r4, #3
 8001246:	1dcb      	adds	r3, r1, #7
 8001248:	08db      	lsrs	r3, r3, #3
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	ebad 0d03 	sub.w	sp, sp, r3
 8001250:	466b      	mov	r3, sp
 8001252:	3300      	adds	r3, #0
 8001254:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001256:	2300      	movs	r3, #0
 8001258:	62bb      	str	r3, [r7, #40]	; 0x28
 800125a:	e00e      	b.n	800127a <ILI9341_Draw_Colour_Burst+0xb6>
	{
		burst_buffer[j] = 	chifted;
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001260:	4413      	add	r3, r2
 8001262:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001266:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8001268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800126a:	3301      	adds	r3, #1
 800126c:	88fa      	ldrh	r2, [r7, #6]
 800126e:	b2d1      	uxtb	r1, r2
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001276:	3302      	adds	r3, #2
 8001278:	62bb      	str	r3, [r7, #40]	; 0x28
 800127a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800127c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800127e:	429a      	cmp	r2, r3
 8001280:	d3ec      	bcc.n	800125c <ILI9341_Draw_Colour_Burst+0x98>
	}

uint32_t Sending_Size = Size*2;
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8001288:	697a      	ldr	r2, [r7, #20]
 800128a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800128c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001290:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001296:	fbb3 f2f2 	udiv	r2, r3, r2
 800129a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800129c:	fb01 f202 	mul.w	r2, r1, r2
 80012a0:	1a9b      	subs	r3, r3, r2
 80012a2:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d010      	beq.n	80012cc <ILI9341_Draw_Colour_Burst+0x108>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80012aa:	2300      	movs	r3, #0
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
 80012ae:	e009      	b.n	80012c4 <ILI9341_Draw_Colour_Burst+0x100>
	{
		HAL_SPI_Transmit(&ILI9341_SPI, (unsigned char *)burst_buffer, Buffer_Size, 10);
 80012b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	230a      	movs	r3, #10
 80012b6:	69b9      	ldr	r1, [r7, #24]
 80012b8:	480e      	ldr	r0, [pc, #56]	; (80012f4 <ILI9341_Draw_Colour_Burst+0x130>)
 80012ba:	f001 ffff 	bl	80032bc <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80012be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c0:	3301      	adds	r3, #1
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
 80012c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d3f1      	bcc.n	80012b0 <ILI9341_Draw_Colour_Burst+0xec>
	}
}

//REMAINDER!
HAL_SPI_Transmit(&ILI9341_SPI, (unsigned char *)burst_buffer, Remainder_from_block, 10);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	230a      	movs	r3, #10
 80012d2:	69b9      	ldr	r1, [r7, #24]
 80012d4:	4807      	ldr	r0, [pc, #28]	; (80012f4 <ILI9341_Draw_Colour_Burst+0x130>)
 80012d6:	f001 fff1 	bl	80032bc <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80012da:	2201      	movs	r2, #1
 80012dc:	2102      	movs	r1, #2
 80012de:	4804      	ldr	r0, [pc, #16]	; (80012f0 <ILI9341_Draw_Colour_Burst+0x12c>)
 80012e0:	f001 fb0e 	bl	8002900 <HAL_GPIO_WritePin>
 80012e4:	46b5      	mov	sp, r6
}
 80012e6:	bf00      	nop
 80012e8:	3734      	adds	r7, #52	; 0x34
 80012ea:	46bd      	mov	sp, r7
 80012ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80012f0:	40010800 	.word	0x40010800
 80012f4:	20000038 	.word	0x20000038

080012f8 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8001302:	4b0e      	ldr	r3, [pc, #56]	; (800133c <ILI9341_Fill_Screen+0x44>)
 8001304:	881b      	ldrh	r3, [r3, #0]
 8001306:	b29a      	uxth	r2, r3
 8001308:	4b0d      	ldr	r3, [pc, #52]	; (8001340 <ILI9341_Fill_Screen+0x48>)
 800130a:	881b      	ldrh	r3, [r3, #0]
 800130c:	b29b      	uxth	r3, r3
 800130e:	2100      	movs	r1, #0
 8001310:	2000      	movs	r0, #0
 8001312:	f7ff fd83 	bl	8000e1c <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <ILI9341_Fill_Screen+0x44>)
 8001318:	881b      	ldrh	r3, [r3, #0]
 800131a:	b29b      	uxth	r3, r3
 800131c:	461a      	mov	r2, r3
 800131e:	4b08      	ldr	r3, [pc, #32]	; (8001340 <ILI9341_Fill_Screen+0x48>)
 8001320:	881b      	ldrh	r3, [r3, #0]
 8001322:	b29b      	uxth	r3, r3
 8001324:	fb02 f303 	mul.w	r3, r2, r3
 8001328:	461a      	mov	r2, r3
 800132a:	88fb      	ldrh	r3, [r7, #6]
 800132c:	4611      	mov	r1, r2
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff ff48 	bl	80011c4 <ILI9341_Draw_Colour_Burst>
}
 8001334:	bf00      	nop
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000002 	.word	0x20000002
 8001340:	20000000 	.word	0x20000000

08001344 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	80fb      	strh	r3, [r7, #6]
 800134e:	460b      	mov	r3, r1
 8001350:	80bb      	strh	r3, [r7, #4]
 8001352:	4613      	mov	r3, r2
 8001354:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8001356:	4b5b      	ldr	r3, [pc, #364]	; (80014c4 <ILI9341_Draw_Pixel+0x180>)
 8001358:	881b      	ldrh	r3, [r3, #0]
 800135a:	b29b      	uxth	r3, r3
 800135c:	88fa      	ldrh	r2, [r7, #6]
 800135e:	429a      	cmp	r2, r3
 8001360:	f080 80ac 	bcs.w	80014bc <ILI9341_Draw_Pixel+0x178>
 8001364:	4b58      	ldr	r3, [pc, #352]	; (80014c8 <ILI9341_Draw_Pixel+0x184>)
 8001366:	881b      	ldrh	r3, [r3, #0]
 8001368:	b29b      	uxth	r3, r3
 800136a:	88ba      	ldrh	r2, [r7, #4]
 800136c:	429a      	cmp	r2, r3
 800136e:	f080 80a5 	bcs.w	80014bc <ILI9341_Draw_Pixel+0x178>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001372:	2200      	movs	r2, #0
 8001374:	2140      	movs	r1, #64	; 0x40
 8001376:	4855      	ldr	r0, [pc, #340]	; (80014cc <ILI9341_Draw_Pixel+0x188>)
 8001378:	f001 fac2 	bl	8002900 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800137c:	2200      	movs	r2, #0
 800137e:	2102      	movs	r1, #2
 8001380:	4852      	ldr	r0, [pc, #328]	; (80014cc <ILI9341_Draw_Pixel+0x188>)
 8001382:	f001 fabd 	bl	8002900 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8001386:	202a      	movs	r0, #42	; 0x2a
 8001388:	f7ff fcfa 	bl	8000d80 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800138c:	2201      	movs	r2, #1
 800138e:	2140      	movs	r1, #64	; 0x40
 8001390:	484e      	ldr	r0, [pc, #312]	; (80014cc <ILI9341_Draw_Pixel+0x188>)
 8001392:	f001 fab5 	bl	8002900 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8001396:	2201      	movs	r2, #1
 8001398:	2102      	movs	r1, #2
 800139a:	484c      	ldr	r0, [pc, #304]	; (80014cc <ILI9341_Draw_Pixel+0x188>)
 800139c:	f001 fab0 	bl	8002900 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80013a0:	2200      	movs	r2, #0
 80013a2:	2102      	movs	r1, #2
 80013a4:	4849      	ldr	r0, [pc, #292]	; (80014cc <ILI9341_Draw_Pixel+0x188>)
 80013a6:	f001 faab 	bl	8002900 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 80013aa:	88fb      	ldrh	r3, [r7, #6]
 80013ac:	0a1b      	lsrs	r3, r3, #8
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	753b      	strb	r3, [r7, #20]
 80013b4:	88fb      	ldrh	r3, [r7, #6]
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	757b      	strb	r3, [r7, #21]
 80013ba:	88fb      	ldrh	r3, [r7, #6]
 80013bc:	3301      	adds	r3, #1
 80013be:	121b      	asrs	r3, r3, #8
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	75bb      	strb	r3, [r7, #22]
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	3301      	adds	r3, #1
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(&ILI9341_SPI, Temp_Buffer, 4, 1);
 80013ce:	f107 0114 	add.w	r1, r7, #20
 80013d2:	2301      	movs	r3, #1
 80013d4:	2204      	movs	r2, #4
 80013d6:	483e      	ldr	r0, [pc, #248]	; (80014d0 <ILI9341_Draw_Pixel+0x18c>)
 80013d8:	f001 ff70 	bl	80032bc <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80013dc:	2201      	movs	r2, #1
 80013de:	2102      	movs	r1, #2
 80013e0:	483a      	ldr	r0, [pc, #232]	; (80014cc <ILI9341_Draw_Pixel+0x188>)
 80013e2:	f001 fa8d 	bl	8002900 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80013e6:	2200      	movs	r2, #0
 80013e8:	2140      	movs	r1, #64	; 0x40
 80013ea:	4838      	ldr	r0, [pc, #224]	; (80014cc <ILI9341_Draw_Pixel+0x188>)
 80013ec:	f001 fa88 	bl	8002900 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80013f0:	2200      	movs	r2, #0
 80013f2:	2102      	movs	r1, #2
 80013f4:	4835      	ldr	r0, [pc, #212]	; (80014cc <ILI9341_Draw_Pixel+0x188>)
 80013f6:	f001 fa83 	bl	8002900 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 80013fa:	202b      	movs	r0, #43	; 0x2b
 80013fc:	f7ff fcc0 	bl	8000d80 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8001400:	2201      	movs	r2, #1
 8001402:	2140      	movs	r1, #64	; 0x40
 8001404:	4831      	ldr	r0, [pc, #196]	; (80014cc <ILI9341_Draw_Pixel+0x188>)
 8001406:	f001 fa7b 	bl	8002900 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 800140a:	2201      	movs	r2, #1
 800140c:	2102      	movs	r1, #2
 800140e:	482f      	ldr	r0, [pc, #188]	; (80014cc <ILI9341_Draw_Pixel+0x188>)
 8001410:	f001 fa76 	bl	8002900 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001414:	2200      	movs	r2, #0
 8001416:	2102      	movs	r1, #2
 8001418:	482c      	ldr	r0, [pc, #176]	; (80014cc <ILI9341_Draw_Pixel+0x188>)
 800141a:	f001 fa71 	bl	8002900 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 800141e:	88bb      	ldrh	r3, [r7, #4]
 8001420:	0a1b      	lsrs	r3, r3, #8
 8001422:	b29b      	uxth	r3, r3
 8001424:	b2db      	uxtb	r3, r3
 8001426:	743b      	strb	r3, [r7, #16]
 8001428:	88bb      	ldrh	r3, [r7, #4]
 800142a:	b2db      	uxtb	r3, r3
 800142c:	747b      	strb	r3, [r7, #17]
 800142e:	88bb      	ldrh	r3, [r7, #4]
 8001430:	3301      	adds	r3, #1
 8001432:	121b      	asrs	r3, r3, #8
 8001434:	b2db      	uxtb	r3, r3
 8001436:	74bb      	strb	r3, [r7, #18]
 8001438:	88bb      	ldrh	r3, [r7, #4]
 800143a:	b2db      	uxtb	r3, r3
 800143c:	3301      	adds	r3, #1
 800143e:	b2db      	uxtb	r3, r3
 8001440:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(&ILI9341_SPI, Temp_Buffer1, 4, 1);
 8001442:	f107 0110 	add.w	r1, r7, #16
 8001446:	2301      	movs	r3, #1
 8001448:	2204      	movs	r2, #4
 800144a:	4821      	ldr	r0, [pc, #132]	; (80014d0 <ILI9341_Draw_Pixel+0x18c>)
 800144c:	f001 ff36 	bl	80032bc <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001450:	2201      	movs	r2, #1
 8001452:	2102      	movs	r1, #2
 8001454:	481d      	ldr	r0, [pc, #116]	; (80014cc <ILI9341_Draw_Pixel+0x188>)
 8001456:	f001 fa53 	bl	8002900 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800145a:	2200      	movs	r2, #0
 800145c:	2140      	movs	r1, #64	; 0x40
 800145e:	481b      	ldr	r0, [pc, #108]	; (80014cc <ILI9341_Draw_Pixel+0x188>)
 8001460:	f001 fa4e 	bl	8002900 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001464:	2200      	movs	r2, #0
 8001466:	2102      	movs	r1, #2
 8001468:	4818      	ldr	r0, [pc, #96]	; (80014cc <ILI9341_Draw_Pixel+0x188>)
 800146a:	f001 fa49 	bl	8002900 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 800146e:	202c      	movs	r0, #44	; 0x2c
 8001470:	f7ff fc86 	bl	8000d80 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8001474:	2201      	movs	r2, #1
 8001476:	2140      	movs	r1, #64	; 0x40
 8001478:	4814      	ldr	r0, [pc, #80]	; (80014cc <ILI9341_Draw_Pixel+0x188>)
 800147a:	f001 fa41 	bl	8002900 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 800147e:	2201      	movs	r2, #1
 8001480:	2102      	movs	r1, #2
 8001482:	4812      	ldr	r0, [pc, #72]	; (80014cc <ILI9341_Draw_Pixel+0x188>)
 8001484:	f001 fa3c 	bl	8002900 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001488:	2200      	movs	r2, #0
 800148a:	2102      	movs	r1, #2
 800148c:	480f      	ldr	r0, [pc, #60]	; (80014cc <ILI9341_Draw_Pixel+0x188>)
 800148e:	f001 fa37 	bl	8002900 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8001492:	887b      	ldrh	r3, [r7, #2]
 8001494:	0a1b      	lsrs	r3, r3, #8
 8001496:	b29b      	uxth	r3, r3
 8001498:	b2db      	uxtb	r3, r3
 800149a:	733b      	strb	r3, [r7, #12]
 800149c:	887b      	ldrh	r3, [r7, #2]
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(&ILI9341_SPI, Temp_Buffer2, 2, 1);
 80014a2:	f107 010c 	add.w	r1, r7, #12
 80014a6:	2301      	movs	r3, #1
 80014a8:	2202      	movs	r2, #2
 80014aa:	4809      	ldr	r0, [pc, #36]	; (80014d0 <ILI9341_Draw_Pixel+0x18c>)
 80014ac:	f001 ff06 	bl	80032bc <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80014b0:	2201      	movs	r2, #1
 80014b2:	2102      	movs	r1, #2
 80014b4:	4805      	ldr	r0, [pc, #20]	; (80014cc <ILI9341_Draw_Pixel+0x188>)
 80014b6:	f001 fa23 	bl	8002900 <HAL_GPIO_WritePin>
 80014ba:	e000      	b.n	80014be <ILI9341_Draw_Pixel+0x17a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80014bc:	bf00      	nop
	
}
 80014be:	3718      	adds	r7, #24
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20000002 	.word	0x20000002
 80014c8:	20000000 	.word	0x20000000
 80014cc:	40010800 	.word	0x40010800
 80014d0:	20000038 	.word	0x20000038

080014d4 <DWT_Init>:

#define MIN(a,b) (((a)<(b))?(a):(b))
#define MAX(a,b) (((a)>(b))?(a):(b))

static inline void DWT_Init(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; //
 80014d8:	4b07      	ldr	r3, [pc, #28]	; (80014f8 <DWT_Init+0x24>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	4a06      	ldr	r2, [pc, #24]	; (80014f8 <DWT_Init+0x24>)
 80014de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014e2:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   //
 80014e4:	4b05      	ldr	r3, [pc, #20]	; (80014fc <DWT_Init+0x28>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a04      	ldr	r2, [pc, #16]	; (80014fc <DWT_Init+0x28>)
 80014ea:	f043 0301 	orr.w	r3, r3, #1
 80014ee:	6013      	str	r3, [r2, #0]
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr
 80014f8:	e000edf0 	.word	0xe000edf0
 80014fc:	e0001000 	.word	0xe0001000

08001500 <micros>:
	uint32_t us_count_tic =  us * (SystemCoreClock / 1000000U);
	DWT->CYCCNT = 0U;
	while(DWT->CYCCNT < us_count_tic);
}

static inline uint32_t micros(void){
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
	return  DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <micros+0x20>)
 8001506:	685a      	ldr	r2, [r3, #4]
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <micros+0x24>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4906      	ldr	r1, [pc, #24]	; (8001528 <micros+0x28>)
 800150e:	fba1 1303 	umull	r1, r3, r1, r3
 8001512:	0c9b      	lsrs	r3, r3, #18
 8001514:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001518:	4618      	mov	r0, r3
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr
 8001520:	e0001000 	.word	0xe0001000
 8001524:	20000010 	.word	0x20000010
 8001528:	431bde83 	.word	0x431bde83

0800152c <millis>:

static inline uint32_t millis(void){
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
	return  DWT->CYCCNT / (SystemCoreClock / 1000U);
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <millis+0x20>)
 8001532:	685a      	ldr	r2, [r3, #4]
 8001534:	4b06      	ldr	r3, [pc, #24]	; (8001550 <millis+0x24>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4906      	ldr	r1, [pc, #24]	; (8001554 <millis+0x28>)
 800153a:	fba1 1303 	umull	r1, r3, r1, r3
 800153e:	099b      	lsrs	r3, r3, #6
 8001540:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001544:	4618      	mov	r0, r3
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr
 800154c:	e0001000 	.word	0xe0001000
 8001550:	20000010 	.word	0x20000010
 8001554:	10624dd3 	.word	0x10624dd3

08001558 <HAL_GPIO_EXTI_Callback>:
//}
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001558:	b5b0      	push	{r4, r5, r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	80fb      	strh	r3, [r7, #6]

	uint8_t index;
	switch(GPIO_Pin){
 8001562:	88fb      	ldrh	r3, [r7, #6]
 8001564:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001568:	f000 80b8 	beq.w	80016dc <HAL_GPIO_EXTI_Callback+0x184>
 800156c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001570:	f300 80b7 	bgt.w	80016e2 <HAL_GPIO_EXTI_Callback+0x18a>
 8001574:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001578:	f000 80ad 	beq.w	80016d6 <HAL_GPIO_EXTI_Callback+0x17e>
 800157c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001580:	f300 80af 	bgt.w	80016e2 <HAL_GPIO_EXTI_Callback+0x18a>
 8001584:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001588:	f000 80a2 	beq.w	80016d0 <HAL_GPIO_EXTI_Callback+0x178>
 800158c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001590:	f300 80a7 	bgt.w	80016e2 <HAL_GPIO_EXTI_Callback+0x18a>
 8001594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001598:	f000 8097 	beq.w	80016ca <HAL_GPIO_EXTI_Callback+0x172>
 800159c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015a0:	f300 809f 	bgt.w	80016e2 <HAL_GPIO_EXTI_Callback+0x18a>
 80015a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015a8:	f000 808c 	beq.w	80016c4 <HAL_GPIO_EXTI_Callback+0x16c>
 80015ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015b0:	f300 8097 	bgt.w	80016e2 <HAL_GPIO_EXTI_Callback+0x18a>
 80015b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015b8:	f000 8081 	beq.w	80016be <HAL_GPIO_EXTI_Callback+0x166>
 80015bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015c0:	f300 808f 	bgt.w	80016e2 <HAL_GPIO_EXTI_Callback+0x18a>
 80015c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015c8:	d076      	beq.n	80016b8 <HAL_GPIO_EXTI_Callback+0x160>
 80015ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015ce:	f300 8088 	bgt.w	80016e2 <HAL_GPIO_EXTI_Callback+0x18a>
 80015d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015d6:	d06c      	beq.n	80016b2 <HAL_GPIO_EXTI_Callback+0x15a>
 80015d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015dc:	f300 8081 	bgt.w	80016e2 <HAL_GPIO_EXTI_Callback+0x18a>
 80015e0:	2b80      	cmp	r3, #128	; 0x80
 80015e2:	d063      	beq.n	80016ac <HAL_GPIO_EXTI_Callback+0x154>
 80015e4:	2b80      	cmp	r3, #128	; 0x80
 80015e6:	dc7c      	bgt.n	80016e2 <HAL_GPIO_EXTI_Callback+0x18a>
 80015e8:	2b20      	cmp	r3, #32
 80015ea:	dc47      	bgt.n	800167c <HAL_GPIO_EXTI_Callback+0x124>
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	dd78      	ble.n	80016e2 <HAL_GPIO_EXTI_Callback+0x18a>
 80015f0:	3b01      	subs	r3, #1
 80015f2:	2b1f      	cmp	r3, #31
 80015f4:	d875      	bhi.n	80016e2 <HAL_GPIO_EXTI_Callback+0x18a>
 80015f6:	a201      	add	r2, pc, #4	; (adr r2, 80015fc <HAL_GPIO_EXTI_Callback+0xa4>)
 80015f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015fc:	08001683 	.word	0x08001683
 8001600:	08001689 	.word	0x08001689
 8001604:	080016e3 	.word	0x080016e3
 8001608:	0800168f 	.word	0x0800168f
 800160c:	080016e3 	.word	0x080016e3
 8001610:	080016e3 	.word	0x080016e3
 8001614:	080016e3 	.word	0x080016e3
 8001618:	08001695 	.word	0x08001695
 800161c:	080016e3 	.word	0x080016e3
 8001620:	080016e3 	.word	0x080016e3
 8001624:	080016e3 	.word	0x080016e3
 8001628:	080016e3 	.word	0x080016e3
 800162c:	080016e3 	.word	0x080016e3
 8001630:	080016e3 	.word	0x080016e3
 8001634:	080016e3 	.word	0x080016e3
 8001638:	0800169b 	.word	0x0800169b
 800163c:	080016e3 	.word	0x080016e3
 8001640:	080016e3 	.word	0x080016e3
 8001644:	080016e3 	.word	0x080016e3
 8001648:	080016e3 	.word	0x080016e3
 800164c:	080016e3 	.word	0x080016e3
 8001650:	080016e3 	.word	0x080016e3
 8001654:	080016e3 	.word	0x080016e3
 8001658:	080016e3 	.word	0x080016e3
 800165c:	080016e3 	.word	0x080016e3
 8001660:	080016e3 	.word	0x080016e3
 8001664:	080016e3 	.word	0x080016e3
 8001668:	080016e3 	.word	0x080016e3
 800166c:	080016e3 	.word	0x080016e3
 8001670:	080016e3 	.word	0x080016e3
 8001674:	080016e3 	.word	0x080016e3
 8001678:	080016a1 	.word	0x080016a1
 800167c:	2b40      	cmp	r3, #64	; 0x40
 800167e:	d012      	beq.n	80016a6 <HAL_GPIO_EXTI_Callback+0x14e>
 8001680:	e02f      	b.n	80016e2 <HAL_GPIO_EXTI_Callback+0x18a>
	case S00_Pin:
		index = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	73fb      	strb	r3, [r7, #15]
		break;
 8001686:	e02c      	b.n	80016e2 <HAL_GPIO_EXTI_Callback+0x18a>
	case S01_Pin:
		index=1;
 8001688:	2301      	movs	r3, #1
 800168a:	73fb      	strb	r3, [r7, #15]
		break;
 800168c:	e029      	b.n	80016e2 <HAL_GPIO_EXTI_Callback+0x18a>
	case S02_Pin:
		index = 2;
 800168e:	2302      	movs	r3, #2
 8001690:	73fb      	strb	r3, [r7, #15]
		break;
 8001692:	e026      	b.n	80016e2 <HAL_GPIO_EXTI_Callback+0x18a>
	case S03_Pin:
		index = 3;
 8001694:	2303      	movs	r3, #3
 8001696:	73fb      	strb	r3, [r7, #15]
		break;
 8001698:	e023      	b.n	80016e2 <HAL_GPIO_EXTI_Callback+0x18a>
	case S04_Pin:
		index = 4;
 800169a:	2304      	movs	r3, #4
 800169c:	73fb      	strb	r3, [r7, #15]
		break;
 800169e:	e020      	b.n	80016e2 <HAL_GPIO_EXTI_Callback+0x18a>
	case S05_Pin:
		index = 5;
 80016a0:	2305      	movs	r3, #5
 80016a2:	73fb      	strb	r3, [r7, #15]
		break;
 80016a4:	e01d      	b.n	80016e2 <HAL_GPIO_EXTI_Callback+0x18a>
	case S06_Pin:
		index = 6;
 80016a6:	2306      	movs	r3, #6
 80016a8:	73fb      	strb	r3, [r7, #15]
		break;
 80016aa:	e01a      	b.n	80016e2 <HAL_GPIO_EXTI_Callback+0x18a>
	case S07_Pin:
		index = 7;
 80016ac:	2307      	movs	r3, #7
 80016ae:	73fb      	strb	r3, [r7, #15]
		break;
 80016b0:	e017      	b.n	80016e2 <HAL_GPIO_EXTI_Callback+0x18a>
	case S08_Pin:
		index = 8;
 80016b2:	2308      	movs	r3, #8
 80016b4:	73fb      	strb	r3, [r7, #15]
		break;
 80016b6:	e014      	b.n	80016e2 <HAL_GPIO_EXTI_Callback+0x18a>
	case S09_Pin:
		index = 9;
 80016b8:	2309      	movs	r3, #9
 80016ba:	73fb      	strb	r3, [r7, #15]
		break;
 80016bc:	e011      	b.n	80016e2 <HAL_GPIO_EXTI_Callback+0x18a>
	case S10_Pin:
		index = 10;
 80016be:	230a      	movs	r3, #10
 80016c0:	73fb      	strb	r3, [r7, #15]
		break;
 80016c2:	e00e      	b.n	80016e2 <HAL_GPIO_EXTI_Callback+0x18a>
	case S11_Pin:
		index = 11;
 80016c4:	230b      	movs	r3, #11
 80016c6:	73fb      	strb	r3, [r7, #15]
		break;
 80016c8:	e00b      	b.n	80016e2 <HAL_GPIO_EXTI_Callback+0x18a>
	case S12_Pin:
		index = 12;
 80016ca:	230c      	movs	r3, #12
 80016cc:	73fb      	strb	r3, [r7, #15]
		break;
 80016ce:	e008      	b.n	80016e2 <HAL_GPIO_EXTI_Callback+0x18a>
	case S13_Pin:
		index = 13;
 80016d0:	230d      	movs	r3, #13
 80016d2:	73fb      	strb	r3, [r7, #15]
		break;
 80016d4:	e005      	b.n	80016e2 <HAL_GPIO_EXTI_Callback+0x18a>
	case S14_Pin:
		index = 14;
 80016d6:	230e      	movs	r3, #14
 80016d8:	73fb      	strb	r3, [r7, #15]
		break;
 80016da:	e002      	b.n	80016e2 <HAL_GPIO_EXTI_Callback+0x18a>
	case S15_Pin:
		index = 15;
 80016dc:	230f      	movs	r3, #15
 80016de:	73fb      	strb	r3, [r7, #15]
		break;
 80016e0:	bf00      	nop
	}
	pulse[index][pulse_pointer[index]]=micros();
 80016e2:	7bfc      	ldrb	r4, [r7, #15]
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
 80016e6:	4a11      	ldr	r2, [pc, #68]	; (800172c <HAL_GPIO_EXTI_Callback+0x1d4>)
 80016e8:	5cd3      	ldrb	r3, [r2, r3]
 80016ea:	461d      	mov	r5, r3
 80016ec:	f7ff ff08 	bl	8001500 <micros>
 80016f0:	4602      	mov	r2, r0
 80016f2:	490f      	ldr	r1, [pc, #60]	; (8001730 <HAL_GPIO_EXTI_Callback+0x1d8>)
 80016f4:	0123      	lsls	r3, r4, #4
 80016f6:	442b      	add	r3, r5
 80016f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	++pulse_pointer[index];
 80016fc:	7bfb      	ldrb	r3, [r7, #15]
 80016fe:	4a0b      	ldr	r2, [pc, #44]	; (800172c <HAL_GPIO_EXTI_Callback+0x1d4>)
 8001700:	5cd2      	ldrb	r2, [r2, r3]
 8001702:	3201      	adds	r2, #1
 8001704:	b2d1      	uxtb	r1, r2
 8001706:	4a09      	ldr	r2, [pc, #36]	; (800172c <HAL_GPIO_EXTI_Callback+0x1d4>)
 8001708:	54d1      	strb	r1, [r2, r3]
	pulse_pointer[index]%=SPEED_BUFFER_SIZE;
 800170a:	7bfb      	ldrb	r3, [r7, #15]
 800170c:	4a07      	ldr	r2, [pc, #28]	; (800172c <HAL_GPIO_EXTI_Callback+0x1d4>)
 800170e:	5cd2      	ldrb	r2, [r2, r3]
 8001710:	7bfb      	ldrb	r3, [r7, #15]
 8001712:	f002 020f 	and.w	r2, r2, #15
 8001716:	b2d1      	uxtb	r1, r2
 8001718:	4a04      	ldr	r2, [pc, #16]	; (800172c <HAL_GPIO_EXTI_Callback+0x1d4>)
 800171a:	54d1      	strb	r1, [r2, r3]
	increment_count[index]=0;
 800171c:	7bfb      	ldrb	r3, [r7, #15]
 800171e:	4a05      	ldr	r2, [pc, #20]	; (8001734 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8001720:	2100      	movs	r1, #0
 8001722:	54d1      	strb	r1, [r2, r3]
}
 8001724:	bf00      	nop
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bdb0      	pop	{r4, r5, r7, pc}
 800172c:	20000168 	.word	0x20000168
 8001730:	200001ac 	.word	0x200001ac
 8001734:	20000178 	.word	0x20000178

08001738 <calcVelocity>:

void calcVelocity(){
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0

	for(uint8_t i=0;i<SPEED_PIN_COUNT;++i){
 800173e:	2300      	movs	r3, #0
 8001740:	73fb      	strb	r3, [r7, #15]
 8001742:	e07e      	b.n	8001842 <calcVelocity+0x10a>
		if(increment_count[i]>=SPEED_MAX_INCREMENT){
 8001744:	7bfb      	ldrb	r3, [r7, #15]
 8001746:	4a46      	ldr	r2, [pc, #280]	; (8001860 <calcVelocity+0x128>)
 8001748:	5cd3      	ldrb	r3, [r2, r3]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d90c      	bls.n	8001768 <calcVelocity+0x30>
			speed_on_single_pin[2*i+4]=0;
 800174e:	7bfb      	ldrb	r3, [r7, #15]
 8001750:	3302      	adds	r3, #2
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	4a43      	ldr	r2, [pc, #268]	; (8001864 <calcVelocity+0x12c>)
 8001756:	2100      	movs	r1, #0
 8001758:	54d1      	strb	r1, [r2, r3]
			speed_on_single_pin[2*i+1+4]=0;
 800175a:	7bfb      	ldrb	r3, [r7, #15]
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	3305      	adds	r3, #5
 8001760:	4a40      	ldr	r2, [pc, #256]	; (8001864 <calcVelocity+0x12c>)
 8001762:	2100      	movs	r1, #0
 8001764:	54d1      	strb	r1, [r2, r3]
			continue;
 8001766:	e069      	b.n	800183c <calcVelocity+0x104>
		}
		uint32_t s=pulse[i][(pulse_pointer[i]+SPEED_BUFFER_SIZE-1)%SPEED_BUFFER_SIZE]-pulse[i][pulse_pointer[i]];
 8001768:	7bfa      	ldrb	r2, [r7, #15]
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	493e      	ldr	r1, [pc, #248]	; (8001868 <calcVelocity+0x130>)
 800176e:	5ccb      	ldrb	r3, [r1, r3]
 8001770:	330f      	adds	r3, #15
 8001772:	4259      	negs	r1, r3
 8001774:	f003 030f 	and.w	r3, r3, #15
 8001778:	f001 010f 	and.w	r1, r1, #15
 800177c:	bf58      	it	pl
 800177e:	424b      	negpl	r3, r1
 8001780:	493a      	ldr	r1, [pc, #232]	; (800186c <calcVelocity+0x134>)
 8001782:	0112      	lsls	r2, r2, #4
 8001784:	4413      	add	r3, r2
 8001786:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800178a:	7bfb      	ldrb	r3, [r7, #15]
 800178c:	7bf9      	ldrb	r1, [r7, #15]
 800178e:	4836      	ldr	r0, [pc, #216]	; (8001868 <calcVelocity+0x130>)
 8001790:	5c41      	ldrb	r1, [r0, r1]
 8001792:	4608      	mov	r0, r1
 8001794:	4935      	ldr	r1, [pc, #212]	; (800186c <calcVelocity+0x134>)
 8001796:	011b      	lsls	r3, r3, #4
 8001798:	4403      	add	r3, r0
 800179a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	60bb      	str	r3, [r7, #8]
		if(s==0){
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d10c      	bne.n	80017c2 <calcVelocity+0x8a>
			speed_on_single_pin[2*i+4]=0;
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
 80017aa:	3302      	adds	r3, #2
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	4a2d      	ldr	r2, [pc, #180]	; (8001864 <calcVelocity+0x12c>)
 80017b0:	2100      	movs	r1, #0
 80017b2:	54d1      	strb	r1, [r2, r3]
			speed_on_single_pin[2*i+1+4]=0;
 80017b4:	7bfb      	ldrb	r3, [r7, #15]
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	3305      	adds	r3, #5
 80017ba:	4a2a      	ldr	r2, [pc, #168]	; (8001864 <calcVelocity+0x12c>)
 80017bc:	2100      	movs	r1, #0
 80017be:	54d1      	strb	r1, [r2, r3]
 80017c0:	e03c      	b.n	800183c <calcVelocity+0x104>
		}
		else{
			float speed = (SPEED_BUFFER_SIZE-1)*1000000.0/s;
 80017c2:	68b8      	ldr	r0, [r7, #8]
 80017c4:	f7fe fe06 	bl	80003d4 <__aeabi_ui2d>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	a122      	add	r1, pc, #136	; (adr r1, 8001858 <calcVelocity+0x120>)
 80017ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80017d2:	f7fe ffa3 	bl	800071c <__aeabi_ddiv>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	4610      	mov	r0, r2
 80017dc:	4619      	mov	r1, r3
 80017de:	f7ff f8a5 	bl	800092c <__aeabi_d2f>
 80017e2:	4603      	mov	r3, r0
 80017e4:	607b      	str	r3, [r7, #4]
			uint8_t speed_int = (uint8_t)speed;
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7ff f9fe 	bl	8000be8 <__aeabi_f2uiz>
 80017ec:	4603      	mov	r3, r0
 80017ee:	70fb      	strb	r3, [r7, #3]
			uint8_t speed_decimal = (uint8_t)((speed-speed_int)*100.0);
 80017f0:	78fb      	ldrb	r3, [r7, #3]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff f9a4 	bl	8000b40 <__aeabi_i2f>
 80017f8:	4603      	mov	r3, r0
 80017fa:	4619      	mov	r1, r3
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f7ff f8e9 	bl	80009d4 <__aeabi_fsub>
 8001802:	4603      	mov	r3, r0
 8001804:	4618      	mov	r0, r3
 8001806:	f7fe fe07 	bl	8000418 <__aeabi_f2d>
 800180a:	f04f 0200 	mov.w	r2, #0
 800180e:	4b18      	ldr	r3, [pc, #96]	; (8001870 <calcVelocity+0x138>)
 8001810:	f7fe fe5a 	bl	80004c8 <__aeabi_dmul>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	4610      	mov	r0, r2
 800181a:	4619      	mov	r1, r3
 800181c:	f7ff f866 	bl	80008ec <__aeabi_d2uiz>
 8001820:	4603      	mov	r3, r0
 8001822:	70bb      	strb	r3, [r7, #2]
			speed_on_single_pin[2*i+4]=speed_int;
 8001824:	7bfb      	ldrb	r3, [r7, #15]
 8001826:	3302      	adds	r3, #2
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	490e      	ldr	r1, [pc, #56]	; (8001864 <calcVelocity+0x12c>)
 800182c:	78fa      	ldrb	r2, [r7, #3]
 800182e:	54ca      	strb	r2, [r1, r3]
			speed_on_single_pin[2*i+1+4]=speed_decimal;
 8001830:	7bfb      	ldrb	r3, [r7, #15]
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	3305      	adds	r3, #5
 8001836:	490b      	ldr	r1, [pc, #44]	; (8001864 <calcVelocity+0x12c>)
 8001838:	78ba      	ldrb	r2, [r7, #2]
 800183a:	54ca      	strb	r2, [r1, r3]
	for(uint8_t i=0;i<SPEED_PIN_COUNT;++i){
 800183c:	7bfb      	ldrb	r3, [r7, #15]
 800183e:	3301      	adds	r3, #1
 8001840:	73fb      	strb	r3, [r7, #15]
 8001842:	7bfb      	ldrb	r3, [r7, #15]
 8001844:	2b0f      	cmp	r3, #15
 8001846:	f67f af7d 	bls.w	8001744 <calcVelocity+0xc>
		}
	}
}
 800184a:	bf00      	nop
 800184c:	bf00      	nop
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	f3af 8000 	nop.w
 8001858:	00000000 	.word	0x00000000
 800185c:	416c9c38 	.word	0x416c9c38
 8001860:	20000178 	.word	0x20000178
 8001864:	20000188 	.word	0x20000188
 8001868:	20000168 	.word	0x20000168
 800186c:	200001ac 	.word	0x200001ac
 8001870:	40590000 	.word	0x40590000

08001874 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
	calcVelocity();
 800187c:	f7ff ff5c 	bl	8001738 <calcVelocity>
//	HAL_UART_Transmit(&huart1, (uint8_t*)"hello", 5);

	//HAL_UART_Transmit(&huart2, (uint8_t*)(&acsr), sizeof(uint32_t)*SPEED_PIN_COUNT,10);
	//memcpy(&(speed_send[4]),speed_on_single_pin,sizeof(float)*(SPEED_PIN_COUNT));
	HAL_UART_Transmit(&huart2, speed_on_single_pin, SPEED_PIN_COUNT*2+4,10);
 8001880:	230a      	movs	r3, #10
 8001882:	2224      	movs	r2, #36	; 0x24
 8001884:	4903      	ldr	r1, [pc, #12]	; (8001894 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001886:	4804      	ldr	r0, [pc, #16]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001888:	f002 fb50 	bl	8003f2c <HAL_UART_Transmit>

//	__NOP();
}
 800188c:	bf00      	nop
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000188 	.word	0x20000188
 8001898:	20000120 	.word	0x20000120

0800189c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018a2:	f000 fc63 	bl	800216c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018a6:	f000 f873 	bl	8001990 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018aa:	f000 f991 	bl	8001bd0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80018ae:	f000 f8b5 	bl	8001a1c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80018b2:	f000 f939 	bl	8001b28 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80018b6:	f000 f8e7 	bl	8001a88 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80018ba:	f000 f95f 	bl	8001b7c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //speed_on_single_pin[0]=acsr;
  speed_on_single_pin[0]='A';
 80018be:	4b2d      	ldr	r3, [pc, #180]	; (8001974 <main+0xd8>)
 80018c0:	2241      	movs	r2, #65	; 0x41
 80018c2:	701a      	strb	r2, [r3, #0]
  speed_on_single_pin[1]='C';
 80018c4:	4b2b      	ldr	r3, [pc, #172]	; (8001974 <main+0xd8>)
 80018c6:	2243      	movs	r2, #67	; 0x43
 80018c8:	705a      	strb	r2, [r3, #1]
  speed_on_single_pin[2]='S';
 80018ca:	4b2a      	ldr	r3, [pc, #168]	; (8001974 <main+0xd8>)
 80018cc:	2253      	movs	r2, #83	; 0x53
 80018ce:	709a      	strb	r2, [r3, #2]
  speed_on_single_pin[3]='R';
 80018d0:	4b28      	ldr	r3, [pc, #160]	; (8001974 <main+0xd8>)
 80018d2:	2252      	movs	r2, #82	; 0x52
 80018d4:	70da      	strb	r2, [r3, #3]

  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80018d6:	2201      	movs	r2, #1
 80018d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018dc:	4826      	ldr	r0, [pc, #152]	; (8001978 <main+0xdc>)
 80018de:	f001 f80f 	bl	8002900 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_LED_GPIO_Port, LCD_LED_Pin, GPIO_PIN_SET);
 80018e2:	2201      	movs	r2, #1
 80018e4:	2101      	movs	r1, #1
 80018e6:	4825      	ldr	r0, [pc, #148]	; (800197c <main+0xe0>)
 80018e8:	f001 f80a 	bl	8002900 <HAL_GPIO_WritePin>
  DWT_Init();
 80018ec:	f7ff fdf2 	bl	80014d4 <DWT_Init>
  //ST7735_Init();
  //ST7735_FillScreen(ST7735_BLACK);
  ILI9341_Init();
 80018f0:	f7ff fb5a 	bl	8000fa8 <ILI9341_Init>
  ILI9341_Fill_Screen(WHITE);
 80018f4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80018f8:	f7ff fcfe 	bl	80012f8 <ILI9341_Fill_Screen>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 80018fc:	2003      	movs	r0, #3
 80018fe:	f7ff faf5 	bl	8000eec <ILI9341_Set_Rotation>
  //ILI9341_Draw_Text("FPS TEST, 40 loop 2 screens", 10, 10, BLACK, 2, WHITE);
  ILI9341_Write_Text("FPS TEST, 40 loop 2 screens", 10, 10, &Font_11x18, BLACK, WHITE);
 8001902:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001906:	9301      	str	r3, [sp, #4]
 8001908:	2300      	movs	r3, #0
 800190a:	9300      	str	r3, [sp, #0]
 800190c:	4b1c      	ldr	r3, [pc, #112]	; (8001980 <main+0xe4>)
 800190e:	220a      	movs	r2, #10
 8001910:	210a      	movs	r1, #10
 8001912:	481c      	ldr	r0, [pc, #112]	; (8001984 <main+0xe8>)
 8001914:	f7ff f9e3 	bl	8000cde <ILI9341_Write_Text>
  HAL_TIM_Base_Start_IT(&htim1);
 8001918:	481b      	ldr	r0, [pc, #108]	; (8001988 <main+0xec>)
 800191a:	f001 ff09 	bl	8003730 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t t = millis();
 800191e:	f7ff fe05 	bl	800152c <millis>
 8001922:	60f8      	str	r0, [r7, #12]
  while (1)
  {
	for(uint8_t i=0;i<SPEED_PIN_COUNT;++i){
 8001924:	2300      	movs	r3, #0
 8001926:	72fb      	strb	r3, [r7, #11]
 8001928:	e009      	b.n	800193e <main+0xa2>
		increment_count[i]++;
 800192a:	7afb      	ldrb	r3, [r7, #11]
 800192c:	4a17      	ldr	r2, [pc, #92]	; (800198c <main+0xf0>)
 800192e:	5cd2      	ldrb	r2, [r2, r3]
 8001930:	3201      	adds	r2, #1
 8001932:	b2d1      	uxtb	r1, r2
 8001934:	4a15      	ldr	r2, [pc, #84]	; (800198c <main+0xf0>)
 8001936:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<SPEED_PIN_COUNT;++i){
 8001938:	7afb      	ldrb	r3, [r7, #11]
 800193a:	3301      	adds	r3, #1
 800193c:	72fb      	strb	r3, [r7, #11]
 800193e:	7afb      	ldrb	r3, [r7, #11]
 8001940:	2b0f      	cmp	r3, #15
 8001942:	d9f2      	bls.n	800192a <main+0x8e>
	}
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001944:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001948:	480b      	ldr	r0, [pc, #44]	; (8001978 <main+0xdc>)
 800194a:	f000 fff1 	bl	8002930 <HAL_GPIO_TogglePin>

    uint32_t h = millis();
 800194e:	f7ff fded 	bl	800152c <millis>
 8001952:	6078      	str	r0, [r7, #4]
    while(h-t<500){
 8001954:	e005      	b.n	8001962 <main+0xc6>
    	h = millis();
 8001956:	f7ff fde9 	bl	800152c <millis>
 800195a:	6078      	str	r0, [r7, #4]
    	HAL_Delay(1);
 800195c:	2001      	movs	r0, #1
 800195e:	f000 fc67 	bl	8002230 <HAL_Delay>
    while(h-t<500){
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800196c:	d3f3      	bcc.n	8001956 <main+0xba>
    }
    t = h;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	60fb      	str	r3, [r7, #12]
  {
 8001972:	e7d7      	b.n	8001924 <main+0x88>
 8001974:	20000188 	.word	0x20000188
 8001978:	40011000 	.word	0x40011000
 800197c:	40010800 	.word	0x40010800
 8001980:	20000004 	.word	0x20000004
 8001984:	08004b44 	.word	0x08004b44
 8001988:	20000090 	.word	0x20000090
 800198c:	20000178 	.word	0x20000178

08001990 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b090      	sub	sp, #64	; 0x40
 8001994:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001996:	f107 0318 	add.w	r3, r7, #24
 800199a:	2228      	movs	r2, #40	; 0x28
 800199c:	2100      	movs	r1, #0
 800199e:	4618      	mov	r0, r3
 80019a0:	f003 f898 	bl	8004ad4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019a4:	1d3b      	adds	r3, r7, #4
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	605a      	str	r2, [r3, #4]
 80019ac:	609a      	str	r2, [r3, #8]
 80019ae:	60da      	str	r2, [r3, #12]
 80019b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019b2:	2301      	movs	r3, #1
 80019b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80019bc:	2300      	movs	r3, #0
 80019be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019c0:	2301      	movs	r3, #1
 80019c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019c4:	2302      	movs	r3, #2
 80019c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80019ce:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80019d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019d4:	f107 0318 	add.w	r3, r7, #24
 80019d8:	4618      	mov	r0, r3
 80019da:	f000 ffdb 	bl	8002994 <HAL_RCC_OscConfig>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80019e4:	f000 f9cc 	bl	8001d80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019e8:	230f      	movs	r3, #15
 80019ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019ec:	2302      	movs	r3, #2
 80019ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019f0:	2300      	movs	r3, #0
 80019f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019f4:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80019f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80019fa:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80019fe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a00:	1d3b      	adds	r3, r7, #4
 8001a02:	2102      	movs	r1, #2
 8001a04:	4618      	mov	r0, r3
 8001a06:	f001 fa47 	bl	8002e98 <HAL_RCC_ClockConfig>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001a10:	f000 f9b6 	bl	8001d80 <Error_Handler>
  }
}
 8001a14:	bf00      	nop
 8001a16:	3740      	adds	r7, #64	; 0x40
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a20:	4b17      	ldr	r3, [pc, #92]	; (8001a80 <MX_SPI1_Init+0x64>)
 8001a22:	4a18      	ldr	r2, [pc, #96]	; (8001a84 <MX_SPI1_Init+0x68>)
 8001a24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a26:	4b16      	ldr	r3, [pc, #88]	; (8001a80 <MX_SPI1_Init+0x64>)
 8001a28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a2e:	4b14      	ldr	r3, [pc, #80]	; (8001a80 <MX_SPI1_Init+0x64>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a34:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <MX_SPI1_Init+0x64>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a3a:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <MX_SPI1_Init+0x64>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a40:	4b0f      	ldr	r3, [pc, #60]	; (8001a80 <MX_SPI1_Init+0x64>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <MX_SPI1_Init+0x64>)
 8001a48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a4c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a4e:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <MX_SPI1_Init+0x64>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a54:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <MX_SPI1_Init+0x64>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a5a:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <MX_SPI1_Init+0x64>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a60:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <MX_SPI1_Init+0x64>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a66:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <MX_SPI1_Init+0x64>)
 8001a68:	220a      	movs	r2, #10
 8001a6a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a6c:	4804      	ldr	r0, [pc, #16]	; (8001a80 <MX_SPI1_Init+0x64>)
 8001a6e:	f001 fba1 	bl	80031b4 <HAL_SPI_Init>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001a78:	f000 f982 	bl	8001d80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20000038 	.word	0x20000038
 8001a84:	40013000 	.word	0x40013000

08001a88 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a8e:	f107 0308 	add.w	r3, r7, #8
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	605a      	str	r2, [r3, #4]
 8001a98:	609a      	str	r2, [r3, #8]
 8001a9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a9c:	463b      	mov	r3, r7
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001aa4:	4b1e      	ldr	r3, [pc, #120]	; (8001b20 <MX_TIM1_Init+0x98>)
 8001aa6:	4a1f      	ldr	r2, [pc, #124]	; (8001b24 <MX_TIM1_Init+0x9c>)
 8001aa8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35;
 8001aaa:	4b1d      	ldr	r3, [pc, #116]	; (8001b20 <MX_TIM1_Init+0x98>)
 8001aac:	2223      	movs	r2, #35	; 0x23
 8001aae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab0:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <MX_TIM1_Init+0x98>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000-1;
 8001ab6:	4b1a      	ldr	r3, [pc, #104]	; (8001b20 <MX_TIM1_Init+0x98>)
 8001ab8:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001abc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001abe:	4b18      	ldr	r3, [pc, #96]	; (8001b20 <MX_TIM1_Init+0x98>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ac4:	4b16      	ldr	r3, [pc, #88]	; (8001b20 <MX_TIM1_Init+0x98>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001aca:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <MX_TIM1_Init+0x98>)
 8001acc:	2280      	movs	r2, #128	; 0x80
 8001ace:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ad0:	4813      	ldr	r0, [pc, #76]	; (8001b20 <MX_TIM1_Init+0x98>)
 8001ad2:	f001 fddd 	bl	8003690 <HAL_TIM_Base_Init>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001adc:	f000 f950 	bl	8001d80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ae0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ae4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ae6:	f107 0308 	add.w	r3, r7, #8
 8001aea:	4619      	mov	r1, r3
 8001aec:	480c      	ldr	r0, [pc, #48]	; (8001b20 <MX_TIM1_Init+0x98>)
 8001aee:	f001 ff79 	bl	80039e4 <HAL_TIM_ConfigClockSource>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001af8:	f000 f942 	bl	8001d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001afc:	2300      	movs	r3, #0
 8001afe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b00:	2300      	movs	r3, #0
 8001b02:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b04:	463b      	mov	r3, r7
 8001b06:	4619      	mov	r1, r3
 8001b08:	4805      	ldr	r0, [pc, #20]	; (8001b20 <MX_TIM1_Init+0x98>)
 8001b0a:	f002 f94f 	bl	8003dac <HAL_TIMEx_MasterConfigSynchronization>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001b14:	f000 f934 	bl	8001d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b18:	bf00      	nop
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	20000090 	.word	0x20000090
 8001b24:	40012c00 	.word	0x40012c00

08001b28 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b2c:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <MX_USART1_UART_Init+0x4c>)
 8001b2e:	4a12      	ldr	r2, [pc, #72]	; (8001b78 <MX_USART1_UART_Init+0x50>)
 8001b30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b32:	4b10      	ldr	r3, [pc, #64]	; (8001b74 <MX_USART1_UART_Init+0x4c>)
 8001b34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b3a:	4b0e      	ldr	r3, [pc, #56]	; (8001b74 <MX_USART1_UART_Init+0x4c>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b40:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <MX_USART1_UART_Init+0x4c>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b46:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <MX_USART1_UART_Init+0x4c>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b4c:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <MX_USART1_UART_Init+0x4c>)
 8001b4e:	220c      	movs	r2, #12
 8001b50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b52:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <MX_USART1_UART_Init+0x4c>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b58:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <MX_USART1_UART_Init+0x4c>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b5e:	4805      	ldr	r0, [pc, #20]	; (8001b74 <MX_USART1_UART_Init+0x4c>)
 8001b60:	f002 f994 	bl	8003e8c <HAL_UART_Init>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b6a:	f000 f909 	bl	8001d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	200000d8 	.word	0x200000d8
 8001b78:	40013800 	.word	0x40013800

08001b7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b80:	4b11      	ldr	r3, [pc, #68]	; (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001b82:	4a12      	ldr	r2, [pc, #72]	; (8001bcc <MX_USART2_UART_Init+0x50>)
 8001b84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b86:	4b10      	ldr	r3, [pc, #64]	; (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001b88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b8e:	4b0e      	ldr	r3, [pc, #56]	; (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b94:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b9a:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ba0:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001ba2:	220c      	movs	r2, #12
 8001ba4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ba6:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bac:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bb2:	4805      	ldr	r0, [pc, #20]	; (8001bc8 <MX_USART2_UART_Init+0x4c>)
 8001bb4:	f002 f96a 	bl	8003e8c <HAL_UART_Init>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bbe:	f000 f8df 	bl	8001d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20000120 	.word	0x20000120
 8001bcc:	40004400 	.word	0x40004400

08001bd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b088      	sub	sp, #32
 8001bd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd6:	f107 0310 	add.w	r3, r7, #16
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	605a      	str	r2, [r3, #4]
 8001be0:	609a      	str	r2, [r3, #8]
 8001be2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001be4:	4b61      	ldr	r3, [pc, #388]	; (8001d6c <MX_GPIO_Init+0x19c>)
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	4a60      	ldr	r2, [pc, #384]	; (8001d6c <MX_GPIO_Init+0x19c>)
 8001bea:	f043 0310 	orr.w	r3, r3, #16
 8001bee:	6193      	str	r3, [r2, #24]
 8001bf0:	4b5e      	ldr	r3, [pc, #376]	; (8001d6c <MX_GPIO_Init+0x19c>)
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	f003 0310 	and.w	r3, r3, #16
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bfc:	4b5b      	ldr	r3, [pc, #364]	; (8001d6c <MX_GPIO_Init+0x19c>)
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	4a5a      	ldr	r2, [pc, #360]	; (8001d6c <MX_GPIO_Init+0x19c>)
 8001c02:	f043 0320 	orr.w	r3, r3, #32
 8001c06:	6193      	str	r3, [r2, #24]
 8001c08:	4b58      	ldr	r3, [pc, #352]	; (8001d6c <MX_GPIO_Init+0x19c>)
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	f003 0320 	and.w	r3, r3, #32
 8001c10:	60bb      	str	r3, [r7, #8]
 8001c12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c14:	4b55      	ldr	r3, [pc, #340]	; (8001d6c <MX_GPIO_Init+0x19c>)
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	4a54      	ldr	r2, [pc, #336]	; (8001d6c <MX_GPIO_Init+0x19c>)
 8001c1a:	f043 0304 	orr.w	r3, r3, #4
 8001c1e:	6193      	str	r3, [r2, #24]
 8001c20:	4b52      	ldr	r3, [pc, #328]	; (8001d6c <MX_GPIO_Init+0x19c>)
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	607b      	str	r3, [r7, #4]
 8001c2a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c2c:	4b4f      	ldr	r3, [pc, #316]	; (8001d6c <MX_GPIO_Init+0x19c>)
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	4a4e      	ldr	r2, [pc, #312]	; (8001d6c <MX_GPIO_Init+0x19c>)
 8001c32:	f043 0308 	orr.w	r3, r3, #8
 8001c36:	6193      	str	r3, [r2, #24]
 8001c38:	4b4c      	ldr	r3, [pc, #304]	; (8001d6c <MX_GPIO_Init+0x19c>)
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	f003 0308 	and.w	r3, r3, #8
 8001c40:	603b      	str	r3, [r7, #0]
 8001c42:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001c44:	2200      	movs	r2, #0
 8001c46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c4a:	4849      	ldr	r0, [pc, #292]	; (8001d70 <MX_GPIO_Init+0x1a0>)
 8001c4c:	f000 fe58 	bl	8002900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_LED_Pin|LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8001c50:	2200      	movs	r2, #0
 8001c52:	2153      	movs	r1, #83	; 0x53
 8001c54:	4847      	ldr	r0, [pc, #284]	; (8001d74 <MX_GPIO_Init+0x1a4>)
 8001c56:	f000 fe53 	bl	8002900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDB12_GPIO_Port, LEDB12_Pin, GPIO_PIN_RESET);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c60:	4845      	ldr	r0, [pc, #276]	; (8001d78 <MX_GPIO_Init+0x1a8>)
 8001c62:	f000 fe4d 	bl	8002900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001c66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c74:	2302      	movs	r3, #2
 8001c76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001c78:	f107 0310 	add.w	r3, r7, #16
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	483c      	ldr	r0, [pc, #240]	; (8001d70 <MX_GPIO_Init+0x1a0>)
 8001c80:	f000 fcba 	bl	80025f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_LED_Pin LCD_CS_Pin LCD_RST_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_LED_Pin|LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin;
 8001c84:	2353      	movs	r3, #83	; 0x53
 8001c86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c90:	2302      	movs	r3, #2
 8001c92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c94:	f107 0310 	add.w	r3, r7, #16
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4836      	ldr	r0, [pc, #216]	; (8001d74 <MX_GPIO_Init+0x1a4>)
 8001c9c:	f000 fcac 	bl	80025f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : S00_Pin S01_Pin S02_Pin S10_Pin
                           S11_Pin S13_Pin S14_Pin S15_Pin
                           S03_Pin S04_Pin S05_Pin S06_Pin
                           S07_Pin S08_Pin S09_Pin */
  GPIO_InitStruct.Pin = S00_Pin|S01_Pin|S02_Pin|S10_Pin
 8001ca0:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001ca4:	613b      	str	r3, [r7, #16]
                          |S11_Pin|S13_Pin|S14_Pin|S15_Pin
                          |S03_Pin|S04_Pin|S05_Pin|S06_Pin
                          |S07_Pin|S08_Pin|S09_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ca6:	4b35      	ldr	r3, [pc, #212]	; (8001d7c <MX_GPIO_Init+0x1ac>)
 8001ca8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cae:	f107 0310 	add.w	r3, r7, #16
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4830      	ldr	r0, [pc, #192]	; (8001d78 <MX_GPIO_Init+0x1a8>)
 8001cb6:	f000 fc9f 	bl	80025f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LEDB12_Pin */
  GPIO_InitStruct.Pin = LEDB12_Pin;
 8001cba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LEDB12_GPIO_Port, &GPIO_InitStruct);
 8001ccc:	f107 0310 	add.w	r3, r7, #16
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4829      	ldr	r0, [pc, #164]	; (8001d78 <MX_GPIO_Init+0x1a8>)
 8001cd4:	f000 fc90 	bl	80025f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : S12_Pin */
  GPIO_InitStruct.Pin = S12_Pin;
 8001cd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cdc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cde:	4b27      	ldr	r3, [pc, #156]	; (8001d7c <MX_GPIO_Init+0x1ac>)
 8001ce0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(S12_GPIO_Port, &GPIO_InitStruct);
 8001ce6:	f107 0310 	add.w	r3, r7, #16
 8001cea:	4619      	mov	r1, r3
 8001cec:	4821      	ldr	r0, [pc, #132]	; (8001d74 <MX_GPIO_Init+0x1a4>)
 8001cee:	f000 fc83 	bl	80025f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	2006      	movs	r0, #6
 8001cf8:	f000 fb95 	bl	8002426 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001cfc:	2006      	movs	r0, #6
 8001cfe:	f000 fbae 	bl	800245e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2100      	movs	r1, #0
 8001d06:	2007      	movs	r0, #7
 8001d08:	f000 fb8d 	bl	8002426 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001d0c:	2007      	movs	r0, #7
 8001d0e:	f000 fba6 	bl	800245e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001d12:	2200      	movs	r2, #0
 8001d14:	2100      	movs	r1, #0
 8001d16:	2008      	movs	r0, #8
 8001d18:	f000 fb85 	bl	8002426 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001d1c:	2008      	movs	r0, #8
 8001d1e:	f000 fb9e 	bl	800245e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001d22:	2200      	movs	r2, #0
 8001d24:	2100      	movs	r1, #0
 8001d26:	2009      	movs	r0, #9
 8001d28:	f000 fb7d 	bl	8002426 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001d2c:	2009      	movs	r0, #9
 8001d2e:	f000 fb96 	bl	800245e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001d32:	2200      	movs	r2, #0
 8001d34:	2100      	movs	r1, #0
 8001d36:	200a      	movs	r0, #10
 8001d38:	f000 fb75 	bl	8002426 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001d3c:	200a      	movs	r0, #10
 8001d3e:	f000 fb8e 	bl	800245e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001d42:	2200      	movs	r2, #0
 8001d44:	2100      	movs	r1, #0
 8001d46:	2017      	movs	r0, #23
 8001d48:	f000 fb6d 	bl	8002426 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d4c:	2017      	movs	r0, #23
 8001d4e:	f000 fb86 	bl	800245e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001d52:	2200      	movs	r2, #0
 8001d54:	2100      	movs	r1, #0
 8001d56:	2028      	movs	r0, #40	; 0x28
 8001d58:	f000 fb65 	bl	8002426 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d5c:	2028      	movs	r0, #40	; 0x28
 8001d5e:	f000 fb7e 	bl	800245e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d62:	bf00      	nop
 8001d64:	3720      	adds	r7, #32
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	40011000 	.word	0x40011000
 8001d74:	40010800 	.word	0x40010800
 8001d78:	40010c00 	.word	0x40010c00
 8001d7c:	10110000 	.word	0x10110000

08001d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d84:	b672      	cpsid	i
}
 8001d86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d88:	e7fe      	b.n	8001d88 <Error_Handler+0x8>
	...

08001d8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d92:	4b15      	ldr	r3, [pc, #84]	; (8001de8 <HAL_MspInit+0x5c>)
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	4a14      	ldr	r2, [pc, #80]	; (8001de8 <HAL_MspInit+0x5c>)
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	6193      	str	r3, [r2, #24]
 8001d9e:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <HAL_MspInit+0x5c>)
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	60bb      	str	r3, [r7, #8]
 8001da8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001daa:	4b0f      	ldr	r3, [pc, #60]	; (8001de8 <HAL_MspInit+0x5c>)
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	4a0e      	ldr	r2, [pc, #56]	; (8001de8 <HAL_MspInit+0x5c>)
 8001db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db4:	61d3      	str	r3, [r2, #28]
 8001db6:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <HAL_MspInit+0x5c>)
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dbe:	607b      	str	r3, [r7, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001dc2:	4b0a      	ldr	r3, [pc, #40]	; (8001dec <HAL_MspInit+0x60>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	4a04      	ldr	r2, [pc, #16]	; (8001dec <HAL_MspInit+0x60>)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dde:	bf00      	nop
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr
 8001de8:	40021000 	.word	0x40021000
 8001dec:	40010000 	.word	0x40010000

08001df0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b088      	sub	sp, #32
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df8:	f107 0310 	add.w	r3, r7, #16
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a15      	ldr	r2, [pc, #84]	; (8001e60 <HAL_SPI_MspInit+0x70>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d123      	bne.n	8001e58 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e10:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <HAL_SPI_MspInit+0x74>)
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	4a13      	ldr	r2, [pc, #76]	; (8001e64 <HAL_SPI_MspInit+0x74>)
 8001e16:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e1a:	6193      	str	r3, [r2, #24]
 8001e1c:	4b11      	ldr	r3, [pc, #68]	; (8001e64 <HAL_SPI_MspInit+0x74>)
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e28:	4b0e      	ldr	r3, [pc, #56]	; (8001e64 <HAL_SPI_MspInit+0x74>)
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	4a0d      	ldr	r2, [pc, #52]	; (8001e64 <HAL_SPI_MspInit+0x74>)
 8001e2e:	f043 0304 	orr.w	r3, r3, #4
 8001e32:	6193      	str	r3, [r2, #24]
 8001e34:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <HAL_SPI_MspInit+0x74>)
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	f003 0304 	and.w	r3, r3, #4
 8001e3c:	60bb      	str	r3, [r7, #8]
 8001e3e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MOSI_Pin;
 8001e40:	23a0      	movs	r3, #160	; 0xa0
 8001e42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e44:	2302      	movs	r3, #2
 8001e46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4c:	f107 0310 	add.w	r3, r7, #16
 8001e50:	4619      	mov	r1, r3
 8001e52:	4805      	ldr	r0, [pc, #20]	; (8001e68 <HAL_SPI_MspInit+0x78>)
 8001e54:	f000 fbd0 	bl	80025f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e58:	bf00      	nop
 8001e5a:	3720      	adds	r7, #32
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40013000 	.word	0x40013000
 8001e64:	40021000 	.word	0x40021000
 8001e68:	40010800 	.word	0x40010800

08001e6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a11      	ldr	r2, [pc, #68]	; (8001ec0 <HAL_TIM_Base_MspInit+0x54>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d11b      	bne.n	8001eb6 <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e7e:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <HAL_TIM_Base_MspInit+0x58>)
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	4a10      	ldr	r2, [pc, #64]	; (8001ec4 <HAL_TIM_Base_MspInit+0x58>)
 8001e84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e88:	6193      	str	r3, [r2, #24]
 8001e8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ec4 <HAL_TIM_Base_MspInit+0x58>)
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001e96:	2200      	movs	r2, #0
 8001e98:	2100      	movs	r1, #0
 8001e9a:	2018      	movs	r0, #24
 8001e9c:	f000 fac3 	bl	8002426 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001ea0:	2018      	movs	r0, #24
 8001ea2:	f000 fadc 	bl	800245e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	2019      	movs	r0, #25
 8001eac:	f000 fabb 	bl	8002426 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001eb0:	2019      	movs	r0, #25
 8001eb2:	f000 fad4 	bl	800245e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001eb6:	bf00      	nop
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40012c00 	.word	0x40012c00
 8001ec4:	40021000 	.word	0x40021000

08001ec8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b08a      	sub	sp, #40	; 0x28
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed0:	f107 0318 	add.w	r3, r7, #24
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a3b      	ldr	r2, [pc, #236]	; (8001fd0 <HAL_UART_MspInit+0x108>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d132      	bne.n	8001f4e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ee8:	4b3a      	ldr	r3, [pc, #232]	; (8001fd4 <HAL_UART_MspInit+0x10c>)
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	4a39      	ldr	r2, [pc, #228]	; (8001fd4 <HAL_UART_MspInit+0x10c>)
 8001eee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ef2:	6193      	str	r3, [r2, #24]
 8001ef4:	4b37      	ldr	r3, [pc, #220]	; (8001fd4 <HAL_UART_MspInit+0x10c>)
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001efc:	617b      	str	r3, [r7, #20]
 8001efe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f00:	4b34      	ldr	r3, [pc, #208]	; (8001fd4 <HAL_UART_MspInit+0x10c>)
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	4a33      	ldr	r2, [pc, #204]	; (8001fd4 <HAL_UART_MspInit+0x10c>)
 8001f06:	f043 0304 	orr.w	r3, r3, #4
 8001f0a:	6193      	str	r3, [r2, #24]
 8001f0c:	4b31      	ldr	r3, [pc, #196]	; (8001fd4 <HAL_UART_MspInit+0x10c>)
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	f003 0304 	and.w	r3, r3, #4
 8001f14:	613b      	str	r3, [r7, #16]
 8001f16:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1e:	2302      	movs	r3, #2
 8001f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f22:	2303      	movs	r3, #3
 8001f24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f26:	f107 0318 	add.w	r3, r7, #24
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	482a      	ldr	r0, [pc, #168]	; (8001fd8 <HAL_UART_MspInit+0x110>)
 8001f2e:	f000 fb63 	bl	80025f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f40:	f107 0318 	add.w	r3, r7, #24
 8001f44:	4619      	mov	r1, r3
 8001f46:	4824      	ldr	r0, [pc, #144]	; (8001fd8 <HAL_UART_MspInit+0x110>)
 8001f48:	f000 fb56 	bl	80025f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f4c:	e03c      	b.n	8001fc8 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a22      	ldr	r2, [pc, #136]	; (8001fdc <HAL_UART_MspInit+0x114>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d137      	bne.n	8001fc8 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f58:	4b1e      	ldr	r3, [pc, #120]	; (8001fd4 <HAL_UART_MspInit+0x10c>)
 8001f5a:	69db      	ldr	r3, [r3, #28]
 8001f5c:	4a1d      	ldr	r2, [pc, #116]	; (8001fd4 <HAL_UART_MspInit+0x10c>)
 8001f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f62:	61d3      	str	r3, [r2, #28]
 8001f64:	4b1b      	ldr	r3, [pc, #108]	; (8001fd4 <HAL_UART_MspInit+0x10c>)
 8001f66:	69db      	ldr	r3, [r3, #28]
 8001f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f70:	4b18      	ldr	r3, [pc, #96]	; (8001fd4 <HAL_UART_MspInit+0x10c>)
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	4a17      	ldr	r2, [pc, #92]	; (8001fd4 <HAL_UART_MspInit+0x10c>)
 8001f76:	f043 0304 	orr.w	r3, r3, #4
 8001f7a:	6193      	str	r3, [r2, #24]
 8001f7c:	4b15      	ldr	r3, [pc, #84]	; (8001fd4 <HAL_UART_MspInit+0x10c>)
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	f003 0304 	and.w	r3, r3, #4
 8001f84:	60bb      	str	r3, [r7, #8]
 8001f86:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f88:	2304      	movs	r3, #4
 8001f8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f90:	2303      	movs	r3, #3
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f94:	f107 0318 	add.w	r3, r7, #24
 8001f98:	4619      	mov	r1, r3
 8001f9a:	480f      	ldr	r0, [pc, #60]	; (8001fd8 <HAL_UART_MspInit+0x110>)
 8001f9c:	f000 fb2c 	bl	80025f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001fa0:	2308      	movs	r3, #8
 8001fa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fac:	f107 0318 	add.w	r3, r7, #24
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4809      	ldr	r0, [pc, #36]	; (8001fd8 <HAL_UART_MspInit+0x110>)
 8001fb4:	f000 fb20 	bl	80025f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2100      	movs	r1, #0
 8001fbc:	2026      	movs	r0, #38	; 0x26
 8001fbe:	f000 fa32 	bl	8002426 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001fc2:	2026      	movs	r0, #38	; 0x26
 8001fc4:	f000 fa4b 	bl	800245e <HAL_NVIC_EnableIRQ>
}
 8001fc8:	bf00      	nop
 8001fca:	3728      	adds	r7, #40	; 0x28
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40013800 	.word	0x40013800
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	40010800 	.word	0x40010800
 8001fdc:	40004400 	.word	0x40004400

08001fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fe4:	e7fe      	b.n	8001fe4 <NMI_Handler+0x4>

08001fe6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fea:	e7fe      	b.n	8001fea <HardFault_Handler+0x4>

08001fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ff0:	e7fe      	b.n	8001ff0 <MemManage_Handler+0x4>

08001ff2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ff6:	e7fe      	b.n	8001ff6 <BusFault_Handler+0x4>

08001ff8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ffc:	e7fe      	b.n	8001ffc <UsageFault_Handler+0x4>

08001ffe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ffe:	b480      	push	{r7}
 8002000:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	46bd      	mov	sp, r7
 8002006:	bc80      	pop	{r7}
 8002008:	4770      	bx	lr

0800200a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800200a:	b480      	push	{r7}
 800200c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr

08002016 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002016:	b480      	push	{r7}
 8002018:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	46bd      	mov	sp, r7
 800201e:	bc80      	pop	{r7}
 8002020:	4770      	bx	lr

08002022 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002026:	f000 f8e7 	bl	80021f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}

0800202e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S00_Pin);
 8002032:	2001      	movs	r0, #1
 8002034:	f000 fc96 	bl	8002964 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002038:	bf00      	nop
 800203a:	bd80      	pop	{r7, pc}

0800203c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S01_Pin);
 8002040:	2002      	movs	r0, #2
 8002042:	f000 fc8f 	bl	8002964 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}

0800204a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S02_Pin);
 800204e:	2004      	movs	r0, #4
 8002050:	f000 fc88 	bl	8002964 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002054:	bf00      	nop
 8002056:	bd80      	pop	{r7, pc}

08002058 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S03_Pin);
 800205c:	2008      	movs	r0, #8
 800205e:	f000 fc81 	bl	8002964 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}

08002066 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S04_Pin);
 800206a:	2010      	movs	r0, #16
 800206c:	f000 fc7a 	bl	8002964 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002070:	bf00      	nop
 8002072:	bd80      	pop	{r7, pc}

08002074 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S05_Pin);
 8002078:	2020      	movs	r0, #32
 800207a:	f000 fc73 	bl	8002964 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S06_Pin);
 800207e:	2040      	movs	r0, #64	; 0x40
 8002080:	f000 fc70 	bl	8002964 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S07_Pin);
 8002084:	2080      	movs	r0, #128	; 0x80
 8002086:	f000 fc6d 	bl	8002964 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S08_Pin);
 800208a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800208e:	f000 fc69 	bl	8002964 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S09_Pin);
 8002092:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002096:	f000 fc65 	bl	8002964 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
	...

080020a0 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020a4:	4802      	ldr	r0, [pc, #8]	; (80020b0 <TIM1_BRK_IRQHandler+0x10>)
 80020a6:	f001 fb95 	bl	80037d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20000090 	.word	0x20000090

080020b4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020b8:	4802      	ldr	r0, [pc, #8]	; (80020c4 <TIM1_UP_IRQHandler+0x10>)
 80020ba:	f001 fb8b 	bl	80037d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000090 	.word	0x20000090

080020c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020cc:	4802      	ldr	r0, [pc, #8]	; (80020d8 <USART2_IRQHandler+0x10>)
 80020ce:	f001 ffb1 	bl	8004034 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000120 	.word	0x20000120

080020dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S10_Pin);
 80020e0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80020e4:	f000 fc3e 	bl	8002964 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S11_Pin);
 80020e8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80020ec:	f000 fc3a 	bl	8002964 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S12_Pin);
 80020f0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80020f4:	f000 fc36 	bl	8002964 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S13_Pin);
 80020f8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80020fc:	f000 fc32 	bl	8002964 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S14_Pin);
 8002100:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002104:	f000 fc2e 	bl	8002964 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S15_Pin);
 8002108:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800210c:	f000 fc2a 	bl	8002964 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002110:	bf00      	nop
 8002112:	bd80      	pop	{r7, pc}

08002114 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002118:	bf00      	nop
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr

08002120 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002120:	f7ff fff8 	bl	8002114 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002124:	480b      	ldr	r0, [pc, #44]	; (8002154 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002126:	490c      	ldr	r1, [pc, #48]	; (8002158 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002128:	4a0c      	ldr	r2, [pc, #48]	; (800215c <LoopFillZerobss+0x16>)
  movs r3, #0
 800212a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800212c:	e002      	b.n	8002134 <LoopCopyDataInit>

0800212e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800212e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002130:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002132:	3304      	adds	r3, #4

08002134 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002134:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002136:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002138:	d3f9      	bcc.n	800212e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800213a:	4a09      	ldr	r2, [pc, #36]	; (8002160 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800213c:	4c09      	ldr	r4, [pc, #36]	; (8002164 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800213e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002140:	e001      	b.n	8002146 <LoopFillZerobss>

08002142 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002142:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002144:	3204      	adds	r2, #4

08002146 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002146:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002148:	d3fb      	bcc.n	8002142 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800214a:	f002 fccb 	bl	8004ae4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800214e:	f7ff fba5 	bl	800189c <main>
  bx lr
 8002152:	4770      	bx	lr
  ldr r0, =_sdata
 8002154:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002158:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800215c:	080058f0 	.word	0x080058f0
  ldr r2, =_sbss
 8002160:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8002164:	200005b0 	.word	0x200005b0

08002168 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002168:	e7fe      	b.n	8002168 <ADC1_2_IRQHandler>
	...

0800216c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002170:	4b08      	ldr	r3, [pc, #32]	; (8002194 <HAL_Init+0x28>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a07      	ldr	r2, [pc, #28]	; (8002194 <HAL_Init+0x28>)
 8002176:	f043 0310 	orr.w	r3, r3, #16
 800217a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800217c:	2003      	movs	r0, #3
 800217e:	f000 f947 	bl	8002410 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002182:	200f      	movs	r0, #15
 8002184:	f000 f808 	bl	8002198 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002188:	f7ff fe00 	bl	8001d8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40022000 	.word	0x40022000

08002198 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021a0:	4b12      	ldr	r3, [pc, #72]	; (80021ec <HAL_InitTick+0x54>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	4b12      	ldr	r3, [pc, #72]	; (80021f0 <HAL_InitTick+0x58>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	4619      	mov	r1, r3
 80021aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80021b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 f95f 	bl	800247a <HAL_SYSTICK_Config>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e00e      	b.n	80021e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2b0f      	cmp	r3, #15
 80021ca:	d80a      	bhi.n	80021e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021cc:	2200      	movs	r2, #0
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021d4:	f000 f927 	bl	8002426 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021d8:	4a06      	ldr	r2, [pc, #24]	; (80021f4 <HAL_InitTick+0x5c>)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021de:	2300      	movs	r3, #0
 80021e0:	e000      	b.n	80021e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	20000010 	.word	0x20000010
 80021f0:	20000018 	.word	0x20000018
 80021f4:	20000014 	.word	0x20000014

080021f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021fc:	4b05      	ldr	r3, [pc, #20]	; (8002214 <HAL_IncTick+0x1c>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	461a      	mov	r2, r3
 8002202:	4b05      	ldr	r3, [pc, #20]	; (8002218 <HAL_IncTick+0x20>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4413      	add	r3, r2
 8002208:	4a03      	ldr	r2, [pc, #12]	; (8002218 <HAL_IncTick+0x20>)
 800220a:	6013      	str	r3, [r2, #0]
}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr
 8002214:	20000018 	.word	0x20000018
 8002218:	200005ac 	.word	0x200005ac

0800221c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  return uwTick;
 8002220:	4b02      	ldr	r3, [pc, #8]	; (800222c <HAL_GetTick+0x10>)
 8002222:	681b      	ldr	r3, [r3, #0]
}
 8002224:	4618      	mov	r0, r3
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr
 800222c:	200005ac 	.word	0x200005ac

08002230 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002238:	f7ff fff0 	bl	800221c <HAL_GetTick>
 800223c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002248:	d005      	beq.n	8002256 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800224a:	4b0a      	ldr	r3, [pc, #40]	; (8002274 <HAL_Delay+0x44>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	461a      	mov	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	4413      	add	r3, r2
 8002254:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002256:	bf00      	nop
 8002258:	f7ff ffe0 	bl	800221c <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	429a      	cmp	r2, r3
 8002266:	d8f7      	bhi.n	8002258 <HAL_Delay+0x28>
  {
  }
}
 8002268:	bf00      	nop
 800226a:	bf00      	nop
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20000018 	.word	0x20000018

08002278 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002288:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <__NVIC_SetPriorityGrouping+0x44>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800228e:	68ba      	ldr	r2, [r7, #8]
 8002290:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002294:	4013      	ands	r3, r2
 8002296:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022aa:	4a04      	ldr	r2, [pc, #16]	; (80022bc <__NVIC_SetPriorityGrouping+0x44>)
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	60d3      	str	r3, [r2, #12]
}
 80022b0:	bf00      	nop
 80022b2:	3714      	adds	r7, #20
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bc80      	pop	{r7}
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	e000ed00 	.word	0xe000ed00

080022c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022c4:	4b04      	ldr	r3, [pc, #16]	; (80022d8 <__NVIC_GetPriorityGrouping+0x18>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	0a1b      	lsrs	r3, r3, #8
 80022ca:	f003 0307 	and.w	r3, r3, #7
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bc80      	pop	{r7}
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	e000ed00 	.word	0xe000ed00

080022dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	db0b      	blt.n	8002306 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ee:	79fb      	ldrb	r3, [r7, #7]
 80022f0:	f003 021f 	and.w	r2, r3, #31
 80022f4:	4906      	ldr	r1, [pc, #24]	; (8002310 <__NVIC_EnableIRQ+0x34>)
 80022f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fa:	095b      	lsrs	r3, r3, #5
 80022fc:	2001      	movs	r0, #1
 80022fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr
 8002310:	e000e100 	.word	0xe000e100

08002314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	6039      	str	r1, [r7, #0]
 800231e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002324:	2b00      	cmp	r3, #0
 8002326:	db0a      	blt.n	800233e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	b2da      	uxtb	r2, r3
 800232c:	490c      	ldr	r1, [pc, #48]	; (8002360 <__NVIC_SetPriority+0x4c>)
 800232e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002332:	0112      	lsls	r2, r2, #4
 8002334:	b2d2      	uxtb	r2, r2
 8002336:	440b      	add	r3, r1
 8002338:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800233c:	e00a      	b.n	8002354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	b2da      	uxtb	r2, r3
 8002342:	4908      	ldr	r1, [pc, #32]	; (8002364 <__NVIC_SetPriority+0x50>)
 8002344:	79fb      	ldrb	r3, [r7, #7]
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	3b04      	subs	r3, #4
 800234c:	0112      	lsls	r2, r2, #4
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	440b      	add	r3, r1
 8002352:	761a      	strb	r2, [r3, #24]
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	bc80      	pop	{r7}
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	e000e100 	.word	0xe000e100
 8002364:	e000ed00 	.word	0xe000ed00

08002368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002368:	b480      	push	{r7}
 800236a:	b089      	sub	sp, #36	; 0x24
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	f1c3 0307 	rsb	r3, r3, #7
 8002382:	2b04      	cmp	r3, #4
 8002384:	bf28      	it	cs
 8002386:	2304      	movcs	r3, #4
 8002388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	3304      	adds	r3, #4
 800238e:	2b06      	cmp	r3, #6
 8002390:	d902      	bls.n	8002398 <NVIC_EncodePriority+0x30>
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	3b03      	subs	r3, #3
 8002396:	e000      	b.n	800239a <NVIC_EncodePriority+0x32>
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800239c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43da      	mvns	r2, r3
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	401a      	ands	r2, r3
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ba:	43d9      	mvns	r1, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c0:	4313      	orrs	r3, r2
         );
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3724      	adds	r7, #36	; 0x24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc80      	pop	{r7}
 80023ca:	4770      	bx	lr

080023cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023dc:	d301      	bcc.n	80023e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023de:	2301      	movs	r3, #1
 80023e0:	e00f      	b.n	8002402 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023e2:	4a0a      	ldr	r2, [pc, #40]	; (800240c <SysTick_Config+0x40>)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	3b01      	subs	r3, #1
 80023e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ea:	210f      	movs	r1, #15
 80023ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023f0:	f7ff ff90 	bl	8002314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023f4:	4b05      	ldr	r3, [pc, #20]	; (800240c <SysTick_Config+0x40>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023fa:	4b04      	ldr	r3, [pc, #16]	; (800240c <SysTick_Config+0x40>)
 80023fc:	2207      	movs	r2, #7
 80023fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	e000e010 	.word	0xe000e010

08002410 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7ff ff2d 	bl	8002278 <__NVIC_SetPriorityGrouping>
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002426:	b580      	push	{r7, lr}
 8002428:	b086      	sub	sp, #24
 800242a:	af00      	add	r7, sp, #0
 800242c:	4603      	mov	r3, r0
 800242e:	60b9      	str	r1, [r7, #8]
 8002430:	607a      	str	r2, [r7, #4]
 8002432:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002434:	2300      	movs	r3, #0
 8002436:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002438:	f7ff ff42 	bl	80022c0 <__NVIC_GetPriorityGrouping>
 800243c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	68b9      	ldr	r1, [r7, #8]
 8002442:	6978      	ldr	r0, [r7, #20]
 8002444:	f7ff ff90 	bl	8002368 <NVIC_EncodePriority>
 8002448:	4602      	mov	r2, r0
 800244a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800244e:	4611      	mov	r1, r2
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff ff5f 	bl	8002314 <__NVIC_SetPriority>
}
 8002456:	bf00      	nop
 8002458:	3718      	adds	r7, #24
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b082      	sub	sp, #8
 8002462:	af00      	add	r7, sp, #0
 8002464:	4603      	mov	r3, r0
 8002466:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff ff35 	bl	80022dc <__NVIC_EnableIRQ>
}
 8002472:	bf00      	nop
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b082      	sub	sp, #8
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7ff ffa2 	bl	80023cc <SysTick_Config>
 8002488:	4603      	mov	r3, r0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002492:	b480      	push	{r7}
 8002494:	b085      	sub	sp, #20
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800249a:	2300      	movs	r3, #0
 800249c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d008      	beq.n	80024bc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2204      	movs	r2, #4
 80024ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e020      	b.n	80024fe <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f022 020e 	bic.w	r2, r2, #14
 80024ca:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 0201 	bic.w	r2, r2, #1
 80024da:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e4:	2101      	movs	r1, #1
 80024e6:	fa01 f202 	lsl.w	r2, r1, r2
 80024ea:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80024fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3714      	adds	r7, #20
 8002502:	46bd      	mov	sp, r7
 8002504:	bc80      	pop	{r7}
 8002506:	4770      	bx	lr

08002508 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002510:	2300      	movs	r3, #0
 8002512:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800251a:	b2db      	uxtb	r3, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d005      	beq.n	800252c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2204      	movs	r2, #4
 8002524:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	73fb      	strb	r3, [r7, #15]
 800252a:	e051      	b.n	80025d0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 020e 	bic.w	r2, r2, #14
 800253a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 0201 	bic.w	r2, r2, #1
 800254a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a22      	ldr	r2, [pc, #136]	; (80025dc <HAL_DMA_Abort_IT+0xd4>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d029      	beq.n	80025aa <HAL_DMA_Abort_IT+0xa2>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a21      	ldr	r2, [pc, #132]	; (80025e0 <HAL_DMA_Abort_IT+0xd8>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d022      	beq.n	80025a6 <HAL_DMA_Abort_IT+0x9e>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a1f      	ldr	r2, [pc, #124]	; (80025e4 <HAL_DMA_Abort_IT+0xdc>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d01a      	beq.n	80025a0 <HAL_DMA_Abort_IT+0x98>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a1e      	ldr	r2, [pc, #120]	; (80025e8 <HAL_DMA_Abort_IT+0xe0>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d012      	beq.n	800259a <HAL_DMA_Abort_IT+0x92>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a1c      	ldr	r2, [pc, #112]	; (80025ec <HAL_DMA_Abort_IT+0xe4>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d00a      	beq.n	8002594 <HAL_DMA_Abort_IT+0x8c>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a1b      	ldr	r2, [pc, #108]	; (80025f0 <HAL_DMA_Abort_IT+0xe8>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d102      	bne.n	800258e <HAL_DMA_Abort_IT+0x86>
 8002588:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800258c:	e00e      	b.n	80025ac <HAL_DMA_Abort_IT+0xa4>
 800258e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002592:	e00b      	b.n	80025ac <HAL_DMA_Abort_IT+0xa4>
 8002594:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002598:	e008      	b.n	80025ac <HAL_DMA_Abort_IT+0xa4>
 800259a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800259e:	e005      	b.n	80025ac <HAL_DMA_Abort_IT+0xa4>
 80025a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025a4:	e002      	b.n	80025ac <HAL_DMA_Abort_IT+0xa4>
 80025a6:	2310      	movs	r3, #16
 80025a8:	e000      	b.n	80025ac <HAL_DMA_Abort_IT+0xa4>
 80025aa:	2301      	movs	r3, #1
 80025ac:	4a11      	ldr	r2, [pc, #68]	; (80025f4 <HAL_DMA_Abort_IT+0xec>)
 80025ae:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d003      	beq.n	80025d0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	4798      	blx	r3
    } 
  }
  return status;
 80025d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40020008 	.word	0x40020008
 80025e0:	4002001c 	.word	0x4002001c
 80025e4:	40020030 	.word	0x40020030
 80025e8:	40020044 	.word	0x40020044
 80025ec:	40020058 	.word	0x40020058
 80025f0:	4002006c 	.word	0x4002006c
 80025f4:	40020000 	.word	0x40020000

080025f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b08b      	sub	sp, #44	; 0x2c
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002602:	2300      	movs	r3, #0
 8002604:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002606:	2300      	movs	r3, #0
 8002608:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800260a:	e169      	b.n	80028e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800260c:	2201      	movs	r2, #1
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	69fa      	ldr	r2, [r7, #28]
 800261c:	4013      	ands	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	429a      	cmp	r2, r3
 8002626:	f040 8158 	bne.w	80028da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	4a9a      	ldr	r2, [pc, #616]	; (8002898 <HAL_GPIO_Init+0x2a0>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d05e      	beq.n	80026f2 <HAL_GPIO_Init+0xfa>
 8002634:	4a98      	ldr	r2, [pc, #608]	; (8002898 <HAL_GPIO_Init+0x2a0>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d875      	bhi.n	8002726 <HAL_GPIO_Init+0x12e>
 800263a:	4a98      	ldr	r2, [pc, #608]	; (800289c <HAL_GPIO_Init+0x2a4>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d058      	beq.n	80026f2 <HAL_GPIO_Init+0xfa>
 8002640:	4a96      	ldr	r2, [pc, #600]	; (800289c <HAL_GPIO_Init+0x2a4>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d86f      	bhi.n	8002726 <HAL_GPIO_Init+0x12e>
 8002646:	4a96      	ldr	r2, [pc, #600]	; (80028a0 <HAL_GPIO_Init+0x2a8>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d052      	beq.n	80026f2 <HAL_GPIO_Init+0xfa>
 800264c:	4a94      	ldr	r2, [pc, #592]	; (80028a0 <HAL_GPIO_Init+0x2a8>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d869      	bhi.n	8002726 <HAL_GPIO_Init+0x12e>
 8002652:	4a94      	ldr	r2, [pc, #592]	; (80028a4 <HAL_GPIO_Init+0x2ac>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d04c      	beq.n	80026f2 <HAL_GPIO_Init+0xfa>
 8002658:	4a92      	ldr	r2, [pc, #584]	; (80028a4 <HAL_GPIO_Init+0x2ac>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d863      	bhi.n	8002726 <HAL_GPIO_Init+0x12e>
 800265e:	4a92      	ldr	r2, [pc, #584]	; (80028a8 <HAL_GPIO_Init+0x2b0>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d046      	beq.n	80026f2 <HAL_GPIO_Init+0xfa>
 8002664:	4a90      	ldr	r2, [pc, #576]	; (80028a8 <HAL_GPIO_Init+0x2b0>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d85d      	bhi.n	8002726 <HAL_GPIO_Init+0x12e>
 800266a:	2b12      	cmp	r3, #18
 800266c:	d82a      	bhi.n	80026c4 <HAL_GPIO_Init+0xcc>
 800266e:	2b12      	cmp	r3, #18
 8002670:	d859      	bhi.n	8002726 <HAL_GPIO_Init+0x12e>
 8002672:	a201      	add	r2, pc, #4	; (adr r2, 8002678 <HAL_GPIO_Init+0x80>)
 8002674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002678:	080026f3 	.word	0x080026f3
 800267c:	080026cd 	.word	0x080026cd
 8002680:	080026df 	.word	0x080026df
 8002684:	08002721 	.word	0x08002721
 8002688:	08002727 	.word	0x08002727
 800268c:	08002727 	.word	0x08002727
 8002690:	08002727 	.word	0x08002727
 8002694:	08002727 	.word	0x08002727
 8002698:	08002727 	.word	0x08002727
 800269c:	08002727 	.word	0x08002727
 80026a0:	08002727 	.word	0x08002727
 80026a4:	08002727 	.word	0x08002727
 80026a8:	08002727 	.word	0x08002727
 80026ac:	08002727 	.word	0x08002727
 80026b0:	08002727 	.word	0x08002727
 80026b4:	08002727 	.word	0x08002727
 80026b8:	08002727 	.word	0x08002727
 80026bc:	080026d5 	.word	0x080026d5
 80026c0:	080026e9 	.word	0x080026e9
 80026c4:	4a79      	ldr	r2, [pc, #484]	; (80028ac <HAL_GPIO_Init+0x2b4>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d013      	beq.n	80026f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80026ca:	e02c      	b.n	8002726 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	623b      	str	r3, [r7, #32]
          break;
 80026d2:	e029      	b.n	8002728 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	3304      	adds	r3, #4
 80026da:	623b      	str	r3, [r7, #32]
          break;
 80026dc:	e024      	b.n	8002728 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	3308      	adds	r3, #8
 80026e4:	623b      	str	r3, [r7, #32]
          break;
 80026e6:	e01f      	b.n	8002728 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	330c      	adds	r3, #12
 80026ee:	623b      	str	r3, [r7, #32]
          break;
 80026f0:	e01a      	b.n	8002728 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d102      	bne.n	8002700 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80026fa:	2304      	movs	r3, #4
 80026fc:	623b      	str	r3, [r7, #32]
          break;
 80026fe:	e013      	b.n	8002728 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d105      	bne.n	8002714 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002708:	2308      	movs	r3, #8
 800270a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	69fa      	ldr	r2, [r7, #28]
 8002710:	611a      	str	r2, [r3, #16]
          break;
 8002712:	e009      	b.n	8002728 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002714:	2308      	movs	r3, #8
 8002716:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	69fa      	ldr	r2, [r7, #28]
 800271c:	615a      	str	r2, [r3, #20]
          break;
 800271e:	e003      	b.n	8002728 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002720:	2300      	movs	r3, #0
 8002722:	623b      	str	r3, [r7, #32]
          break;
 8002724:	e000      	b.n	8002728 <HAL_GPIO_Init+0x130>
          break;
 8002726:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	2bff      	cmp	r3, #255	; 0xff
 800272c:	d801      	bhi.n	8002732 <HAL_GPIO_Init+0x13a>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	e001      	b.n	8002736 <HAL_GPIO_Init+0x13e>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	3304      	adds	r3, #4
 8002736:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	2bff      	cmp	r3, #255	; 0xff
 800273c:	d802      	bhi.n	8002744 <HAL_GPIO_Init+0x14c>
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	e002      	b.n	800274a <HAL_GPIO_Init+0x152>
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	3b08      	subs	r3, #8
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	210f      	movs	r1, #15
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	fa01 f303 	lsl.w	r3, r1, r3
 8002758:	43db      	mvns	r3, r3
 800275a:	401a      	ands	r2, r3
 800275c:	6a39      	ldr	r1, [r7, #32]
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	fa01 f303 	lsl.w	r3, r1, r3
 8002764:	431a      	orrs	r2, r3
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002772:	2b00      	cmp	r3, #0
 8002774:	f000 80b1 	beq.w	80028da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002778:	4b4d      	ldr	r3, [pc, #308]	; (80028b0 <HAL_GPIO_Init+0x2b8>)
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	4a4c      	ldr	r2, [pc, #304]	; (80028b0 <HAL_GPIO_Init+0x2b8>)
 800277e:	f043 0301 	orr.w	r3, r3, #1
 8002782:	6193      	str	r3, [r2, #24]
 8002784:	4b4a      	ldr	r3, [pc, #296]	; (80028b0 <HAL_GPIO_Init+0x2b8>)
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	60bb      	str	r3, [r7, #8]
 800278e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002790:	4a48      	ldr	r2, [pc, #288]	; (80028b4 <HAL_GPIO_Init+0x2bc>)
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	089b      	lsrs	r3, r3, #2
 8002796:	3302      	adds	r3, #2
 8002798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800279c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	f003 0303 	and.w	r3, r3, #3
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	220f      	movs	r2, #15
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	43db      	mvns	r3, r3
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	4013      	ands	r3, r2
 80027b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a40      	ldr	r2, [pc, #256]	; (80028b8 <HAL_GPIO_Init+0x2c0>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d013      	beq.n	80027e4 <HAL_GPIO_Init+0x1ec>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a3f      	ldr	r2, [pc, #252]	; (80028bc <HAL_GPIO_Init+0x2c4>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d00d      	beq.n	80027e0 <HAL_GPIO_Init+0x1e8>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a3e      	ldr	r2, [pc, #248]	; (80028c0 <HAL_GPIO_Init+0x2c8>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d007      	beq.n	80027dc <HAL_GPIO_Init+0x1e4>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a3d      	ldr	r2, [pc, #244]	; (80028c4 <HAL_GPIO_Init+0x2cc>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d101      	bne.n	80027d8 <HAL_GPIO_Init+0x1e0>
 80027d4:	2303      	movs	r3, #3
 80027d6:	e006      	b.n	80027e6 <HAL_GPIO_Init+0x1ee>
 80027d8:	2304      	movs	r3, #4
 80027da:	e004      	b.n	80027e6 <HAL_GPIO_Init+0x1ee>
 80027dc:	2302      	movs	r3, #2
 80027de:	e002      	b.n	80027e6 <HAL_GPIO_Init+0x1ee>
 80027e0:	2301      	movs	r3, #1
 80027e2:	e000      	b.n	80027e6 <HAL_GPIO_Init+0x1ee>
 80027e4:	2300      	movs	r3, #0
 80027e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e8:	f002 0203 	and.w	r2, r2, #3
 80027ec:	0092      	lsls	r2, r2, #2
 80027ee:	4093      	lsls	r3, r2
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80027f6:	492f      	ldr	r1, [pc, #188]	; (80028b4 <HAL_GPIO_Init+0x2bc>)
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	089b      	lsrs	r3, r3, #2
 80027fc:	3302      	adds	r3, #2
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d006      	beq.n	800281e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002810:	4b2d      	ldr	r3, [pc, #180]	; (80028c8 <HAL_GPIO_Init+0x2d0>)
 8002812:	689a      	ldr	r2, [r3, #8]
 8002814:	492c      	ldr	r1, [pc, #176]	; (80028c8 <HAL_GPIO_Init+0x2d0>)
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	4313      	orrs	r3, r2
 800281a:	608b      	str	r3, [r1, #8]
 800281c:	e006      	b.n	800282c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800281e:	4b2a      	ldr	r3, [pc, #168]	; (80028c8 <HAL_GPIO_Init+0x2d0>)
 8002820:	689a      	ldr	r2, [r3, #8]
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	43db      	mvns	r3, r3
 8002826:	4928      	ldr	r1, [pc, #160]	; (80028c8 <HAL_GPIO_Init+0x2d0>)
 8002828:	4013      	ands	r3, r2
 800282a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d006      	beq.n	8002846 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002838:	4b23      	ldr	r3, [pc, #140]	; (80028c8 <HAL_GPIO_Init+0x2d0>)
 800283a:	68da      	ldr	r2, [r3, #12]
 800283c:	4922      	ldr	r1, [pc, #136]	; (80028c8 <HAL_GPIO_Init+0x2d0>)
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	4313      	orrs	r3, r2
 8002842:	60cb      	str	r3, [r1, #12]
 8002844:	e006      	b.n	8002854 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002846:	4b20      	ldr	r3, [pc, #128]	; (80028c8 <HAL_GPIO_Init+0x2d0>)
 8002848:	68da      	ldr	r2, [r3, #12]
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	43db      	mvns	r3, r3
 800284e:	491e      	ldr	r1, [pc, #120]	; (80028c8 <HAL_GPIO_Init+0x2d0>)
 8002850:	4013      	ands	r3, r2
 8002852:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d006      	beq.n	800286e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002860:	4b19      	ldr	r3, [pc, #100]	; (80028c8 <HAL_GPIO_Init+0x2d0>)
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	4918      	ldr	r1, [pc, #96]	; (80028c8 <HAL_GPIO_Init+0x2d0>)
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	4313      	orrs	r3, r2
 800286a:	604b      	str	r3, [r1, #4]
 800286c:	e006      	b.n	800287c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800286e:	4b16      	ldr	r3, [pc, #88]	; (80028c8 <HAL_GPIO_Init+0x2d0>)
 8002870:	685a      	ldr	r2, [r3, #4]
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	43db      	mvns	r3, r3
 8002876:	4914      	ldr	r1, [pc, #80]	; (80028c8 <HAL_GPIO_Init+0x2d0>)
 8002878:	4013      	ands	r3, r2
 800287a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d021      	beq.n	80028cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002888:	4b0f      	ldr	r3, [pc, #60]	; (80028c8 <HAL_GPIO_Init+0x2d0>)
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	490e      	ldr	r1, [pc, #56]	; (80028c8 <HAL_GPIO_Init+0x2d0>)
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	4313      	orrs	r3, r2
 8002892:	600b      	str	r3, [r1, #0]
 8002894:	e021      	b.n	80028da <HAL_GPIO_Init+0x2e2>
 8002896:	bf00      	nop
 8002898:	10320000 	.word	0x10320000
 800289c:	10310000 	.word	0x10310000
 80028a0:	10220000 	.word	0x10220000
 80028a4:	10210000 	.word	0x10210000
 80028a8:	10120000 	.word	0x10120000
 80028ac:	10110000 	.word	0x10110000
 80028b0:	40021000 	.word	0x40021000
 80028b4:	40010000 	.word	0x40010000
 80028b8:	40010800 	.word	0x40010800
 80028bc:	40010c00 	.word	0x40010c00
 80028c0:	40011000 	.word	0x40011000
 80028c4:	40011400 	.word	0x40011400
 80028c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80028cc:	4b0b      	ldr	r3, [pc, #44]	; (80028fc <HAL_GPIO_Init+0x304>)
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	43db      	mvns	r3, r3
 80028d4:	4909      	ldr	r1, [pc, #36]	; (80028fc <HAL_GPIO_Init+0x304>)
 80028d6:	4013      	ands	r3, r2
 80028d8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	3301      	adds	r3, #1
 80028de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	fa22 f303 	lsr.w	r3, r2, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f47f ae8e 	bne.w	800260c <HAL_GPIO_Init+0x14>
  }
}
 80028f0:	bf00      	nop
 80028f2:	bf00      	nop
 80028f4:	372c      	adds	r7, #44	; 0x2c
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bc80      	pop	{r7}
 80028fa:	4770      	bx	lr
 80028fc:	40010400 	.word	0x40010400

08002900 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	460b      	mov	r3, r1
 800290a:	807b      	strh	r3, [r7, #2]
 800290c:	4613      	mov	r3, r2
 800290e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002910:	787b      	ldrb	r3, [r7, #1]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d003      	beq.n	800291e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002916:	887a      	ldrh	r2, [r7, #2]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800291c:	e003      	b.n	8002926 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800291e:	887b      	ldrh	r3, [r7, #2]
 8002920:	041a      	lsls	r2, r3, #16
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	611a      	str	r2, [r3, #16]
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr

08002930 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	460b      	mov	r3, r1
 800293a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002942:	887a      	ldrh	r2, [r7, #2]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	4013      	ands	r3, r2
 8002948:	041a      	lsls	r2, r3, #16
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	43d9      	mvns	r1, r3
 800294e:	887b      	ldrh	r3, [r7, #2]
 8002950:	400b      	ands	r3, r1
 8002952:	431a      	orrs	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	611a      	str	r2, [r3, #16]
}
 8002958:	bf00      	nop
 800295a:	3714      	adds	r7, #20
 800295c:	46bd      	mov	sp, r7
 800295e:	bc80      	pop	{r7}
 8002960:	4770      	bx	lr
	...

08002964 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	4603      	mov	r3, r0
 800296c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800296e:	4b08      	ldr	r3, [pc, #32]	; (8002990 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002970:	695a      	ldr	r2, [r3, #20]
 8002972:	88fb      	ldrh	r3, [r7, #6]
 8002974:	4013      	ands	r3, r2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d006      	beq.n	8002988 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800297a:	4a05      	ldr	r2, [pc, #20]	; (8002990 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800297c:	88fb      	ldrh	r3, [r7, #6]
 800297e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002980:	88fb      	ldrh	r3, [r7, #6]
 8002982:	4618      	mov	r0, r3
 8002984:	f7fe fde8 	bl	8001558 <HAL_GPIO_EXTI_Callback>
  }
}
 8002988:	bf00      	nop
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	40010400 	.word	0x40010400

08002994 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e272      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f000 8087 	beq.w	8002ac2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029b4:	4b92      	ldr	r3, [pc, #584]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f003 030c 	and.w	r3, r3, #12
 80029bc:	2b04      	cmp	r3, #4
 80029be:	d00c      	beq.n	80029da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029c0:	4b8f      	ldr	r3, [pc, #572]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f003 030c 	and.w	r3, r3, #12
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	d112      	bne.n	80029f2 <HAL_RCC_OscConfig+0x5e>
 80029cc:	4b8c      	ldr	r3, [pc, #560]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d8:	d10b      	bne.n	80029f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029da:	4b89      	ldr	r3, [pc, #548]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d06c      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x12c>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d168      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e24c      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029fa:	d106      	bne.n	8002a0a <HAL_RCC_OscConfig+0x76>
 80029fc:	4b80      	ldr	r3, [pc, #512]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a7f      	ldr	r2, [pc, #508]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a06:	6013      	str	r3, [r2, #0]
 8002a08:	e02e      	b.n	8002a68 <HAL_RCC_OscConfig+0xd4>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10c      	bne.n	8002a2c <HAL_RCC_OscConfig+0x98>
 8002a12:	4b7b      	ldr	r3, [pc, #492]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a7a      	ldr	r2, [pc, #488]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a1c:	6013      	str	r3, [r2, #0]
 8002a1e:	4b78      	ldr	r3, [pc, #480]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a77      	ldr	r2, [pc, #476]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a28:	6013      	str	r3, [r2, #0]
 8002a2a:	e01d      	b.n	8002a68 <HAL_RCC_OscConfig+0xd4>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a34:	d10c      	bne.n	8002a50 <HAL_RCC_OscConfig+0xbc>
 8002a36:	4b72      	ldr	r3, [pc, #456]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a71      	ldr	r2, [pc, #452]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a40:	6013      	str	r3, [r2, #0]
 8002a42:	4b6f      	ldr	r3, [pc, #444]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a6e      	ldr	r2, [pc, #440]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a4c:	6013      	str	r3, [r2, #0]
 8002a4e:	e00b      	b.n	8002a68 <HAL_RCC_OscConfig+0xd4>
 8002a50:	4b6b      	ldr	r3, [pc, #428]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a6a      	ldr	r2, [pc, #424]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a5a:	6013      	str	r3, [r2, #0]
 8002a5c:	4b68      	ldr	r3, [pc, #416]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a67      	ldr	r2, [pc, #412]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d013      	beq.n	8002a98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a70:	f7ff fbd4 	bl	800221c <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a78:	f7ff fbd0 	bl	800221c <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b64      	cmp	r3, #100	; 0x64
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e200      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8a:	4b5d      	ldr	r3, [pc, #372]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d0f0      	beq.n	8002a78 <HAL_RCC_OscConfig+0xe4>
 8002a96:	e014      	b.n	8002ac2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a98:	f7ff fbc0 	bl	800221c <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aa0:	f7ff fbbc 	bl	800221c <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b64      	cmp	r3, #100	; 0x64
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e1ec      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ab2:	4b53      	ldr	r3, [pc, #332]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1f0      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x10c>
 8002abe:	e000      	b.n	8002ac2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d063      	beq.n	8002b96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ace:	4b4c      	ldr	r3, [pc, #304]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f003 030c 	and.w	r3, r3, #12
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00b      	beq.n	8002af2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ada:	4b49      	ldr	r3, [pc, #292]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f003 030c 	and.w	r3, r3, #12
 8002ae2:	2b08      	cmp	r3, #8
 8002ae4:	d11c      	bne.n	8002b20 <HAL_RCC_OscConfig+0x18c>
 8002ae6:	4b46      	ldr	r3, [pc, #280]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d116      	bne.n	8002b20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002af2:	4b43      	ldr	r3, [pc, #268]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d005      	beq.n	8002b0a <HAL_RCC_OscConfig+0x176>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d001      	beq.n	8002b0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e1c0      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b0a:	4b3d      	ldr	r3, [pc, #244]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4939      	ldr	r1, [pc, #228]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b1e:	e03a      	b.n	8002b96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d020      	beq.n	8002b6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b28:	4b36      	ldr	r3, [pc, #216]	; (8002c04 <HAL_RCC_OscConfig+0x270>)
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2e:	f7ff fb75 	bl	800221c <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b36:	f7ff fb71 	bl	800221c <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e1a1      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b48:	4b2d      	ldr	r3, [pc, #180]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d0f0      	beq.n	8002b36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b54:	4b2a      	ldr	r3, [pc, #168]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	4927      	ldr	r1, [pc, #156]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	600b      	str	r3, [r1, #0]
 8002b68:	e015      	b.n	8002b96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b6a:	4b26      	ldr	r3, [pc, #152]	; (8002c04 <HAL_RCC_OscConfig+0x270>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b70:	f7ff fb54 	bl	800221c <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b78:	f7ff fb50 	bl	800221c <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e180      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b8a:	4b1d      	ldr	r3, [pc, #116]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f0      	bne.n	8002b78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0308 	and.w	r3, r3, #8
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d03a      	beq.n	8002c18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d019      	beq.n	8002bde <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002baa:	4b17      	ldr	r3, [pc, #92]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002bac:	2201      	movs	r2, #1
 8002bae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bb0:	f7ff fb34 	bl	800221c <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bb8:	f7ff fb30 	bl	800221c <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e160      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bca:	4b0d      	ldr	r3, [pc, #52]	; (8002c00 <HAL_RCC_OscConfig+0x26c>)
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0f0      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002bd6:	2001      	movs	r0, #1
 8002bd8:	f000 face 	bl	8003178 <RCC_Delay>
 8002bdc:	e01c      	b.n	8002c18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bde:	4b0a      	ldr	r3, [pc, #40]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002be4:	f7ff fb1a 	bl	800221c <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bea:	e00f      	b.n	8002c0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bec:	f7ff fb16 	bl	800221c <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d908      	bls.n	8002c0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e146      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
 8002bfe:	bf00      	nop
 8002c00:	40021000 	.word	0x40021000
 8002c04:	42420000 	.word	0x42420000
 8002c08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c0c:	4b92      	ldr	r3, [pc, #584]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1e9      	bne.n	8002bec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f000 80a6 	beq.w	8002d72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c26:	2300      	movs	r3, #0
 8002c28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c2a:	4b8b      	ldr	r3, [pc, #556]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10d      	bne.n	8002c52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c36:	4b88      	ldr	r3, [pc, #544]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	4a87      	ldr	r2, [pc, #540]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c40:	61d3      	str	r3, [r2, #28]
 8002c42:	4b85      	ldr	r3, [pc, #532]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4a:	60bb      	str	r3, [r7, #8]
 8002c4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c52:	4b82      	ldr	r3, [pc, #520]	; (8002e5c <HAL_RCC_OscConfig+0x4c8>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d118      	bne.n	8002c90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c5e:	4b7f      	ldr	r3, [pc, #508]	; (8002e5c <HAL_RCC_OscConfig+0x4c8>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a7e      	ldr	r2, [pc, #504]	; (8002e5c <HAL_RCC_OscConfig+0x4c8>)
 8002c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c6a:	f7ff fad7 	bl	800221c <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c70:	e008      	b.n	8002c84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c72:	f7ff fad3 	bl	800221c <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b64      	cmp	r3, #100	; 0x64
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e103      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c84:	4b75      	ldr	r3, [pc, #468]	; (8002e5c <HAL_RCC_OscConfig+0x4c8>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0f0      	beq.n	8002c72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d106      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x312>
 8002c98:	4b6f      	ldr	r3, [pc, #444]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	4a6e      	ldr	r2, [pc, #440]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002c9e:	f043 0301 	orr.w	r3, r3, #1
 8002ca2:	6213      	str	r3, [r2, #32]
 8002ca4:	e02d      	b.n	8002d02 <HAL_RCC_OscConfig+0x36e>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10c      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x334>
 8002cae:	4b6a      	ldr	r3, [pc, #424]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	4a69      	ldr	r2, [pc, #420]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cb4:	f023 0301 	bic.w	r3, r3, #1
 8002cb8:	6213      	str	r3, [r2, #32]
 8002cba:	4b67      	ldr	r3, [pc, #412]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	4a66      	ldr	r2, [pc, #408]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cc0:	f023 0304 	bic.w	r3, r3, #4
 8002cc4:	6213      	str	r3, [r2, #32]
 8002cc6:	e01c      	b.n	8002d02 <HAL_RCC_OscConfig+0x36e>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	2b05      	cmp	r3, #5
 8002cce:	d10c      	bne.n	8002cea <HAL_RCC_OscConfig+0x356>
 8002cd0:	4b61      	ldr	r3, [pc, #388]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	4a60      	ldr	r2, [pc, #384]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cd6:	f043 0304 	orr.w	r3, r3, #4
 8002cda:	6213      	str	r3, [r2, #32]
 8002cdc:	4b5e      	ldr	r3, [pc, #376]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	4a5d      	ldr	r2, [pc, #372]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002ce2:	f043 0301 	orr.w	r3, r3, #1
 8002ce6:	6213      	str	r3, [r2, #32]
 8002ce8:	e00b      	b.n	8002d02 <HAL_RCC_OscConfig+0x36e>
 8002cea:	4b5b      	ldr	r3, [pc, #364]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	4a5a      	ldr	r2, [pc, #360]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cf0:	f023 0301 	bic.w	r3, r3, #1
 8002cf4:	6213      	str	r3, [r2, #32]
 8002cf6:	4b58      	ldr	r3, [pc, #352]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	4a57      	ldr	r2, [pc, #348]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002cfc:	f023 0304 	bic.w	r3, r3, #4
 8002d00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d015      	beq.n	8002d36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d0a:	f7ff fa87 	bl	800221c <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d10:	e00a      	b.n	8002d28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d12:	f7ff fa83 	bl	800221c <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e0b1      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d28:	4b4b      	ldr	r3, [pc, #300]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d0ee      	beq.n	8002d12 <HAL_RCC_OscConfig+0x37e>
 8002d34:	e014      	b.n	8002d60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d36:	f7ff fa71 	bl	800221c <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d3c:	e00a      	b.n	8002d54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d3e:	f7ff fa6d 	bl	800221c <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e09b      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d54:	4b40      	ldr	r3, [pc, #256]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1ee      	bne.n	8002d3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d60:	7dfb      	ldrb	r3, [r7, #23]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d105      	bne.n	8002d72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d66:	4b3c      	ldr	r3, [pc, #240]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	4a3b      	ldr	r2, [pc, #236]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002d6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f000 8087 	beq.w	8002e8a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d7c:	4b36      	ldr	r3, [pc, #216]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f003 030c 	and.w	r3, r3, #12
 8002d84:	2b08      	cmp	r3, #8
 8002d86:	d061      	beq.n	8002e4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	69db      	ldr	r3, [r3, #28]
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d146      	bne.n	8002e1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d90:	4b33      	ldr	r3, [pc, #204]	; (8002e60 <HAL_RCC_OscConfig+0x4cc>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d96:	f7ff fa41 	bl	800221c <HAL_GetTick>
 8002d9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d9c:	e008      	b.n	8002db0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d9e:	f7ff fa3d 	bl	800221c <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e06d      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002db0:	4b29      	ldr	r3, [pc, #164]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1f0      	bne.n	8002d9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dc4:	d108      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002dc6:	4b24      	ldr	r3, [pc, #144]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	4921      	ldr	r1, [pc, #132]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dd8:	4b1f      	ldr	r3, [pc, #124]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a19      	ldr	r1, [r3, #32]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	430b      	orrs	r3, r1
 8002dea:	491b      	ldr	r1, [pc, #108]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002df0:	4b1b      	ldr	r3, [pc, #108]	; (8002e60 <HAL_RCC_OscConfig+0x4cc>)
 8002df2:	2201      	movs	r2, #1
 8002df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df6:	f7ff fa11 	bl	800221c <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dfc:	e008      	b.n	8002e10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dfe:	f7ff fa0d 	bl	800221c <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e03d      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e10:	4b11      	ldr	r3, [pc, #68]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d0f0      	beq.n	8002dfe <HAL_RCC_OscConfig+0x46a>
 8002e1c:	e035      	b.n	8002e8a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e1e:	4b10      	ldr	r3, [pc, #64]	; (8002e60 <HAL_RCC_OscConfig+0x4cc>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e24:	f7ff f9fa 	bl	800221c <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e2c:	f7ff f9f6 	bl	800221c <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e026      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e3e:	4b06      	ldr	r3, [pc, #24]	; (8002e58 <HAL_RCC_OscConfig+0x4c4>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f0      	bne.n	8002e2c <HAL_RCC_OscConfig+0x498>
 8002e4a:	e01e      	b.n	8002e8a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	69db      	ldr	r3, [r3, #28]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d107      	bne.n	8002e64 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e019      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	40007000 	.word	0x40007000
 8002e60:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e64:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <HAL_RCC_OscConfig+0x500>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d106      	bne.n	8002e86 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d001      	beq.n	8002e8a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e000      	b.n	8002e8c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3718      	adds	r7, #24
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40021000 	.word	0x40021000

08002e98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e0d0      	b.n	800304e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002eac:	4b6a      	ldr	r3, [pc, #424]	; (8003058 <HAL_RCC_ClockConfig+0x1c0>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0307 	and.w	r3, r3, #7
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d910      	bls.n	8002edc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eba:	4b67      	ldr	r3, [pc, #412]	; (8003058 <HAL_RCC_ClockConfig+0x1c0>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f023 0207 	bic.w	r2, r3, #7
 8002ec2:	4965      	ldr	r1, [pc, #404]	; (8003058 <HAL_RCC_ClockConfig+0x1c0>)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eca:	4b63      	ldr	r3, [pc, #396]	; (8003058 <HAL_RCC_ClockConfig+0x1c0>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d001      	beq.n	8002edc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e0b8      	b.n	800304e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d020      	beq.n	8002f2a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0304 	and.w	r3, r3, #4
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d005      	beq.n	8002f00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ef4:	4b59      	ldr	r3, [pc, #356]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	4a58      	ldr	r2, [pc, #352]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002efa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002efe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0308 	and.w	r3, r3, #8
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d005      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f0c:	4b53      	ldr	r3, [pc, #332]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	4a52      	ldr	r2, [pc, #328]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002f12:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f16:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f18:	4b50      	ldr	r3, [pc, #320]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	494d      	ldr	r1, [pc, #308]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d040      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d107      	bne.n	8002f4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f3e:	4b47      	ldr	r3, [pc, #284]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d115      	bne.n	8002f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e07f      	b.n	800304e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d107      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f56:	4b41      	ldr	r3, [pc, #260]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d109      	bne.n	8002f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e073      	b.n	800304e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f66:	4b3d      	ldr	r3, [pc, #244]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e06b      	b.n	800304e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f76:	4b39      	ldr	r3, [pc, #228]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f023 0203 	bic.w	r2, r3, #3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	4936      	ldr	r1, [pc, #216]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f88:	f7ff f948 	bl	800221c <HAL_GetTick>
 8002f8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f8e:	e00a      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f90:	f7ff f944 	bl	800221c <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e053      	b.n	800304e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa6:	4b2d      	ldr	r3, [pc, #180]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f003 020c 	and.w	r2, r3, #12
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d1eb      	bne.n	8002f90 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fb8:	4b27      	ldr	r3, [pc, #156]	; (8003058 <HAL_RCC_ClockConfig+0x1c0>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d210      	bcs.n	8002fe8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fc6:	4b24      	ldr	r3, [pc, #144]	; (8003058 <HAL_RCC_ClockConfig+0x1c0>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f023 0207 	bic.w	r2, r3, #7
 8002fce:	4922      	ldr	r1, [pc, #136]	; (8003058 <HAL_RCC_ClockConfig+0x1c0>)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fd6:	4b20      	ldr	r3, [pc, #128]	; (8003058 <HAL_RCC_ClockConfig+0x1c0>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0307 	and.w	r3, r3, #7
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d001      	beq.n	8002fe8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e032      	b.n	800304e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0304 	and.w	r3, r3, #4
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d008      	beq.n	8003006 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ff4:	4b19      	ldr	r3, [pc, #100]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	4916      	ldr	r1, [pc, #88]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8003002:	4313      	orrs	r3, r2
 8003004:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0308 	and.w	r3, r3, #8
 800300e:	2b00      	cmp	r3, #0
 8003010:	d009      	beq.n	8003026 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003012:	4b12      	ldr	r3, [pc, #72]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	490e      	ldr	r1, [pc, #56]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 8003022:	4313      	orrs	r3, r2
 8003024:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003026:	f000 f821 	bl	800306c <HAL_RCC_GetSysClockFreq>
 800302a:	4602      	mov	r2, r0
 800302c:	4b0b      	ldr	r3, [pc, #44]	; (800305c <HAL_RCC_ClockConfig+0x1c4>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	091b      	lsrs	r3, r3, #4
 8003032:	f003 030f 	and.w	r3, r3, #15
 8003036:	490a      	ldr	r1, [pc, #40]	; (8003060 <HAL_RCC_ClockConfig+0x1c8>)
 8003038:	5ccb      	ldrb	r3, [r1, r3]
 800303a:	fa22 f303 	lsr.w	r3, r2, r3
 800303e:	4a09      	ldr	r2, [pc, #36]	; (8003064 <HAL_RCC_ClockConfig+0x1cc>)
 8003040:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003042:	4b09      	ldr	r3, [pc, #36]	; (8003068 <HAL_RCC_ClockConfig+0x1d0>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f7ff f8a6 	bl	8002198 <HAL_InitTick>

  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	40022000 	.word	0x40022000
 800305c:	40021000 	.word	0x40021000
 8003060:	080058bc 	.word	0x080058bc
 8003064:	20000010 	.word	0x20000010
 8003068:	20000014 	.word	0x20000014

0800306c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800306c:	b480      	push	{r7}
 800306e:	b087      	sub	sp, #28
 8003070:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003072:	2300      	movs	r3, #0
 8003074:	60fb      	str	r3, [r7, #12]
 8003076:	2300      	movs	r3, #0
 8003078:	60bb      	str	r3, [r7, #8]
 800307a:	2300      	movs	r3, #0
 800307c:	617b      	str	r3, [r7, #20]
 800307e:	2300      	movs	r3, #0
 8003080:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003082:	2300      	movs	r3, #0
 8003084:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003086:	4b1e      	ldr	r3, [pc, #120]	; (8003100 <HAL_RCC_GetSysClockFreq+0x94>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f003 030c 	and.w	r3, r3, #12
 8003092:	2b04      	cmp	r3, #4
 8003094:	d002      	beq.n	800309c <HAL_RCC_GetSysClockFreq+0x30>
 8003096:	2b08      	cmp	r3, #8
 8003098:	d003      	beq.n	80030a2 <HAL_RCC_GetSysClockFreq+0x36>
 800309a:	e027      	b.n	80030ec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800309c:	4b19      	ldr	r3, [pc, #100]	; (8003104 <HAL_RCC_GetSysClockFreq+0x98>)
 800309e:	613b      	str	r3, [r7, #16]
      break;
 80030a0:	e027      	b.n	80030f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	0c9b      	lsrs	r3, r3, #18
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	4a17      	ldr	r2, [pc, #92]	; (8003108 <HAL_RCC_GetSysClockFreq+0x9c>)
 80030ac:	5cd3      	ldrb	r3, [r2, r3]
 80030ae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d010      	beq.n	80030dc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030ba:	4b11      	ldr	r3, [pc, #68]	; (8003100 <HAL_RCC_GetSysClockFreq+0x94>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	0c5b      	lsrs	r3, r3, #17
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	4a11      	ldr	r2, [pc, #68]	; (800310c <HAL_RCC_GetSysClockFreq+0xa0>)
 80030c6:	5cd3      	ldrb	r3, [r2, r3]
 80030c8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a0d      	ldr	r2, [pc, #52]	; (8003104 <HAL_RCC_GetSysClockFreq+0x98>)
 80030ce:	fb03 f202 	mul.w	r2, r3, r2
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d8:	617b      	str	r3, [r7, #20]
 80030da:	e004      	b.n	80030e6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a0c      	ldr	r2, [pc, #48]	; (8003110 <HAL_RCC_GetSysClockFreq+0xa4>)
 80030e0:	fb02 f303 	mul.w	r3, r2, r3
 80030e4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	613b      	str	r3, [r7, #16]
      break;
 80030ea:	e002      	b.n	80030f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030ec:	4b05      	ldr	r3, [pc, #20]	; (8003104 <HAL_RCC_GetSysClockFreq+0x98>)
 80030ee:	613b      	str	r3, [r7, #16]
      break;
 80030f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030f2:	693b      	ldr	r3, [r7, #16]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	371c      	adds	r7, #28
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bc80      	pop	{r7}
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	40021000 	.word	0x40021000
 8003104:	007a1200 	.word	0x007a1200
 8003108:	080058d4 	.word	0x080058d4
 800310c:	080058e4 	.word	0x080058e4
 8003110:	003d0900 	.word	0x003d0900

08003114 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003118:	4b02      	ldr	r3, [pc, #8]	; (8003124 <HAL_RCC_GetHCLKFreq+0x10>)
 800311a:	681b      	ldr	r3, [r3, #0]
}
 800311c:	4618      	mov	r0, r3
 800311e:	46bd      	mov	sp, r7
 8003120:	bc80      	pop	{r7}
 8003122:	4770      	bx	lr
 8003124:	20000010 	.word	0x20000010

08003128 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800312c:	f7ff fff2 	bl	8003114 <HAL_RCC_GetHCLKFreq>
 8003130:	4602      	mov	r2, r0
 8003132:	4b05      	ldr	r3, [pc, #20]	; (8003148 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	0a1b      	lsrs	r3, r3, #8
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	4903      	ldr	r1, [pc, #12]	; (800314c <HAL_RCC_GetPCLK1Freq+0x24>)
 800313e:	5ccb      	ldrb	r3, [r1, r3]
 8003140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003144:	4618      	mov	r0, r3
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40021000 	.word	0x40021000
 800314c:	080058cc 	.word	0x080058cc

08003150 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003154:	f7ff ffde 	bl	8003114 <HAL_RCC_GetHCLKFreq>
 8003158:	4602      	mov	r2, r0
 800315a:	4b05      	ldr	r3, [pc, #20]	; (8003170 <HAL_RCC_GetPCLK2Freq+0x20>)
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	0adb      	lsrs	r3, r3, #11
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	4903      	ldr	r1, [pc, #12]	; (8003174 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003166:	5ccb      	ldrb	r3, [r1, r3]
 8003168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800316c:	4618      	mov	r0, r3
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40021000 	.word	0x40021000
 8003174:	080058cc 	.word	0x080058cc

08003178 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003180:	4b0a      	ldr	r3, [pc, #40]	; (80031ac <RCC_Delay+0x34>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a0a      	ldr	r2, [pc, #40]	; (80031b0 <RCC_Delay+0x38>)
 8003186:	fba2 2303 	umull	r2, r3, r2, r3
 800318a:	0a5b      	lsrs	r3, r3, #9
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	fb02 f303 	mul.w	r3, r2, r3
 8003192:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003194:	bf00      	nop
  }
  while (Delay --);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	1e5a      	subs	r2, r3, #1
 800319a:	60fa      	str	r2, [r7, #12]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1f9      	bne.n	8003194 <RCC_Delay+0x1c>
}
 80031a0:	bf00      	nop
 80031a2:	bf00      	nop
 80031a4:	3714      	adds	r7, #20
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bc80      	pop	{r7}
 80031aa:	4770      	bx	lr
 80031ac:	20000010 	.word	0x20000010
 80031b0:	10624dd3 	.word	0x10624dd3

080031b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e076      	b.n	80032b4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d108      	bne.n	80031e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031d6:	d009      	beq.n	80031ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	61da      	str	r2, [r3, #28]
 80031de:	e005      	b.n	80031ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d106      	bne.n	800320c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f7fe fdf2 	bl	8001df0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2202      	movs	r2, #2
 8003210:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003222:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003234:	431a      	orrs	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800323e:	431a      	orrs	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	431a      	orrs	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	431a      	orrs	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800325c:	431a      	orrs	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	69db      	ldr	r3, [r3, #28]
 8003262:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003266:	431a      	orrs	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003270:	ea42 0103 	orr.w	r1, r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003278:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	430a      	orrs	r2, r1
 8003282:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	0c1a      	lsrs	r2, r3, #16
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f002 0204 	and.w	r2, r2, #4
 8003292:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	69da      	ldr	r2, [r3, #28]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3708      	adds	r7, #8
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b088      	sub	sp, #32
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	603b      	str	r3, [r7, #0]
 80032c8:	4613      	mov	r3, r2
 80032ca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80032cc:	2300      	movs	r3, #0
 80032ce:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d101      	bne.n	80032de <HAL_SPI_Transmit+0x22>
 80032da:	2302      	movs	r3, #2
 80032dc:	e12d      	b.n	800353a <HAL_SPI_Transmit+0x27e>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032e6:	f7fe ff99 	bl	800221c <HAL_GetTick>
 80032ea:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80032ec:	88fb      	ldrh	r3, [r7, #6]
 80032ee:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d002      	beq.n	8003302 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80032fc:	2302      	movs	r3, #2
 80032fe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003300:	e116      	b.n	8003530 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d002      	beq.n	800330e <HAL_SPI_Transmit+0x52>
 8003308:	88fb      	ldrh	r3, [r7, #6]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d102      	bne.n	8003314 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003312:	e10d      	b.n	8003530 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2203      	movs	r2, #3
 8003318:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	68ba      	ldr	r2, [r7, #8]
 8003326:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	88fa      	ldrh	r2, [r7, #6]
 800332c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	88fa      	ldrh	r2, [r7, #6]
 8003332:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800335a:	d10f      	bne.n	800337c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800336a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800337a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003386:	2b40      	cmp	r3, #64	; 0x40
 8003388:	d007      	beq.n	800339a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003398:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033a2:	d14f      	bne.n	8003444 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d002      	beq.n	80033b2 <HAL_SPI_Transmit+0xf6>
 80033ac:	8afb      	ldrh	r3, [r7, #22]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d142      	bne.n	8003438 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b6:	881a      	ldrh	r2, [r3, #0]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c2:	1c9a      	adds	r2, r3, #2
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	3b01      	subs	r3, #1
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80033d6:	e02f      	b.n	8003438 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d112      	bne.n	800340c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	881a      	ldrh	r2, [r3, #0]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f6:	1c9a      	adds	r2, r3, #2
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003400:	b29b      	uxth	r3, r3
 8003402:	3b01      	subs	r3, #1
 8003404:	b29a      	uxth	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	86da      	strh	r2, [r3, #54]	; 0x36
 800340a:	e015      	b.n	8003438 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800340c:	f7fe ff06 	bl	800221c <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	683a      	ldr	r2, [r7, #0]
 8003418:	429a      	cmp	r2, r3
 800341a:	d803      	bhi.n	8003424 <HAL_SPI_Transmit+0x168>
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003422:	d102      	bne.n	800342a <HAL_SPI_Transmit+0x16e>
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d106      	bne.n	8003438 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003436:	e07b      	b.n	8003530 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800343c:	b29b      	uxth	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1ca      	bne.n	80033d8 <HAL_SPI_Transmit+0x11c>
 8003442:	e050      	b.n	80034e6 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d002      	beq.n	8003452 <HAL_SPI_Transmit+0x196>
 800344c:	8afb      	ldrh	r3, [r7, #22]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d144      	bne.n	80034dc <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	330c      	adds	r3, #12
 800345c:	7812      	ldrb	r2, [r2, #0]
 800345e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003464:	1c5a      	adds	r2, r3, #1
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800346e:	b29b      	uxth	r3, r3
 8003470:	3b01      	subs	r3, #1
 8003472:	b29a      	uxth	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003478:	e030      	b.n	80034dc <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b02      	cmp	r3, #2
 8003486:	d113      	bne.n	80034b0 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	330c      	adds	r3, #12
 8003492:	7812      	ldrb	r2, [r2, #0]
 8003494:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	1c5a      	adds	r2, r3, #1
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	3b01      	subs	r3, #1
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	86da      	strh	r2, [r3, #54]	; 0x36
 80034ae:	e015      	b.n	80034dc <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034b0:	f7fe feb4 	bl	800221c <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d803      	bhi.n	80034c8 <HAL_SPI_Transmit+0x20c>
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034c6:	d102      	bne.n	80034ce <HAL_SPI_Transmit+0x212>
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d106      	bne.n	80034dc <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80034da:	e029      	b.n	8003530 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1c9      	bne.n	800347a <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	6839      	ldr	r1, [r7, #0]
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f000 f8b2 	bl	8003654 <SPI_EndRxTxTransaction>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d002      	beq.n	80034fc <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2220      	movs	r2, #32
 80034fa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d10a      	bne.n	800351a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003504:	2300      	movs	r3, #0
 8003506:	613b      	str	r3, [r7, #16]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	613b      	str	r3, [r7, #16]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	613b      	str	r3, [r7, #16]
 8003518:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351e:	2b00      	cmp	r3, #0
 8003520:	d002      	beq.n	8003528 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	77fb      	strb	r3, [r7, #31]
 8003526:	e003      	b.n	8003530 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003538:	7ffb      	ldrb	r3, [r7, #31]
}
 800353a:	4618      	mov	r0, r3
 800353c:	3720      	adds	r7, #32
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
	...

08003544 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b088      	sub	sp, #32
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	603b      	str	r3, [r7, #0]
 8003550:	4613      	mov	r3, r2
 8003552:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003554:	f7fe fe62 	bl	800221c <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355c:	1a9b      	subs	r3, r3, r2
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	4413      	add	r3, r2
 8003562:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003564:	f7fe fe5a 	bl	800221c <HAL_GetTick>
 8003568:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800356a:	4b39      	ldr	r3, [pc, #228]	; (8003650 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	015b      	lsls	r3, r3, #5
 8003570:	0d1b      	lsrs	r3, r3, #20
 8003572:	69fa      	ldr	r2, [r7, #28]
 8003574:	fb02 f303 	mul.w	r3, r2, r3
 8003578:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800357a:	e054      	b.n	8003626 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003582:	d050      	beq.n	8003626 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003584:	f7fe fe4a 	bl	800221c <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	69fa      	ldr	r2, [r7, #28]
 8003590:	429a      	cmp	r2, r3
 8003592:	d902      	bls.n	800359a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d13d      	bne.n	8003616 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80035a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035b2:	d111      	bne.n	80035d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035bc:	d004      	beq.n	80035c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035c6:	d107      	bne.n	80035d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035e0:	d10f      	bne.n	8003602 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035f0:	601a      	str	r2, [r3, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003600:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e017      	b.n	8003646 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d101      	bne.n	8003620 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800361c:	2300      	movs	r3, #0
 800361e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	3b01      	subs	r3, #1
 8003624:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689a      	ldr	r2, [r3, #8]
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	4013      	ands	r3, r2
 8003630:	68ba      	ldr	r2, [r7, #8]
 8003632:	429a      	cmp	r2, r3
 8003634:	bf0c      	ite	eq
 8003636:	2301      	moveq	r3, #1
 8003638:	2300      	movne	r3, #0
 800363a:	b2db      	uxtb	r3, r3
 800363c:	461a      	mov	r2, r3
 800363e:	79fb      	ldrb	r3, [r7, #7]
 8003640:	429a      	cmp	r2, r3
 8003642:	d19b      	bne.n	800357c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3720      	adds	r7, #32
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	20000010 	.word	0x20000010

08003654 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af02      	add	r7, sp, #8
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	9300      	str	r3, [sp, #0]
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	2200      	movs	r2, #0
 8003668:	2180      	movs	r1, #128	; 0x80
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f7ff ff6a 	bl	8003544 <SPI_WaitFlagStateUntilTimeout>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d007      	beq.n	8003686 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800367a:	f043 0220 	orr.w	r2, r3, #32
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e000      	b.n	8003688 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e041      	b.n	8003726 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d106      	bne.n	80036bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7fe fbd8 	bl	8001e6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2202      	movs	r2, #2
 80036c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	3304      	adds	r3, #4
 80036cc:	4619      	mov	r1, r3
 80036ce:	4610      	mov	r0, r2
 80036d0:	f000 fa74 	bl	8003bbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
	...

08003730 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b01      	cmp	r3, #1
 8003742:	d001      	beq.n	8003748 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e03a      	b.n	80037be <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2202      	movs	r2, #2
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68da      	ldr	r2, [r3, #12]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f042 0201 	orr.w	r2, r2, #1
 800375e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a18      	ldr	r2, [pc, #96]	; (80037c8 <HAL_TIM_Base_Start_IT+0x98>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d00e      	beq.n	8003788 <HAL_TIM_Base_Start_IT+0x58>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003772:	d009      	beq.n	8003788 <HAL_TIM_Base_Start_IT+0x58>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a14      	ldr	r2, [pc, #80]	; (80037cc <HAL_TIM_Base_Start_IT+0x9c>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d004      	beq.n	8003788 <HAL_TIM_Base_Start_IT+0x58>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a13      	ldr	r2, [pc, #76]	; (80037d0 <HAL_TIM_Base_Start_IT+0xa0>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d111      	bne.n	80037ac <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 0307 	and.w	r3, r3, #7
 8003792:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2b06      	cmp	r3, #6
 8003798:	d010      	beq.n	80037bc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f042 0201 	orr.w	r2, r2, #1
 80037a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037aa:	e007      	b.n	80037bc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 0201 	orr.w	r2, r2, #1
 80037ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3714      	adds	r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bc80      	pop	{r7}
 80037c6:	4770      	bx	lr
 80037c8:	40012c00 	.word	0x40012c00
 80037cc:	40000400 	.word	0x40000400
 80037d0:	40000800 	.word	0x40000800

080037d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d122      	bne.n	8003830 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d11b      	bne.n	8003830 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f06f 0202 	mvn.w	r2, #2
 8003800:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	f003 0303 	and.w	r3, r3, #3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f9b4 	bl	8003b84 <HAL_TIM_IC_CaptureCallback>
 800381c:	e005      	b.n	800382a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 f9a7 	bl	8003b72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 f9b6 	bl	8003b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	f003 0304 	and.w	r3, r3, #4
 800383a:	2b04      	cmp	r3, #4
 800383c:	d122      	bne.n	8003884 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	2b04      	cmp	r3, #4
 800384a:	d11b      	bne.n	8003884 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f06f 0204 	mvn.w	r2, #4
 8003854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2202      	movs	r2, #2
 800385a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f98a 	bl	8003b84 <HAL_TIM_IC_CaptureCallback>
 8003870:	e005      	b.n	800387e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f97d 	bl	8003b72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 f98c 	bl	8003b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	2b08      	cmp	r3, #8
 8003890:	d122      	bne.n	80038d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f003 0308 	and.w	r3, r3, #8
 800389c:	2b08      	cmp	r3, #8
 800389e:	d11b      	bne.n	80038d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f06f 0208 	mvn.w	r2, #8
 80038a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2204      	movs	r2, #4
 80038ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	f003 0303 	and.w	r3, r3, #3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f960 	bl	8003b84 <HAL_TIM_IC_CaptureCallback>
 80038c4:	e005      	b.n	80038d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f953 	bl	8003b72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 f962 	bl	8003b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	f003 0310 	and.w	r3, r3, #16
 80038e2:	2b10      	cmp	r3, #16
 80038e4:	d122      	bne.n	800392c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	f003 0310 	and.w	r3, r3, #16
 80038f0:	2b10      	cmp	r3, #16
 80038f2:	d11b      	bne.n	800392c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f06f 0210 	mvn.w	r2, #16
 80038fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2208      	movs	r2, #8
 8003902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f936 	bl	8003b84 <HAL_TIM_IC_CaptureCallback>
 8003918:	e005      	b.n	8003926 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f929 	bl	8003b72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 f938 	bl	8003b96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b01      	cmp	r3, #1
 8003938:	d10e      	bne.n	8003958 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	2b01      	cmp	r3, #1
 8003946:	d107      	bne.n	8003958 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f06f 0201 	mvn.w	r2, #1
 8003950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7fd ff8e 	bl	8001874 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003962:	2b80      	cmp	r3, #128	; 0x80
 8003964:	d10e      	bne.n	8003984 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003970:	2b80      	cmp	r3, #128	; 0x80
 8003972:	d107      	bne.n	8003984 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800397c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 fa7b 	bl	8003e7a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800398e:	2b40      	cmp	r3, #64	; 0x40
 8003990:	d10e      	bne.n	80039b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399c:	2b40      	cmp	r3, #64	; 0x40
 800399e:	d107      	bne.n	80039b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f8fc 	bl	8003ba8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	f003 0320 	and.w	r3, r3, #32
 80039ba:	2b20      	cmp	r3, #32
 80039bc:	d10e      	bne.n	80039dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	f003 0320 	and.w	r3, r3, #32
 80039c8:	2b20      	cmp	r3, #32
 80039ca:	d107      	bne.n	80039dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f06f 0220 	mvn.w	r2, #32
 80039d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 fa46 	bl	8003e68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039dc:	bf00      	nop
 80039de:	3708      	adds	r7, #8
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039ee:	2300      	movs	r3, #0
 80039f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d101      	bne.n	8003a00 <HAL_TIM_ConfigClockSource+0x1c>
 80039fc:	2302      	movs	r3, #2
 80039fe:	e0b4      	b.n	8003b6a <HAL_TIM_ConfigClockSource+0x186>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68ba      	ldr	r2, [r7, #8]
 8003a2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a38:	d03e      	beq.n	8003ab8 <HAL_TIM_ConfigClockSource+0xd4>
 8003a3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a3e:	f200 8087 	bhi.w	8003b50 <HAL_TIM_ConfigClockSource+0x16c>
 8003a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a46:	f000 8086 	beq.w	8003b56 <HAL_TIM_ConfigClockSource+0x172>
 8003a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a4e:	d87f      	bhi.n	8003b50 <HAL_TIM_ConfigClockSource+0x16c>
 8003a50:	2b70      	cmp	r3, #112	; 0x70
 8003a52:	d01a      	beq.n	8003a8a <HAL_TIM_ConfigClockSource+0xa6>
 8003a54:	2b70      	cmp	r3, #112	; 0x70
 8003a56:	d87b      	bhi.n	8003b50 <HAL_TIM_ConfigClockSource+0x16c>
 8003a58:	2b60      	cmp	r3, #96	; 0x60
 8003a5a:	d050      	beq.n	8003afe <HAL_TIM_ConfigClockSource+0x11a>
 8003a5c:	2b60      	cmp	r3, #96	; 0x60
 8003a5e:	d877      	bhi.n	8003b50 <HAL_TIM_ConfigClockSource+0x16c>
 8003a60:	2b50      	cmp	r3, #80	; 0x50
 8003a62:	d03c      	beq.n	8003ade <HAL_TIM_ConfigClockSource+0xfa>
 8003a64:	2b50      	cmp	r3, #80	; 0x50
 8003a66:	d873      	bhi.n	8003b50 <HAL_TIM_ConfigClockSource+0x16c>
 8003a68:	2b40      	cmp	r3, #64	; 0x40
 8003a6a:	d058      	beq.n	8003b1e <HAL_TIM_ConfigClockSource+0x13a>
 8003a6c:	2b40      	cmp	r3, #64	; 0x40
 8003a6e:	d86f      	bhi.n	8003b50 <HAL_TIM_ConfigClockSource+0x16c>
 8003a70:	2b30      	cmp	r3, #48	; 0x30
 8003a72:	d064      	beq.n	8003b3e <HAL_TIM_ConfigClockSource+0x15a>
 8003a74:	2b30      	cmp	r3, #48	; 0x30
 8003a76:	d86b      	bhi.n	8003b50 <HAL_TIM_ConfigClockSource+0x16c>
 8003a78:	2b20      	cmp	r3, #32
 8003a7a:	d060      	beq.n	8003b3e <HAL_TIM_ConfigClockSource+0x15a>
 8003a7c:	2b20      	cmp	r3, #32
 8003a7e:	d867      	bhi.n	8003b50 <HAL_TIM_ConfigClockSource+0x16c>
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d05c      	beq.n	8003b3e <HAL_TIM_ConfigClockSource+0x15a>
 8003a84:	2b10      	cmp	r3, #16
 8003a86:	d05a      	beq.n	8003b3e <HAL_TIM_ConfigClockSource+0x15a>
 8003a88:	e062      	b.n	8003b50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a9a:	f000 f968 	bl	8003d6e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003aac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68ba      	ldr	r2, [r7, #8]
 8003ab4:	609a      	str	r2, [r3, #8]
      break;
 8003ab6:	e04f      	b.n	8003b58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ac8:	f000 f951 	bl	8003d6e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689a      	ldr	r2, [r3, #8]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ada:	609a      	str	r2, [r3, #8]
      break;
 8003adc:	e03c      	b.n	8003b58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aea:	461a      	mov	r2, r3
 8003aec:	f000 f8c8 	bl	8003c80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2150      	movs	r1, #80	; 0x50
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 f91f 	bl	8003d3a <TIM_ITRx_SetConfig>
      break;
 8003afc:	e02c      	b.n	8003b58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	f000 f8e6 	bl	8003cdc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2160      	movs	r1, #96	; 0x60
 8003b16:	4618      	mov	r0, r3
 8003b18:	f000 f90f 	bl	8003d3a <TIM_ITRx_SetConfig>
      break;
 8003b1c:	e01c      	b.n	8003b58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	f000 f8a8 	bl	8003c80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2140      	movs	r1, #64	; 0x40
 8003b36:	4618      	mov	r0, r3
 8003b38:	f000 f8ff 	bl	8003d3a <TIM_ITRx_SetConfig>
      break;
 8003b3c:	e00c      	b.n	8003b58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4619      	mov	r1, r3
 8003b48:	4610      	mov	r0, r2
 8003b4a:	f000 f8f6 	bl	8003d3a <TIM_ITRx_SetConfig>
      break;
 8003b4e:	e003      	b.n	8003b58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	73fb      	strb	r3, [r7, #15]
      break;
 8003b54:	e000      	b.n	8003b58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b72:	b480      	push	{r7}
 8003b74:	b083      	sub	sp, #12
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b7a:	bf00      	nop
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bc80      	pop	{r7}
 8003b82:	4770      	bx	lr

08003b84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bc80      	pop	{r7}
 8003b94:	4770      	bx	lr

08003b96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b96:	b480      	push	{r7}
 8003b98:	b083      	sub	sp, #12
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b9e:	bf00      	nop
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bc80      	pop	{r7}
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bc80      	pop	{r7}
 8003bb8:	4770      	bx	lr
	...

08003bbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a29      	ldr	r2, [pc, #164]	; (8003c74 <TIM_Base_SetConfig+0xb8>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d00b      	beq.n	8003bec <TIM_Base_SetConfig+0x30>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bda:	d007      	beq.n	8003bec <TIM_Base_SetConfig+0x30>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a26      	ldr	r2, [pc, #152]	; (8003c78 <TIM_Base_SetConfig+0xbc>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d003      	beq.n	8003bec <TIM_Base_SetConfig+0x30>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a25      	ldr	r2, [pc, #148]	; (8003c7c <TIM_Base_SetConfig+0xc0>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d108      	bne.n	8003bfe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a1c      	ldr	r2, [pc, #112]	; (8003c74 <TIM_Base_SetConfig+0xb8>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d00b      	beq.n	8003c1e <TIM_Base_SetConfig+0x62>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c0c:	d007      	beq.n	8003c1e <TIM_Base_SetConfig+0x62>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a19      	ldr	r2, [pc, #100]	; (8003c78 <TIM_Base_SetConfig+0xbc>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d003      	beq.n	8003c1e <TIM_Base_SetConfig+0x62>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a18      	ldr	r2, [pc, #96]	; (8003c7c <TIM_Base_SetConfig+0xc0>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d108      	bne.n	8003c30 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	689a      	ldr	r2, [r3, #8]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a07      	ldr	r2, [pc, #28]	; (8003c74 <TIM_Base_SetConfig+0xb8>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d103      	bne.n	8003c64 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	691a      	ldr	r2, [r3, #16]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	615a      	str	r2, [r3, #20]
}
 8003c6a:	bf00      	nop
 8003c6c:	3714      	adds	r7, #20
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bc80      	pop	{r7}
 8003c72:	4770      	bx	lr
 8003c74:	40012c00 	.word	0x40012c00
 8003c78:	40000400 	.word	0x40000400
 8003c7c:	40000800 	.word	0x40000800

08003c80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b087      	sub	sp, #28
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6a1b      	ldr	r3, [r3, #32]
 8003c90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	f023 0201 	bic.w	r2, r3, #1
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003caa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	011b      	lsls	r3, r3, #4
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	f023 030a 	bic.w	r3, r3, #10
 8003cbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	621a      	str	r2, [r3, #32]
}
 8003cd2:	bf00      	nop
 8003cd4:	371c      	adds	r7, #28
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bc80      	pop	{r7}
 8003cda:	4770      	bx	lr

08003cdc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b087      	sub	sp, #28
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	f023 0210 	bic.w	r2, r3, #16
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	031b      	lsls	r3, r3, #12
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d18:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	011b      	lsls	r3, r3, #4
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	621a      	str	r2, [r3, #32]
}
 8003d30:	bf00      	nop
 8003d32:	371c      	adds	r7, #28
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bc80      	pop	{r7}
 8003d38:	4770      	bx	lr

08003d3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b085      	sub	sp, #20
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
 8003d42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	f043 0307 	orr.w	r3, r3, #7
 8003d5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	609a      	str	r2, [r3, #8]
}
 8003d64:	bf00      	nop
 8003d66:	3714      	adds	r7, #20
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bc80      	pop	{r7}
 8003d6c:	4770      	bx	lr

08003d6e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b087      	sub	sp, #28
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	60f8      	str	r0, [r7, #12]
 8003d76:	60b9      	str	r1, [r7, #8]
 8003d78:	607a      	str	r2, [r7, #4]
 8003d7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d88:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	021a      	lsls	r2, r3, #8
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	431a      	orrs	r2, r3
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	609a      	str	r2, [r3, #8]
}
 8003da2:	bf00      	nop
 8003da4:	371c      	adds	r7, #28
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bc80      	pop	{r7}
 8003daa:	4770      	bx	lr

08003dac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d101      	bne.n	8003dc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	e046      	b.n	8003e52 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2202      	movs	r2, #2
 8003dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a16      	ldr	r2, [pc, #88]	; (8003e5c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d00e      	beq.n	8003e26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e10:	d009      	beq.n	8003e26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a12      	ldr	r2, [pc, #72]	; (8003e60 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d004      	beq.n	8003e26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a10      	ldr	r2, [pc, #64]	; (8003e64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d10c      	bne.n	8003e40 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	68ba      	ldr	r2, [r7, #8]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3714      	adds	r7, #20
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bc80      	pop	{r7}
 8003e5a:	4770      	bx	lr
 8003e5c:	40012c00 	.word	0x40012c00
 8003e60:	40000400 	.word	0x40000400
 8003e64:	40000800 	.word	0x40000800

08003e68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bc80      	pop	{r7}
 8003e78:	4770      	bx	lr

08003e7a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b083      	sub	sp, #12
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e82:	bf00      	nop
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bc80      	pop	{r7}
 8003e8a:	4770      	bx	lr

08003e8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e042      	b.n	8003f24 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d106      	bne.n	8003eb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7fe f808 	bl	8001ec8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2224      	movs	r2, #36	; 0x24
 8003ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68da      	ldr	r2, [r3, #12]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ece:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 fd71 	bl	80049b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	691a      	ldr	r2, [r3, #16]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ee4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	695a      	ldr	r2, [r3, #20]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ef4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68da      	ldr	r2, [r3, #12]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2220      	movs	r2, #32
 8003f18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3708      	adds	r7, #8
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b08a      	sub	sp, #40	; 0x28
 8003f30:	af02      	add	r7, sp, #8
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	603b      	str	r3, [r7, #0]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2b20      	cmp	r3, #32
 8003f4a:	d16d      	bne.n	8004028 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d002      	beq.n	8003f58 <HAL_UART_Transmit+0x2c>
 8003f52:	88fb      	ldrh	r3, [r7, #6]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d101      	bne.n	8003f5c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e066      	b.n	800402a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2221      	movs	r2, #33	; 0x21
 8003f66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f6a:	f7fe f957 	bl	800221c <HAL_GetTick>
 8003f6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	88fa      	ldrh	r2, [r7, #6]
 8003f74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	88fa      	ldrh	r2, [r7, #6]
 8003f7a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f84:	d108      	bne.n	8003f98 <HAL_UART_Transmit+0x6c>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d104      	bne.n	8003f98 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	61bb      	str	r3, [r7, #24]
 8003f96:	e003      	b.n	8003fa0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003fa0:	e02a      	b.n	8003ff8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	2180      	movs	r1, #128	; 0x80
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f000 faf9 	bl	80045a4 <UART_WaitOnFlagUntilTimeout>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e036      	b.n	800402a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10b      	bne.n	8003fda <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	881b      	ldrh	r3, [r3, #0]
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fd0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	3302      	adds	r3, #2
 8003fd6:	61bb      	str	r3, [r7, #24]
 8003fd8:	e007      	b.n	8003fea <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	781a      	ldrb	r2, [r3, #0]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1cf      	bne.n	8003fa2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	9300      	str	r3, [sp, #0]
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	2200      	movs	r2, #0
 800400a:	2140      	movs	r1, #64	; 0x40
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f000 fac9 	bl	80045a4 <UART_WaitOnFlagUntilTimeout>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d001      	beq.n	800401c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e006      	b.n	800402a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2220      	movs	r2, #32
 8004020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004024:	2300      	movs	r3, #0
 8004026:	e000      	b.n	800402a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004028:	2302      	movs	r3, #2
  }
}
 800402a:	4618      	mov	r0, r3
 800402c:	3720      	adds	r7, #32
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
	...

08004034 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b0ba      	sub	sp, #232	; 0xe8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800405a:	2300      	movs	r3, #0
 800405c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004060:	2300      	movs	r3, #0
 8004062:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800406a:	f003 030f 	and.w	r3, r3, #15
 800406e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004072:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10f      	bne.n	800409a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800407a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800407e:	f003 0320 	and.w	r3, r3, #32
 8004082:	2b00      	cmp	r3, #0
 8004084:	d009      	beq.n	800409a <HAL_UART_IRQHandler+0x66>
 8004086:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800408a:	f003 0320 	and.w	r3, r3, #32
 800408e:	2b00      	cmp	r3, #0
 8004090:	d003      	beq.n	800409a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 fbd1 	bl	800483a <UART_Receive_IT>
      return;
 8004098:	e25b      	b.n	8004552 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800409a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f000 80de 	beq.w	8004260 <HAL_UART_IRQHandler+0x22c>
 80040a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040a8:	f003 0301 	and.w	r3, r3, #1
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d106      	bne.n	80040be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80040b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040b4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f000 80d1 	beq.w	8004260 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80040be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00b      	beq.n	80040e2 <HAL_UART_IRQHandler+0xae>
 80040ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d005      	beq.n	80040e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040da:	f043 0201 	orr.w	r2, r3, #1
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040e6:	f003 0304 	and.w	r3, r3, #4
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00b      	beq.n	8004106 <HAL_UART_IRQHandler+0xd2>
 80040ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d005      	beq.n	8004106 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040fe:	f043 0202 	orr.w	r2, r3, #2
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00b      	beq.n	800412a <HAL_UART_IRQHandler+0xf6>
 8004112:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d005      	beq.n	800412a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004122:	f043 0204 	orr.w	r2, r3, #4
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800412a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800412e:	f003 0308 	and.w	r3, r3, #8
 8004132:	2b00      	cmp	r3, #0
 8004134:	d011      	beq.n	800415a <HAL_UART_IRQHandler+0x126>
 8004136:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800413a:	f003 0320 	and.w	r3, r3, #32
 800413e:	2b00      	cmp	r3, #0
 8004140:	d105      	bne.n	800414e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004142:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b00      	cmp	r3, #0
 800414c:	d005      	beq.n	800415a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004152:	f043 0208 	orr.w	r2, r3, #8
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415e:	2b00      	cmp	r3, #0
 8004160:	f000 81f2 	beq.w	8004548 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004168:	f003 0320 	and.w	r3, r3, #32
 800416c:	2b00      	cmp	r3, #0
 800416e:	d008      	beq.n	8004182 <HAL_UART_IRQHandler+0x14e>
 8004170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004174:	f003 0320 	and.w	r3, r3, #32
 8004178:	2b00      	cmp	r3, #0
 800417a:	d002      	beq.n	8004182 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 fb5c 	bl	800483a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800418c:	2b00      	cmp	r3, #0
 800418e:	bf14      	ite	ne
 8004190:	2301      	movne	r3, #1
 8004192:	2300      	moveq	r3, #0
 8004194:	b2db      	uxtb	r3, r3
 8004196:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800419e:	f003 0308 	and.w	r3, r3, #8
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d103      	bne.n	80041ae <HAL_UART_IRQHandler+0x17a>
 80041a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d04f      	beq.n	800424e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 fa66 	bl	8004680 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d041      	beq.n	8004246 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	3314      	adds	r3, #20
 80041c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80041d0:	e853 3f00 	ldrex	r3, [r3]
 80041d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80041d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80041dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	3314      	adds	r3, #20
 80041ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80041ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80041f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80041fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80041fe:	e841 2300 	strex	r3, r2, [r1]
 8004202:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004206:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1d9      	bne.n	80041c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004212:	2b00      	cmp	r3, #0
 8004214:	d013      	beq.n	800423e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800421a:	4a7e      	ldr	r2, [pc, #504]	; (8004414 <HAL_UART_IRQHandler+0x3e0>)
 800421c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004222:	4618      	mov	r0, r3
 8004224:	f7fe f970 	bl	8002508 <HAL_DMA_Abort_IT>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d016      	beq.n	800425c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004238:	4610      	mov	r0, r2
 800423a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800423c:	e00e      	b.n	800425c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 f99c 	bl	800457c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004244:	e00a      	b.n	800425c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f998 	bl	800457c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800424c:	e006      	b.n	800425c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 f994 	bl	800457c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800425a:	e175      	b.n	8004548 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800425c:	bf00      	nop
    return;
 800425e:	e173      	b.n	8004548 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004264:	2b01      	cmp	r3, #1
 8004266:	f040 814f 	bne.w	8004508 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800426a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800426e:	f003 0310 	and.w	r3, r3, #16
 8004272:	2b00      	cmp	r3, #0
 8004274:	f000 8148 	beq.w	8004508 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800427c:	f003 0310 	and.w	r3, r3, #16
 8004280:	2b00      	cmp	r3, #0
 8004282:	f000 8141 	beq.w	8004508 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004286:	2300      	movs	r3, #0
 8004288:	60bb      	str	r3, [r7, #8]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	60bb      	str	r3, [r7, #8]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	60bb      	str	r3, [r7, #8]
 800429a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f000 80b6 	beq.w	8004418 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80042b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f000 8145 	beq.w	800454c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80042ca:	429a      	cmp	r2, r3
 80042cc:	f080 813e 	bcs.w	800454c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80042d6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	2b20      	cmp	r3, #32
 80042e0:	f000 8088 	beq.w	80043f4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	330c      	adds	r3, #12
 80042ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042f2:	e853 3f00 	ldrex	r3, [r3]
 80042f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80042fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004302:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	330c      	adds	r3, #12
 800430c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004310:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004314:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004318:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800431c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004320:	e841 2300 	strex	r3, r2, [r1]
 8004324:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004328:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1d9      	bne.n	80042e4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	3314      	adds	r3, #20
 8004336:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004338:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800433a:	e853 3f00 	ldrex	r3, [r3]
 800433e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004340:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004342:	f023 0301 	bic.w	r3, r3, #1
 8004346:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	3314      	adds	r3, #20
 8004350:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004354:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004358:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800435c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004360:	e841 2300 	strex	r3, r2, [r1]
 8004364:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004366:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1e1      	bne.n	8004330 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	3314      	adds	r3, #20
 8004372:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004374:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004376:	e853 3f00 	ldrex	r3, [r3]
 800437a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800437c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800437e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004382:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	3314      	adds	r3, #20
 800438c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004390:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004392:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004394:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004396:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004398:	e841 2300 	strex	r3, r2, [r1]
 800439c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800439e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1e3      	bne.n	800436c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2220      	movs	r2, #32
 80043a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	330c      	adds	r3, #12
 80043b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043bc:	e853 3f00 	ldrex	r3, [r3]
 80043c0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80043c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043c4:	f023 0310 	bic.w	r3, r3, #16
 80043c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	330c      	adds	r3, #12
 80043d2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80043d6:	65ba      	str	r2, [r7, #88]	; 0x58
 80043d8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043da:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80043dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80043de:	e841 2300 	strex	r3, r2, [r1]
 80043e2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80043e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1e3      	bne.n	80043b2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7fe f84f 	bl	8002492 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2202      	movs	r2, #2
 80043f8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004402:	b29b      	uxth	r3, r3
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	b29b      	uxth	r3, r3
 8004408:	4619      	mov	r1, r3
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f8bf 	bl	800458e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004410:	e09c      	b.n	800454c <HAL_UART_IRQHandler+0x518>
 8004412:	bf00      	nop
 8004414:	08004745 	.word	0x08004745
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004420:	b29b      	uxth	r3, r3
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800442c:	b29b      	uxth	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	f000 808e 	beq.w	8004550 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004434:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 8089 	beq.w	8004550 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	330c      	adds	r3, #12
 8004444:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004448:	e853 3f00 	ldrex	r3, [r3]
 800444c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800444e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004450:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004454:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	330c      	adds	r3, #12
 800445e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004462:	647a      	str	r2, [r7, #68]	; 0x44
 8004464:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004466:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004468:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800446a:	e841 2300 	strex	r3, r2, [r1]
 800446e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1e3      	bne.n	800443e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	3314      	adds	r3, #20
 800447c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004480:	e853 3f00 	ldrex	r3, [r3]
 8004484:	623b      	str	r3, [r7, #32]
   return(result);
 8004486:	6a3b      	ldr	r3, [r7, #32]
 8004488:	f023 0301 	bic.w	r3, r3, #1
 800448c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	3314      	adds	r3, #20
 8004496:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800449a:	633a      	str	r2, [r7, #48]	; 0x30
 800449c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044a2:	e841 2300 	strex	r3, r2, [r1]
 80044a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80044a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1e3      	bne.n	8004476 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2220      	movs	r2, #32
 80044b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	330c      	adds	r3, #12
 80044c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	e853 3f00 	ldrex	r3, [r3]
 80044ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f023 0310 	bic.w	r3, r3, #16
 80044d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	330c      	adds	r3, #12
 80044dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80044e0:	61fa      	str	r2, [r7, #28]
 80044e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e4:	69b9      	ldr	r1, [r7, #24]
 80044e6:	69fa      	ldr	r2, [r7, #28]
 80044e8:	e841 2300 	strex	r3, r2, [r1]
 80044ec:	617b      	str	r3, [r7, #20]
   return(result);
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d1e3      	bne.n	80044bc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2202      	movs	r2, #2
 80044f8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80044fe:	4619      	mov	r1, r3
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 f844 	bl	800458e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004506:	e023      	b.n	8004550 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800450c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004510:	2b00      	cmp	r3, #0
 8004512:	d009      	beq.n	8004528 <HAL_UART_IRQHandler+0x4f4>
 8004514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800451c:	2b00      	cmp	r3, #0
 800451e:	d003      	beq.n	8004528 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 f923 	bl	800476c <UART_Transmit_IT>
    return;
 8004526:	e014      	b.n	8004552 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800452c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00e      	beq.n	8004552 <HAL_UART_IRQHandler+0x51e>
 8004534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800453c:	2b00      	cmp	r3, #0
 800453e:	d008      	beq.n	8004552 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 f962 	bl	800480a <UART_EndTransmit_IT>
    return;
 8004546:	e004      	b.n	8004552 <HAL_UART_IRQHandler+0x51e>
    return;
 8004548:	bf00      	nop
 800454a:	e002      	b.n	8004552 <HAL_UART_IRQHandler+0x51e>
      return;
 800454c:	bf00      	nop
 800454e:	e000      	b.n	8004552 <HAL_UART_IRQHandler+0x51e>
      return;
 8004550:	bf00      	nop
  }
}
 8004552:	37e8      	adds	r7, #232	; 0xe8
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	bc80      	pop	{r7}
 8004568:	4770      	bx	lr

0800456a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800456a:	b480      	push	{r7}
 800456c:	b083      	sub	sp, #12
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004572:	bf00      	nop
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	bc80      	pop	{r7}
 800457a:	4770      	bx	lr

0800457c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	bc80      	pop	{r7}
 800458c:	4770      	bx	lr

0800458e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800458e:	b480      	push	{r7}
 8004590:	b083      	sub	sp, #12
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
 8004596:	460b      	mov	r3, r1
 8004598:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800459a:	bf00      	nop
 800459c:	370c      	adds	r7, #12
 800459e:	46bd      	mov	sp, r7
 80045a0:	bc80      	pop	{r7}
 80045a2:	4770      	bx	lr

080045a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b090      	sub	sp, #64	; 0x40
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	603b      	str	r3, [r7, #0]
 80045b0:	4613      	mov	r3, r2
 80045b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045b4:	e050      	b.n	8004658 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045bc:	d04c      	beq.n	8004658 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80045be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d007      	beq.n	80045d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80045c4:	f7fd fe2a 	bl	800221c <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d241      	bcs.n	8004658 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	330c      	adds	r3, #12
 80045da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045de:	e853 3f00 	ldrex	r3, [r3]
 80045e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80045ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	330c      	adds	r3, #12
 80045f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80045f4:	637a      	str	r2, [r7, #52]	; 0x34
 80045f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045fc:	e841 2300 	strex	r3, r2, [r1]
 8004600:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1e5      	bne.n	80045d4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	3314      	adds	r3, #20
 800460e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	e853 3f00 	ldrex	r3, [r3]
 8004616:	613b      	str	r3, [r7, #16]
   return(result);
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	f023 0301 	bic.w	r3, r3, #1
 800461e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	3314      	adds	r3, #20
 8004626:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004628:	623a      	str	r2, [r7, #32]
 800462a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462c:	69f9      	ldr	r1, [r7, #28]
 800462e:	6a3a      	ldr	r2, [r7, #32]
 8004630:	e841 2300 	strex	r3, r2, [r1]
 8004634:	61bb      	str	r3, [r7, #24]
   return(result);
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1e5      	bne.n	8004608 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2220      	movs	r2, #32
 8004640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2220      	movs	r2, #32
 8004648:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e00f      	b.n	8004678 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	4013      	ands	r3, r2
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	429a      	cmp	r2, r3
 8004666:	bf0c      	ite	eq
 8004668:	2301      	moveq	r3, #1
 800466a:	2300      	movne	r3, #0
 800466c:	b2db      	uxtb	r3, r3
 800466e:	461a      	mov	r2, r3
 8004670:	79fb      	ldrb	r3, [r7, #7]
 8004672:	429a      	cmp	r2, r3
 8004674:	d09f      	beq.n	80045b6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3740      	adds	r7, #64	; 0x40
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004680:	b480      	push	{r7}
 8004682:	b095      	sub	sp, #84	; 0x54
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	330c      	adds	r3, #12
 800468e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004692:	e853 3f00 	ldrex	r3, [r3]
 8004696:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800469e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	330c      	adds	r3, #12
 80046a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046a8:	643a      	str	r2, [r7, #64]	; 0x40
 80046aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80046ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046b0:	e841 2300 	strex	r3, r2, [r1]
 80046b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1e5      	bne.n	8004688 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	3314      	adds	r3, #20
 80046c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c4:	6a3b      	ldr	r3, [r7, #32]
 80046c6:	e853 3f00 	ldrex	r3, [r3]
 80046ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	f023 0301 	bic.w	r3, r3, #1
 80046d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	3314      	adds	r3, #20
 80046da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046e4:	e841 2300 	strex	r3, r2, [r1]
 80046e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1e5      	bne.n	80046bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d119      	bne.n	800472c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	330c      	adds	r3, #12
 80046fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	e853 3f00 	ldrex	r3, [r3]
 8004706:	60bb      	str	r3, [r7, #8]
   return(result);
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	f023 0310 	bic.w	r3, r3, #16
 800470e:	647b      	str	r3, [r7, #68]	; 0x44
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	330c      	adds	r3, #12
 8004716:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004718:	61ba      	str	r2, [r7, #24]
 800471a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471c:	6979      	ldr	r1, [r7, #20]
 800471e:	69ba      	ldr	r2, [r7, #24]
 8004720:	e841 2300 	strex	r3, r2, [r1]
 8004724:	613b      	str	r3, [r7, #16]
   return(result);
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1e5      	bne.n	80046f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2220      	movs	r2, #32
 8004730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	631a      	str	r2, [r3, #48]	; 0x30
}
 800473a:	bf00      	nop
 800473c:	3754      	adds	r7, #84	; 0x54
 800473e:	46bd      	mov	sp, r7
 8004740:	bc80      	pop	{r7}
 8004742:	4770      	bx	lr

08004744 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004750:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f7ff ff0c 	bl	800457c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004764:	bf00      	nop
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2b21      	cmp	r3, #33	; 0x21
 800477e:	d13e      	bne.n	80047fe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004788:	d114      	bne.n	80047b4 <UART_Transmit_IT+0x48>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d110      	bne.n	80047b4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	881b      	ldrh	r3, [r3, #0]
 800479c:	461a      	mov	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047a6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a1b      	ldr	r3, [r3, #32]
 80047ac:	1c9a      	adds	r2, r3, #2
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	621a      	str	r2, [r3, #32]
 80047b2:	e008      	b.n	80047c6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	1c59      	adds	r1, r3, #1
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	6211      	str	r1, [r2, #32]
 80047be:	781a      	ldrb	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	3b01      	subs	r3, #1
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	4619      	mov	r1, r3
 80047d4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10f      	bne.n	80047fa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68da      	ldr	r2, [r3, #12]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047e8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68da      	ldr	r2, [r3, #12]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047f8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80047fa:	2300      	movs	r3, #0
 80047fc:	e000      	b.n	8004800 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80047fe:	2302      	movs	r3, #2
  }
}
 8004800:	4618      	mov	r0, r3
 8004802:	3714      	adds	r7, #20
 8004804:	46bd      	mov	sp, r7
 8004806:	bc80      	pop	{r7}
 8004808:	4770      	bx	lr

0800480a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800480a:	b580      	push	{r7, lr}
 800480c:	b082      	sub	sp, #8
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68da      	ldr	r2, [r3, #12]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004820:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2220      	movs	r2, #32
 8004826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f7ff fe94 	bl	8004558 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3708      	adds	r7, #8
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b08c      	sub	sp, #48	; 0x30
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b22      	cmp	r3, #34	; 0x22
 800484c:	f040 80ae 	bne.w	80049ac <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004858:	d117      	bne.n	800488a <UART_Receive_IT+0x50>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d113      	bne.n	800488a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004862:	2300      	movs	r3, #0
 8004864:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	b29b      	uxth	r3, r3
 8004874:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004878:	b29a      	uxth	r2, r3
 800487a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004882:	1c9a      	adds	r2, r3, #2
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	629a      	str	r2, [r3, #40]	; 0x28
 8004888:	e026      	b.n	80048d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004890:	2300      	movs	r3, #0
 8004892:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800489c:	d007      	beq.n	80048ae <UART_Receive_IT+0x74>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10a      	bne.n	80048bc <UART_Receive_IT+0x82>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d106      	bne.n	80048bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	b2da      	uxtb	r2, r3
 80048b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b8:	701a      	strb	r2, [r3, #0]
 80048ba:	e008      	b.n	80048ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048c8:	b2da      	uxtb	r2, r3
 80048ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d2:	1c5a      	adds	r2, r3, #1
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048dc:	b29b      	uxth	r3, r3
 80048de:	3b01      	subs	r3, #1
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	4619      	mov	r1, r3
 80048e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d15d      	bne.n	80049a8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68da      	ldr	r2, [r3, #12]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f022 0220 	bic.w	r2, r2, #32
 80048fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68da      	ldr	r2, [r3, #12]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800490a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	695a      	ldr	r2, [r3, #20]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f022 0201 	bic.w	r2, r2, #1
 800491a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2220      	movs	r2, #32
 8004920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492e:	2b01      	cmp	r3, #1
 8004930:	d135      	bne.n	800499e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	330c      	adds	r3, #12
 800493e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	e853 3f00 	ldrex	r3, [r3]
 8004946:	613b      	str	r3, [r7, #16]
   return(result);
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	f023 0310 	bic.w	r3, r3, #16
 800494e:	627b      	str	r3, [r7, #36]	; 0x24
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	330c      	adds	r3, #12
 8004956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004958:	623a      	str	r2, [r7, #32]
 800495a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495c:	69f9      	ldr	r1, [r7, #28]
 800495e:	6a3a      	ldr	r2, [r7, #32]
 8004960:	e841 2300 	strex	r3, r2, [r1]
 8004964:	61bb      	str	r3, [r7, #24]
   return(result);
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d1e5      	bne.n	8004938 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0310 	and.w	r3, r3, #16
 8004976:	2b10      	cmp	r3, #16
 8004978:	d10a      	bne.n	8004990 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800497a:	2300      	movs	r3, #0
 800497c:	60fb      	str	r3, [r7, #12]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	60fb      	str	r3, [r7, #12]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	60fb      	str	r3, [r7, #12]
 800498e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004994:	4619      	mov	r1, r3
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7ff fdf9 	bl	800458e <HAL_UARTEx_RxEventCallback>
 800499c:	e002      	b.n	80049a4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f7ff fde3 	bl	800456a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80049a4:	2300      	movs	r3, #0
 80049a6:	e002      	b.n	80049ae <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80049a8:	2300      	movs	r3, #0
 80049aa:	e000      	b.n	80049ae <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80049ac:	2302      	movs	r3, #2
  }
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3730      	adds	r7, #48	; 0x30
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
	...

080049b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	68da      	ldr	r2, [r3, #12]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	689a      	ldr	r2, [r3, #8]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	431a      	orrs	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80049f2:	f023 030c 	bic.w	r3, r3, #12
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	6812      	ldr	r2, [r2, #0]
 80049fa:	68b9      	ldr	r1, [r7, #8]
 80049fc:	430b      	orrs	r3, r1
 80049fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	699a      	ldr	r2, [r3, #24]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	430a      	orrs	r2, r1
 8004a14:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a2c      	ldr	r2, [pc, #176]	; (8004acc <UART_SetConfig+0x114>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d103      	bne.n	8004a28 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004a20:	f7fe fb96 	bl	8003150 <HAL_RCC_GetPCLK2Freq>
 8004a24:	60f8      	str	r0, [r7, #12]
 8004a26:	e002      	b.n	8004a2e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004a28:	f7fe fb7e 	bl	8003128 <HAL_RCC_GetPCLK1Freq>
 8004a2c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	4613      	mov	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	4413      	add	r3, r2
 8004a36:	009a      	lsls	r2, r3, #2
 8004a38:	441a      	add	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a44:	4a22      	ldr	r2, [pc, #136]	; (8004ad0 <UART_SetConfig+0x118>)
 8004a46:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4a:	095b      	lsrs	r3, r3, #5
 8004a4c:	0119      	lsls	r1, r3, #4
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	4613      	mov	r3, r2
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	4413      	add	r3, r2
 8004a56:	009a      	lsls	r2, r3, #2
 8004a58:	441a      	add	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a64:	4b1a      	ldr	r3, [pc, #104]	; (8004ad0 <UART_SetConfig+0x118>)
 8004a66:	fba3 0302 	umull	r0, r3, r3, r2
 8004a6a:	095b      	lsrs	r3, r3, #5
 8004a6c:	2064      	movs	r0, #100	; 0x64
 8004a6e:	fb00 f303 	mul.w	r3, r0, r3
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	011b      	lsls	r3, r3, #4
 8004a76:	3332      	adds	r3, #50	; 0x32
 8004a78:	4a15      	ldr	r2, [pc, #84]	; (8004ad0 <UART_SetConfig+0x118>)
 8004a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a7e:	095b      	lsrs	r3, r3, #5
 8004a80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a84:	4419      	add	r1, r3
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	4613      	mov	r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	4413      	add	r3, r2
 8004a8e:	009a      	lsls	r2, r3, #2
 8004a90:	441a      	add	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a9c:	4b0c      	ldr	r3, [pc, #48]	; (8004ad0 <UART_SetConfig+0x118>)
 8004a9e:	fba3 0302 	umull	r0, r3, r3, r2
 8004aa2:	095b      	lsrs	r3, r3, #5
 8004aa4:	2064      	movs	r0, #100	; 0x64
 8004aa6:	fb00 f303 	mul.w	r3, r0, r3
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	011b      	lsls	r3, r3, #4
 8004aae:	3332      	adds	r3, #50	; 0x32
 8004ab0:	4a07      	ldr	r2, [pc, #28]	; (8004ad0 <UART_SetConfig+0x118>)
 8004ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab6:	095b      	lsrs	r3, r3, #5
 8004ab8:	f003 020f 	and.w	r2, r3, #15
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	440a      	add	r2, r1
 8004ac2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004ac4:	bf00      	nop
 8004ac6:	3710      	adds	r7, #16
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	40013800 	.word	0x40013800
 8004ad0:	51eb851f 	.word	0x51eb851f

08004ad4 <memset>:
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	4402      	add	r2, r0
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d100      	bne.n	8004ade <memset+0xa>
 8004adc:	4770      	bx	lr
 8004ade:	f803 1b01 	strb.w	r1, [r3], #1
 8004ae2:	e7f9      	b.n	8004ad8 <memset+0x4>

08004ae4 <__libc_init_array>:
 8004ae4:	b570      	push	{r4, r5, r6, lr}
 8004ae6:	2600      	movs	r6, #0
 8004ae8:	4d0c      	ldr	r5, [pc, #48]	; (8004b1c <__libc_init_array+0x38>)
 8004aea:	4c0d      	ldr	r4, [pc, #52]	; (8004b20 <__libc_init_array+0x3c>)
 8004aec:	1b64      	subs	r4, r4, r5
 8004aee:	10a4      	asrs	r4, r4, #2
 8004af0:	42a6      	cmp	r6, r4
 8004af2:	d109      	bne.n	8004b08 <__libc_init_array+0x24>
 8004af4:	f000 f81a 	bl	8004b2c <_init>
 8004af8:	2600      	movs	r6, #0
 8004afa:	4d0a      	ldr	r5, [pc, #40]	; (8004b24 <__libc_init_array+0x40>)
 8004afc:	4c0a      	ldr	r4, [pc, #40]	; (8004b28 <__libc_init_array+0x44>)
 8004afe:	1b64      	subs	r4, r4, r5
 8004b00:	10a4      	asrs	r4, r4, #2
 8004b02:	42a6      	cmp	r6, r4
 8004b04:	d105      	bne.n	8004b12 <__libc_init_array+0x2e>
 8004b06:	bd70      	pop	{r4, r5, r6, pc}
 8004b08:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b0c:	4798      	blx	r3
 8004b0e:	3601      	adds	r6, #1
 8004b10:	e7ee      	b.n	8004af0 <__libc_init_array+0xc>
 8004b12:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b16:	4798      	blx	r3
 8004b18:	3601      	adds	r6, #1
 8004b1a:	e7f2      	b.n	8004b02 <__libc_init_array+0x1e>
 8004b1c:	080058e8 	.word	0x080058e8
 8004b20:	080058e8 	.word	0x080058e8
 8004b24:	080058e8 	.word	0x080058e8
 8004b28:	080058ec 	.word	0x080058ec

08004b2c <_init>:
 8004b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b2e:	bf00      	nop
 8004b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b32:	bc08      	pop	{r3}
 8004b34:	469e      	mov	lr, r3
 8004b36:	4770      	bx	lr

08004b38 <_fini>:
 8004b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b3a:	bf00      	nop
 8004b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b3e:	bc08      	pop	{r3}
 8004b40:	469e      	mov	lr, r3
 8004b42:	4770      	bx	lr
