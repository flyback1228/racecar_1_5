
f103_slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040a8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015b4  080041b4  080041b4  000141b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005768  08005768  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005768  08005768  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005768  08005768  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005768  08005768  00015768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800576c  0800576c  0001576c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005770  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000740  20000074  080057e4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007b4  080057e4  000207b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e902  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002267  00000000  00000000  0002e9e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f08  00000000  00000000  00030c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bc5  00000000  00000000  00031b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000185f8  00000000  00000000  0003271d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fbd4  00000000  00000000  0004ad15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ce72  00000000  00000000  0005a8e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004460  00000000  00000000  000e775c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000ebbbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	0800419c 	.word	0x0800419c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	0800419c 	.word	0x0800419c

0800014c <DWT_Init>:
#define INC_UTILITY_H_

#include "main.h"

static inline void DWT_Init(void)
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; //
 8000150:	4b07      	ldr	r3, [pc, #28]	; (8000170 <DWT_Init+0x24>)
 8000152:	68db      	ldr	r3, [r3, #12]
 8000154:	4a06      	ldr	r2, [pc, #24]	; (8000170 <DWT_Init+0x24>)
 8000156:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800015a:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   //
 800015c:	4b05      	ldr	r3, [pc, #20]	; (8000174 <DWT_Init+0x28>)
 800015e:	681b      	ldr	r3, [r3, #0]
 8000160:	4a04      	ldr	r2, [pc, #16]	; (8000174 <DWT_Init+0x28>)
 8000162:	f043 0301 	orr.w	r3, r3, #1
 8000166:	6013      	str	r3, [r2, #0]
}
 8000168:	bf00      	nop
 800016a:	46bd      	mov	sp, r7
 800016c:	bc80      	pop	{r7}
 800016e:	4770      	bx	lr
 8000170:	e000edf0 	.word	0xe000edf0
 8000174:	e0001000 	.word	0xe0001000

08000178 <micros>:
	uint32_t us_count_tic =  us * (SystemCoreClock / 1000000U);
	DWT->CYCCNT = 0U;
	while(DWT->CYCCNT < us_count_tic);
}

static inline uint32_t micros(void){
 8000178:	b480      	push	{r7}
 800017a:	af00      	add	r7, sp, #0
	return  DWT->CYCCNT / (SystemCoreClock / 1000000U);
 800017c:	4b06      	ldr	r3, [pc, #24]	; (8000198 <micros+0x20>)
 800017e:	685a      	ldr	r2, [r3, #4]
 8000180:	4b06      	ldr	r3, [pc, #24]	; (800019c <micros+0x24>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4906      	ldr	r1, [pc, #24]	; (80001a0 <micros+0x28>)
 8000186:	fba1 1303 	umull	r1, r3, r1, r3
 800018a:	0c9b      	lsrs	r3, r3, #18
 800018c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000190:	4618      	mov	r0, r3
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr
 8000198:	e0001000 	.word	0xe0001000
 800019c:	20000018 	.word	0x20000018
 80001a0:	431bde83 	.word	0x431bde83

080001a4 <millis>:

static inline uint32_t millis(void){
 80001a4:	b480      	push	{r7}
 80001a6:	af00      	add	r7, sp, #0
	return  DWT->CYCCNT / (SystemCoreClock / 1000U);
 80001a8:	4b06      	ldr	r3, [pc, #24]	; (80001c4 <millis+0x20>)
 80001aa:	685a      	ldr	r2, [r3, #4]
 80001ac:	4b06      	ldr	r3, [pc, #24]	; (80001c8 <millis+0x24>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	4906      	ldr	r1, [pc, #24]	; (80001cc <millis+0x28>)
 80001b2:	fba1 1303 	umull	r1, r3, r1, r3
 80001b6:	099b      	lsrs	r3, r3, #6
 80001b8:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80001bc:	4618      	mov	r0, r3
 80001be:	46bd      	mov	sp, r7
 80001c0:	bc80      	pop	{r7}
 80001c2:	4770      	bx	lr
 80001c4:	e0001000 	.word	0xe0001000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	10624dd3 	.word	0x10624dd3

080001d0 <HAL_GPIO_EXTI_Callback>:
}
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80001d0:	b5b0      	push	{r4, r5, r7, lr}
 80001d2:	b084      	sub	sp, #16
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	4603      	mov	r3, r0
 80001d8:	80fb      	strh	r3, [r7, #6]

	uint8_t index;
	switch(GPIO_Pin){
 80001da:	88fb      	ldrh	r3, [r7, #6]
 80001dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80001e0:	f000 80b8 	beq.w	8000354 <HAL_GPIO_EXTI_Callback+0x184>
 80001e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80001e8:	f300 80b7 	bgt.w	800035a <HAL_GPIO_EXTI_Callback+0x18a>
 80001ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80001f0:	f000 80ad 	beq.w	800034e <HAL_GPIO_EXTI_Callback+0x17e>
 80001f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80001f8:	f300 80af 	bgt.w	800035a <HAL_GPIO_EXTI_Callback+0x18a>
 80001fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000200:	f000 80a2 	beq.w	8000348 <HAL_GPIO_EXTI_Callback+0x178>
 8000204:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000208:	f300 80a7 	bgt.w	800035a <HAL_GPIO_EXTI_Callback+0x18a>
 800020c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000210:	f000 8097 	beq.w	8000342 <HAL_GPIO_EXTI_Callback+0x172>
 8000214:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000218:	f300 809f 	bgt.w	800035a <HAL_GPIO_EXTI_Callback+0x18a>
 800021c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000220:	f000 808c 	beq.w	800033c <HAL_GPIO_EXTI_Callback+0x16c>
 8000224:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000228:	f300 8097 	bgt.w	800035a <HAL_GPIO_EXTI_Callback+0x18a>
 800022c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000230:	f000 8081 	beq.w	8000336 <HAL_GPIO_EXTI_Callback+0x166>
 8000234:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000238:	f300 808f 	bgt.w	800035a <HAL_GPIO_EXTI_Callback+0x18a>
 800023c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000240:	d076      	beq.n	8000330 <HAL_GPIO_EXTI_Callback+0x160>
 8000242:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000246:	f300 8088 	bgt.w	800035a <HAL_GPIO_EXTI_Callback+0x18a>
 800024a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800024e:	d06c      	beq.n	800032a <HAL_GPIO_EXTI_Callback+0x15a>
 8000250:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000254:	f300 8081 	bgt.w	800035a <HAL_GPIO_EXTI_Callback+0x18a>
 8000258:	2b80      	cmp	r3, #128	; 0x80
 800025a:	d063      	beq.n	8000324 <HAL_GPIO_EXTI_Callback+0x154>
 800025c:	2b80      	cmp	r3, #128	; 0x80
 800025e:	dc7c      	bgt.n	800035a <HAL_GPIO_EXTI_Callback+0x18a>
 8000260:	2b20      	cmp	r3, #32
 8000262:	dc47      	bgt.n	80002f4 <HAL_GPIO_EXTI_Callback+0x124>
 8000264:	2b00      	cmp	r3, #0
 8000266:	dd78      	ble.n	800035a <HAL_GPIO_EXTI_Callback+0x18a>
 8000268:	3b01      	subs	r3, #1
 800026a:	2b1f      	cmp	r3, #31
 800026c:	d875      	bhi.n	800035a <HAL_GPIO_EXTI_Callback+0x18a>
 800026e:	a201      	add	r2, pc, #4	; (adr r2, 8000274 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000274:	080002fb 	.word	0x080002fb
 8000278:	08000301 	.word	0x08000301
 800027c:	0800035b 	.word	0x0800035b
 8000280:	08000307 	.word	0x08000307
 8000284:	0800035b 	.word	0x0800035b
 8000288:	0800035b 	.word	0x0800035b
 800028c:	0800035b 	.word	0x0800035b
 8000290:	0800030d 	.word	0x0800030d
 8000294:	0800035b 	.word	0x0800035b
 8000298:	0800035b 	.word	0x0800035b
 800029c:	0800035b 	.word	0x0800035b
 80002a0:	0800035b 	.word	0x0800035b
 80002a4:	0800035b 	.word	0x0800035b
 80002a8:	0800035b 	.word	0x0800035b
 80002ac:	0800035b 	.word	0x0800035b
 80002b0:	08000313 	.word	0x08000313
 80002b4:	0800035b 	.word	0x0800035b
 80002b8:	0800035b 	.word	0x0800035b
 80002bc:	0800035b 	.word	0x0800035b
 80002c0:	0800035b 	.word	0x0800035b
 80002c4:	0800035b 	.word	0x0800035b
 80002c8:	0800035b 	.word	0x0800035b
 80002cc:	0800035b 	.word	0x0800035b
 80002d0:	0800035b 	.word	0x0800035b
 80002d4:	0800035b 	.word	0x0800035b
 80002d8:	0800035b 	.word	0x0800035b
 80002dc:	0800035b 	.word	0x0800035b
 80002e0:	0800035b 	.word	0x0800035b
 80002e4:	0800035b 	.word	0x0800035b
 80002e8:	0800035b 	.word	0x0800035b
 80002ec:	0800035b 	.word	0x0800035b
 80002f0:	08000319 	.word	0x08000319
 80002f4:	2b40      	cmp	r3, #64	; 0x40
 80002f6:	d012      	beq.n	800031e <HAL_GPIO_EXTI_Callback+0x14e>
 80002f8:	e02f      	b.n	800035a <HAL_GPIO_EXTI_Callback+0x18a>
	case S00_Pin:
		index = 0;
 80002fa:	2300      	movs	r3, #0
 80002fc:	73fb      	strb	r3, [r7, #15]
		break;
 80002fe:	e02c      	b.n	800035a <HAL_GPIO_EXTI_Callback+0x18a>
	case S01_Pin:
		index=1;
 8000300:	2301      	movs	r3, #1
 8000302:	73fb      	strb	r3, [r7, #15]
		break;
 8000304:	e029      	b.n	800035a <HAL_GPIO_EXTI_Callback+0x18a>
	case S02_Pin:
		index = 2;
 8000306:	2302      	movs	r3, #2
 8000308:	73fb      	strb	r3, [r7, #15]
		break;
 800030a:	e026      	b.n	800035a <HAL_GPIO_EXTI_Callback+0x18a>
	case S03_Pin:
		index = 3;
 800030c:	2303      	movs	r3, #3
 800030e:	73fb      	strb	r3, [r7, #15]
		break;
 8000310:	e023      	b.n	800035a <HAL_GPIO_EXTI_Callback+0x18a>
	case S04_Pin:
		index = 4;
 8000312:	2304      	movs	r3, #4
 8000314:	73fb      	strb	r3, [r7, #15]
		break;
 8000316:	e020      	b.n	800035a <HAL_GPIO_EXTI_Callback+0x18a>
	case S05_Pin:
		index = 5;
 8000318:	2305      	movs	r3, #5
 800031a:	73fb      	strb	r3, [r7, #15]
		break;
 800031c:	e01d      	b.n	800035a <HAL_GPIO_EXTI_Callback+0x18a>
	case S06_Pin:
		index = 6;
 800031e:	2306      	movs	r3, #6
 8000320:	73fb      	strb	r3, [r7, #15]
		break;
 8000322:	e01a      	b.n	800035a <HAL_GPIO_EXTI_Callback+0x18a>
	case S07_Pin:
		index = 7;
 8000324:	2307      	movs	r3, #7
 8000326:	73fb      	strb	r3, [r7, #15]
		break;
 8000328:	e017      	b.n	800035a <HAL_GPIO_EXTI_Callback+0x18a>
	case S08_Pin:
		index = 8;
 800032a:	2308      	movs	r3, #8
 800032c:	73fb      	strb	r3, [r7, #15]
		break;
 800032e:	e014      	b.n	800035a <HAL_GPIO_EXTI_Callback+0x18a>
	case S09_Pin:
		index = 9;
 8000330:	2309      	movs	r3, #9
 8000332:	73fb      	strb	r3, [r7, #15]
		break;
 8000334:	e011      	b.n	800035a <HAL_GPIO_EXTI_Callback+0x18a>
	case S10_Pin:
		index = 10;
 8000336:	230a      	movs	r3, #10
 8000338:	73fb      	strb	r3, [r7, #15]
		break;
 800033a:	e00e      	b.n	800035a <HAL_GPIO_EXTI_Callback+0x18a>
	case S11_Pin:
		index = 11;
 800033c:	230b      	movs	r3, #11
 800033e:	73fb      	strb	r3, [r7, #15]
		break;
 8000340:	e00b      	b.n	800035a <HAL_GPIO_EXTI_Callback+0x18a>
	case S12_Pin:
		index = 12;
 8000342:	230c      	movs	r3, #12
 8000344:	73fb      	strb	r3, [r7, #15]
		break;
 8000346:	e008      	b.n	800035a <HAL_GPIO_EXTI_Callback+0x18a>
	case S13_Pin:
		index = 13;
 8000348:	230d      	movs	r3, #13
 800034a:	73fb      	strb	r3, [r7, #15]
		break;
 800034c:	e005      	b.n	800035a <HAL_GPIO_EXTI_Callback+0x18a>
	case S14_Pin:
		index = 14;
 800034e:	230e      	movs	r3, #14
 8000350:	73fb      	strb	r3, [r7, #15]
		break;
 8000352:	e002      	b.n	800035a <HAL_GPIO_EXTI_Callback+0x18a>
	case S15_Pin:
		index = 15;
 8000354:	230f      	movs	r3, #15
 8000356:	73fb      	strb	r3, [r7, #15]
		break;
 8000358:	bf00      	nop
	}
	pulse[index][pulse_pointer[index]]=micros();
 800035a:	7bfc      	ldrb	r4, [r7, #15]
 800035c:	7bfb      	ldrb	r3, [r7, #15]
 800035e:	4a11      	ldr	r2, [pc, #68]	; (80003a4 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000360:	5cd3      	ldrb	r3, [r2, r3]
 8000362:	461d      	mov	r5, r3
 8000364:	f7ff ff08 	bl	8000178 <micros>
 8000368:	4602      	mov	r2, r0
 800036a:	490f      	ldr	r1, [pc, #60]	; (80003a8 <HAL_GPIO_EXTI_Callback+0x1d8>)
 800036c:	0123      	lsls	r3, r4, #4
 800036e:	442b      	add	r3, r5
 8000370:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	++pulse_pointer[index];
 8000374:	7bfb      	ldrb	r3, [r7, #15]
 8000376:	4a0b      	ldr	r2, [pc, #44]	; (80003a4 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000378:	5cd2      	ldrb	r2, [r2, r3]
 800037a:	3201      	adds	r2, #1
 800037c:	b2d1      	uxtb	r1, r2
 800037e:	4a09      	ldr	r2, [pc, #36]	; (80003a4 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000380:	54d1      	strb	r1, [r2, r3]
	pulse_pointer[index]%=SPEED_BUFFER_SIZE;
 8000382:	7bfb      	ldrb	r3, [r7, #15]
 8000384:	4a07      	ldr	r2, [pc, #28]	; (80003a4 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000386:	5cd2      	ldrb	r2, [r2, r3]
 8000388:	7bfb      	ldrb	r3, [r7, #15]
 800038a:	f002 020f 	and.w	r2, r2, #15
 800038e:	b2d1      	uxtb	r1, r2
 8000390:	4a04      	ldr	r2, [pc, #16]	; (80003a4 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000392:	54d1      	strb	r1, [r2, r3]
	increment_count[index]=0;
 8000394:	7bfb      	ldrb	r3, [r7, #15]
 8000396:	4a05      	ldr	r2, [pc, #20]	; (80003ac <HAL_GPIO_EXTI_Callback+0x1dc>)
 8000398:	2100      	movs	r1, #0
 800039a:	54d1      	strb	r1, [r2, r3]
}
 800039c:	bf00      	nop
 800039e:	3710      	adds	r7, #16
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bdb0      	pop	{r4, r5, r7, pc}
 80003a4:	20000204 	.word	0x20000204
 80003a8:	20000264 	.word	0x20000264
 80003ac:	20000214 	.word	0x20000214

080003b0 <calcVelocity>:

void calcVelocity(){
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0

	for(uint8_t i=0;i<SPEED_PIN_COUNT;++i){
 80003b6:	2300      	movs	r3, #0
 80003b8:	71fb      	strb	r3, [r7, #7]
 80003ba:	e03b      	b.n	8000434 <calcVelocity+0x84>
		if(increment_count[i]>=SPEED_MAX_INCREMENT){
 80003bc:	79fb      	ldrb	r3, [r7, #7]
 80003be:	4a22      	ldr	r2, [pc, #136]	; (8000448 <calcVelocity+0x98>)
 80003c0:	5cd3      	ldrb	r3, [r2, r3]
 80003c2:	2b04      	cmp	r3, #4
 80003c4:	d905      	bls.n	80003d2 <calcVelocity+0x22>
			speed_on_single_pin[i]=0;
 80003c6:	79fb      	ldrb	r3, [r7, #7]
 80003c8:	4a20      	ldr	r2, [pc, #128]	; (800044c <calcVelocity+0x9c>)
 80003ca:	2100      	movs	r1, #0
 80003cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			continue;
 80003d0:	e02d      	b.n	800042e <calcVelocity+0x7e>
		}
		uint32_t s=pulse[i][(pulse_pointer[i]+SPEED_BUFFER_SIZE-1)%SPEED_BUFFER_SIZE]-pulse[i][pulse_pointer[i]];
 80003d2:	79fa      	ldrb	r2, [r7, #7]
 80003d4:	79fb      	ldrb	r3, [r7, #7]
 80003d6:	491e      	ldr	r1, [pc, #120]	; (8000450 <calcVelocity+0xa0>)
 80003d8:	5ccb      	ldrb	r3, [r1, r3]
 80003da:	330f      	adds	r3, #15
 80003dc:	4259      	negs	r1, r3
 80003de:	f003 030f 	and.w	r3, r3, #15
 80003e2:	f001 010f 	and.w	r1, r1, #15
 80003e6:	bf58      	it	pl
 80003e8:	424b      	negpl	r3, r1
 80003ea:	491a      	ldr	r1, [pc, #104]	; (8000454 <calcVelocity+0xa4>)
 80003ec:	0112      	lsls	r2, r2, #4
 80003ee:	4413      	add	r3, r2
 80003f0:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 80003f4:	79fb      	ldrb	r3, [r7, #7]
 80003f6:	79f9      	ldrb	r1, [r7, #7]
 80003f8:	4815      	ldr	r0, [pc, #84]	; (8000450 <calcVelocity+0xa0>)
 80003fa:	5c41      	ldrb	r1, [r0, r1]
 80003fc:	4608      	mov	r0, r1
 80003fe:	4915      	ldr	r1, [pc, #84]	; (8000454 <calcVelocity+0xa4>)
 8000400:	011b      	lsls	r3, r3, #4
 8000402:	4403      	add	r3, r0
 8000404:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000408:	1ad3      	subs	r3, r2, r3
 800040a:	603b      	str	r3, [r7, #0]
		if(s==0){
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	2b00      	cmp	r3, #0
 8000410:	d105      	bne.n	800041e <calcVelocity+0x6e>
			speed_on_single_pin[i]=0;
 8000412:	79fb      	ldrb	r3, [r7, #7]
 8000414:	4a0d      	ldr	r2, [pc, #52]	; (800044c <calcVelocity+0x9c>)
 8000416:	2100      	movs	r1, #0
 8000418:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800041c:	e007      	b.n	800042e <calcVelocity+0x7e>
		}
		else{
			speed_on_single_pin[i] = (SPEED_BUFFER_SIZE-1)*1000000U/s;
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	490d      	ldr	r1, [pc, #52]	; (8000458 <calcVelocity+0xa8>)
 8000422:	683a      	ldr	r2, [r7, #0]
 8000424:	fbb1 f2f2 	udiv	r2, r1, r2
 8000428:	4908      	ldr	r1, [pc, #32]	; (800044c <calcVelocity+0x9c>)
 800042a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(uint8_t i=0;i<SPEED_PIN_COUNT;++i){
 800042e:	79fb      	ldrb	r3, [r7, #7]
 8000430:	3301      	adds	r3, #1
 8000432:	71fb      	strb	r3, [r7, #7]
 8000434:	79fb      	ldrb	r3, [r7, #7]
 8000436:	2b0f      	cmp	r3, #15
 8000438:	d9c0      	bls.n	80003bc <calcVelocity+0xc>
		}
	}
}
 800043a:	bf00      	nop
 800043c:	bf00      	nop
 800043e:	370c      	adds	r7, #12
 8000440:	46bd      	mov	sp, r7
 8000442:	bc80      	pop	{r7}
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	20000214 	.word	0x20000214
 800044c:	20000224 	.word	0x20000224
 8000450:	20000204 	.word	0x20000204
 8000454:	20000264 	.word	0x20000264
 8000458:	00e4e1c0 	.word	0x00e4e1c0

0800045c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
	calcVelocity();
 8000464:	f7ff ffa4 	bl	80003b0 <calcVelocity>
	HAL_UART_Transmit_DMA(&huart1, speed_on_single_pin, sizeof(uint32_t)*SPEED_PIN_COUNT);
 8000468:	2240      	movs	r2, #64	; 0x40
 800046a:	4904      	ldr	r1, [pc, #16]	; (800047c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800046c:	4804      	ldr	r0, [pc, #16]	; (8000480 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800046e:	f002 ff9b 	bl	80033a8 <HAL_UART_Transmit_DMA>

}
 8000472:	bf00      	nop
 8000474:	3708      	adds	r7, #8
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	20000224 	.word	0x20000224
 8000480:	20000130 	.word	0x20000130

08000484 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000486:	b089      	sub	sp, #36	; 0x24
 8000488:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800048a:	f000 ff71 	bl	8001370 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800048e:	f000 f8cf 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000492:	f000 fa0b 	bl	80008ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000496:	f000 f9eb 	bl	8000870 <MX_DMA_Init>
  MX_SPI1_Init();
 800049a:	f000 f90f 	bl	80006bc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800049e:	f000 f993 	bl	80007c8 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80004a2:	f000 f941 	bl	8000728 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80004a6:	f000 f9b9 	bl	800081c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80004aa:	2201      	movs	r2, #1
 80004ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004b0:	4856      	ldr	r0, [pc, #344]	; (800060c <main+0x188>)
 80004b2:	f001 fc63 	bl	8001d7c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_LED_GPIO_Port, LCD_LED_Pin, GPIO_PIN_SET);
 80004b6:	2201      	movs	r2, #1
 80004b8:	2101      	movs	r1, #1
 80004ba:	4855      	ldr	r0, [pc, #340]	; (8000610 <main+0x18c>)
 80004bc:	f001 fc5e 	bl	8001d7c <HAL_GPIO_WritePin>
  DWT_Init();
 80004c0:	f7ff fe44 	bl	800014c <DWT_Init>
  ST7735_Init();
 80004c4:	f000 fb9e 	bl	8000c04 <ST7735_Init>
  ST7735_FillScreen(ST7735_BLACK);
 80004c8:	2000      	movs	r0, #0
 80004ca:	f000 fcf5 	bl	8000eb8 <ST7735_FillScreen>
  HAL_TIM_Base_Start_IT(&htim1);
 80004ce:	4851      	ldr	r0, [pc, #324]	; (8000614 <main+0x190>)
 80004d0:	f002 fb6c 	bl	8002bac <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t t = millis();
 80004d4:	f7ff fe66 	bl	80001a4 <millis>
 80004d8:	60f8      	str	r0, [r7, #12]
  while (1)
  {
	for(uint8_t i=0;i<SPEED_PIN_COUNT;++i){
 80004da:	2300      	movs	r3, #0
 80004dc:	72fb      	strb	r3, [r7, #11]
 80004de:	e009      	b.n	80004f4 <main+0x70>
		increment_count[i]++;
 80004e0:	7afb      	ldrb	r3, [r7, #11]
 80004e2:	4a4d      	ldr	r2, [pc, #308]	; (8000618 <main+0x194>)
 80004e4:	5cd2      	ldrb	r2, [r2, r3]
 80004e6:	3201      	adds	r2, #1
 80004e8:	b2d1      	uxtb	r1, r2
 80004ea:	4a4b      	ldr	r2, [pc, #300]	; (8000618 <main+0x194>)
 80004ec:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<SPEED_PIN_COUNT;++i){
 80004ee:	7afb      	ldrb	r3, [r7, #11]
 80004f0:	3301      	adds	r3, #1
 80004f2:	72fb      	strb	r3, [r7, #11]
 80004f4:	7afb      	ldrb	r3, [r7, #11]
 80004f6:	2b0f      	cmp	r3, #15
 80004f8:	d9f2      	bls.n	80004e0 <main+0x5c>
	}
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80004fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004fe:	4843      	ldr	r0, [pc, #268]	; (800060c <main+0x188>)
 8000500:	f001 fc54 	bl	8001dac <HAL_GPIO_TogglePin>

    ST7735_WriteString(0, 0, "Frequence", Font_11x18, ST7735_RED, ST7735_BLACK);
 8000504:	4b45      	ldr	r3, [pc, #276]	; (800061c <main+0x198>)
 8000506:	2200      	movs	r2, #0
 8000508:	9203      	str	r2, [sp, #12]
 800050a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800050e:	9202      	str	r2, [sp, #8]
 8000510:	466c      	mov	r4, sp
 8000512:	1d1a      	adds	r2, r3, #4
 8000514:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000518:	e884 0003 	stmia.w	r4, {r0, r1}
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4a40      	ldr	r2, [pc, #256]	; (8000620 <main+0x19c>)
 8000520:	2100      	movs	r1, #0
 8000522:	2000      	movs	r0, #0
 8000524:	f000 fc01 	bl	8000d2a <ST7735_WriteString>
    char str[3];
    for(uint8_t i=0;i<8;++i){
 8000528:	2300      	movs	r3, #0
 800052a:	72bb      	strb	r3, [r7, #10]
 800052c:	e028      	b.n	8000580 <main+0xfc>
		sprintf(str,"%03d", speed_on_single_pin[2*i]);
 800052e:	7abb      	ldrb	r3, [r7, #10]
 8000530:	005b      	lsls	r3, r3, #1
 8000532:	4a3c      	ldr	r2, [pc, #240]	; (8000624 <main+0x1a0>)
 8000534:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000538:	463b      	mov	r3, r7
 800053a:	493b      	ldr	r1, [pc, #236]	; (8000628 <main+0x1a4>)
 800053c:	4618      	mov	r0, r3
 800053e:	f003 fa27 	bl	8003990 <siprintf>
		ST7735_WriteString(5, 18+i*10, str, Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000542:	7abb      	ldrb	r3, [r7, #10]
 8000544:	b29b      	uxth	r3, r3
 8000546:	461a      	mov	r2, r3
 8000548:	0092      	lsls	r2, r2, #2
 800054a:	4413      	add	r3, r2
 800054c:	005b      	lsls	r3, r3, #1
 800054e:	b29b      	uxth	r3, r3
 8000550:	3312      	adds	r3, #18
 8000552:	b29c      	uxth	r4, r3
 8000554:	4b35      	ldr	r3, [pc, #212]	; (800062c <main+0x1a8>)
 8000556:	463d      	mov	r5, r7
 8000558:	2200      	movs	r2, #0
 800055a:	9203      	str	r2, [sp, #12]
 800055c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000560:	9202      	str	r2, [sp, #8]
 8000562:	466e      	mov	r6, sp
 8000564:	1d1a      	adds	r2, r3, #4
 8000566:	e892 0003 	ldmia.w	r2, {r0, r1}
 800056a:	e886 0003 	stmia.w	r6, {r0, r1}
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	462a      	mov	r2, r5
 8000572:	4621      	mov	r1, r4
 8000574:	2005      	movs	r0, #5
 8000576:	f000 fbd8 	bl	8000d2a <ST7735_WriteString>
    for(uint8_t i=0;i<8;++i){
 800057a:	7abb      	ldrb	r3, [r7, #10]
 800057c:	3301      	adds	r3, #1
 800057e:	72bb      	strb	r3, [r7, #10]
 8000580:	7abb      	ldrb	r3, [r7, #10]
 8000582:	2b07      	cmp	r3, #7
 8000584:	d9d3      	bls.n	800052e <main+0xaa>
    }
    for(uint8_t i=0;i<8;++i){
 8000586:	2300      	movs	r3, #0
 8000588:	727b      	strb	r3, [r7, #9]
 800058a:	e029      	b.n	80005e0 <main+0x15c>
		sprintf(str,"%03d", speed_on_single_pin[2*i+1]);
 800058c:	7a7b      	ldrb	r3, [r7, #9]
 800058e:	005b      	lsls	r3, r3, #1
 8000590:	3301      	adds	r3, #1
 8000592:	4a24      	ldr	r2, [pc, #144]	; (8000624 <main+0x1a0>)
 8000594:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000598:	463b      	mov	r3, r7
 800059a:	4923      	ldr	r1, [pc, #140]	; (8000628 <main+0x1a4>)
 800059c:	4618      	mov	r0, r3
 800059e:	f003 f9f7 	bl	8003990 <siprintf>
		ST7735_WriteString(64+5, 18+i*10, str, Font_7x10, ST7735_GREEN, ST7735_BLACK);
 80005a2:	7a7b      	ldrb	r3, [r7, #9]
 80005a4:	b29b      	uxth	r3, r3
 80005a6:	461a      	mov	r2, r3
 80005a8:	0092      	lsls	r2, r2, #2
 80005aa:	4413      	add	r3, r2
 80005ac:	005b      	lsls	r3, r3, #1
 80005ae:	b29b      	uxth	r3, r3
 80005b0:	3312      	adds	r3, #18
 80005b2:	b29c      	uxth	r4, r3
 80005b4:	4b1d      	ldr	r3, [pc, #116]	; (800062c <main+0x1a8>)
 80005b6:	463d      	mov	r5, r7
 80005b8:	2200      	movs	r2, #0
 80005ba:	9203      	str	r2, [sp, #12]
 80005bc:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80005c0:	9202      	str	r2, [sp, #8]
 80005c2:	466e      	mov	r6, sp
 80005c4:	1d1a      	adds	r2, r3, #4
 80005c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005ca:	e886 0003 	stmia.w	r6, {r0, r1}
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	462a      	mov	r2, r5
 80005d2:	4621      	mov	r1, r4
 80005d4:	2045      	movs	r0, #69	; 0x45
 80005d6:	f000 fba8 	bl	8000d2a <ST7735_WriteString>
    for(uint8_t i=0;i<8;++i){
 80005da:	7a7b      	ldrb	r3, [r7, #9]
 80005dc:	3301      	adds	r3, #1
 80005de:	727b      	strb	r3, [r7, #9]
 80005e0:	7a7b      	ldrb	r3, [r7, #9]
 80005e2:	2b07      	cmp	r3, #7
 80005e4:	d9d2      	bls.n	800058c <main+0x108>
    }

    uint32_t h = millis();
 80005e6:	f7ff fddd 	bl	80001a4 <millis>
 80005ea:	6078      	str	r0, [r7, #4]
    while(h-t<500){
 80005ec:	e005      	b.n	80005fa <main+0x176>
    	h = millis();
 80005ee:	f7ff fdd9 	bl	80001a4 <millis>
 80005f2:	6078      	str	r0, [r7, #4]
    	HAL_Delay(1);
 80005f4:	2001      	movs	r0, #1
 80005f6:	f000 ff1d 	bl	8001434 <HAL_Delay>
    while(h-t<500){
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	1ad3      	subs	r3, r2, r3
 8000600:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000604:	d3f3      	bcc.n	80005ee <main+0x16a>
    }
    t = h;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	60fb      	str	r3, [r7, #12]
  {
 800060a:	e766      	b.n	80004da <main+0x56>
 800060c:	40010c00 	.word	0x40010c00
 8000610:	40010800 	.word	0x40010800
 8000614:	200000e8 	.word	0x200000e8
 8000618:	20000214 	.word	0x20000214
 800061c:	2000000c 	.word	0x2000000c
 8000620:	080041b4 	.word	0x080041b4
 8000624:	20000224 	.word	0x20000224
 8000628:	080041c0 	.word	0x080041c0
 800062c:	20000000 	.word	0x20000000

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b090      	sub	sp, #64	; 0x40
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 0318 	add.w	r3, r7, #24
 800063a:	2228      	movs	r2, #40	; 0x28
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f003 f9c6 	bl	80039d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]
 8000650:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000652:	2301      	movs	r3, #1
 8000654:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000656:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800065a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000660:	2301      	movs	r3, #1
 8000662:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000664:	2302      	movs	r3, #2
 8000666:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000668:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800066c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800066e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000672:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000674:	f107 0318 	add.w	r3, r7, #24
 8000678:	4618      	mov	r0, r3
 800067a:	f001 fbc9 	bl	8001e10 <HAL_RCC_OscConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000684:	f000 f9d2 	bl	8000a2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000688:	230f      	movs	r3, #15
 800068a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068c:	2302      	movs	r3, #2
 800068e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000694:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000698:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800069a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800069e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	2102      	movs	r1, #2
 80006a4:	4618      	mov	r0, r3
 80006a6:	f001 fe35 	bl	8002314 <HAL_RCC_ClockConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006b0:	f000 f9bc 	bl	8000a2c <Error_Handler>
  }
}
 80006b4:	bf00      	nop
 80006b6:	3740      	adds	r7, #64	; 0x40
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006c0:	4b17      	ldr	r3, [pc, #92]	; (8000720 <MX_SPI1_Init+0x64>)
 80006c2:	4a18      	ldr	r2, [pc, #96]	; (8000724 <MX_SPI1_Init+0x68>)
 80006c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006c6:	4b16      	ldr	r3, [pc, #88]	; (8000720 <MX_SPI1_Init+0x64>)
 80006c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ce:	4b14      	ldr	r3, [pc, #80]	; (8000720 <MX_SPI1_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <MX_SPI1_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_SPI1_Init+0x64>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_SPI1_Init+0x64>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_SPI1_Init+0x64>)
 80006e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_SPI1_Init+0x64>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <MX_SPI1_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_SPI1_Init+0x64>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000700:	4b07      	ldr	r3, [pc, #28]	; (8000720 <MX_SPI1_Init+0x64>)
 8000702:	2200      	movs	r2, #0
 8000704:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_SPI1_Init+0x64>)
 8000708:	220a      	movs	r2, #10
 800070a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800070c:	4804      	ldr	r0, [pc, #16]	; (8000720 <MX_SPI1_Init+0x64>)
 800070e:	f001 ff8f 	bl	8002630 <HAL_SPI_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000718:	f000 f988 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000090 	.word	0x20000090
 8000724:	40013000 	.word	0x40013000

08000728 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b086      	sub	sp, #24
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800072e:	f107 0308 	add.w	r3, r7, #8
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800073c:	463b      	mov	r3, r7
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000744:	4b1e      	ldr	r3, [pc, #120]	; (80007c0 <MX_TIM1_Init+0x98>)
 8000746:	4a1f      	ldr	r2, [pc, #124]	; (80007c4 <MX_TIM1_Init+0x9c>)
 8000748:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35;
 800074a:	4b1d      	ldr	r3, [pc, #116]	; (80007c0 <MX_TIM1_Init+0x98>)
 800074c:	2223      	movs	r2, #35	; 0x23
 800074e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000750:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <MX_TIM1_Init+0x98>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000-1;
 8000756:	4b1a      	ldr	r3, [pc, #104]	; (80007c0 <MX_TIM1_Init+0x98>)
 8000758:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800075c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800075e:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <MX_TIM1_Init+0x98>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000764:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <MX_TIM1_Init+0x98>)
 8000766:	2200      	movs	r2, #0
 8000768:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800076a:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <MX_TIM1_Init+0x98>)
 800076c:	2280      	movs	r2, #128	; 0x80
 800076e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000770:	4813      	ldr	r0, [pc, #76]	; (80007c0 <MX_TIM1_Init+0x98>)
 8000772:	f002 f9cb 	bl	8002b0c <HAL_TIM_Base_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800077c:	f000 f956 	bl	8000a2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000784:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000786:	f107 0308 	add.w	r3, r7, #8
 800078a:	4619      	mov	r1, r3
 800078c:	480c      	ldr	r0, [pc, #48]	; (80007c0 <MX_TIM1_Init+0x98>)
 800078e:	f002 fb67 	bl	8002e60 <HAL_TIM_ConfigClockSource>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000798:	f000 f948 	bl	8000a2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800079c:	2300      	movs	r3, #0
 800079e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a0:	2300      	movs	r3, #0
 80007a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007a4:	463b      	mov	r3, r7
 80007a6:	4619      	mov	r1, r3
 80007a8:	4805      	ldr	r0, [pc, #20]	; (80007c0 <MX_TIM1_Init+0x98>)
 80007aa:	f002 fd3d 	bl	8003228 <HAL_TIMEx_MasterConfigSynchronization>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80007b4:	f000 f93a 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007b8:	bf00      	nop
 80007ba:	3718      	adds	r7, #24
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	200000e8 	.word	0x200000e8
 80007c4:	40012c00 	.word	0x40012c00

080007c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007cc:	4b11      	ldr	r3, [pc, #68]	; (8000814 <MX_USART1_UART_Init+0x4c>)
 80007ce:	4a12      	ldr	r2, [pc, #72]	; (8000818 <MX_USART1_UART_Init+0x50>)
 80007d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007d2:	4b10      	ldr	r3, [pc, #64]	; (8000814 <MX_USART1_UART_Init+0x4c>)
 80007d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <MX_USART1_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <MX_USART1_UART_Init+0x4c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <MX_USART1_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007ec:	4b09      	ldr	r3, [pc, #36]	; (8000814 <MX_USART1_UART_Init+0x4c>)
 80007ee:	220c      	movs	r2, #12
 80007f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <MX_USART1_UART_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <MX_USART1_UART_Init+0x4c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007fe:	4805      	ldr	r0, [pc, #20]	; (8000814 <MX_USART1_UART_Init+0x4c>)
 8000800:	f002 fd82 	bl	8003308 <HAL_UART_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800080a:	f000 f90f 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000130 	.word	0x20000130
 8000818:	40013800 	.word	0x40013800

0800081c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000820:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 8000822:	4a12      	ldr	r2, [pc, #72]	; (800086c <MX_USART2_UART_Init+0x50>)
 8000824:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000826:	4b10      	ldr	r3, [pc, #64]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 8000828:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800082c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 8000842:	220c      	movs	r2, #12
 8000844:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 800084e:	2200      	movs	r2, #0
 8000850:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000852:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_USART2_UART_Init+0x4c>)
 8000854:	f002 fd58 	bl	8003308 <HAL_UART_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800085e:	f000 f8e5 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000178 	.word	0x20000178
 800086c:	40004400 	.word	0x40004400

08000870 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000876:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <MX_DMA_Init+0x38>)
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	4a0b      	ldr	r2, [pc, #44]	; (80008a8 <MX_DMA_Init+0x38>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	6153      	str	r3, [r2, #20]
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <MX_DMA_Init+0x38>)
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2100      	movs	r1, #0
 8000892:	200e      	movs	r0, #14
 8000894:	f000 fec9 	bl	800162a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000898:	200e      	movs	r0, #14
 800089a:	f000 fee2 	bl	8001662 <HAL_NVIC_EnableIRQ>

}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40021000 	.word	0x40021000

080008ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b088      	sub	sp, #32
 80008b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b2:	f107 0310 	add.w	r3, r7, #16
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c0:	4b56      	ldr	r3, [pc, #344]	; (8000a1c <MX_GPIO_Init+0x170>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	4a55      	ldr	r2, [pc, #340]	; (8000a1c <MX_GPIO_Init+0x170>)
 80008c6:	f043 0310 	orr.w	r3, r3, #16
 80008ca:	6193      	str	r3, [r2, #24]
 80008cc:	4b53      	ldr	r3, [pc, #332]	; (8000a1c <MX_GPIO_Init+0x170>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	f003 0310 	and.w	r3, r3, #16
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d8:	4b50      	ldr	r3, [pc, #320]	; (8000a1c <MX_GPIO_Init+0x170>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	4a4f      	ldr	r2, [pc, #316]	; (8000a1c <MX_GPIO_Init+0x170>)
 80008de:	f043 0320 	orr.w	r3, r3, #32
 80008e2:	6193      	str	r3, [r2, #24]
 80008e4:	4b4d      	ldr	r3, [pc, #308]	; (8000a1c <MX_GPIO_Init+0x170>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	f003 0320 	and.w	r3, r3, #32
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f0:	4b4a      	ldr	r3, [pc, #296]	; (8000a1c <MX_GPIO_Init+0x170>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	4a49      	ldr	r2, [pc, #292]	; (8000a1c <MX_GPIO_Init+0x170>)
 80008f6:	f043 0304 	orr.w	r3, r3, #4
 80008fa:	6193      	str	r3, [r2, #24]
 80008fc:	4b47      	ldr	r3, [pc, #284]	; (8000a1c <MX_GPIO_Init+0x170>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	f003 0304 	and.w	r3, r3, #4
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000908:	4b44      	ldr	r3, [pc, #272]	; (8000a1c <MX_GPIO_Init+0x170>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	4a43      	ldr	r2, [pc, #268]	; (8000a1c <MX_GPIO_Init+0x170>)
 800090e:	f043 0308 	orr.w	r3, r3, #8
 8000912:	6193      	str	r3, [r2, #24]
 8000914:	4b41      	ldr	r3, [pc, #260]	; (8000a1c <MX_GPIO_Init+0x170>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	f003 0308 	and.w	r3, r3, #8
 800091c:	603b      	str	r3, [r7, #0]
 800091e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_LED_Pin|LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8000920:	2200      	movs	r2, #0
 8000922:	2153      	movs	r1, #83	; 0x53
 8000924:	483e      	ldr	r0, [pc, #248]	; (8000a20 <MX_GPIO_Init+0x174>)
 8000926:	f001 fa29 	bl	8001d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000930:	483c      	ldr	r0, [pc, #240]	; (8000a24 <MX_GPIO_Init+0x178>)
 8000932:	f001 fa23 	bl	8001d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_LED_Pin LCD_CS_Pin LCD_RST_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_LED_Pin|LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin;
 8000936:	2353      	movs	r3, #83	; 0x53
 8000938:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093a:	2301      	movs	r3, #1
 800093c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2302      	movs	r3, #2
 8000944:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000946:	f107 0310 	add.w	r3, r7, #16
 800094a:	4619      	mov	r1, r3
 800094c:	4834      	ldr	r0, [pc, #208]	; (8000a20 <MX_GPIO_Init+0x174>)
 800094e:	f001 f891 	bl	8001a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : S00_Pin S01_Pin S02_Pin S10_Pin
                           S11_Pin S13_Pin S14_Pin S15_Pin
                           S03_Pin S04_Pin S05_Pin S06_Pin
                           S07_Pin S08_Pin S09_Pin */
  GPIO_InitStruct.Pin = S00_Pin|S01_Pin|S02_Pin|S10_Pin
 8000952:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000956:	613b      	str	r3, [r7, #16]
                          |S11_Pin|S13_Pin|S14_Pin|S15_Pin
                          |S03_Pin|S04_Pin|S05_Pin|S06_Pin
                          |S07_Pin|S08_Pin|S09_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000958:	4b33      	ldr	r3, [pc, #204]	; (8000a28 <MX_GPIO_Init+0x17c>)
 800095a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000960:	f107 0310 	add.w	r3, r7, #16
 8000964:	4619      	mov	r1, r3
 8000966:	482f      	ldr	r0, [pc, #188]	; (8000a24 <MX_GPIO_Init+0x178>)
 8000968:	f001 f884 	bl	8001a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800096c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000970:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000972:	2301      	movs	r3, #1
 8000974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2302      	movs	r3, #2
 800097c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 0310 	add.w	r3, r7, #16
 8000982:	4619      	mov	r1, r3
 8000984:	4827      	ldr	r0, [pc, #156]	; (8000a24 <MX_GPIO_Init+0x178>)
 8000986:	f001 f875 	bl	8001a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : S12_Pin */
  GPIO_InitStruct.Pin = S12_Pin;
 800098a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800098e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000990:	4b25      	ldr	r3, [pc, #148]	; (8000a28 <MX_GPIO_Init+0x17c>)
 8000992:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(S12_GPIO_Port, &GPIO_InitStruct);
 8000998:	f107 0310 	add.w	r3, r7, #16
 800099c:	4619      	mov	r1, r3
 800099e:	4820      	ldr	r0, [pc, #128]	; (8000a20 <MX_GPIO_Init+0x174>)
 80009a0:	f001 f868 	bl	8001a74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80009a4:	2200      	movs	r2, #0
 80009a6:	2100      	movs	r1, #0
 80009a8:	2006      	movs	r0, #6
 80009aa:	f000 fe3e 	bl	800162a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80009ae:	2006      	movs	r0, #6
 80009b0:	f000 fe57 	bl	8001662 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2100      	movs	r1, #0
 80009b8:	2007      	movs	r0, #7
 80009ba:	f000 fe36 	bl	800162a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80009be:	2007      	movs	r0, #7
 80009c0:	f000 fe4f 	bl	8001662 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2100      	movs	r1, #0
 80009c8:	2008      	movs	r0, #8
 80009ca:	f000 fe2e 	bl	800162a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80009ce:	2008      	movs	r0, #8
 80009d0:	f000 fe47 	bl	8001662 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80009d4:	2200      	movs	r2, #0
 80009d6:	2100      	movs	r1, #0
 80009d8:	2009      	movs	r0, #9
 80009da:	f000 fe26 	bl	800162a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80009de:	2009      	movs	r0, #9
 80009e0:	f000 fe3f 	bl	8001662 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2100      	movs	r1, #0
 80009e8:	200a      	movs	r0, #10
 80009ea:	f000 fe1e 	bl	800162a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80009ee:	200a      	movs	r0, #10
 80009f0:	f000 fe37 	bl	8001662 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2100      	movs	r1, #0
 80009f8:	2017      	movs	r0, #23
 80009fa:	f000 fe16 	bl	800162a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80009fe:	2017      	movs	r0, #23
 8000a00:	f000 fe2f 	bl	8001662 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a04:	2200      	movs	r2, #0
 8000a06:	2100      	movs	r1, #0
 8000a08:	2028      	movs	r0, #40	; 0x28
 8000a0a:	f000 fe0e 	bl	800162a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a0e:	2028      	movs	r0, #40	; 0x28
 8000a10:	f000 fe27 	bl	8001662 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a14:	bf00      	nop
 8000a16:	3720      	adds	r7, #32
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	40010800 	.word	0x40010800
 8000a24:	40010c00 	.word	0x40010c00
 8000a28:	10110000 	.word	0x10110000

08000a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a30:	b672      	cpsid	i
}
 8000a32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <Error_Handler+0x8>
	...

08000a38 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2102      	movs	r1, #2
 8000a40:	4802      	ldr	r0, [pc, #8]	; (8000a4c <ST7735_Select+0x14>)
 8000a42:	f001 f99b 	bl	8001d7c <HAL_GPIO_WritePin>
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40010800 	.word	0x40010800

08000a50 <ST7735_Unselect>:

void ST7735_Unselect() {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8000a54:	2201      	movs	r2, #1
 8000a56:	2102      	movs	r1, #2
 8000a58:	4802      	ldr	r0, [pc, #8]	; (8000a64 <ST7735_Unselect+0x14>)
 8000a5a:	f001 f98f 	bl	8001d7c <HAL_GPIO_WritePin>
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40010800 	.word	0x40010800

08000a68 <ST7735_Reset>:

static void ST7735_Reset() {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2110      	movs	r1, #16
 8000a70:	4806      	ldr	r0, [pc, #24]	; (8000a8c <ST7735_Reset+0x24>)
 8000a72:	f001 f983 	bl	8001d7c <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000a76:	2005      	movs	r0, #5
 8000a78:	f000 fcdc 	bl	8001434 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	2110      	movs	r1, #16
 8000a80:	4802      	ldr	r0, [pc, #8]	; (8000a8c <ST7735_Reset+0x24>)
 8000a82:	f001 f97b 	bl	8001d7c <HAL_GPIO_WritePin>
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40010800 	.word	0x40010800

08000a90 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2140      	movs	r1, #64	; 0x40
 8000a9e:	4807      	ldr	r0, [pc, #28]	; (8000abc <ST7735_WriteCommand+0x2c>)
 8000aa0:	f001 f96c 	bl	8001d7c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000aa4:	1df9      	adds	r1, r7, #7
 8000aa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000aaa:	2201      	movs	r2, #1
 8000aac:	4804      	ldr	r0, [pc, #16]	; (8000ac0 <ST7735_WriteCommand+0x30>)
 8000aae:	f001 fe43 	bl	8002738 <HAL_SPI_Transmit>
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40010800 	.word	0x40010800
 8000ac0:	20000090 	.word	0x20000090

08000ac4 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8000ace:	2201      	movs	r2, #1
 8000ad0:	2140      	movs	r1, #64	; 0x40
 8000ad2:	4807      	ldr	r0, [pc, #28]	; (8000af0 <ST7735_WriteData+0x2c>)
 8000ad4:	f001 f952 	bl	8001d7c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	b29a      	uxth	r2, r3
 8000adc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ae0:	6879      	ldr	r1, [r7, #4]
 8000ae2:	4804      	ldr	r0, [pc, #16]	; (8000af4 <ST7735_WriteData+0x30>)
 8000ae4:	f001 fe28 	bl	8002738 <HAL_SPI_Transmit>
}
 8000ae8:	bf00      	nop
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40010800 	.word	0x40010800
 8000af4:	20000090 	.word	0x20000090

08000af8 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	1c5a      	adds	r2, r3, #1
 8000b04:	607a      	str	r2, [r7, #4]
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8000b0a:	e034      	b.n	8000b76 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	1c5a      	adds	r2, r3, #1
 8000b10:	607a      	str	r2, [r7, #4]
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000b16:	7afb      	ldrb	r3, [r7, #11]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff ffb9 	bl	8000a90 <ST7735_WriteCommand>

        numArgs = *addr++;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	1c5a      	adds	r2, r3, #1
 8000b22:	607a      	str	r2, [r7, #4]
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000b28:	7abb      	ldrb	r3, [r7, #10]
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b30:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8000b32:	7abb      	ldrb	r3, [r7, #10]
 8000b34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b38:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8000b3a:	7abb      	ldrb	r3, [r7, #10]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d008      	beq.n	8000b52 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000b40:	7abb      	ldrb	r3, [r7, #10]
 8000b42:	4619      	mov	r1, r3
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f7ff ffbd 	bl	8000ac4 <ST7735_WriteData>
            addr += numArgs;
 8000b4a:	7abb      	ldrb	r3, [r7, #10]
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	4413      	add	r3, r2
 8000b50:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000b52:	89bb      	ldrh	r3, [r7, #12]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d00e      	beq.n	8000b76 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	1c5a      	adds	r2, r3, #1
 8000b5c:	607a      	str	r2, [r7, #4]
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000b62:	89bb      	ldrh	r3, [r7, #12]
 8000b64:	2bff      	cmp	r3, #255	; 0xff
 8000b66:	d102      	bne.n	8000b6e <ST7735_ExecuteCommandList+0x76>
 8000b68:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b6c:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000b6e:	89bb      	ldrh	r3, [r7, #12]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f000 fc5f 	bl	8001434 <HAL_Delay>
    while(numCommands--) {
 8000b76:	7bfb      	ldrb	r3, [r7, #15]
 8000b78:	1e5a      	subs	r2, r3, #1
 8000b7a:	73fa      	strb	r2, [r7, #15]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d1c5      	bne.n	8000b0c <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8000b80:	bf00      	nop
 8000b82:	bf00      	nop
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8000b8a:	b590      	push	{r4, r7, lr}
 8000b8c:	b085      	sub	sp, #20
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	4604      	mov	r4, r0
 8000b92:	4608      	mov	r0, r1
 8000b94:	4611      	mov	r1, r2
 8000b96:	461a      	mov	r2, r3
 8000b98:	4623      	mov	r3, r4
 8000b9a:	71fb      	strb	r3, [r7, #7]
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	71bb      	strb	r3, [r7, #6]
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	717b      	strb	r3, [r7, #5]
 8000ba4:	4613      	mov	r3, r2
 8000ba6:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000ba8:	202a      	movs	r0, #42	; 0x2a
 8000baa:	f7ff ff71 	bl	8000a90 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8000bae:	2300      	movs	r3, #0
 8000bb0:	733b      	strb	r3, [r7, #12]
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	3302      	adds	r3, #2
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	737b      	strb	r3, [r7, #13]
 8000bba:	2300      	movs	r3, #0
 8000bbc:	73bb      	strb	r3, [r7, #14]
 8000bbe:	797b      	ldrb	r3, [r7, #5]
 8000bc0:	3302      	adds	r3, #2
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000bc6:	f107 030c 	add.w	r3, r7, #12
 8000bca:	2104      	movs	r1, #4
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff ff79 	bl	8000ac4 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000bd2:	202b      	movs	r0, #43	; 0x2b
 8000bd4:	f7ff ff5c 	bl	8000a90 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8000bd8:	79bb      	ldrb	r3, [r7, #6]
 8000bda:	3303      	adds	r3, #3
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8000be0:	793b      	ldrb	r3, [r7, #4]
 8000be2:	3303      	adds	r3, #3
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000be8:	f107 030c 	add.w	r3, r7, #12
 8000bec:	2104      	movs	r1, #4
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff ff68 	bl	8000ac4 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000bf4:	202c      	movs	r0, #44	; 0x2c
 8000bf6:	f7ff ff4b 	bl	8000a90 <ST7735_WriteCommand>
}
 8000bfa:	bf00      	nop
 8000bfc:	3714      	adds	r7, #20
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd90      	pop	{r4, r7, pc}
	...

08000c04 <ST7735_Init>:

void ST7735_Init() {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
    ST7735_Select();
 8000c08:	f7ff ff16 	bl	8000a38 <ST7735_Select>
    ST7735_Reset();
 8000c0c:	f7ff ff2c 	bl	8000a68 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8000c10:	4806      	ldr	r0, [pc, #24]	; (8000c2c <ST7735_Init+0x28>)
 8000c12:	f7ff ff71 	bl	8000af8 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8000c16:	4806      	ldr	r0, [pc, #24]	; (8000c30 <ST7735_Init+0x2c>)
 8000c18:	f7ff ff6e 	bl	8000af8 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8000c1c:	4805      	ldr	r0, [pc, #20]	; (8000c34 <ST7735_Init+0x30>)
 8000c1e:	f7ff ff6b 	bl	8000af8 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8000c22:	f7ff ff15 	bl	8000a50 <ST7735_Unselect>
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	08005690 	.word	0x08005690
 8000c30:	080056cc 	.word	0x080056cc
 8000c34:	080056dc 	.word	0x080056dc

08000c38 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000c38:	b082      	sub	sp, #8
 8000c3a:	b590      	push	{r4, r7, lr}
 8000c3c:	b089      	sub	sp, #36	; 0x24
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	637b      	str	r3, [r7, #52]	; 0x34
 8000c42:	4603      	mov	r3, r0
 8000c44:	80fb      	strh	r3, [r7, #6]
 8000c46:	460b      	mov	r3, r1
 8000c48:	80bb      	strh	r3, [r7, #4]
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000c4e:	88fb      	ldrh	r3, [r7, #6]
 8000c50:	b2d8      	uxtb	r0, r3
 8000c52:	88bb      	ldrh	r3, [r7, #4]
 8000c54:	b2d9      	uxtb	r1, r3
 8000c56:	88fb      	ldrh	r3, [r7, #6]
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000c5e:	4413      	add	r3, r2
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	3b01      	subs	r3, #1
 8000c64:	b2dc      	uxtb	r4, r3
 8000c66:	88bb      	ldrh	r3, [r7, #4]
 8000c68:	b2da      	uxtb	r2, r3
 8000c6a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000c6e:	4413      	add	r3, r2
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	3b01      	subs	r3, #1
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	4622      	mov	r2, r4
 8000c78:	f7ff ff87 	bl	8000b8a <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61fb      	str	r3, [r7, #28]
 8000c80:	e045      	b.n	8000d0e <ST7735_WriteChar+0xd6>
        b = font.data[(ch - 32) * font.height + i];
 8000c82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000c84:	78fb      	ldrb	r3, [r7, #3]
 8000c86:	3b20      	subs	r3, #32
 8000c88:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000c8c:	fb01 f303 	mul.w	r3, r1, r3
 8000c90:	4619      	mov	r1, r3
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	440b      	add	r3, r1
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	4413      	add	r3, r2
 8000c9a:	881b      	ldrh	r3, [r3, #0]
 8000c9c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61bb      	str	r3, [r7, #24]
 8000ca2:	e02b      	b.n	8000cfc <ST7735_WriteChar+0xc4>
            if((b << j) & 0x8000)  {
 8000ca4:	697a      	ldr	r2, [r7, #20]
 8000ca6:	69bb      	ldr	r3, [r7, #24]
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d010      	beq.n	8000cd6 <ST7735_WriteChar+0x9e>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000cb4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000cb8:	0a1b      	lsrs	r3, r3, #8
 8000cba:	b29b      	uxth	r3, r3
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	743b      	strb	r3, [r7, #16]
 8000cc0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8000cc8:	f107 0310 	add.w	r3, r7, #16
 8000ccc:	2102      	movs	r1, #2
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fef8 	bl	8000ac4 <ST7735_WriteData>
 8000cd4:	e00f      	b.n	8000cf6 <ST7735_WriteChar+0xbe>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000cd6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8000cda:	0a1b      	lsrs	r3, r3, #8
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	733b      	strb	r3, [r7, #12]
 8000ce2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8000cea:	f107 030c 	add.w	r3, r7, #12
 8000cee:	2102      	movs	r1, #2
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fee7 	bl	8000ac4 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8000cf6:	69bb      	ldr	r3, [r7, #24]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	61bb      	str	r3, [r7, #24]
 8000cfc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000d00:	461a      	mov	r2, r3
 8000d02:	69bb      	ldr	r3, [r7, #24]
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d3cd      	bcc.n	8000ca4 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	61fb      	str	r3, [r7, #28]
 8000d0e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000d12:	461a      	mov	r2, r3
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d3b3      	bcc.n	8000c82 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8000d1a:	bf00      	nop
 8000d1c:	bf00      	nop
 8000d1e:	3724      	adds	r7, #36	; 0x24
 8000d20:	46bd      	mov	sp, r7
 8000d22:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000d26:	b002      	add	sp, #8
 8000d28:	4770      	bx	lr

08000d2a <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d2e:	b087      	sub	sp, #28
 8000d30:	af04      	add	r7, sp, #16
 8000d32:	603a      	str	r2, [r7, #0]
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
 8000d36:	4603      	mov	r3, r0
 8000d38:	80fb      	strh	r3, [r7, #6]
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8000d3e:	f7ff fe7b 	bl	8000a38 <ST7735_Select>

    while(*str) {
 8000d42:	e038      	b.n	8000db6 <ST7735_WriteString+0x8c>
        if(x + font.width >= ST7735_WIDTH) {
 8000d44:	88fb      	ldrh	r3, [r7, #6]
 8000d46:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000d4a:	4413      	add	r3, r2
 8000d4c:	2b7f      	cmp	r3, #127	; 0x7f
 8000d4e:	dd15      	ble.n	8000d7c <ST7735_WriteString+0x52>
            x = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000d54:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000d58:	b29a      	uxth	r2, r3
 8000d5a:	88bb      	ldrh	r3, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8000d60:	88bb      	ldrh	r3, [r7, #4]
 8000d62:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8000d66:	4413      	add	r3, r2
 8000d68:	2b7f      	cmp	r3, #127	; 0x7f
 8000d6a:	dc29      	bgt.n	8000dc0 <ST7735_WriteString+0x96>
                break;
            }

            if(*str == ' ') {
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b20      	cmp	r3, #32
 8000d72:	d103      	bne.n	8000d7c <ST7735_WriteString+0x52>
                // skip spaces in the beginning of the new line
                str++;
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	3301      	adds	r3, #1
 8000d78:	603b      	str	r3, [r7, #0]
                continue;
 8000d7a:	e01c      	b.n	8000db6 <ST7735_WriteString+0x8c>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	781a      	ldrb	r2, [r3, #0]
 8000d80:	88bd      	ldrh	r5, [r7, #4]
 8000d82:	88fc      	ldrh	r4, [r7, #6]
 8000d84:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000d86:	9303      	str	r3, [sp, #12]
 8000d88:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000d8a:	9302      	str	r3, [sp, #8]
 8000d8c:	466e      	mov	r6, sp
 8000d8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d92:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000d96:	e886 0003 	stmia.w	r6, {r0, r1}
 8000d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9c:	4629      	mov	r1, r5
 8000d9e:	4620      	mov	r0, r4
 8000da0:	f7ff ff4a 	bl	8000c38 <ST7735_WriteChar>
        x += font.width;
 8000da4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000da8:	b29a      	uxth	r2, r3
 8000daa:	88fb      	ldrh	r3, [r7, #6]
 8000dac:	4413      	add	r3, r2
 8000dae:	80fb      	strh	r3, [r7, #6]
        str++;
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	3301      	adds	r3, #1
 8000db4:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d1c2      	bne.n	8000d44 <ST7735_WriteString+0x1a>
 8000dbe:	e000      	b.n	8000dc2 <ST7735_WriteString+0x98>
                break;
 8000dc0:	bf00      	nop
    }

    ST7735_Unselect();
 8000dc2:	f7ff fe45 	bl	8000a50 <ST7735_Unselect>
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8000dd0:	b002      	add	sp, #8
 8000dd2:	4770      	bx	lr

08000dd4 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000dd4:	b590      	push	{r4, r7, lr}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4604      	mov	r4, r0
 8000ddc:	4608      	mov	r0, r1
 8000dde:	4611      	mov	r1, r2
 8000de0:	461a      	mov	r2, r3
 8000de2:	4623      	mov	r3, r4
 8000de4:	80fb      	strh	r3, [r7, #6]
 8000de6:	4603      	mov	r3, r0
 8000de8:	80bb      	strh	r3, [r7, #4]
 8000dea:	460b      	mov	r3, r1
 8000dec:	807b      	strh	r3, [r7, #2]
 8000dee:	4613      	mov	r3, r2
 8000df0:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000df2:	88fb      	ldrh	r3, [r7, #6]
 8000df4:	2b7f      	cmp	r3, #127	; 0x7f
 8000df6:	d857      	bhi.n	8000ea8 <ST7735_FillRectangle+0xd4>
 8000df8:	88bb      	ldrh	r3, [r7, #4]
 8000dfa:	2b7f      	cmp	r3, #127	; 0x7f
 8000dfc:	d854      	bhi.n	8000ea8 <ST7735_FillRectangle+0xd4>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8000dfe:	88fa      	ldrh	r2, [r7, #6]
 8000e00:	887b      	ldrh	r3, [r7, #2]
 8000e02:	4413      	add	r3, r2
 8000e04:	2b80      	cmp	r3, #128	; 0x80
 8000e06:	dd03      	ble.n	8000e10 <ST7735_FillRectangle+0x3c>
 8000e08:	88fb      	ldrh	r3, [r7, #6]
 8000e0a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000e0e:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8000e10:	88ba      	ldrh	r2, [r7, #4]
 8000e12:	883b      	ldrh	r3, [r7, #0]
 8000e14:	4413      	add	r3, r2
 8000e16:	2b80      	cmp	r3, #128	; 0x80
 8000e18:	dd03      	ble.n	8000e22 <ST7735_FillRectangle+0x4e>
 8000e1a:	88bb      	ldrh	r3, [r7, #4]
 8000e1c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000e20:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000e22:	f7ff fe09 	bl	8000a38 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000e26:	88fb      	ldrh	r3, [r7, #6]
 8000e28:	b2d8      	uxtb	r0, r3
 8000e2a:	88bb      	ldrh	r3, [r7, #4]
 8000e2c:	b2d9      	uxtb	r1, r3
 8000e2e:	88fb      	ldrh	r3, [r7, #6]
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	887b      	ldrh	r3, [r7, #2]
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	4413      	add	r3, r2
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	b2dc      	uxtb	r4, r3
 8000e3e:	88bb      	ldrh	r3, [r7, #4]
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	883b      	ldrh	r3, [r7, #0]
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	4413      	add	r3, r2
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	4622      	mov	r2, r4
 8000e50:	f7ff fe9b 	bl	8000b8a <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000e54:	8c3b      	ldrh	r3, [r7, #32]
 8000e56:	0a1b      	lsrs	r3, r3, #8
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	733b      	strb	r3, [r7, #12]
 8000e5e:	8c3b      	ldrh	r3, [r7, #32]
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8000e64:	2201      	movs	r2, #1
 8000e66:	2140      	movs	r1, #64	; 0x40
 8000e68:	4811      	ldr	r0, [pc, #68]	; (8000eb0 <ST7735_FillRectangle+0xdc>)
 8000e6a:	f000 ff87 	bl	8001d7c <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000e6e:	883b      	ldrh	r3, [r7, #0]
 8000e70:	80bb      	strh	r3, [r7, #4]
 8000e72:	e013      	b.n	8000e9c <ST7735_FillRectangle+0xc8>
        for(x = w; x > 0; x--) {
 8000e74:	887b      	ldrh	r3, [r7, #2]
 8000e76:	80fb      	strh	r3, [r7, #6]
 8000e78:	e00a      	b.n	8000e90 <ST7735_FillRectangle+0xbc>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000e7a:	f107 010c 	add.w	r1, r7, #12
 8000e7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e82:	2202      	movs	r2, #2
 8000e84:	480b      	ldr	r0, [pc, #44]	; (8000eb4 <ST7735_FillRectangle+0xe0>)
 8000e86:	f001 fc57 	bl	8002738 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000e8a:	88fb      	ldrh	r3, [r7, #6]
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	80fb      	strh	r3, [r7, #6]
 8000e90:	88fb      	ldrh	r3, [r7, #6]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d1f1      	bne.n	8000e7a <ST7735_FillRectangle+0xa6>
    for(y = h; y > 0; y--) {
 8000e96:	88bb      	ldrh	r3, [r7, #4]
 8000e98:	3b01      	subs	r3, #1
 8000e9a:	80bb      	strh	r3, [r7, #4]
 8000e9c:	88bb      	ldrh	r3, [r7, #4]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d1e8      	bne.n	8000e74 <ST7735_FillRectangle+0xa0>
        }
    }

    ST7735_Unselect();
 8000ea2:	f7ff fdd5 	bl	8000a50 <ST7735_Unselect>
 8000ea6:	e000      	b.n	8000eaa <ST7735_FillRectangle+0xd6>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000ea8:	bf00      	nop
}
 8000eaa:	3714      	adds	r7, #20
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd90      	pop	{r4, r7, pc}
 8000eb0:	40010800 	.word	0x40010800
 8000eb4:	20000090 	.word	0x20000090

08000eb8 <ST7735_FillScreen>:

    free(line);
    ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af02      	add	r7, sp, #8
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8000ec2:	88fb      	ldrh	r3, [r7, #6]
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	2380      	movs	r3, #128	; 0x80
 8000ec8:	2280      	movs	r2, #128	; 0x80
 8000eca:	2100      	movs	r1, #0
 8000ecc:	2000      	movs	r0, #0
 8000ece:	f7ff ff81 	bl	8000dd4 <ST7735_FillRectangle>
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ee2:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <HAL_MspInit+0x5c>)
 8000ee4:	699b      	ldr	r3, [r3, #24]
 8000ee6:	4a14      	ldr	r2, [pc, #80]	; (8000f38 <HAL_MspInit+0x5c>)
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	6193      	str	r3, [r2, #24]
 8000eee:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <HAL_MspInit+0x5c>)
 8000ef0:	699b      	ldr	r3, [r3, #24]
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000efa:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <HAL_MspInit+0x5c>)
 8000efc:	69db      	ldr	r3, [r3, #28]
 8000efe:	4a0e      	ldr	r2, [pc, #56]	; (8000f38 <HAL_MspInit+0x5c>)
 8000f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f04:	61d3      	str	r3, [r2, #28]
 8000f06:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <HAL_MspInit+0x5c>)
 8000f08:	69db      	ldr	r3, [r3, #28]
 8000f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f12:	4b0a      	ldr	r3, [pc, #40]	; (8000f3c <HAL_MspInit+0x60>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <HAL_MspInit+0x60>)
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	3714      	adds	r7, #20
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	40010000 	.word	0x40010000

08000f40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b088      	sub	sp, #32
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 0310 	add.w	r3, r7, #16
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a15      	ldr	r2, [pc, #84]	; (8000fb0 <HAL_SPI_MspInit+0x70>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d123      	bne.n	8000fa8 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f60:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <HAL_SPI_MspInit+0x74>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	4a13      	ldr	r2, [pc, #76]	; (8000fb4 <HAL_SPI_MspInit+0x74>)
 8000f66:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f6a:	6193      	str	r3, [r2, #24]
 8000f6c:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <HAL_SPI_MspInit+0x74>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f78:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <HAL_SPI_MspInit+0x74>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	4a0d      	ldr	r2, [pc, #52]	; (8000fb4 <HAL_SPI_MspInit+0x74>)
 8000f7e:	f043 0304 	orr.w	r3, r3, #4
 8000f82:	6193      	str	r3, [r2, #24]
 8000f84:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <HAL_SPI_MspInit+0x74>)
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	f003 0304 	and.w	r3, r3, #4
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000f90:	23a0      	movs	r3, #160	; 0xa0
 8000f92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	2302      	movs	r3, #2
 8000f96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9c:	f107 0310 	add.w	r3, r7, #16
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <HAL_SPI_MspInit+0x78>)
 8000fa4:	f000 fd66 	bl	8001a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000fa8:	bf00      	nop
 8000faa:	3720      	adds	r7, #32
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40013000 	.word	0x40013000
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	40010800 	.word	0x40010800

08000fbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a11      	ldr	r2, [pc, #68]	; (8001010 <HAL_TIM_Base_MspInit+0x54>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d11b      	bne.n	8001006 <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fce:	4b11      	ldr	r3, [pc, #68]	; (8001014 <HAL_TIM_Base_MspInit+0x58>)
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	4a10      	ldr	r2, [pc, #64]	; (8001014 <HAL_TIM_Base_MspInit+0x58>)
 8000fd4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fd8:	6193      	str	r3, [r2, #24]
 8000fda:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <HAL_TIM_Base_MspInit+0x58>)
 8000fdc:	699b      	ldr	r3, [r3, #24]
 8000fde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2100      	movs	r1, #0
 8000fea:	2018      	movs	r0, #24
 8000fec:	f000 fb1d 	bl	800162a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8000ff0:	2018      	movs	r0, #24
 8000ff2:	f000 fb36 	bl	8001662 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	2019      	movs	r0, #25
 8000ffc:	f000 fb15 	bl	800162a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001000:	2019      	movs	r0, #25
 8001002:	f000 fb2e 	bl	8001662 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001006:	bf00      	nop
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40012c00 	.word	0x40012c00
 8001014:	40021000 	.word	0x40021000

08001018 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08a      	sub	sp, #40	; 0x28
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 0318 	add.w	r3, r7, #24
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a4b      	ldr	r2, [pc, #300]	; (8001160 <HAL_UART_MspInit+0x148>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d15a      	bne.n	80010ee <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001038:	4b4a      	ldr	r3, [pc, #296]	; (8001164 <HAL_UART_MspInit+0x14c>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	4a49      	ldr	r2, [pc, #292]	; (8001164 <HAL_UART_MspInit+0x14c>)
 800103e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001042:	6193      	str	r3, [r2, #24]
 8001044:	4b47      	ldr	r3, [pc, #284]	; (8001164 <HAL_UART_MspInit+0x14c>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800104c:	617b      	str	r3, [r7, #20]
 800104e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001050:	4b44      	ldr	r3, [pc, #272]	; (8001164 <HAL_UART_MspInit+0x14c>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	4a43      	ldr	r2, [pc, #268]	; (8001164 <HAL_UART_MspInit+0x14c>)
 8001056:	f043 0304 	orr.w	r3, r3, #4
 800105a:	6193      	str	r3, [r2, #24]
 800105c:	4b41      	ldr	r3, [pc, #260]	; (8001164 <HAL_UART_MspInit+0x14c>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	f003 0304 	and.w	r3, r3, #4
 8001064:	613b      	str	r3, [r7, #16]
 8001066:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001068:	f44f 7300 	mov.w	r3, #512	; 0x200
 800106c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106e:	2302      	movs	r3, #2
 8001070:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001072:	2303      	movs	r3, #3
 8001074:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001076:	f107 0318 	add.w	r3, r7, #24
 800107a:	4619      	mov	r1, r3
 800107c:	483a      	ldr	r0, [pc, #232]	; (8001168 <HAL_UART_MspInit+0x150>)
 800107e:	f000 fcf9 	bl	8001a74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001082:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001086:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001088:	2300      	movs	r3, #0
 800108a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001090:	f107 0318 	add.w	r3, r7, #24
 8001094:	4619      	mov	r1, r3
 8001096:	4834      	ldr	r0, [pc, #208]	; (8001168 <HAL_UART_MspInit+0x150>)
 8001098:	f000 fcec 	bl	8001a74 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800109c:	4b33      	ldr	r3, [pc, #204]	; (800116c <HAL_UART_MspInit+0x154>)
 800109e:	4a34      	ldr	r2, [pc, #208]	; (8001170 <HAL_UART_MspInit+0x158>)
 80010a0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010a2:	4b32      	ldr	r3, [pc, #200]	; (800116c <HAL_UART_MspInit+0x154>)
 80010a4:	2210      	movs	r2, #16
 80010a6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010a8:	4b30      	ldr	r3, [pc, #192]	; (800116c <HAL_UART_MspInit+0x154>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010ae:	4b2f      	ldr	r3, [pc, #188]	; (800116c <HAL_UART_MspInit+0x154>)
 80010b0:	2280      	movs	r2, #128	; 0x80
 80010b2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010b4:	4b2d      	ldr	r3, [pc, #180]	; (800116c <HAL_UART_MspInit+0x154>)
 80010b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010ba:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80010bc:	4b2b      	ldr	r3, [pc, #172]	; (800116c <HAL_UART_MspInit+0x154>)
 80010be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010c2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80010c4:	4b29      	ldr	r3, [pc, #164]	; (800116c <HAL_UART_MspInit+0x154>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010ca:	4b28      	ldr	r3, [pc, #160]	; (800116c <HAL_UART_MspInit+0x154>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80010d0:	4826      	ldr	r0, [pc, #152]	; (800116c <HAL_UART_MspInit+0x154>)
 80010d2:	f000 fae1 	bl	8001698 <HAL_DMA_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 80010dc:	f7ff fca6 	bl	8000a2c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a22      	ldr	r2, [pc, #136]	; (800116c <HAL_UART_MspInit+0x154>)
 80010e4:	639a      	str	r2, [r3, #56]	; 0x38
 80010e6:	4a21      	ldr	r2, [pc, #132]	; (800116c <HAL_UART_MspInit+0x154>)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010ec:	e034      	b.n	8001158 <HAL_UART_MspInit+0x140>
  else if(huart->Instance==USART2)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a20      	ldr	r2, [pc, #128]	; (8001174 <HAL_UART_MspInit+0x15c>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d12f      	bne.n	8001158 <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART2_CLK_ENABLE();
 80010f8:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <HAL_UART_MspInit+0x14c>)
 80010fa:	69db      	ldr	r3, [r3, #28]
 80010fc:	4a19      	ldr	r2, [pc, #100]	; (8001164 <HAL_UART_MspInit+0x14c>)
 80010fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001102:	61d3      	str	r3, [r2, #28]
 8001104:	4b17      	ldr	r3, [pc, #92]	; (8001164 <HAL_UART_MspInit+0x14c>)
 8001106:	69db      	ldr	r3, [r3, #28]
 8001108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001110:	4b14      	ldr	r3, [pc, #80]	; (8001164 <HAL_UART_MspInit+0x14c>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	4a13      	ldr	r2, [pc, #76]	; (8001164 <HAL_UART_MspInit+0x14c>)
 8001116:	f043 0304 	orr.w	r3, r3, #4
 800111a:	6193      	str	r3, [r2, #24]
 800111c:	4b11      	ldr	r3, [pc, #68]	; (8001164 <HAL_UART_MspInit+0x14c>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	f003 0304 	and.w	r3, r3, #4
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001128:	2304      	movs	r3, #4
 800112a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112c:	2302      	movs	r3, #2
 800112e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001130:	2303      	movs	r3, #3
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001134:	f107 0318 	add.w	r3, r7, #24
 8001138:	4619      	mov	r1, r3
 800113a:	480b      	ldr	r0, [pc, #44]	; (8001168 <HAL_UART_MspInit+0x150>)
 800113c:	f000 fc9a 	bl	8001a74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001140:	2308      	movs	r3, #8
 8001142:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001144:	2300      	movs	r3, #0
 8001146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114c:	f107 0318 	add.w	r3, r7, #24
 8001150:	4619      	mov	r1, r3
 8001152:	4805      	ldr	r0, [pc, #20]	; (8001168 <HAL_UART_MspInit+0x150>)
 8001154:	f000 fc8e 	bl	8001a74 <HAL_GPIO_Init>
}
 8001158:	bf00      	nop
 800115a:	3728      	adds	r7, #40	; 0x28
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40013800 	.word	0x40013800
 8001164:	40021000 	.word	0x40021000
 8001168:	40010800 	.word	0x40010800
 800116c:	200001c0 	.word	0x200001c0
 8001170:	40020044 	.word	0x40020044
 8001174:	40004400 	.word	0x40004400

08001178 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800117c:	e7fe      	b.n	800117c <NMI_Handler+0x4>

0800117e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001182:	e7fe      	b.n	8001182 <HardFault_Handler+0x4>

08001184 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001188:	e7fe      	b.n	8001188 <MemManage_Handler+0x4>

0800118a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800118e:	e7fe      	b.n	800118e <BusFault_Handler+0x4>

08001190 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001194:	e7fe      	b.n	8001194 <UsageFault_Handler+0x4>

08001196 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr

080011a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr

080011ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr

080011ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011be:	f000 f91d 	bl	80013fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S00_Pin);
 80011ca:	2001      	movs	r0, #1
 80011cc:	f000 fe08 	bl	8001de0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S01_Pin);
 80011d8:	2002      	movs	r0, #2
 80011da:	f000 fe01 	bl	8001de0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S02_Pin);
 80011e6:	2004      	movs	r0, #4
 80011e8:	f000 fdfa 	bl	8001de0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S03_Pin);
 80011f4:	2008      	movs	r0, #8
 80011f6:	f000 fdf3 	bl	8001de0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}

080011fe <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S04_Pin);
 8001202:	2010      	movs	r0, #16
 8001204:	f000 fdec 	bl	8001de0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}

0800120c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001210:	4802      	ldr	r0, [pc, #8]	; (800121c <DMA1_Channel4_IRQHandler+0x10>)
 8001212:	f000 fafb 	bl	800180c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	200001c0 	.word	0x200001c0

08001220 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S05_Pin);
 8001224:	2020      	movs	r0, #32
 8001226:	f000 fddb 	bl	8001de0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S06_Pin);
 800122a:	2040      	movs	r0, #64	; 0x40
 800122c:	f000 fdd8 	bl	8001de0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S07_Pin);
 8001230:	2080      	movs	r0, #128	; 0x80
 8001232:	f000 fdd5 	bl	8001de0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S08_Pin);
 8001236:	f44f 7080 	mov.w	r0, #256	; 0x100
 800123a:	f000 fdd1 	bl	8001de0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S09_Pin);
 800123e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001242:	f000 fdcd 	bl	8001de0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001250:	4802      	ldr	r0, [pc, #8]	; (800125c <TIM1_BRK_IRQHandler+0x10>)
 8001252:	f001 fcfd 	bl	8002c50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	200000e8 	.word	0x200000e8

08001260 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001264:	4802      	ldr	r0, [pc, #8]	; (8001270 <TIM1_UP_IRQHandler+0x10>)
 8001266:	f001 fcf3 	bl	8002c50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	200000e8 	.word	0x200000e8

08001274 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S10_Pin);
 8001278:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800127c:	f000 fdb0 	bl	8001de0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S11_Pin);
 8001280:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001284:	f000 fdac 	bl	8001de0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S12_Pin);
 8001288:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800128c:	f000 fda8 	bl	8001de0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S13_Pin);
 8001290:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001294:	f000 fda4 	bl	8001de0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S14_Pin);
 8001298:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800129c:	f000 fda0 	bl	8001de0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S15_Pin);
 80012a0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80012a4:	f000 fd9c 	bl	8001de0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}

080012ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012b4:	4a14      	ldr	r2, [pc, #80]	; (8001308 <_sbrk+0x5c>)
 80012b6:	4b15      	ldr	r3, [pc, #84]	; (800130c <_sbrk+0x60>)
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012c0:	4b13      	ldr	r3, [pc, #76]	; (8001310 <_sbrk+0x64>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d102      	bne.n	80012ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012c8:	4b11      	ldr	r3, [pc, #68]	; (8001310 <_sbrk+0x64>)
 80012ca:	4a12      	ldr	r2, [pc, #72]	; (8001314 <_sbrk+0x68>)
 80012cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ce:	4b10      	ldr	r3, [pc, #64]	; (8001310 <_sbrk+0x64>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4413      	add	r3, r2
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d207      	bcs.n	80012ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012dc:	f002 fb90 	bl	8003a00 <__errno>
 80012e0:	4603      	mov	r3, r0
 80012e2:	220c      	movs	r2, #12
 80012e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012ea:	e009      	b.n	8001300 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012ec:	4b08      	ldr	r3, [pc, #32]	; (8001310 <_sbrk+0x64>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012f2:	4b07      	ldr	r3, [pc, #28]	; (8001310 <_sbrk+0x64>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4413      	add	r3, r2
 80012fa:	4a05      	ldr	r2, [pc, #20]	; (8001310 <_sbrk+0x64>)
 80012fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012fe:	68fb      	ldr	r3, [r7, #12]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20005000 	.word	0x20005000
 800130c:	00000400 	.word	0x00000400
 8001310:	20000664 	.word	0x20000664
 8001314:	200007b8 	.word	0x200007b8

08001318 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr

08001324 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001324:	f7ff fff8 	bl	8001318 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001328:	480b      	ldr	r0, [pc, #44]	; (8001358 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800132a:	490c      	ldr	r1, [pc, #48]	; (800135c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800132c:	4a0c      	ldr	r2, [pc, #48]	; (8001360 <LoopFillZerobss+0x16>)
  movs r3, #0
 800132e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001330:	e002      	b.n	8001338 <LoopCopyDataInit>

08001332 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001332:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001334:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001336:	3304      	adds	r3, #4

08001338 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001338:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800133a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800133c:	d3f9      	bcc.n	8001332 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800133e:	4a09      	ldr	r2, [pc, #36]	; (8001364 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001340:	4c09      	ldr	r4, [pc, #36]	; (8001368 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001342:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001344:	e001      	b.n	800134a <LoopFillZerobss>

08001346 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001346:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001348:	3204      	adds	r2, #4

0800134a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800134a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800134c:	d3fb      	bcc.n	8001346 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800134e:	f002 fb5d 	bl	8003a0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001352:	f7ff f897 	bl	8000484 <main>
  bx lr
 8001356:	4770      	bx	lr
  ldr r0, =_sdata
 8001358:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800135c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001360:	08005770 	.word	0x08005770
  ldr r2, =_sbss
 8001364:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001368:	200007b4 	.word	0x200007b4

0800136c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800136c:	e7fe      	b.n	800136c <ADC1_2_IRQHandler>
	...

08001370 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001374:	4b08      	ldr	r3, [pc, #32]	; (8001398 <HAL_Init+0x28>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a07      	ldr	r2, [pc, #28]	; (8001398 <HAL_Init+0x28>)
 800137a:	f043 0310 	orr.w	r3, r3, #16
 800137e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001380:	2003      	movs	r0, #3
 8001382:	f000 f947 	bl	8001614 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001386:	200f      	movs	r0, #15
 8001388:	f000 f808 	bl	800139c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800138c:	f7ff fda6 	bl	8000edc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40022000 	.word	0x40022000

0800139c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013a4:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <HAL_InitTick+0x54>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <HAL_InitTick+0x58>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	4619      	mov	r1, r3
 80013ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ba:	4618      	mov	r0, r3
 80013bc:	f000 f95f 	bl	800167e <HAL_SYSTICK_Config>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e00e      	b.n	80013e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2b0f      	cmp	r3, #15
 80013ce:	d80a      	bhi.n	80013e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013d0:	2200      	movs	r2, #0
 80013d2:	6879      	ldr	r1, [r7, #4]
 80013d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013d8:	f000 f927 	bl	800162a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013dc:	4a06      	ldr	r2, [pc, #24]	; (80013f8 <HAL_InitTick+0x5c>)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013e2:	2300      	movs	r3, #0
 80013e4:	e000      	b.n	80013e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000018 	.word	0x20000018
 80013f4:	20000020 	.word	0x20000020
 80013f8:	2000001c 	.word	0x2000001c

080013fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001400:	4b05      	ldr	r3, [pc, #20]	; (8001418 <HAL_IncTick+0x1c>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	461a      	mov	r2, r3
 8001406:	4b05      	ldr	r3, [pc, #20]	; (800141c <HAL_IncTick+0x20>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4413      	add	r3, r2
 800140c:	4a03      	ldr	r2, [pc, #12]	; (800141c <HAL_IncTick+0x20>)
 800140e:	6013      	str	r3, [r2, #0]
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr
 8001418:	20000020 	.word	0x20000020
 800141c:	20000668 	.word	0x20000668

08001420 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  return uwTick;
 8001424:	4b02      	ldr	r3, [pc, #8]	; (8001430 <HAL_GetTick+0x10>)
 8001426:	681b      	ldr	r3, [r3, #0]
}
 8001428:	4618      	mov	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr
 8001430:	20000668 	.word	0x20000668

08001434 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800143c:	f7ff fff0 	bl	8001420 <HAL_GetTick>
 8001440:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800144c:	d005      	beq.n	800145a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800144e:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <HAL_Delay+0x44>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	461a      	mov	r2, r3
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	4413      	add	r3, r2
 8001458:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800145a:	bf00      	nop
 800145c:	f7ff ffe0 	bl	8001420 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	429a      	cmp	r2, r3
 800146a:	d8f7      	bhi.n	800145c <HAL_Delay+0x28>
  {
  }
}
 800146c:	bf00      	nop
 800146e:	bf00      	nop
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000020 	.word	0x20000020

0800147c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <__NVIC_SetPriorityGrouping+0x44>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001492:	68ba      	ldr	r2, [r7, #8]
 8001494:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001498:	4013      	ands	r3, r2
 800149a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ae:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <__NVIC_SetPriorityGrouping+0x44>)
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	60d3      	str	r3, [r2, #12]
}
 80014b4:	bf00      	nop
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bc80      	pop	{r7}
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c8:	4b04      	ldr	r3, [pc, #16]	; (80014dc <__NVIC_GetPriorityGrouping+0x18>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	0a1b      	lsrs	r3, r3, #8
 80014ce:	f003 0307 	and.w	r3, r3, #7
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	db0b      	blt.n	800150a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	f003 021f 	and.w	r2, r3, #31
 80014f8:	4906      	ldr	r1, [pc, #24]	; (8001514 <__NVIC_EnableIRQ+0x34>)
 80014fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fe:	095b      	lsrs	r3, r3, #5
 8001500:	2001      	movs	r0, #1
 8001502:	fa00 f202 	lsl.w	r2, r0, r2
 8001506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr
 8001514:	e000e100 	.word	0xe000e100

08001518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	6039      	str	r1, [r7, #0]
 8001522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001528:	2b00      	cmp	r3, #0
 800152a:	db0a      	blt.n	8001542 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	b2da      	uxtb	r2, r3
 8001530:	490c      	ldr	r1, [pc, #48]	; (8001564 <__NVIC_SetPriority+0x4c>)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	0112      	lsls	r2, r2, #4
 8001538:	b2d2      	uxtb	r2, r2
 800153a:	440b      	add	r3, r1
 800153c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001540:	e00a      	b.n	8001558 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	b2da      	uxtb	r2, r3
 8001546:	4908      	ldr	r1, [pc, #32]	; (8001568 <__NVIC_SetPriority+0x50>)
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	f003 030f 	and.w	r3, r3, #15
 800154e:	3b04      	subs	r3, #4
 8001550:	0112      	lsls	r2, r2, #4
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	440b      	add	r3, r1
 8001556:	761a      	strb	r2, [r3, #24]
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	bc80      	pop	{r7}
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	e000e100 	.word	0xe000e100
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800156c:	b480      	push	{r7}
 800156e:	b089      	sub	sp, #36	; 0x24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	f1c3 0307 	rsb	r3, r3, #7
 8001586:	2b04      	cmp	r3, #4
 8001588:	bf28      	it	cs
 800158a:	2304      	movcs	r3, #4
 800158c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3304      	adds	r3, #4
 8001592:	2b06      	cmp	r3, #6
 8001594:	d902      	bls.n	800159c <NVIC_EncodePriority+0x30>
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3b03      	subs	r3, #3
 800159a:	e000      	b.n	800159e <NVIC_EncodePriority+0x32>
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43da      	mvns	r2, r3
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	401a      	ands	r2, r3
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	fa01 f303 	lsl.w	r3, r1, r3
 80015be:	43d9      	mvns	r1, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c4:	4313      	orrs	r3, r2
         );
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3724      	adds	r7, #36	; 0x24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr

080015d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3b01      	subs	r3, #1
 80015dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015e0:	d301      	bcc.n	80015e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015e2:	2301      	movs	r3, #1
 80015e4:	e00f      	b.n	8001606 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015e6:	4a0a      	ldr	r2, [pc, #40]	; (8001610 <SysTick_Config+0x40>)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3b01      	subs	r3, #1
 80015ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ee:	210f      	movs	r1, #15
 80015f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015f4:	f7ff ff90 	bl	8001518 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f8:	4b05      	ldr	r3, [pc, #20]	; (8001610 <SysTick_Config+0x40>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015fe:	4b04      	ldr	r3, [pc, #16]	; (8001610 <SysTick_Config+0x40>)
 8001600:	2207      	movs	r2, #7
 8001602:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	e000e010 	.word	0xe000e010

08001614 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff ff2d 	bl	800147c <__NVIC_SetPriorityGrouping>
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800162a:	b580      	push	{r7, lr}
 800162c:	b086      	sub	sp, #24
 800162e:	af00      	add	r7, sp, #0
 8001630:	4603      	mov	r3, r0
 8001632:	60b9      	str	r1, [r7, #8]
 8001634:	607a      	str	r2, [r7, #4]
 8001636:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800163c:	f7ff ff42 	bl	80014c4 <__NVIC_GetPriorityGrouping>
 8001640:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	68b9      	ldr	r1, [r7, #8]
 8001646:	6978      	ldr	r0, [r7, #20]
 8001648:	f7ff ff90 	bl	800156c <NVIC_EncodePriority>
 800164c:	4602      	mov	r2, r0
 800164e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001652:	4611      	mov	r1, r2
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff ff5f 	bl	8001518 <__NVIC_SetPriority>
}
 800165a:	bf00      	nop
 800165c:	3718      	adds	r7, #24
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b082      	sub	sp, #8
 8001666:	af00      	add	r7, sp, #0
 8001668:	4603      	mov	r3, r0
 800166a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800166c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff ff35 	bl	80014e0 <__NVIC_EnableIRQ>
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b082      	sub	sp, #8
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff ffa2 	bl	80015d0 <SysTick_Config>
 800168c:	4603      	mov	r3, r0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
	...

08001698 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016a0:	2300      	movs	r3, #0
 80016a2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d101      	bne.n	80016ae <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e043      	b.n	8001736 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	461a      	mov	r2, r3
 80016b4:	4b22      	ldr	r3, [pc, #136]	; (8001740 <HAL_DMA_Init+0xa8>)
 80016b6:	4413      	add	r3, r2
 80016b8:	4a22      	ldr	r2, [pc, #136]	; (8001744 <HAL_DMA_Init+0xac>)
 80016ba:	fba2 2303 	umull	r2, r3, r2, r3
 80016be:	091b      	lsrs	r3, r3, #4
 80016c0:	009a      	lsls	r2, r3, #2
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a1f      	ldr	r2, [pc, #124]	; (8001748 <HAL_DMA_Init+0xb0>)
 80016ca:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2202      	movs	r2, #2
 80016d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80016e2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80016e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80016f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001708:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	69db      	ldr	r3, [r3, #28]
 800170e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001710:	68fa      	ldr	r2, [r7, #12]
 8001712:	4313      	orrs	r3, r2
 8001714:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2201      	movs	r2, #1
 8001728:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3714      	adds	r7, #20
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr
 8001740:	bffdfff8 	.word	0xbffdfff8
 8001744:	cccccccd 	.word	0xcccccccd
 8001748:	40020000 	.word	0x40020000

0800174c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
 8001758:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800175a:	2300      	movs	r3, #0
 800175c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d101      	bne.n	800176c <HAL_DMA_Start_IT+0x20>
 8001768:	2302      	movs	r3, #2
 800176a:	e04b      	b.n	8001804 <HAL_DMA_Start_IT+0xb8>
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2201      	movs	r2, #1
 8001770:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800177a:	b2db      	uxtb	r3, r3
 800177c:	2b01      	cmp	r3, #1
 800177e:	d13a      	bne.n	80017f6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2202      	movs	r2, #2
 8001784:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2200      	movs	r2, #0
 800178c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f022 0201 	bic.w	r2, r2, #1
 800179c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	68b9      	ldr	r1, [r7, #8]
 80017a4:	68f8      	ldr	r0, [r7, #12]
 80017a6:	f000 f937 	bl	8001a18 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d008      	beq.n	80017c4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f042 020e 	orr.w	r2, r2, #14
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	e00f      	b.n	80017e4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f022 0204 	bic.w	r2, r2, #4
 80017d2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f042 020a 	orr.w	r2, r2, #10
 80017e2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f042 0201 	orr.w	r2, r2, #1
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	e005      	b.n	8001802 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80017fe:	2302      	movs	r3, #2
 8001800:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001802:	7dfb      	ldrb	r3, [r7, #23]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3718      	adds	r7, #24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001828:	2204      	movs	r2, #4
 800182a:	409a      	lsls	r2, r3
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	4013      	ands	r3, r2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d04f      	beq.n	80018d4 <HAL_DMA_IRQHandler+0xc8>
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	f003 0304 	and.w	r3, r3, #4
 800183a:	2b00      	cmp	r3, #0
 800183c:	d04a      	beq.n	80018d4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0320 	and.w	r3, r3, #32
 8001848:	2b00      	cmp	r3, #0
 800184a:	d107      	bne.n	800185c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f022 0204 	bic.w	r2, r2, #4
 800185a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a66      	ldr	r2, [pc, #408]	; (80019fc <HAL_DMA_IRQHandler+0x1f0>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d029      	beq.n	80018ba <HAL_DMA_IRQHandler+0xae>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a65      	ldr	r2, [pc, #404]	; (8001a00 <HAL_DMA_IRQHandler+0x1f4>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d022      	beq.n	80018b6 <HAL_DMA_IRQHandler+0xaa>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a63      	ldr	r2, [pc, #396]	; (8001a04 <HAL_DMA_IRQHandler+0x1f8>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d01a      	beq.n	80018b0 <HAL_DMA_IRQHandler+0xa4>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a62      	ldr	r2, [pc, #392]	; (8001a08 <HAL_DMA_IRQHandler+0x1fc>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d012      	beq.n	80018aa <HAL_DMA_IRQHandler+0x9e>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a60      	ldr	r2, [pc, #384]	; (8001a0c <HAL_DMA_IRQHandler+0x200>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d00a      	beq.n	80018a4 <HAL_DMA_IRQHandler+0x98>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a5f      	ldr	r2, [pc, #380]	; (8001a10 <HAL_DMA_IRQHandler+0x204>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d102      	bne.n	800189e <HAL_DMA_IRQHandler+0x92>
 8001898:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800189c:	e00e      	b.n	80018bc <HAL_DMA_IRQHandler+0xb0>
 800189e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80018a2:	e00b      	b.n	80018bc <HAL_DMA_IRQHandler+0xb0>
 80018a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80018a8:	e008      	b.n	80018bc <HAL_DMA_IRQHandler+0xb0>
 80018aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018ae:	e005      	b.n	80018bc <HAL_DMA_IRQHandler+0xb0>
 80018b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018b4:	e002      	b.n	80018bc <HAL_DMA_IRQHandler+0xb0>
 80018b6:	2340      	movs	r3, #64	; 0x40
 80018b8:	e000      	b.n	80018bc <HAL_DMA_IRQHandler+0xb0>
 80018ba:	2304      	movs	r3, #4
 80018bc:	4a55      	ldr	r2, [pc, #340]	; (8001a14 <HAL_DMA_IRQHandler+0x208>)
 80018be:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f000 8094 	beq.w	80019f2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80018d2:	e08e      	b.n	80019f2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d8:	2202      	movs	r2, #2
 80018da:	409a      	lsls	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4013      	ands	r3, r2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d056      	beq.n	8001992 <HAL_DMA_IRQHandler+0x186>
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d051      	beq.n	8001992 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0320 	and.w	r3, r3, #32
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d10b      	bne.n	8001914 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f022 020a 	bic.w	r2, r2, #10
 800190a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a38      	ldr	r2, [pc, #224]	; (80019fc <HAL_DMA_IRQHandler+0x1f0>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d029      	beq.n	8001972 <HAL_DMA_IRQHandler+0x166>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a37      	ldr	r2, [pc, #220]	; (8001a00 <HAL_DMA_IRQHandler+0x1f4>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d022      	beq.n	800196e <HAL_DMA_IRQHandler+0x162>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a35      	ldr	r2, [pc, #212]	; (8001a04 <HAL_DMA_IRQHandler+0x1f8>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d01a      	beq.n	8001968 <HAL_DMA_IRQHandler+0x15c>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a34      	ldr	r2, [pc, #208]	; (8001a08 <HAL_DMA_IRQHandler+0x1fc>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d012      	beq.n	8001962 <HAL_DMA_IRQHandler+0x156>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a32      	ldr	r2, [pc, #200]	; (8001a0c <HAL_DMA_IRQHandler+0x200>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d00a      	beq.n	800195c <HAL_DMA_IRQHandler+0x150>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a31      	ldr	r2, [pc, #196]	; (8001a10 <HAL_DMA_IRQHandler+0x204>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d102      	bne.n	8001956 <HAL_DMA_IRQHandler+0x14a>
 8001950:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001954:	e00e      	b.n	8001974 <HAL_DMA_IRQHandler+0x168>
 8001956:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800195a:	e00b      	b.n	8001974 <HAL_DMA_IRQHandler+0x168>
 800195c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001960:	e008      	b.n	8001974 <HAL_DMA_IRQHandler+0x168>
 8001962:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001966:	e005      	b.n	8001974 <HAL_DMA_IRQHandler+0x168>
 8001968:	f44f 7300 	mov.w	r3, #512	; 0x200
 800196c:	e002      	b.n	8001974 <HAL_DMA_IRQHandler+0x168>
 800196e:	2320      	movs	r3, #32
 8001970:	e000      	b.n	8001974 <HAL_DMA_IRQHandler+0x168>
 8001972:	2302      	movs	r3, #2
 8001974:	4a27      	ldr	r2, [pc, #156]	; (8001a14 <HAL_DMA_IRQHandler+0x208>)
 8001976:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001984:	2b00      	cmp	r3, #0
 8001986:	d034      	beq.n	80019f2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001990:	e02f      	b.n	80019f2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	2208      	movs	r2, #8
 8001998:	409a      	lsls	r2, r3
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	4013      	ands	r3, r2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d028      	beq.n	80019f4 <HAL_DMA_IRQHandler+0x1e8>
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	f003 0308 	and.w	r3, r3, #8
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d023      	beq.n	80019f4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f022 020e 	bic.w	r2, r2, #14
 80019ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019c4:	2101      	movs	r1, #1
 80019c6:	fa01 f202 	lsl.w	r2, r1, r2
 80019ca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2201      	movs	r2, #1
 80019d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d004      	beq.n	80019f4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	4798      	blx	r3
    }
  }
  return;
 80019f2:	bf00      	nop
 80019f4:	bf00      	nop
}
 80019f6:	3710      	adds	r7, #16
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40020008 	.word	0x40020008
 8001a00:	4002001c 	.word	0x4002001c
 8001a04:	40020030 	.word	0x40020030
 8001a08:	40020044 	.word	0x40020044
 8001a0c:	40020058 	.word	0x40020058
 8001a10:	4002006c 	.word	0x4002006c
 8001a14:	40020000 	.word	0x40020000

08001a18 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
 8001a24:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a2e:	2101      	movs	r1, #1
 8001a30:	fa01 f202 	lsl.w	r2, r1, r2
 8001a34:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b10      	cmp	r3, #16
 8001a44:	d108      	bne.n	8001a58 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	68ba      	ldr	r2, [r7, #8]
 8001a54:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001a56:	e007      	b.n	8001a68 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	68ba      	ldr	r2, [r7, #8]
 8001a5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	60da      	str	r2, [r3, #12]
}
 8001a68:	bf00      	nop
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bc80      	pop	{r7}
 8001a70:	4770      	bx	lr
	...

08001a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b08b      	sub	sp, #44	; 0x2c
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a82:	2300      	movs	r3, #0
 8001a84:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a86:	e169      	b.n	8001d5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a88:	2201      	movs	r2, #1
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	69fa      	ldr	r2, [r7, #28]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	f040 8158 	bne.w	8001d56 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	4a9a      	ldr	r2, [pc, #616]	; (8001d14 <HAL_GPIO_Init+0x2a0>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d05e      	beq.n	8001b6e <HAL_GPIO_Init+0xfa>
 8001ab0:	4a98      	ldr	r2, [pc, #608]	; (8001d14 <HAL_GPIO_Init+0x2a0>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d875      	bhi.n	8001ba2 <HAL_GPIO_Init+0x12e>
 8001ab6:	4a98      	ldr	r2, [pc, #608]	; (8001d18 <HAL_GPIO_Init+0x2a4>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d058      	beq.n	8001b6e <HAL_GPIO_Init+0xfa>
 8001abc:	4a96      	ldr	r2, [pc, #600]	; (8001d18 <HAL_GPIO_Init+0x2a4>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d86f      	bhi.n	8001ba2 <HAL_GPIO_Init+0x12e>
 8001ac2:	4a96      	ldr	r2, [pc, #600]	; (8001d1c <HAL_GPIO_Init+0x2a8>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d052      	beq.n	8001b6e <HAL_GPIO_Init+0xfa>
 8001ac8:	4a94      	ldr	r2, [pc, #592]	; (8001d1c <HAL_GPIO_Init+0x2a8>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d869      	bhi.n	8001ba2 <HAL_GPIO_Init+0x12e>
 8001ace:	4a94      	ldr	r2, [pc, #592]	; (8001d20 <HAL_GPIO_Init+0x2ac>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d04c      	beq.n	8001b6e <HAL_GPIO_Init+0xfa>
 8001ad4:	4a92      	ldr	r2, [pc, #584]	; (8001d20 <HAL_GPIO_Init+0x2ac>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d863      	bhi.n	8001ba2 <HAL_GPIO_Init+0x12e>
 8001ada:	4a92      	ldr	r2, [pc, #584]	; (8001d24 <HAL_GPIO_Init+0x2b0>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d046      	beq.n	8001b6e <HAL_GPIO_Init+0xfa>
 8001ae0:	4a90      	ldr	r2, [pc, #576]	; (8001d24 <HAL_GPIO_Init+0x2b0>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d85d      	bhi.n	8001ba2 <HAL_GPIO_Init+0x12e>
 8001ae6:	2b12      	cmp	r3, #18
 8001ae8:	d82a      	bhi.n	8001b40 <HAL_GPIO_Init+0xcc>
 8001aea:	2b12      	cmp	r3, #18
 8001aec:	d859      	bhi.n	8001ba2 <HAL_GPIO_Init+0x12e>
 8001aee:	a201      	add	r2, pc, #4	; (adr r2, 8001af4 <HAL_GPIO_Init+0x80>)
 8001af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001af4:	08001b6f 	.word	0x08001b6f
 8001af8:	08001b49 	.word	0x08001b49
 8001afc:	08001b5b 	.word	0x08001b5b
 8001b00:	08001b9d 	.word	0x08001b9d
 8001b04:	08001ba3 	.word	0x08001ba3
 8001b08:	08001ba3 	.word	0x08001ba3
 8001b0c:	08001ba3 	.word	0x08001ba3
 8001b10:	08001ba3 	.word	0x08001ba3
 8001b14:	08001ba3 	.word	0x08001ba3
 8001b18:	08001ba3 	.word	0x08001ba3
 8001b1c:	08001ba3 	.word	0x08001ba3
 8001b20:	08001ba3 	.word	0x08001ba3
 8001b24:	08001ba3 	.word	0x08001ba3
 8001b28:	08001ba3 	.word	0x08001ba3
 8001b2c:	08001ba3 	.word	0x08001ba3
 8001b30:	08001ba3 	.word	0x08001ba3
 8001b34:	08001ba3 	.word	0x08001ba3
 8001b38:	08001b51 	.word	0x08001b51
 8001b3c:	08001b65 	.word	0x08001b65
 8001b40:	4a79      	ldr	r2, [pc, #484]	; (8001d28 <HAL_GPIO_Init+0x2b4>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d013      	beq.n	8001b6e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b46:	e02c      	b.n	8001ba2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	623b      	str	r3, [r7, #32]
          break;
 8001b4e:	e029      	b.n	8001ba4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	3304      	adds	r3, #4
 8001b56:	623b      	str	r3, [r7, #32]
          break;
 8001b58:	e024      	b.n	8001ba4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	3308      	adds	r3, #8
 8001b60:	623b      	str	r3, [r7, #32]
          break;
 8001b62:	e01f      	b.n	8001ba4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	330c      	adds	r3, #12
 8001b6a:	623b      	str	r3, [r7, #32]
          break;
 8001b6c:	e01a      	b.n	8001ba4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d102      	bne.n	8001b7c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b76:	2304      	movs	r3, #4
 8001b78:	623b      	str	r3, [r7, #32]
          break;
 8001b7a:	e013      	b.n	8001ba4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d105      	bne.n	8001b90 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b84:	2308      	movs	r3, #8
 8001b86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	69fa      	ldr	r2, [r7, #28]
 8001b8c:	611a      	str	r2, [r3, #16]
          break;
 8001b8e:	e009      	b.n	8001ba4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b90:	2308      	movs	r3, #8
 8001b92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69fa      	ldr	r2, [r7, #28]
 8001b98:	615a      	str	r2, [r3, #20]
          break;
 8001b9a:	e003      	b.n	8001ba4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	623b      	str	r3, [r7, #32]
          break;
 8001ba0:	e000      	b.n	8001ba4 <HAL_GPIO_Init+0x130>
          break;
 8001ba2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	2bff      	cmp	r3, #255	; 0xff
 8001ba8:	d801      	bhi.n	8001bae <HAL_GPIO_Init+0x13a>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	e001      	b.n	8001bb2 <HAL_GPIO_Init+0x13e>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	3304      	adds	r3, #4
 8001bb2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	2bff      	cmp	r3, #255	; 0xff
 8001bb8:	d802      	bhi.n	8001bc0 <HAL_GPIO_Init+0x14c>
 8001bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	e002      	b.n	8001bc6 <HAL_GPIO_Init+0x152>
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc2:	3b08      	subs	r3, #8
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	210f      	movs	r1, #15
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	401a      	ands	r2, r3
 8001bd8:	6a39      	ldr	r1, [r7, #32]
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001be0:	431a      	orrs	r2, r3
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f000 80b1 	beq.w	8001d56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bf4:	4b4d      	ldr	r3, [pc, #308]	; (8001d2c <HAL_GPIO_Init+0x2b8>)
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	4a4c      	ldr	r2, [pc, #304]	; (8001d2c <HAL_GPIO_Init+0x2b8>)
 8001bfa:	f043 0301 	orr.w	r3, r3, #1
 8001bfe:	6193      	str	r3, [r2, #24]
 8001c00:	4b4a      	ldr	r3, [pc, #296]	; (8001d2c <HAL_GPIO_Init+0x2b8>)
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c0c:	4a48      	ldr	r2, [pc, #288]	; (8001d30 <HAL_GPIO_Init+0x2bc>)
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c10:	089b      	lsrs	r3, r3, #2
 8001c12:	3302      	adds	r3, #2
 8001c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	220f      	movs	r2, #15
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a40      	ldr	r2, [pc, #256]	; (8001d34 <HAL_GPIO_Init+0x2c0>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d013      	beq.n	8001c60 <HAL_GPIO_Init+0x1ec>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a3f      	ldr	r2, [pc, #252]	; (8001d38 <HAL_GPIO_Init+0x2c4>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d00d      	beq.n	8001c5c <HAL_GPIO_Init+0x1e8>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a3e      	ldr	r2, [pc, #248]	; (8001d3c <HAL_GPIO_Init+0x2c8>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d007      	beq.n	8001c58 <HAL_GPIO_Init+0x1e4>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a3d      	ldr	r2, [pc, #244]	; (8001d40 <HAL_GPIO_Init+0x2cc>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d101      	bne.n	8001c54 <HAL_GPIO_Init+0x1e0>
 8001c50:	2303      	movs	r3, #3
 8001c52:	e006      	b.n	8001c62 <HAL_GPIO_Init+0x1ee>
 8001c54:	2304      	movs	r3, #4
 8001c56:	e004      	b.n	8001c62 <HAL_GPIO_Init+0x1ee>
 8001c58:	2302      	movs	r3, #2
 8001c5a:	e002      	b.n	8001c62 <HAL_GPIO_Init+0x1ee>
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e000      	b.n	8001c62 <HAL_GPIO_Init+0x1ee>
 8001c60:	2300      	movs	r3, #0
 8001c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c64:	f002 0203 	and.w	r2, r2, #3
 8001c68:	0092      	lsls	r2, r2, #2
 8001c6a:	4093      	lsls	r3, r2
 8001c6c:	68fa      	ldr	r2, [r7, #12]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c72:	492f      	ldr	r1, [pc, #188]	; (8001d30 <HAL_GPIO_Init+0x2bc>)
 8001c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c76:	089b      	lsrs	r3, r3, #2
 8001c78:	3302      	adds	r3, #2
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d006      	beq.n	8001c9a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c8c:	4b2d      	ldr	r3, [pc, #180]	; (8001d44 <HAL_GPIO_Init+0x2d0>)
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	492c      	ldr	r1, [pc, #176]	; (8001d44 <HAL_GPIO_Init+0x2d0>)
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	608b      	str	r3, [r1, #8]
 8001c98:	e006      	b.n	8001ca8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c9a:	4b2a      	ldr	r3, [pc, #168]	; (8001d44 <HAL_GPIO_Init+0x2d0>)
 8001c9c:	689a      	ldr	r2, [r3, #8]
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	4928      	ldr	r1, [pc, #160]	; (8001d44 <HAL_GPIO_Init+0x2d0>)
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d006      	beq.n	8001cc2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cb4:	4b23      	ldr	r3, [pc, #140]	; (8001d44 <HAL_GPIO_Init+0x2d0>)
 8001cb6:	68da      	ldr	r2, [r3, #12]
 8001cb8:	4922      	ldr	r1, [pc, #136]	; (8001d44 <HAL_GPIO_Init+0x2d0>)
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	60cb      	str	r3, [r1, #12]
 8001cc0:	e006      	b.n	8001cd0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cc2:	4b20      	ldr	r3, [pc, #128]	; (8001d44 <HAL_GPIO_Init+0x2d0>)
 8001cc4:	68da      	ldr	r2, [r3, #12]
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	491e      	ldr	r1, [pc, #120]	; (8001d44 <HAL_GPIO_Init+0x2d0>)
 8001ccc:	4013      	ands	r3, r2
 8001cce:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d006      	beq.n	8001cea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cdc:	4b19      	ldr	r3, [pc, #100]	; (8001d44 <HAL_GPIO_Init+0x2d0>)
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	4918      	ldr	r1, [pc, #96]	; (8001d44 <HAL_GPIO_Init+0x2d0>)
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	604b      	str	r3, [r1, #4]
 8001ce8:	e006      	b.n	8001cf8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cea:	4b16      	ldr	r3, [pc, #88]	; (8001d44 <HAL_GPIO_Init+0x2d0>)
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	4914      	ldr	r1, [pc, #80]	; (8001d44 <HAL_GPIO_Init+0x2d0>)
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d021      	beq.n	8001d48 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d04:	4b0f      	ldr	r3, [pc, #60]	; (8001d44 <HAL_GPIO_Init+0x2d0>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	490e      	ldr	r1, [pc, #56]	; (8001d44 <HAL_GPIO_Init+0x2d0>)
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	600b      	str	r3, [r1, #0]
 8001d10:	e021      	b.n	8001d56 <HAL_GPIO_Init+0x2e2>
 8001d12:	bf00      	nop
 8001d14:	10320000 	.word	0x10320000
 8001d18:	10310000 	.word	0x10310000
 8001d1c:	10220000 	.word	0x10220000
 8001d20:	10210000 	.word	0x10210000
 8001d24:	10120000 	.word	0x10120000
 8001d28:	10110000 	.word	0x10110000
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	40010000 	.word	0x40010000
 8001d34:	40010800 	.word	0x40010800
 8001d38:	40010c00 	.word	0x40010c00
 8001d3c:	40011000 	.word	0x40011000
 8001d40:	40011400 	.word	0x40011400
 8001d44:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d48:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <HAL_GPIO_Init+0x304>)
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	4909      	ldr	r1, [pc, #36]	; (8001d78 <HAL_GPIO_Init+0x304>)
 8001d52:	4013      	ands	r3, r2
 8001d54:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d58:	3301      	adds	r3, #1
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d62:	fa22 f303 	lsr.w	r3, r2, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f47f ae8e 	bne.w	8001a88 <HAL_GPIO_Init+0x14>
  }
}
 8001d6c:	bf00      	nop
 8001d6e:	bf00      	nop
 8001d70:	372c      	adds	r7, #44	; 0x2c
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bc80      	pop	{r7}
 8001d76:	4770      	bx	lr
 8001d78:	40010400 	.word	0x40010400

08001d7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	460b      	mov	r3, r1
 8001d86:	807b      	strh	r3, [r7, #2]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d8c:	787b      	ldrb	r3, [r7, #1]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d92:	887a      	ldrh	r2, [r7, #2]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d98:	e003      	b.n	8001da2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d9a:	887b      	ldrh	r3, [r7, #2]
 8001d9c:	041a      	lsls	r2, r3, #16
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	611a      	str	r2, [r3, #16]
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bc80      	pop	{r7}
 8001daa:	4770      	bx	lr

08001dac <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	460b      	mov	r3, r1
 8001db6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dbe:	887a      	ldrh	r2, [r7, #2]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	041a      	lsls	r2, r3, #16
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	43d9      	mvns	r1, r3
 8001dca:	887b      	ldrh	r3, [r7, #2]
 8001dcc:	400b      	ands	r3, r1
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	611a      	str	r2, [r3, #16]
}
 8001dd4:	bf00      	nop
 8001dd6:	3714      	adds	r7, #20
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bc80      	pop	{r7}
 8001ddc:	4770      	bx	lr
	...

08001de0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001dea:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dec:	695a      	ldr	r2, [r3, #20]
 8001dee:	88fb      	ldrh	r3, [r7, #6]
 8001df0:	4013      	ands	r3, r2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d006      	beq.n	8001e04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001df6:	4a05      	ldr	r2, [pc, #20]	; (8001e0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001df8:	88fb      	ldrh	r3, [r7, #6]
 8001dfa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001dfc:	88fb      	ldrh	r3, [r7, #6]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe f9e6 	bl	80001d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e04:	bf00      	nop
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40010400 	.word	0x40010400

08001e10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e272      	b.n	8002308 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 8087 	beq.w	8001f3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e30:	4b92      	ldr	r3, [pc, #584]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 030c 	and.w	r3, r3, #12
 8001e38:	2b04      	cmp	r3, #4
 8001e3a:	d00c      	beq.n	8001e56 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e3c:	4b8f      	ldr	r3, [pc, #572]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 030c 	and.w	r3, r3, #12
 8001e44:	2b08      	cmp	r3, #8
 8001e46:	d112      	bne.n	8001e6e <HAL_RCC_OscConfig+0x5e>
 8001e48:	4b8c      	ldr	r3, [pc, #560]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e54:	d10b      	bne.n	8001e6e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e56:	4b89      	ldr	r3, [pc, #548]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d06c      	beq.n	8001f3c <HAL_RCC_OscConfig+0x12c>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d168      	bne.n	8001f3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e24c      	b.n	8002308 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e76:	d106      	bne.n	8001e86 <HAL_RCC_OscConfig+0x76>
 8001e78:	4b80      	ldr	r3, [pc, #512]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a7f      	ldr	r2, [pc, #508]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001e7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e82:	6013      	str	r3, [r2, #0]
 8001e84:	e02e      	b.n	8001ee4 <HAL_RCC_OscConfig+0xd4>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10c      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x98>
 8001e8e:	4b7b      	ldr	r3, [pc, #492]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a7a      	ldr	r2, [pc, #488]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001e94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e98:	6013      	str	r3, [r2, #0]
 8001e9a:	4b78      	ldr	r3, [pc, #480]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a77      	ldr	r2, [pc, #476]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ea4:	6013      	str	r3, [r2, #0]
 8001ea6:	e01d      	b.n	8001ee4 <HAL_RCC_OscConfig+0xd4>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001eb0:	d10c      	bne.n	8001ecc <HAL_RCC_OscConfig+0xbc>
 8001eb2:	4b72      	ldr	r3, [pc, #456]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a71      	ldr	r2, [pc, #452]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ebc:	6013      	str	r3, [r2, #0]
 8001ebe:	4b6f      	ldr	r3, [pc, #444]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a6e      	ldr	r2, [pc, #440]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec8:	6013      	str	r3, [r2, #0]
 8001eca:	e00b      	b.n	8001ee4 <HAL_RCC_OscConfig+0xd4>
 8001ecc:	4b6b      	ldr	r3, [pc, #428]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a6a      	ldr	r2, [pc, #424]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001ed2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ed6:	6013      	str	r3, [r2, #0]
 8001ed8:	4b68      	ldr	r3, [pc, #416]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a67      	ldr	r2, [pc, #412]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001ede:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ee2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d013      	beq.n	8001f14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eec:	f7ff fa98 	bl	8001420 <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ef4:	f7ff fa94 	bl	8001420 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b64      	cmp	r3, #100	; 0x64
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e200      	b.n	8002308 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f06:	4b5d      	ldr	r3, [pc, #372]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d0f0      	beq.n	8001ef4 <HAL_RCC_OscConfig+0xe4>
 8001f12:	e014      	b.n	8001f3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f14:	f7ff fa84 	bl	8001420 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f1c:	f7ff fa80 	bl	8001420 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b64      	cmp	r3, #100	; 0x64
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e1ec      	b.n	8002308 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f2e:	4b53      	ldr	r3, [pc, #332]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1f0      	bne.n	8001f1c <HAL_RCC_OscConfig+0x10c>
 8001f3a:	e000      	b.n	8001f3e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d063      	beq.n	8002012 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f4a:	4b4c      	ldr	r3, [pc, #304]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f003 030c 	and.w	r3, r3, #12
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d00b      	beq.n	8001f6e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f56:	4b49      	ldr	r3, [pc, #292]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f003 030c 	and.w	r3, r3, #12
 8001f5e:	2b08      	cmp	r3, #8
 8001f60:	d11c      	bne.n	8001f9c <HAL_RCC_OscConfig+0x18c>
 8001f62:	4b46      	ldr	r3, [pc, #280]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d116      	bne.n	8001f9c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f6e:	4b43      	ldr	r3, [pc, #268]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d005      	beq.n	8001f86 <HAL_RCC_OscConfig+0x176>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d001      	beq.n	8001f86 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e1c0      	b.n	8002308 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f86:	4b3d      	ldr	r3, [pc, #244]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	4939      	ldr	r1, [pc, #228]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f9a:	e03a      	b.n	8002012 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d020      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fa4:	4b36      	ldr	r3, [pc, #216]	; (8002080 <HAL_RCC_OscConfig+0x270>)
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001faa:	f7ff fa39 	bl	8001420 <HAL_GetTick>
 8001fae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb0:	e008      	b.n	8001fc4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fb2:	f7ff fa35 	bl	8001420 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e1a1      	b.n	8002308 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc4:	4b2d      	ldr	r3, [pc, #180]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d0f0      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd0:	4b2a      	ldr	r3, [pc, #168]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	695b      	ldr	r3, [r3, #20]
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	4927      	ldr	r1, [pc, #156]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	600b      	str	r3, [r1, #0]
 8001fe4:	e015      	b.n	8002012 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fe6:	4b26      	ldr	r3, [pc, #152]	; (8002080 <HAL_RCC_OscConfig+0x270>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fec:	f7ff fa18 	bl	8001420 <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ff4:	f7ff fa14 	bl	8001420 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e180      	b.n	8002308 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002006:	4b1d      	ldr	r3, [pc, #116]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1f0      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0308 	and.w	r3, r3, #8
 800201a:	2b00      	cmp	r3, #0
 800201c:	d03a      	beq.n	8002094 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d019      	beq.n	800205a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002026:	4b17      	ldr	r3, [pc, #92]	; (8002084 <HAL_RCC_OscConfig+0x274>)
 8002028:	2201      	movs	r2, #1
 800202a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800202c:	f7ff f9f8 	bl	8001420 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002034:	f7ff f9f4 	bl	8001420 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e160      	b.n	8002308 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002046:	4b0d      	ldr	r3, [pc, #52]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8002048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d0f0      	beq.n	8002034 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002052:	2001      	movs	r0, #1
 8002054:	f000 face 	bl	80025f4 <RCC_Delay>
 8002058:	e01c      	b.n	8002094 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800205a:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <HAL_RCC_OscConfig+0x274>)
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002060:	f7ff f9de 	bl	8001420 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002066:	e00f      	b.n	8002088 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002068:	f7ff f9da 	bl	8001420 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d908      	bls.n	8002088 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e146      	b.n	8002308 <HAL_RCC_OscConfig+0x4f8>
 800207a:	bf00      	nop
 800207c:	40021000 	.word	0x40021000
 8002080:	42420000 	.word	0x42420000
 8002084:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002088:	4b92      	ldr	r3, [pc, #584]	; (80022d4 <HAL_RCC_OscConfig+0x4c4>)
 800208a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1e9      	bne.n	8002068 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b00      	cmp	r3, #0
 800209e:	f000 80a6 	beq.w	80021ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020a2:	2300      	movs	r3, #0
 80020a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020a6:	4b8b      	ldr	r3, [pc, #556]	; (80022d4 <HAL_RCC_OscConfig+0x4c4>)
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d10d      	bne.n	80020ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020b2:	4b88      	ldr	r3, [pc, #544]	; (80022d4 <HAL_RCC_OscConfig+0x4c4>)
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	4a87      	ldr	r2, [pc, #540]	; (80022d4 <HAL_RCC_OscConfig+0x4c4>)
 80020b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020bc:	61d3      	str	r3, [r2, #28]
 80020be:	4b85      	ldr	r3, [pc, #532]	; (80022d4 <HAL_RCC_OscConfig+0x4c4>)
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c6:	60bb      	str	r3, [r7, #8]
 80020c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ca:	2301      	movs	r3, #1
 80020cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ce:	4b82      	ldr	r3, [pc, #520]	; (80022d8 <HAL_RCC_OscConfig+0x4c8>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d118      	bne.n	800210c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020da:	4b7f      	ldr	r3, [pc, #508]	; (80022d8 <HAL_RCC_OscConfig+0x4c8>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a7e      	ldr	r2, [pc, #504]	; (80022d8 <HAL_RCC_OscConfig+0x4c8>)
 80020e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020e6:	f7ff f99b 	bl	8001420 <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ee:	f7ff f997 	bl	8001420 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b64      	cmp	r3, #100	; 0x64
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e103      	b.n	8002308 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002100:	4b75      	ldr	r3, [pc, #468]	; (80022d8 <HAL_RCC_OscConfig+0x4c8>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0f0      	beq.n	80020ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d106      	bne.n	8002122 <HAL_RCC_OscConfig+0x312>
 8002114:	4b6f      	ldr	r3, [pc, #444]	; (80022d4 <HAL_RCC_OscConfig+0x4c4>)
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	4a6e      	ldr	r2, [pc, #440]	; (80022d4 <HAL_RCC_OscConfig+0x4c4>)
 800211a:	f043 0301 	orr.w	r3, r3, #1
 800211e:	6213      	str	r3, [r2, #32]
 8002120:	e02d      	b.n	800217e <HAL_RCC_OscConfig+0x36e>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d10c      	bne.n	8002144 <HAL_RCC_OscConfig+0x334>
 800212a:	4b6a      	ldr	r3, [pc, #424]	; (80022d4 <HAL_RCC_OscConfig+0x4c4>)
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	4a69      	ldr	r2, [pc, #420]	; (80022d4 <HAL_RCC_OscConfig+0x4c4>)
 8002130:	f023 0301 	bic.w	r3, r3, #1
 8002134:	6213      	str	r3, [r2, #32]
 8002136:	4b67      	ldr	r3, [pc, #412]	; (80022d4 <HAL_RCC_OscConfig+0x4c4>)
 8002138:	6a1b      	ldr	r3, [r3, #32]
 800213a:	4a66      	ldr	r2, [pc, #408]	; (80022d4 <HAL_RCC_OscConfig+0x4c4>)
 800213c:	f023 0304 	bic.w	r3, r3, #4
 8002140:	6213      	str	r3, [r2, #32]
 8002142:	e01c      	b.n	800217e <HAL_RCC_OscConfig+0x36e>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	2b05      	cmp	r3, #5
 800214a:	d10c      	bne.n	8002166 <HAL_RCC_OscConfig+0x356>
 800214c:	4b61      	ldr	r3, [pc, #388]	; (80022d4 <HAL_RCC_OscConfig+0x4c4>)
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	4a60      	ldr	r2, [pc, #384]	; (80022d4 <HAL_RCC_OscConfig+0x4c4>)
 8002152:	f043 0304 	orr.w	r3, r3, #4
 8002156:	6213      	str	r3, [r2, #32]
 8002158:	4b5e      	ldr	r3, [pc, #376]	; (80022d4 <HAL_RCC_OscConfig+0x4c4>)
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	4a5d      	ldr	r2, [pc, #372]	; (80022d4 <HAL_RCC_OscConfig+0x4c4>)
 800215e:	f043 0301 	orr.w	r3, r3, #1
 8002162:	6213      	str	r3, [r2, #32]
 8002164:	e00b      	b.n	800217e <HAL_RCC_OscConfig+0x36e>
 8002166:	4b5b      	ldr	r3, [pc, #364]	; (80022d4 <HAL_RCC_OscConfig+0x4c4>)
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	4a5a      	ldr	r2, [pc, #360]	; (80022d4 <HAL_RCC_OscConfig+0x4c4>)
 800216c:	f023 0301 	bic.w	r3, r3, #1
 8002170:	6213      	str	r3, [r2, #32]
 8002172:	4b58      	ldr	r3, [pc, #352]	; (80022d4 <HAL_RCC_OscConfig+0x4c4>)
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	4a57      	ldr	r2, [pc, #348]	; (80022d4 <HAL_RCC_OscConfig+0x4c4>)
 8002178:	f023 0304 	bic.w	r3, r3, #4
 800217c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d015      	beq.n	80021b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002186:	f7ff f94b 	bl	8001420 <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800218c:	e00a      	b.n	80021a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800218e:	f7ff f947 	bl	8001420 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	f241 3288 	movw	r2, #5000	; 0x1388
 800219c:	4293      	cmp	r3, r2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e0b1      	b.n	8002308 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a4:	4b4b      	ldr	r3, [pc, #300]	; (80022d4 <HAL_RCC_OscConfig+0x4c4>)
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0ee      	beq.n	800218e <HAL_RCC_OscConfig+0x37e>
 80021b0:	e014      	b.n	80021dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b2:	f7ff f935 	bl	8001420 <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b8:	e00a      	b.n	80021d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ba:	f7ff f931 	bl	8001420 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e09b      	b.n	8002308 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021d0:	4b40      	ldr	r3, [pc, #256]	; (80022d4 <HAL_RCC_OscConfig+0x4c4>)
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1ee      	bne.n	80021ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021dc:	7dfb      	ldrb	r3, [r7, #23]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d105      	bne.n	80021ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021e2:	4b3c      	ldr	r3, [pc, #240]	; (80022d4 <HAL_RCC_OscConfig+0x4c4>)
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	4a3b      	ldr	r2, [pc, #236]	; (80022d4 <HAL_RCC_OscConfig+0x4c4>)
 80021e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f000 8087 	beq.w	8002306 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021f8:	4b36      	ldr	r3, [pc, #216]	; (80022d4 <HAL_RCC_OscConfig+0x4c4>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f003 030c 	and.w	r3, r3, #12
 8002200:	2b08      	cmp	r3, #8
 8002202:	d061      	beq.n	80022c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	69db      	ldr	r3, [r3, #28]
 8002208:	2b02      	cmp	r3, #2
 800220a:	d146      	bne.n	800229a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800220c:	4b33      	ldr	r3, [pc, #204]	; (80022dc <HAL_RCC_OscConfig+0x4cc>)
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002212:	f7ff f905 	bl	8001420 <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800221a:	f7ff f901 	bl	8001420 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e06d      	b.n	8002308 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800222c:	4b29      	ldr	r3, [pc, #164]	; (80022d4 <HAL_RCC_OscConfig+0x4c4>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1f0      	bne.n	800221a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a1b      	ldr	r3, [r3, #32]
 800223c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002240:	d108      	bne.n	8002254 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002242:	4b24      	ldr	r3, [pc, #144]	; (80022d4 <HAL_RCC_OscConfig+0x4c4>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	4921      	ldr	r1, [pc, #132]	; (80022d4 <HAL_RCC_OscConfig+0x4c4>)
 8002250:	4313      	orrs	r3, r2
 8002252:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002254:	4b1f      	ldr	r3, [pc, #124]	; (80022d4 <HAL_RCC_OscConfig+0x4c4>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a19      	ldr	r1, [r3, #32]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002264:	430b      	orrs	r3, r1
 8002266:	491b      	ldr	r1, [pc, #108]	; (80022d4 <HAL_RCC_OscConfig+0x4c4>)
 8002268:	4313      	orrs	r3, r2
 800226a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800226c:	4b1b      	ldr	r3, [pc, #108]	; (80022dc <HAL_RCC_OscConfig+0x4cc>)
 800226e:	2201      	movs	r2, #1
 8002270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002272:	f7ff f8d5 	bl	8001420 <HAL_GetTick>
 8002276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002278:	e008      	b.n	800228c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800227a:	f7ff f8d1 	bl	8001420 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e03d      	b.n	8002308 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800228c:	4b11      	ldr	r3, [pc, #68]	; (80022d4 <HAL_RCC_OscConfig+0x4c4>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d0f0      	beq.n	800227a <HAL_RCC_OscConfig+0x46a>
 8002298:	e035      	b.n	8002306 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800229a:	4b10      	ldr	r3, [pc, #64]	; (80022dc <HAL_RCC_OscConfig+0x4cc>)
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a0:	f7ff f8be 	bl	8001420 <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a8:	f7ff f8ba 	bl	8001420 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e026      	b.n	8002308 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ba:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <HAL_RCC_OscConfig+0x4c4>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1f0      	bne.n	80022a8 <HAL_RCC_OscConfig+0x498>
 80022c6:	e01e      	b.n	8002306 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	69db      	ldr	r3, [r3, #28]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d107      	bne.n	80022e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e019      	b.n	8002308 <HAL_RCC_OscConfig+0x4f8>
 80022d4:	40021000 	.word	0x40021000
 80022d8:	40007000 	.word	0x40007000
 80022dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022e0:	4b0b      	ldr	r3, [pc, #44]	; (8002310 <HAL_RCC_OscConfig+0x500>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d106      	bne.n	8002302 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022fe:	429a      	cmp	r2, r3
 8002300:	d001      	beq.n	8002306 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e000      	b.n	8002308 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3718      	adds	r7, #24
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40021000 	.word	0x40021000

08002314 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e0d0      	b.n	80024ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002328:	4b6a      	ldr	r3, [pc, #424]	; (80024d4 <HAL_RCC_ClockConfig+0x1c0>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	429a      	cmp	r2, r3
 8002334:	d910      	bls.n	8002358 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002336:	4b67      	ldr	r3, [pc, #412]	; (80024d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f023 0207 	bic.w	r2, r3, #7
 800233e:	4965      	ldr	r1, [pc, #404]	; (80024d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	4313      	orrs	r3, r2
 8002344:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002346:	4b63      	ldr	r3, [pc, #396]	; (80024d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	683a      	ldr	r2, [r7, #0]
 8002350:	429a      	cmp	r2, r3
 8002352:	d001      	beq.n	8002358 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e0b8      	b.n	80024ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d020      	beq.n	80023a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0304 	and.w	r3, r3, #4
 800236c:	2b00      	cmp	r3, #0
 800236e:	d005      	beq.n	800237c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002370:	4b59      	ldr	r3, [pc, #356]	; (80024d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	4a58      	ldr	r2, [pc, #352]	; (80024d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002376:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800237a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0308 	and.w	r3, r3, #8
 8002384:	2b00      	cmp	r3, #0
 8002386:	d005      	beq.n	8002394 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002388:	4b53      	ldr	r3, [pc, #332]	; (80024d8 <HAL_RCC_ClockConfig+0x1c4>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	4a52      	ldr	r2, [pc, #328]	; (80024d8 <HAL_RCC_ClockConfig+0x1c4>)
 800238e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002392:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002394:	4b50      	ldr	r3, [pc, #320]	; (80024d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	494d      	ldr	r1, [pc, #308]	; (80024d8 <HAL_RCC_ClockConfig+0x1c4>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d040      	beq.n	8002434 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d107      	bne.n	80023ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ba:	4b47      	ldr	r3, [pc, #284]	; (80024d8 <HAL_RCC_ClockConfig+0x1c4>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d115      	bne.n	80023f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e07f      	b.n	80024ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d107      	bne.n	80023e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023d2:	4b41      	ldr	r3, [pc, #260]	; (80024d8 <HAL_RCC_ClockConfig+0x1c4>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d109      	bne.n	80023f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e073      	b.n	80024ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e2:	4b3d      	ldr	r3, [pc, #244]	; (80024d8 <HAL_RCC_ClockConfig+0x1c4>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e06b      	b.n	80024ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023f2:	4b39      	ldr	r3, [pc, #228]	; (80024d8 <HAL_RCC_ClockConfig+0x1c4>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f023 0203 	bic.w	r2, r3, #3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	4936      	ldr	r1, [pc, #216]	; (80024d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002400:	4313      	orrs	r3, r2
 8002402:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002404:	f7ff f80c 	bl	8001420 <HAL_GetTick>
 8002408:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240a:	e00a      	b.n	8002422 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800240c:	f7ff f808 	bl	8001420 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	f241 3288 	movw	r2, #5000	; 0x1388
 800241a:	4293      	cmp	r3, r2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e053      	b.n	80024ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002422:	4b2d      	ldr	r3, [pc, #180]	; (80024d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f003 020c 	and.w	r2, r3, #12
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	429a      	cmp	r2, r3
 8002432:	d1eb      	bne.n	800240c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002434:	4b27      	ldr	r3, [pc, #156]	; (80024d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	429a      	cmp	r2, r3
 8002440:	d210      	bcs.n	8002464 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002442:	4b24      	ldr	r3, [pc, #144]	; (80024d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f023 0207 	bic.w	r2, r3, #7
 800244a:	4922      	ldr	r1, [pc, #136]	; (80024d4 <HAL_RCC_ClockConfig+0x1c0>)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	4313      	orrs	r3, r2
 8002450:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002452:	4b20      	ldr	r3, [pc, #128]	; (80024d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	429a      	cmp	r2, r3
 800245e:	d001      	beq.n	8002464 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e032      	b.n	80024ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0304 	and.w	r3, r3, #4
 800246c:	2b00      	cmp	r3, #0
 800246e:	d008      	beq.n	8002482 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002470:	4b19      	ldr	r3, [pc, #100]	; (80024d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	4916      	ldr	r1, [pc, #88]	; (80024d8 <HAL_RCC_ClockConfig+0x1c4>)
 800247e:	4313      	orrs	r3, r2
 8002480:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0308 	and.w	r3, r3, #8
 800248a:	2b00      	cmp	r3, #0
 800248c:	d009      	beq.n	80024a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800248e:	4b12      	ldr	r3, [pc, #72]	; (80024d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	490e      	ldr	r1, [pc, #56]	; (80024d8 <HAL_RCC_ClockConfig+0x1c4>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024a2:	f000 f821 	bl	80024e8 <HAL_RCC_GetSysClockFreq>
 80024a6:	4602      	mov	r2, r0
 80024a8:	4b0b      	ldr	r3, [pc, #44]	; (80024d8 <HAL_RCC_ClockConfig+0x1c4>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	091b      	lsrs	r3, r3, #4
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	490a      	ldr	r1, [pc, #40]	; (80024dc <HAL_RCC_ClockConfig+0x1c8>)
 80024b4:	5ccb      	ldrb	r3, [r1, r3]
 80024b6:	fa22 f303 	lsr.w	r3, r2, r3
 80024ba:	4a09      	ldr	r2, [pc, #36]	; (80024e0 <HAL_RCC_ClockConfig+0x1cc>)
 80024bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024be:	4b09      	ldr	r3, [pc, #36]	; (80024e4 <HAL_RCC_ClockConfig+0x1d0>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7fe ff6a 	bl	800139c <HAL_InitTick>

  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40022000 	.word	0x40022000
 80024d8:	40021000 	.word	0x40021000
 80024dc:	08005708 	.word	0x08005708
 80024e0:	20000018 	.word	0x20000018
 80024e4:	2000001c 	.word	0x2000001c

080024e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b087      	sub	sp, #28
 80024ec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	2300      	movs	r3, #0
 80024f4:	60bb      	str	r3, [r7, #8]
 80024f6:	2300      	movs	r3, #0
 80024f8:	617b      	str	r3, [r7, #20]
 80024fa:	2300      	movs	r3, #0
 80024fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024fe:	2300      	movs	r3, #0
 8002500:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002502:	4b1e      	ldr	r3, [pc, #120]	; (800257c <HAL_RCC_GetSysClockFreq+0x94>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f003 030c 	and.w	r3, r3, #12
 800250e:	2b04      	cmp	r3, #4
 8002510:	d002      	beq.n	8002518 <HAL_RCC_GetSysClockFreq+0x30>
 8002512:	2b08      	cmp	r3, #8
 8002514:	d003      	beq.n	800251e <HAL_RCC_GetSysClockFreq+0x36>
 8002516:	e027      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002518:	4b19      	ldr	r3, [pc, #100]	; (8002580 <HAL_RCC_GetSysClockFreq+0x98>)
 800251a:	613b      	str	r3, [r7, #16]
      break;
 800251c:	e027      	b.n	800256e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	0c9b      	lsrs	r3, r3, #18
 8002522:	f003 030f 	and.w	r3, r3, #15
 8002526:	4a17      	ldr	r2, [pc, #92]	; (8002584 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002528:	5cd3      	ldrb	r3, [r2, r3]
 800252a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d010      	beq.n	8002558 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002536:	4b11      	ldr	r3, [pc, #68]	; (800257c <HAL_RCC_GetSysClockFreq+0x94>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	0c5b      	lsrs	r3, r3, #17
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	4a11      	ldr	r2, [pc, #68]	; (8002588 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002542:	5cd3      	ldrb	r3, [r2, r3]
 8002544:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a0d      	ldr	r2, [pc, #52]	; (8002580 <HAL_RCC_GetSysClockFreq+0x98>)
 800254a:	fb03 f202 	mul.w	r2, r3, r2
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	fbb2 f3f3 	udiv	r3, r2, r3
 8002554:	617b      	str	r3, [r7, #20]
 8002556:	e004      	b.n	8002562 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a0c      	ldr	r2, [pc, #48]	; (800258c <HAL_RCC_GetSysClockFreq+0xa4>)
 800255c:	fb02 f303 	mul.w	r3, r2, r3
 8002560:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	613b      	str	r3, [r7, #16]
      break;
 8002566:	e002      	b.n	800256e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002568:	4b05      	ldr	r3, [pc, #20]	; (8002580 <HAL_RCC_GetSysClockFreq+0x98>)
 800256a:	613b      	str	r3, [r7, #16]
      break;
 800256c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800256e:	693b      	ldr	r3, [r7, #16]
}
 8002570:	4618      	mov	r0, r3
 8002572:	371c      	adds	r7, #28
 8002574:	46bd      	mov	sp, r7
 8002576:	bc80      	pop	{r7}
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	40021000 	.word	0x40021000
 8002580:	007a1200 	.word	0x007a1200
 8002584:	08005720 	.word	0x08005720
 8002588:	08005730 	.word	0x08005730
 800258c:	003d0900 	.word	0x003d0900

08002590 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002594:	4b02      	ldr	r3, [pc, #8]	; (80025a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002596:	681b      	ldr	r3, [r3, #0]
}
 8002598:	4618      	mov	r0, r3
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr
 80025a0:	20000018 	.word	0x20000018

080025a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025a8:	f7ff fff2 	bl	8002590 <HAL_RCC_GetHCLKFreq>
 80025ac:	4602      	mov	r2, r0
 80025ae:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	0a1b      	lsrs	r3, r3, #8
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	4903      	ldr	r1, [pc, #12]	; (80025c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ba:	5ccb      	ldrb	r3, [r1, r3]
 80025bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40021000 	.word	0x40021000
 80025c8:	08005718 	.word	0x08005718

080025cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025d0:	f7ff ffde 	bl	8002590 <HAL_RCC_GetHCLKFreq>
 80025d4:	4602      	mov	r2, r0
 80025d6:	4b05      	ldr	r3, [pc, #20]	; (80025ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	0adb      	lsrs	r3, r3, #11
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	4903      	ldr	r1, [pc, #12]	; (80025f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025e2:	5ccb      	ldrb	r3, [r1, r3]
 80025e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40021000 	.word	0x40021000
 80025f0:	08005718 	.word	0x08005718

080025f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025fc:	4b0a      	ldr	r3, [pc, #40]	; (8002628 <RCC_Delay+0x34>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a0a      	ldr	r2, [pc, #40]	; (800262c <RCC_Delay+0x38>)
 8002602:	fba2 2303 	umull	r2, r3, r2, r3
 8002606:	0a5b      	lsrs	r3, r3, #9
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	fb02 f303 	mul.w	r3, r2, r3
 800260e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002610:	bf00      	nop
  }
  while (Delay --);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	1e5a      	subs	r2, r3, #1
 8002616:	60fa      	str	r2, [r7, #12]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1f9      	bne.n	8002610 <RCC_Delay+0x1c>
}
 800261c:	bf00      	nop
 800261e:	bf00      	nop
 8002620:	3714      	adds	r7, #20
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr
 8002628:	20000018 	.word	0x20000018
 800262c:	10624dd3 	.word	0x10624dd3

08002630 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e076      	b.n	8002730 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002646:	2b00      	cmp	r3, #0
 8002648:	d108      	bne.n	800265c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002652:	d009      	beq.n	8002668 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	61da      	str	r2, [r3, #28]
 800265a:	e005      	b.n	8002668 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d106      	bne.n	8002688 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7fe fc5c 	bl	8000f40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2202      	movs	r2, #2
 800268c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800269e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80026b0:	431a      	orrs	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026ba:	431a      	orrs	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	431a      	orrs	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026d8:	431a      	orrs	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026e2:	431a      	orrs	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ec:	ea42 0103 	orr.w	r1, r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	430a      	orrs	r2, r1
 80026fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	0c1a      	lsrs	r2, r3, #16
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f002 0204 	and.w	r2, r2, #4
 800270e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	69da      	ldr	r2, [r3, #28]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800271e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3708      	adds	r7, #8
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b088      	sub	sp, #32
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	603b      	str	r3, [r7, #0]
 8002744:	4613      	mov	r3, r2
 8002746:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002748:	2300      	movs	r3, #0
 800274a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002752:	2b01      	cmp	r3, #1
 8002754:	d101      	bne.n	800275a <HAL_SPI_Transmit+0x22>
 8002756:	2302      	movs	r3, #2
 8002758:	e12d      	b.n	80029b6 <HAL_SPI_Transmit+0x27e>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002762:	f7fe fe5d 	bl	8001420 <HAL_GetTick>
 8002766:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002768:	88fb      	ldrh	r3, [r7, #6]
 800276a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b01      	cmp	r3, #1
 8002776:	d002      	beq.n	800277e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002778:	2302      	movs	r3, #2
 800277a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800277c:	e116      	b.n	80029ac <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d002      	beq.n	800278a <HAL_SPI_Transmit+0x52>
 8002784:	88fb      	ldrh	r3, [r7, #6]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d102      	bne.n	8002790 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800278e:	e10d      	b.n	80029ac <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2203      	movs	r2, #3
 8002794:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	68ba      	ldr	r2, [r7, #8]
 80027a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	88fa      	ldrh	r2, [r7, #6]
 80027a8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	88fa      	ldrh	r2, [r7, #6]
 80027ae:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027d6:	d10f      	bne.n	80027f8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027f6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002802:	2b40      	cmp	r3, #64	; 0x40
 8002804:	d007      	beq.n	8002816 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002814:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800281e:	d14f      	bne.n	80028c0 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d002      	beq.n	800282e <HAL_SPI_Transmit+0xf6>
 8002828:	8afb      	ldrh	r3, [r7, #22]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d142      	bne.n	80028b4 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	881a      	ldrh	r2, [r3, #0]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	1c9a      	adds	r2, r3, #2
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002848:	b29b      	uxth	r3, r3
 800284a:	3b01      	subs	r3, #1
 800284c:	b29a      	uxth	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002852:	e02f      	b.n	80028b4 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b02      	cmp	r3, #2
 8002860:	d112      	bne.n	8002888 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002866:	881a      	ldrh	r2, [r3, #0]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	1c9a      	adds	r2, r3, #2
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800287c:	b29b      	uxth	r3, r3
 800287e:	3b01      	subs	r3, #1
 8002880:	b29a      	uxth	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	86da      	strh	r2, [r3, #54]	; 0x36
 8002886:	e015      	b.n	80028b4 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002888:	f7fe fdca 	bl	8001420 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	429a      	cmp	r2, r3
 8002896:	d803      	bhi.n	80028a0 <HAL_SPI_Transmit+0x168>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800289e:	d102      	bne.n	80028a6 <HAL_SPI_Transmit+0x16e>
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d106      	bne.n	80028b4 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80028b2:	e07b      	b.n	80029ac <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1ca      	bne.n	8002854 <HAL_SPI_Transmit+0x11c>
 80028be:	e050      	b.n	8002962 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d002      	beq.n	80028ce <HAL_SPI_Transmit+0x196>
 80028c8:	8afb      	ldrh	r3, [r7, #22]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d144      	bne.n	8002958 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	330c      	adds	r3, #12
 80028d8:	7812      	ldrb	r2, [r2, #0]
 80028da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e0:	1c5a      	adds	r2, r3, #1
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	3b01      	subs	r3, #1
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80028f4:	e030      	b.n	8002958 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b02      	cmp	r3, #2
 8002902:	d113      	bne.n	800292c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	330c      	adds	r3, #12
 800290e:	7812      	ldrb	r2, [r2, #0]
 8002910:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	1c5a      	adds	r2, r3, #1
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002920:	b29b      	uxth	r3, r3
 8002922:	3b01      	subs	r3, #1
 8002924:	b29a      	uxth	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	86da      	strh	r2, [r3, #54]	; 0x36
 800292a:	e015      	b.n	8002958 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800292c:	f7fe fd78 	bl	8001420 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	429a      	cmp	r2, r3
 800293a:	d803      	bhi.n	8002944 <HAL_SPI_Transmit+0x20c>
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002942:	d102      	bne.n	800294a <HAL_SPI_Transmit+0x212>
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d106      	bne.n	8002958 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2201      	movs	r2, #1
 8002952:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002956:	e029      	b.n	80029ac <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800295c:	b29b      	uxth	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1c9      	bne.n	80028f6 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	6839      	ldr	r1, [r7, #0]
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f000 f8b2 	bl	8002ad0 <SPI_EndRxTxTransaction>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d002      	beq.n	8002978 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2220      	movs	r2, #32
 8002976:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d10a      	bne.n	8002996 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002980:	2300      	movs	r3, #0
 8002982:	613b      	str	r3, [r7, #16]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	613b      	str	r3, [r7, #16]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	613b      	str	r3, [r7, #16]
 8002994:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299a:	2b00      	cmp	r3, #0
 800299c:	d002      	beq.n	80029a4 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	77fb      	strb	r3, [r7, #31]
 80029a2:	e003      	b.n	80029ac <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80029b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3720      	adds	r7, #32
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
	...

080029c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b088      	sub	sp, #32
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	603b      	str	r3, [r7, #0]
 80029cc:	4613      	mov	r3, r2
 80029ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80029d0:	f7fe fd26 	bl	8001420 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d8:	1a9b      	subs	r3, r3, r2
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	4413      	add	r3, r2
 80029de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80029e0:	f7fe fd1e 	bl	8001420 <HAL_GetTick>
 80029e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80029e6:	4b39      	ldr	r3, [pc, #228]	; (8002acc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	015b      	lsls	r3, r3, #5
 80029ec:	0d1b      	lsrs	r3, r3, #20
 80029ee:	69fa      	ldr	r2, [r7, #28]
 80029f0:	fb02 f303 	mul.w	r3, r2, r3
 80029f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029f6:	e054      	b.n	8002aa2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029fe:	d050      	beq.n	8002aa2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a00:	f7fe fd0e 	bl	8001420 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	69fa      	ldr	r2, [r7, #28]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d902      	bls.n	8002a16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d13d      	bne.n	8002a92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a2e:	d111      	bne.n	8002a54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a38:	d004      	beq.n	8002a44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a42:	d107      	bne.n	8002a54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a5c:	d10f      	bne.n	8002a7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e017      	b.n	8002ac2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d101      	bne.n	8002a9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	68ba      	ldr	r2, [r7, #8]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	bf0c      	ite	eq
 8002ab2:	2301      	moveq	r3, #1
 8002ab4:	2300      	movne	r3, #0
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	461a      	mov	r2, r3
 8002aba:	79fb      	ldrb	r3, [r7, #7]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d19b      	bne.n	80029f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3720      	adds	r7, #32
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	20000018 	.word	0x20000018

08002ad0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af02      	add	r7, sp, #8
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	2180      	movs	r1, #128	; 0x80
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f7ff ff6a 	bl	80029c0 <SPI_WaitFlagStateUntilTimeout>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d007      	beq.n	8002b02 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af6:	f043 0220 	orr.w	r2, r3, #32
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e000      	b.n	8002b04 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e041      	b.n	8002ba2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d106      	bne.n	8002b38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7fe fa42 	bl	8000fbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	3304      	adds	r3, #4
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4610      	mov	r0, r2
 8002b4c:	f000 fa74 	bl	8003038 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
	...

08002bac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d001      	beq.n	8002bc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e03a      	b.n	8002c3a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68da      	ldr	r2, [r3, #12]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f042 0201 	orr.w	r2, r2, #1
 8002bda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a18      	ldr	r2, [pc, #96]	; (8002c44 <HAL_TIM_Base_Start_IT+0x98>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d00e      	beq.n	8002c04 <HAL_TIM_Base_Start_IT+0x58>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bee:	d009      	beq.n	8002c04 <HAL_TIM_Base_Start_IT+0x58>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a14      	ldr	r2, [pc, #80]	; (8002c48 <HAL_TIM_Base_Start_IT+0x9c>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d004      	beq.n	8002c04 <HAL_TIM_Base_Start_IT+0x58>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a13      	ldr	r2, [pc, #76]	; (8002c4c <HAL_TIM_Base_Start_IT+0xa0>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d111      	bne.n	8002c28 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 0307 	and.w	r3, r3, #7
 8002c0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2b06      	cmp	r3, #6
 8002c14:	d010      	beq.n	8002c38 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f042 0201 	orr.w	r2, r2, #1
 8002c24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c26:	e007      	b.n	8002c38 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f042 0201 	orr.w	r2, r2, #1
 8002c36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3714      	adds	r7, #20
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr
 8002c44:	40012c00 	.word	0x40012c00
 8002c48:	40000400 	.word	0x40000400
 8002c4c:	40000800 	.word	0x40000800

08002c50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d122      	bne.n	8002cac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d11b      	bne.n	8002cac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f06f 0202 	mvn.w	r2, #2
 8002c7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	f003 0303 	and.w	r3, r3, #3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 f9b4 	bl	8003000 <HAL_TIM_IC_CaptureCallback>
 8002c98:	e005      	b.n	8002ca6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 f9a7 	bl	8002fee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 f9b6 	bl	8003012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	f003 0304 	and.w	r3, r3, #4
 8002cb6:	2b04      	cmp	r3, #4
 8002cb8:	d122      	bne.n	8002d00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b04      	cmp	r3, #4
 8002cc6:	d11b      	bne.n	8002d00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f06f 0204 	mvn.w	r2, #4
 8002cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2202      	movs	r2, #2
 8002cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 f98a 	bl	8003000 <HAL_TIM_IC_CaptureCallback>
 8002cec:	e005      	b.n	8002cfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 f97d 	bl	8002fee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 f98c 	bl	8003012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	f003 0308 	and.w	r3, r3, #8
 8002d0a:	2b08      	cmp	r3, #8
 8002d0c:	d122      	bne.n	8002d54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	f003 0308 	and.w	r3, r3, #8
 8002d18:	2b08      	cmp	r3, #8
 8002d1a:	d11b      	bne.n	8002d54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f06f 0208 	mvn.w	r2, #8
 8002d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2204      	movs	r2, #4
 8002d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	f003 0303 	and.w	r3, r3, #3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 f960 	bl	8003000 <HAL_TIM_IC_CaptureCallback>
 8002d40:	e005      	b.n	8002d4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 f953 	bl	8002fee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 f962 	bl	8003012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	f003 0310 	and.w	r3, r3, #16
 8002d5e:	2b10      	cmp	r3, #16
 8002d60:	d122      	bne.n	8002da8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	f003 0310 	and.w	r3, r3, #16
 8002d6c:	2b10      	cmp	r3, #16
 8002d6e:	d11b      	bne.n	8002da8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f06f 0210 	mvn.w	r2, #16
 8002d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2208      	movs	r2, #8
 8002d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 f936 	bl	8003000 <HAL_TIM_IC_CaptureCallback>
 8002d94:	e005      	b.n	8002da2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 f929 	bl	8002fee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 f938 	bl	8003012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d10e      	bne.n	8002dd4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d107      	bne.n	8002dd4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f06f 0201 	mvn.w	r2, #1
 8002dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7fd fb44 	bl	800045c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dde:	2b80      	cmp	r3, #128	; 0x80
 8002de0:	d10e      	bne.n	8002e00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dec:	2b80      	cmp	r3, #128	; 0x80
 8002dee:	d107      	bne.n	8002e00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 fa7b 	bl	80032f6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e0a:	2b40      	cmp	r3, #64	; 0x40
 8002e0c:	d10e      	bne.n	8002e2c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e18:	2b40      	cmp	r3, #64	; 0x40
 8002e1a:	d107      	bne.n	8002e2c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f8fc 	bl	8003024 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	f003 0320 	and.w	r3, r3, #32
 8002e36:	2b20      	cmp	r3, #32
 8002e38:	d10e      	bne.n	8002e58 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	f003 0320 	and.w	r3, r3, #32
 8002e44:	2b20      	cmp	r3, #32
 8002e46:	d107      	bne.n	8002e58 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f06f 0220 	mvn.w	r2, #32
 8002e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 fa46 	bl	80032e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e58:	bf00      	nop
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d101      	bne.n	8002e7c <HAL_TIM_ConfigClockSource+0x1c>
 8002e78:	2302      	movs	r3, #2
 8002e7a:	e0b4      	b.n	8002fe6 <HAL_TIM_ConfigClockSource+0x186>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2202      	movs	r2, #2
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ea2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68ba      	ldr	r2, [r7, #8]
 8002eaa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eb4:	d03e      	beq.n	8002f34 <HAL_TIM_ConfigClockSource+0xd4>
 8002eb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eba:	f200 8087 	bhi.w	8002fcc <HAL_TIM_ConfigClockSource+0x16c>
 8002ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ec2:	f000 8086 	beq.w	8002fd2 <HAL_TIM_ConfigClockSource+0x172>
 8002ec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eca:	d87f      	bhi.n	8002fcc <HAL_TIM_ConfigClockSource+0x16c>
 8002ecc:	2b70      	cmp	r3, #112	; 0x70
 8002ece:	d01a      	beq.n	8002f06 <HAL_TIM_ConfigClockSource+0xa6>
 8002ed0:	2b70      	cmp	r3, #112	; 0x70
 8002ed2:	d87b      	bhi.n	8002fcc <HAL_TIM_ConfigClockSource+0x16c>
 8002ed4:	2b60      	cmp	r3, #96	; 0x60
 8002ed6:	d050      	beq.n	8002f7a <HAL_TIM_ConfigClockSource+0x11a>
 8002ed8:	2b60      	cmp	r3, #96	; 0x60
 8002eda:	d877      	bhi.n	8002fcc <HAL_TIM_ConfigClockSource+0x16c>
 8002edc:	2b50      	cmp	r3, #80	; 0x50
 8002ede:	d03c      	beq.n	8002f5a <HAL_TIM_ConfigClockSource+0xfa>
 8002ee0:	2b50      	cmp	r3, #80	; 0x50
 8002ee2:	d873      	bhi.n	8002fcc <HAL_TIM_ConfigClockSource+0x16c>
 8002ee4:	2b40      	cmp	r3, #64	; 0x40
 8002ee6:	d058      	beq.n	8002f9a <HAL_TIM_ConfigClockSource+0x13a>
 8002ee8:	2b40      	cmp	r3, #64	; 0x40
 8002eea:	d86f      	bhi.n	8002fcc <HAL_TIM_ConfigClockSource+0x16c>
 8002eec:	2b30      	cmp	r3, #48	; 0x30
 8002eee:	d064      	beq.n	8002fba <HAL_TIM_ConfigClockSource+0x15a>
 8002ef0:	2b30      	cmp	r3, #48	; 0x30
 8002ef2:	d86b      	bhi.n	8002fcc <HAL_TIM_ConfigClockSource+0x16c>
 8002ef4:	2b20      	cmp	r3, #32
 8002ef6:	d060      	beq.n	8002fba <HAL_TIM_ConfigClockSource+0x15a>
 8002ef8:	2b20      	cmp	r3, #32
 8002efa:	d867      	bhi.n	8002fcc <HAL_TIM_ConfigClockSource+0x16c>
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d05c      	beq.n	8002fba <HAL_TIM_ConfigClockSource+0x15a>
 8002f00:	2b10      	cmp	r3, #16
 8002f02:	d05a      	beq.n	8002fba <HAL_TIM_ConfigClockSource+0x15a>
 8002f04:	e062      	b.n	8002fcc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f16:	f000 f968 	bl	80031ea <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68ba      	ldr	r2, [r7, #8]
 8002f30:	609a      	str	r2, [r3, #8]
      break;
 8002f32:	e04f      	b.n	8002fd4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f44:	f000 f951 	bl	80031ea <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689a      	ldr	r2, [r3, #8]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f56:	609a      	str	r2, [r3, #8]
      break;
 8002f58:	e03c      	b.n	8002fd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f66:	461a      	mov	r2, r3
 8002f68:	f000 f8c8 	bl	80030fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2150      	movs	r1, #80	; 0x50
 8002f72:	4618      	mov	r0, r3
 8002f74:	f000 f91f 	bl	80031b6 <TIM_ITRx_SetConfig>
      break;
 8002f78:	e02c      	b.n	8002fd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f86:	461a      	mov	r2, r3
 8002f88:	f000 f8e6 	bl	8003158 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2160      	movs	r1, #96	; 0x60
 8002f92:	4618      	mov	r0, r3
 8002f94:	f000 f90f 	bl	80031b6 <TIM_ITRx_SetConfig>
      break;
 8002f98:	e01c      	b.n	8002fd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	f000 f8a8 	bl	80030fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2140      	movs	r1, #64	; 0x40
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f000 f8ff 	bl	80031b6 <TIM_ITRx_SetConfig>
      break;
 8002fb8:	e00c      	b.n	8002fd4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	f000 f8f6 	bl	80031b6 <TIM_ITRx_SetConfig>
      break;
 8002fca:	e003      	b.n	8002fd4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	73fb      	strb	r3, [r7, #15]
      break;
 8002fd0:	e000      	b.n	8002fd4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002fd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	b083      	sub	sp, #12
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ff6:	bf00      	nop
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bc80      	pop	{r7}
 8002ffe:	4770      	bx	lr

08003000 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	bc80      	pop	{r7}
 8003010:	4770      	bx	lr

08003012 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003012:	b480      	push	{r7}
 8003014:	b083      	sub	sp, #12
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800301a:	bf00      	nop
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	bc80      	pop	{r7}
 8003022:	4770      	bx	lr

08003024 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	bc80      	pop	{r7}
 8003034:	4770      	bx	lr
	...

08003038 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a29      	ldr	r2, [pc, #164]	; (80030f0 <TIM_Base_SetConfig+0xb8>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d00b      	beq.n	8003068 <TIM_Base_SetConfig+0x30>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003056:	d007      	beq.n	8003068 <TIM_Base_SetConfig+0x30>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a26      	ldr	r2, [pc, #152]	; (80030f4 <TIM_Base_SetConfig+0xbc>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d003      	beq.n	8003068 <TIM_Base_SetConfig+0x30>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a25      	ldr	r2, [pc, #148]	; (80030f8 <TIM_Base_SetConfig+0xc0>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d108      	bne.n	800307a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800306e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	4313      	orrs	r3, r2
 8003078:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a1c      	ldr	r2, [pc, #112]	; (80030f0 <TIM_Base_SetConfig+0xb8>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d00b      	beq.n	800309a <TIM_Base_SetConfig+0x62>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003088:	d007      	beq.n	800309a <TIM_Base_SetConfig+0x62>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a19      	ldr	r2, [pc, #100]	; (80030f4 <TIM_Base_SetConfig+0xbc>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d003      	beq.n	800309a <TIM_Base_SetConfig+0x62>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a18      	ldr	r2, [pc, #96]	; (80030f8 <TIM_Base_SetConfig+0xc0>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d108      	bne.n	80030ac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a07      	ldr	r2, [pc, #28]	; (80030f0 <TIM_Base_SetConfig+0xb8>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d103      	bne.n	80030e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	691a      	ldr	r2, [r3, #16]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	615a      	str	r2, [r3, #20]
}
 80030e6:	bf00      	nop
 80030e8:	3714      	adds	r7, #20
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bc80      	pop	{r7}
 80030ee:	4770      	bx	lr
 80030f0:	40012c00 	.word	0x40012c00
 80030f4:	40000400 	.word	0x40000400
 80030f8:	40000800 	.word	0x40000800

080030fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b087      	sub	sp, #28
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6a1b      	ldr	r3, [r3, #32]
 800310c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	f023 0201 	bic.w	r2, r3, #1
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003126:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	011b      	lsls	r3, r3, #4
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	4313      	orrs	r3, r2
 8003130:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	f023 030a 	bic.w	r3, r3, #10
 8003138:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	4313      	orrs	r3, r2
 8003140:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	621a      	str	r2, [r3, #32]
}
 800314e:	bf00      	nop
 8003150:	371c      	adds	r7, #28
 8003152:	46bd      	mov	sp, r7
 8003154:	bc80      	pop	{r7}
 8003156:	4770      	bx	lr

08003158 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003158:	b480      	push	{r7}
 800315a:	b087      	sub	sp, #28
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	f023 0210 	bic.w	r2, r3, #16
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003182:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	031b      	lsls	r3, r3, #12
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	4313      	orrs	r3, r2
 800318c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003194:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	011b      	lsls	r3, r3, #4
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	4313      	orrs	r3, r2
 800319e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	621a      	str	r2, [r3, #32]
}
 80031ac:	bf00      	nop
 80031ae:	371c      	adds	r7, #28
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bc80      	pop	{r7}
 80031b4:	4770      	bx	lr

080031b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b085      	sub	sp, #20
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
 80031be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	f043 0307 	orr.w	r3, r3, #7
 80031d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	609a      	str	r2, [r3, #8]
}
 80031e0:	bf00      	nop
 80031e2:	3714      	adds	r7, #20
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bc80      	pop	{r7}
 80031e8:	4770      	bx	lr

080031ea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b087      	sub	sp, #28
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	60f8      	str	r0, [r7, #12]
 80031f2:	60b9      	str	r1, [r7, #8]
 80031f4:	607a      	str	r2, [r7, #4]
 80031f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003204:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	021a      	lsls	r2, r3, #8
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	431a      	orrs	r2, r3
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	4313      	orrs	r3, r2
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	4313      	orrs	r3, r2
 8003216:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	609a      	str	r2, [r3, #8]
}
 800321e:	bf00      	nop
 8003220:	371c      	adds	r7, #28
 8003222:	46bd      	mov	sp, r7
 8003224:	bc80      	pop	{r7}
 8003226:	4770      	bx	lr

08003228 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003238:	2b01      	cmp	r3, #1
 800323a:	d101      	bne.n	8003240 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800323c:	2302      	movs	r3, #2
 800323e:	e046      	b.n	80032ce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2202      	movs	r2, #2
 800324c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003266:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	4313      	orrs	r3, r2
 8003270:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a16      	ldr	r2, [pc, #88]	; (80032d8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d00e      	beq.n	80032a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800328c:	d009      	beq.n	80032a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a12      	ldr	r2, [pc, #72]	; (80032dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d004      	beq.n	80032a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a10      	ldr	r2, [pc, #64]	; (80032e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d10c      	bne.n	80032bc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	68ba      	ldr	r2, [r7, #8]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68ba      	ldr	r2, [r7, #8]
 80032ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3714      	adds	r7, #20
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bc80      	pop	{r7}
 80032d6:	4770      	bx	lr
 80032d8:	40012c00 	.word	0x40012c00
 80032dc:	40000400 	.word	0x40000400
 80032e0:	40000800 	.word	0x40000800

080032e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bc80      	pop	{r7}
 80032f4:	4770      	bx	lr

080032f6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b083      	sub	sp, #12
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	bc80      	pop	{r7}
 8003306:	4770      	bx	lr

08003308 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e042      	b.n	80033a0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d106      	bne.n	8003334 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7fd fe72 	bl	8001018 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2224      	movs	r2, #36	; 0x24
 8003338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68da      	ldr	r2, [r3, #12]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800334a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 f9e5 	bl	800371c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	691a      	ldr	r2, [r3, #16]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003360:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	695a      	ldr	r2, [r3, #20]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003370:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68da      	ldr	r2, [r3, #12]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003380:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2220      	movs	r2, #32
 800338c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2220      	movs	r2, #32
 8003394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b08c      	sub	sp, #48	; 0x30
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	4613      	mov	r3, r2
 80033b4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b20      	cmp	r3, #32
 80033c0:	d156      	bne.n	8003470 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d002      	beq.n	80033ce <HAL_UART_Transmit_DMA+0x26>
 80033c8:	88fb      	ldrh	r3, [r7, #6]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e04f      	b.n	8003472 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	88fa      	ldrh	r2, [r7, #6]
 80033dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	88fa      	ldrh	r2, [r7, #6]
 80033e2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2221      	movs	r2, #33	; 0x21
 80033ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f6:	4a21      	ldr	r2, [pc, #132]	; (800347c <HAL_UART_Transmit_DMA+0xd4>)
 80033f8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fe:	4a20      	ldr	r2, [pc, #128]	; (8003480 <HAL_UART_Transmit_DMA+0xd8>)
 8003400:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003406:	4a1f      	ldr	r2, [pc, #124]	; (8003484 <HAL_UART_Transmit_DMA+0xdc>)
 8003408:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340e:	2200      	movs	r2, #0
 8003410:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8003412:	f107 0308 	add.w	r3, r7, #8
 8003416:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800341c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800341e:	6819      	ldr	r1, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	3304      	adds	r3, #4
 8003426:	461a      	mov	r2, r3
 8003428:	88fb      	ldrh	r3, [r7, #6]
 800342a:	f7fe f98f 	bl	800174c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003436:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	3314      	adds	r3, #20
 800343e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	e853 3f00 	ldrex	r3, [r3]
 8003446:	617b      	str	r3, [r7, #20]
   return(result);
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800344e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	3314      	adds	r3, #20
 8003456:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003458:	627a      	str	r2, [r7, #36]	; 0x24
 800345a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800345c:	6a39      	ldr	r1, [r7, #32]
 800345e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003460:	e841 2300 	strex	r3, r2, [r1]
 8003464:	61fb      	str	r3, [r7, #28]
   return(result);
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1e5      	bne.n	8003438 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800346c:	2300      	movs	r3, #0
 800346e:	e000      	b.n	8003472 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003470:	2302      	movs	r3, #2
  }
}
 8003472:	4618      	mov	r0, r3
 8003474:	3730      	adds	r7, #48	; 0x30
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	080034bf 	.word	0x080034bf
 8003480:	08003559 	.word	0x08003559
 8003484:	08003575 	.word	0x08003575

08003488 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	bc80      	pop	{r7}
 8003498:	4770      	bx	lr

0800349a <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800349a:	b480      	push	{r7}
 800349c:	b083      	sub	sp, #12
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80034a2:	bf00      	nop
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bc80      	pop	{r7}
 80034aa:	4770      	bx	lr

080034ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bc80      	pop	{r7}
 80034bc:	4770      	bx	lr

080034be <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b090      	sub	sp, #64	; 0x40
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0320 	and.w	r3, r3, #32
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d137      	bne.n	800354a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80034da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034dc:	2200      	movs	r2, #0
 80034de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80034e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	3314      	adds	r3, #20
 80034e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	e853 3f00 	ldrex	r3, [r3]
 80034ee:	623b      	str	r3, [r7, #32]
   return(result);
 80034f0:	6a3b      	ldr	r3, [r7, #32]
 80034f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80034f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	3314      	adds	r3, #20
 80034fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003500:	633a      	str	r2, [r7, #48]	; 0x30
 8003502:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003504:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003506:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003508:	e841 2300 	strex	r3, r2, [r1]
 800350c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800350e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1e5      	bne.n	80034e0 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	330c      	adds	r3, #12
 800351a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	e853 3f00 	ldrex	r3, [r3]
 8003522:	60fb      	str	r3, [r7, #12]
   return(result);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800352a:	637b      	str	r3, [r7, #52]	; 0x34
 800352c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	330c      	adds	r3, #12
 8003532:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003534:	61fa      	str	r2, [r7, #28]
 8003536:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003538:	69b9      	ldr	r1, [r7, #24]
 800353a:	69fa      	ldr	r2, [r7, #28]
 800353c:	e841 2300 	strex	r3, r2, [r1]
 8003540:	617b      	str	r3, [r7, #20]
   return(result);
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1e5      	bne.n	8003514 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003548:	e002      	b.n	8003550 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800354a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800354c:	f7ff ff9c 	bl	8003488 <HAL_UART_TxCpltCallback>
}
 8003550:	bf00      	nop
 8003552:	3740      	adds	r7, #64	; 0x40
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003564:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f7ff ff97 	bl	800349a <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800356c:	bf00      	nop
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800357c:	2300      	movs	r3, #0
 800357e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003584:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	695b      	ldr	r3, [r3, #20]
 800358c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003590:	2b00      	cmp	r3, #0
 8003592:	bf14      	ite	ne
 8003594:	2301      	movne	r3, #1
 8003596:	2300      	moveq	r3, #0
 8003598:	b2db      	uxtb	r3, r3
 800359a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b21      	cmp	r3, #33	; 0x21
 80035a6:	d108      	bne.n	80035ba <UART_DMAError+0x46>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d005      	beq.n	80035ba <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	2200      	movs	r2, #0
 80035b2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80035b4:	68b8      	ldr	r0, [r7, #8]
 80035b6:	f000 f827 	bl	8003608 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	bf14      	ite	ne
 80035c8:	2301      	movne	r3, #1
 80035ca:	2300      	moveq	r3, #0
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b22      	cmp	r3, #34	; 0x22
 80035da:	d108      	bne.n	80035ee <UART_DMAError+0x7a>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d005      	beq.n	80035ee <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	2200      	movs	r2, #0
 80035e6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80035e8:	68b8      	ldr	r0, [r7, #8]
 80035ea:	f000 f834 	bl	8003656 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f2:	f043 0210 	orr.w	r2, r3, #16
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80035fa:	68b8      	ldr	r0, [r7, #8]
 80035fc:	f7ff ff56 	bl	80034ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003600:	bf00      	nop
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003608:	b480      	push	{r7}
 800360a:	b089      	sub	sp, #36	; 0x24
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	330c      	adds	r3, #12
 8003616:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	e853 3f00 	ldrex	r3, [r3]
 800361e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003626:	61fb      	str	r3, [r7, #28]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	330c      	adds	r3, #12
 800362e:	69fa      	ldr	r2, [r7, #28]
 8003630:	61ba      	str	r2, [r7, #24]
 8003632:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003634:	6979      	ldr	r1, [r7, #20]
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	e841 2300 	strex	r3, r2, [r1]
 800363c:	613b      	str	r3, [r7, #16]
   return(result);
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1e5      	bne.n	8003610 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2220      	movs	r2, #32
 8003648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800364c:	bf00      	nop
 800364e:	3724      	adds	r7, #36	; 0x24
 8003650:	46bd      	mov	sp, r7
 8003652:	bc80      	pop	{r7}
 8003654:	4770      	bx	lr

08003656 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003656:	b480      	push	{r7}
 8003658:	b095      	sub	sp, #84	; 0x54
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	330c      	adds	r3, #12
 8003664:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003668:	e853 3f00 	ldrex	r3, [r3]
 800366c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800366e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003670:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003674:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	330c      	adds	r3, #12
 800367c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800367e:	643a      	str	r2, [r7, #64]	; 0x40
 8003680:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003682:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003684:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003686:	e841 2300 	strex	r3, r2, [r1]
 800368a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800368c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1e5      	bne.n	800365e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	3314      	adds	r3, #20
 8003698:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800369a:	6a3b      	ldr	r3, [r7, #32]
 800369c:	e853 3f00 	ldrex	r3, [r3]
 80036a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	f023 0301 	bic.w	r3, r3, #1
 80036a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	3314      	adds	r3, #20
 80036b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036ba:	e841 2300 	strex	r3, r2, [r1]
 80036be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1e5      	bne.n	8003692 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d119      	bne.n	8003702 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	330c      	adds	r3, #12
 80036d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	e853 3f00 	ldrex	r3, [r3]
 80036dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	f023 0310 	bic.w	r3, r3, #16
 80036e4:	647b      	str	r3, [r7, #68]	; 0x44
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	330c      	adds	r3, #12
 80036ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80036ee:	61ba      	str	r2, [r7, #24]
 80036f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f2:	6979      	ldr	r1, [r7, #20]
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	e841 2300 	strex	r3, r2, [r1]
 80036fa:	613b      	str	r3, [r7, #16]
   return(result);
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1e5      	bne.n	80036ce <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2220      	movs	r2, #32
 8003706:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003710:	bf00      	nop
 8003712:	3754      	adds	r7, #84	; 0x54
 8003714:	46bd      	mov	sp, r7
 8003716:	bc80      	pop	{r7}
 8003718:	4770      	bx	lr
	...

0800371c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	430a      	orrs	r2, r1
 8003738:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	689a      	ldr	r2, [r3, #8]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	431a      	orrs	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	4313      	orrs	r3, r2
 800374a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003756:	f023 030c 	bic.w	r3, r3, #12
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6812      	ldr	r2, [r2, #0]
 800375e:	68b9      	ldr	r1, [r7, #8]
 8003760:	430b      	orrs	r3, r1
 8003762:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	699a      	ldr	r2, [r3, #24]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	430a      	orrs	r2, r1
 8003778:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a2c      	ldr	r2, [pc, #176]	; (8003830 <UART_SetConfig+0x114>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d103      	bne.n	800378c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003784:	f7fe ff22 	bl	80025cc <HAL_RCC_GetPCLK2Freq>
 8003788:	60f8      	str	r0, [r7, #12]
 800378a:	e002      	b.n	8003792 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800378c:	f7fe ff0a 	bl	80025a4 <HAL_RCC_GetPCLK1Freq>
 8003790:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	4613      	mov	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	4413      	add	r3, r2
 800379a:	009a      	lsls	r2, r3, #2
 800379c:	441a      	add	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a8:	4a22      	ldr	r2, [pc, #136]	; (8003834 <UART_SetConfig+0x118>)
 80037aa:	fba2 2303 	umull	r2, r3, r2, r3
 80037ae:	095b      	lsrs	r3, r3, #5
 80037b0:	0119      	lsls	r1, r3, #4
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	4613      	mov	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4413      	add	r3, r2
 80037ba:	009a      	lsls	r2, r3, #2
 80037bc:	441a      	add	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80037c8:	4b1a      	ldr	r3, [pc, #104]	; (8003834 <UART_SetConfig+0x118>)
 80037ca:	fba3 0302 	umull	r0, r3, r3, r2
 80037ce:	095b      	lsrs	r3, r3, #5
 80037d0:	2064      	movs	r0, #100	; 0x64
 80037d2:	fb00 f303 	mul.w	r3, r0, r3
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	011b      	lsls	r3, r3, #4
 80037da:	3332      	adds	r3, #50	; 0x32
 80037dc:	4a15      	ldr	r2, [pc, #84]	; (8003834 <UART_SetConfig+0x118>)
 80037de:	fba2 2303 	umull	r2, r3, r2, r3
 80037e2:	095b      	lsrs	r3, r3, #5
 80037e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037e8:	4419      	add	r1, r3
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	4613      	mov	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4413      	add	r3, r2
 80037f2:	009a      	lsls	r2, r3, #2
 80037f4:	441a      	add	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003800:	4b0c      	ldr	r3, [pc, #48]	; (8003834 <UART_SetConfig+0x118>)
 8003802:	fba3 0302 	umull	r0, r3, r3, r2
 8003806:	095b      	lsrs	r3, r3, #5
 8003808:	2064      	movs	r0, #100	; 0x64
 800380a:	fb00 f303 	mul.w	r3, r0, r3
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	011b      	lsls	r3, r3, #4
 8003812:	3332      	adds	r3, #50	; 0x32
 8003814:	4a07      	ldr	r2, [pc, #28]	; (8003834 <UART_SetConfig+0x118>)
 8003816:	fba2 2303 	umull	r2, r3, r2, r3
 800381a:	095b      	lsrs	r3, r3, #5
 800381c:	f003 020f 	and.w	r2, r3, #15
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	440a      	add	r2, r1
 8003826:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003828:	bf00      	nop
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	40013800 	.word	0x40013800
 8003834:	51eb851f 	.word	0x51eb851f

08003838 <sbrk_aligned>:
 8003838:	b570      	push	{r4, r5, r6, lr}
 800383a:	4e0e      	ldr	r6, [pc, #56]	; (8003874 <sbrk_aligned+0x3c>)
 800383c:	460c      	mov	r4, r1
 800383e:	6831      	ldr	r1, [r6, #0]
 8003840:	4605      	mov	r5, r0
 8003842:	b911      	cbnz	r1, 800384a <sbrk_aligned+0x12>
 8003844:	f000 f8cc 	bl	80039e0 <_sbrk_r>
 8003848:	6030      	str	r0, [r6, #0]
 800384a:	4621      	mov	r1, r4
 800384c:	4628      	mov	r0, r5
 800384e:	f000 f8c7 	bl	80039e0 <_sbrk_r>
 8003852:	1c43      	adds	r3, r0, #1
 8003854:	d00a      	beq.n	800386c <sbrk_aligned+0x34>
 8003856:	1cc4      	adds	r4, r0, #3
 8003858:	f024 0403 	bic.w	r4, r4, #3
 800385c:	42a0      	cmp	r0, r4
 800385e:	d007      	beq.n	8003870 <sbrk_aligned+0x38>
 8003860:	1a21      	subs	r1, r4, r0
 8003862:	4628      	mov	r0, r5
 8003864:	f000 f8bc 	bl	80039e0 <_sbrk_r>
 8003868:	3001      	adds	r0, #1
 800386a:	d101      	bne.n	8003870 <sbrk_aligned+0x38>
 800386c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003870:	4620      	mov	r0, r4
 8003872:	bd70      	pop	{r4, r5, r6, pc}
 8003874:	20000670 	.word	0x20000670

08003878 <_malloc_r>:
 8003878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800387c:	1ccd      	adds	r5, r1, #3
 800387e:	f025 0503 	bic.w	r5, r5, #3
 8003882:	3508      	adds	r5, #8
 8003884:	2d0c      	cmp	r5, #12
 8003886:	bf38      	it	cc
 8003888:	250c      	movcc	r5, #12
 800388a:	2d00      	cmp	r5, #0
 800388c:	4607      	mov	r7, r0
 800388e:	db01      	blt.n	8003894 <_malloc_r+0x1c>
 8003890:	42a9      	cmp	r1, r5
 8003892:	d905      	bls.n	80038a0 <_malloc_r+0x28>
 8003894:	230c      	movs	r3, #12
 8003896:	2600      	movs	r6, #0
 8003898:	603b      	str	r3, [r7, #0]
 800389a:	4630      	mov	r0, r6
 800389c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038a0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003974 <_malloc_r+0xfc>
 80038a4:	f000 f868 	bl	8003978 <__malloc_lock>
 80038a8:	f8d8 3000 	ldr.w	r3, [r8]
 80038ac:	461c      	mov	r4, r3
 80038ae:	bb5c      	cbnz	r4, 8003908 <_malloc_r+0x90>
 80038b0:	4629      	mov	r1, r5
 80038b2:	4638      	mov	r0, r7
 80038b4:	f7ff ffc0 	bl	8003838 <sbrk_aligned>
 80038b8:	1c43      	adds	r3, r0, #1
 80038ba:	4604      	mov	r4, r0
 80038bc:	d155      	bne.n	800396a <_malloc_r+0xf2>
 80038be:	f8d8 4000 	ldr.w	r4, [r8]
 80038c2:	4626      	mov	r6, r4
 80038c4:	2e00      	cmp	r6, #0
 80038c6:	d145      	bne.n	8003954 <_malloc_r+0xdc>
 80038c8:	2c00      	cmp	r4, #0
 80038ca:	d048      	beq.n	800395e <_malloc_r+0xe6>
 80038cc:	6823      	ldr	r3, [r4, #0]
 80038ce:	4631      	mov	r1, r6
 80038d0:	4638      	mov	r0, r7
 80038d2:	eb04 0903 	add.w	r9, r4, r3
 80038d6:	f000 f883 	bl	80039e0 <_sbrk_r>
 80038da:	4581      	cmp	r9, r0
 80038dc:	d13f      	bne.n	800395e <_malloc_r+0xe6>
 80038de:	6821      	ldr	r1, [r4, #0]
 80038e0:	4638      	mov	r0, r7
 80038e2:	1a6d      	subs	r5, r5, r1
 80038e4:	4629      	mov	r1, r5
 80038e6:	f7ff ffa7 	bl	8003838 <sbrk_aligned>
 80038ea:	3001      	adds	r0, #1
 80038ec:	d037      	beq.n	800395e <_malloc_r+0xe6>
 80038ee:	6823      	ldr	r3, [r4, #0]
 80038f0:	442b      	add	r3, r5
 80038f2:	6023      	str	r3, [r4, #0]
 80038f4:	f8d8 3000 	ldr.w	r3, [r8]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d038      	beq.n	800396e <_malloc_r+0xf6>
 80038fc:	685a      	ldr	r2, [r3, #4]
 80038fe:	42a2      	cmp	r2, r4
 8003900:	d12b      	bne.n	800395a <_malloc_r+0xe2>
 8003902:	2200      	movs	r2, #0
 8003904:	605a      	str	r2, [r3, #4]
 8003906:	e00f      	b.n	8003928 <_malloc_r+0xb0>
 8003908:	6822      	ldr	r2, [r4, #0]
 800390a:	1b52      	subs	r2, r2, r5
 800390c:	d41f      	bmi.n	800394e <_malloc_r+0xd6>
 800390e:	2a0b      	cmp	r2, #11
 8003910:	d917      	bls.n	8003942 <_malloc_r+0xca>
 8003912:	1961      	adds	r1, r4, r5
 8003914:	42a3      	cmp	r3, r4
 8003916:	6025      	str	r5, [r4, #0]
 8003918:	bf18      	it	ne
 800391a:	6059      	strne	r1, [r3, #4]
 800391c:	6863      	ldr	r3, [r4, #4]
 800391e:	bf08      	it	eq
 8003920:	f8c8 1000 	streq.w	r1, [r8]
 8003924:	5162      	str	r2, [r4, r5]
 8003926:	604b      	str	r3, [r1, #4]
 8003928:	4638      	mov	r0, r7
 800392a:	f104 060b 	add.w	r6, r4, #11
 800392e:	f000 f829 	bl	8003984 <__malloc_unlock>
 8003932:	f026 0607 	bic.w	r6, r6, #7
 8003936:	1d23      	adds	r3, r4, #4
 8003938:	1af2      	subs	r2, r6, r3
 800393a:	d0ae      	beq.n	800389a <_malloc_r+0x22>
 800393c:	1b9b      	subs	r3, r3, r6
 800393e:	50a3      	str	r3, [r4, r2]
 8003940:	e7ab      	b.n	800389a <_malloc_r+0x22>
 8003942:	42a3      	cmp	r3, r4
 8003944:	6862      	ldr	r2, [r4, #4]
 8003946:	d1dd      	bne.n	8003904 <_malloc_r+0x8c>
 8003948:	f8c8 2000 	str.w	r2, [r8]
 800394c:	e7ec      	b.n	8003928 <_malloc_r+0xb0>
 800394e:	4623      	mov	r3, r4
 8003950:	6864      	ldr	r4, [r4, #4]
 8003952:	e7ac      	b.n	80038ae <_malloc_r+0x36>
 8003954:	4634      	mov	r4, r6
 8003956:	6876      	ldr	r6, [r6, #4]
 8003958:	e7b4      	b.n	80038c4 <_malloc_r+0x4c>
 800395a:	4613      	mov	r3, r2
 800395c:	e7cc      	b.n	80038f8 <_malloc_r+0x80>
 800395e:	230c      	movs	r3, #12
 8003960:	4638      	mov	r0, r7
 8003962:	603b      	str	r3, [r7, #0]
 8003964:	f000 f80e 	bl	8003984 <__malloc_unlock>
 8003968:	e797      	b.n	800389a <_malloc_r+0x22>
 800396a:	6025      	str	r5, [r4, #0]
 800396c:	e7dc      	b.n	8003928 <_malloc_r+0xb0>
 800396e:	605b      	str	r3, [r3, #4]
 8003970:	deff      	udf	#255	; 0xff
 8003972:	bf00      	nop
 8003974:	2000066c 	.word	0x2000066c

08003978 <__malloc_lock>:
 8003978:	4801      	ldr	r0, [pc, #4]	; (8003980 <__malloc_lock+0x8>)
 800397a:	f000 b86b 	b.w	8003a54 <__retarget_lock_acquire_recursive>
 800397e:	bf00      	nop
 8003980:	200007b0 	.word	0x200007b0

08003984 <__malloc_unlock>:
 8003984:	4801      	ldr	r0, [pc, #4]	; (800398c <__malloc_unlock+0x8>)
 8003986:	f000 b866 	b.w	8003a56 <__retarget_lock_release_recursive>
 800398a:	bf00      	nop
 800398c:	200007b0 	.word	0x200007b0

08003990 <siprintf>:
 8003990:	b40e      	push	{r1, r2, r3}
 8003992:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003996:	b500      	push	{lr}
 8003998:	b09c      	sub	sp, #112	; 0x70
 800399a:	ab1d      	add	r3, sp, #116	; 0x74
 800399c:	9002      	str	r0, [sp, #8]
 800399e:	9006      	str	r0, [sp, #24]
 80039a0:	9107      	str	r1, [sp, #28]
 80039a2:	9104      	str	r1, [sp, #16]
 80039a4:	4808      	ldr	r0, [pc, #32]	; (80039c8 <siprintf+0x38>)
 80039a6:	4909      	ldr	r1, [pc, #36]	; (80039cc <siprintf+0x3c>)
 80039a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80039ac:	9105      	str	r1, [sp, #20]
 80039ae:	6800      	ldr	r0, [r0, #0]
 80039b0:	a902      	add	r1, sp, #8
 80039b2:	9301      	str	r3, [sp, #4]
 80039b4:	f000 f8f2 	bl	8003b9c <_svfiprintf_r>
 80039b8:	2200      	movs	r2, #0
 80039ba:	9b02      	ldr	r3, [sp, #8]
 80039bc:	701a      	strb	r2, [r3, #0]
 80039be:	b01c      	add	sp, #112	; 0x70
 80039c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80039c4:	b003      	add	sp, #12
 80039c6:	4770      	bx	lr
 80039c8:	20000070 	.word	0x20000070
 80039cc:	ffff0208 	.word	0xffff0208

080039d0 <memset>:
 80039d0:	4603      	mov	r3, r0
 80039d2:	4402      	add	r2, r0
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d100      	bne.n	80039da <memset+0xa>
 80039d8:	4770      	bx	lr
 80039da:	f803 1b01 	strb.w	r1, [r3], #1
 80039de:	e7f9      	b.n	80039d4 <memset+0x4>

080039e0 <_sbrk_r>:
 80039e0:	b538      	push	{r3, r4, r5, lr}
 80039e2:	2300      	movs	r3, #0
 80039e4:	4d05      	ldr	r5, [pc, #20]	; (80039fc <_sbrk_r+0x1c>)
 80039e6:	4604      	mov	r4, r0
 80039e8:	4608      	mov	r0, r1
 80039ea:	602b      	str	r3, [r5, #0]
 80039ec:	f7fd fc5e 	bl	80012ac <_sbrk>
 80039f0:	1c43      	adds	r3, r0, #1
 80039f2:	d102      	bne.n	80039fa <_sbrk_r+0x1a>
 80039f4:	682b      	ldr	r3, [r5, #0]
 80039f6:	b103      	cbz	r3, 80039fa <_sbrk_r+0x1a>
 80039f8:	6023      	str	r3, [r4, #0]
 80039fa:	bd38      	pop	{r3, r4, r5, pc}
 80039fc:	200007ac 	.word	0x200007ac

08003a00 <__errno>:
 8003a00:	4b01      	ldr	r3, [pc, #4]	; (8003a08 <__errno+0x8>)
 8003a02:	6818      	ldr	r0, [r3, #0]
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	20000070 	.word	0x20000070

08003a0c <__libc_init_array>:
 8003a0c:	b570      	push	{r4, r5, r6, lr}
 8003a0e:	2600      	movs	r6, #0
 8003a10:	4d0c      	ldr	r5, [pc, #48]	; (8003a44 <__libc_init_array+0x38>)
 8003a12:	4c0d      	ldr	r4, [pc, #52]	; (8003a48 <__libc_init_array+0x3c>)
 8003a14:	1b64      	subs	r4, r4, r5
 8003a16:	10a4      	asrs	r4, r4, #2
 8003a18:	42a6      	cmp	r6, r4
 8003a1a:	d109      	bne.n	8003a30 <__libc_init_array+0x24>
 8003a1c:	f000 fbbe 	bl	800419c <_init>
 8003a20:	2600      	movs	r6, #0
 8003a22:	4d0a      	ldr	r5, [pc, #40]	; (8003a4c <__libc_init_array+0x40>)
 8003a24:	4c0a      	ldr	r4, [pc, #40]	; (8003a50 <__libc_init_array+0x44>)
 8003a26:	1b64      	subs	r4, r4, r5
 8003a28:	10a4      	asrs	r4, r4, #2
 8003a2a:	42a6      	cmp	r6, r4
 8003a2c:	d105      	bne.n	8003a3a <__libc_init_array+0x2e>
 8003a2e:	bd70      	pop	{r4, r5, r6, pc}
 8003a30:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a34:	4798      	blx	r3
 8003a36:	3601      	adds	r6, #1
 8003a38:	e7ee      	b.n	8003a18 <__libc_init_array+0xc>
 8003a3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a3e:	4798      	blx	r3
 8003a40:	3601      	adds	r6, #1
 8003a42:	e7f2      	b.n	8003a2a <__libc_init_array+0x1e>
 8003a44:	08005768 	.word	0x08005768
 8003a48:	08005768 	.word	0x08005768
 8003a4c:	08005768 	.word	0x08005768
 8003a50:	0800576c 	.word	0x0800576c

08003a54 <__retarget_lock_acquire_recursive>:
 8003a54:	4770      	bx	lr

08003a56 <__retarget_lock_release_recursive>:
 8003a56:	4770      	bx	lr

08003a58 <_free_r>:
 8003a58:	b538      	push	{r3, r4, r5, lr}
 8003a5a:	4605      	mov	r5, r0
 8003a5c:	2900      	cmp	r1, #0
 8003a5e:	d040      	beq.n	8003ae2 <_free_r+0x8a>
 8003a60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a64:	1f0c      	subs	r4, r1, #4
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	bfb8      	it	lt
 8003a6a:	18e4      	addlt	r4, r4, r3
 8003a6c:	f7ff ff84 	bl	8003978 <__malloc_lock>
 8003a70:	4a1c      	ldr	r2, [pc, #112]	; (8003ae4 <_free_r+0x8c>)
 8003a72:	6813      	ldr	r3, [r2, #0]
 8003a74:	b933      	cbnz	r3, 8003a84 <_free_r+0x2c>
 8003a76:	6063      	str	r3, [r4, #4]
 8003a78:	6014      	str	r4, [r2, #0]
 8003a7a:	4628      	mov	r0, r5
 8003a7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a80:	f7ff bf80 	b.w	8003984 <__malloc_unlock>
 8003a84:	42a3      	cmp	r3, r4
 8003a86:	d908      	bls.n	8003a9a <_free_r+0x42>
 8003a88:	6820      	ldr	r0, [r4, #0]
 8003a8a:	1821      	adds	r1, r4, r0
 8003a8c:	428b      	cmp	r3, r1
 8003a8e:	bf01      	itttt	eq
 8003a90:	6819      	ldreq	r1, [r3, #0]
 8003a92:	685b      	ldreq	r3, [r3, #4]
 8003a94:	1809      	addeq	r1, r1, r0
 8003a96:	6021      	streq	r1, [r4, #0]
 8003a98:	e7ed      	b.n	8003a76 <_free_r+0x1e>
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	b10b      	cbz	r3, 8003aa4 <_free_r+0x4c>
 8003aa0:	42a3      	cmp	r3, r4
 8003aa2:	d9fa      	bls.n	8003a9a <_free_r+0x42>
 8003aa4:	6811      	ldr	r1, [r2, #0]
 8003aa6:	1850      	adds	r0, r2, r1
 8003aa8:	42a0      	cmp	r0, r4
 8003aaa:	d10b      	bne.n	8003ac4 <_free_r+0x6c>
 8003aac:	6820      	ldr	r0, [r4, #0]
 8003aae:	4401      	add	r1, r0
 8003ab0:	1850      	adds	r0, r2, r1
 8003ab2:	4283      	cmp	r3, r0
 8003ab4:	6011      	str	r1, [r2, #0]
 8003ab6:	d1e0      	bne.n	8003a7a <_free_r+0x22>
 8003ab8:	6818      	ldr	r0, [r3, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	4408      	add	r0, r1
 8003abe:	6010      	str	r0, [r2, #0]
 8003ac0:	6053      	str	r3, [r2, #4]
 8003ac2:	e7da      	b.n	8003a7a <_free_r+0x22>
 8003ac4:	d902      	bls.n	8003acc <_free_r+0x74>
 8003ac6:	230c      	movs	r3, #12
 8003ac8:	602b      	str	r3, [r5, #0]
 8003aca:	e7d6      	b.n	8003a7a <_free_r+0x22>
 8003acc:	6820      	ldr	r0, [r4, #0]
 8003ace:	1821      	adds	r1, r4, r0
 8003ad0:	428b      	cmp	r3, r1
 8003ad2:	bf01      	itttt	eq
 8003ad4:	6819      	ldreq	r1, [r3, #0]
 8003ad6:	685b      	ldreq	r3, [r3, #4]
 8003ad8:	1809      	addeq	r1, r1, r0
 8003ada:	6021      	streq	r1, [r4, #0]
 8003adc:	6063      	str	r3, [r4, #4]
 8003ade:	6054      	str	r4, [r2, #4]
 8003ae0:	e7cb      	b.n	8003a7a <_free_r+0x22>
 8003ae2:	bd38      	pop	{r3, r4, r5, pc}
 8003ae4:	2000066c 	.word	0x2000066c

08003ae8 <__ssputs_r>:
 8003ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003aec:	461f      	mov	r7, r3
 8003aee:	688e      	ldr	r6, [r1, #8]
 8003af0:	4682      	mov	sl, r0
 8003af2:	42be      	cmp	r6, r7
 8003af4:	460c      	mov	r4, r1
 8003af6:	4690      	mov	r8, r2
 8003af8:	680b      	ldr	r3, [r1, #0]
 8003afa:	d82c      	bhi.n	8003b56 <__ssputs_r+0x6e>
 8003afc:	898a      	ldrh	r2, [r1, #12]
 8003afe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003b02:	d026      	beq.n	8003b52 <__ssputs_r+0x6a>
 8003b04:	6965      	ldr	r5, [r4, #20]
 8003b06:	6909      	ldr	r1, [r1, #16]
 8003b08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b0c:	eba3 0901 	sub.w	r9, r3, r1
 8003b10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003b14:	1c7b      	adds	r3, r7, #1
 8003b16:	444b      	add	r3, r9
 8003b18:	106d      	asrs	r5, r5, #1
 8003b1a:	429d      	cmp	r5, r3
 8003b1c:	bf38      	it	cc
 8003b1e:	461d      	movcc	r5, r3
 8003b20:	0553      	lsls	r3, r2, #21
 8003b22:	d527      	bpl.n	8003b74 <__ssputs_r+0x8c>
 8003b24:	4629      	mov	r1, r5
 8003b26:	f7ff fea7 	bl	8003878 <_malloc_r>
 8003b2a:	4606      	mov	r6, r0
 8003b2c:	b360      	cbz	r0, 8003b88 <__ssputs_r+0xa0>
 8003b2e:	464a      	mov	r2, r9
 8003b30:	6921      	ldr	r1, [r4, #16]
 8003b32:	f000 faed 	bl	8004110 <memcpy>
 8003b36:	89a3      	ldrh	r3, [r4, #12]
 8003b38:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b40:	81a3      	strh	r3, [r4, #12]
 8003b42:	6126      	str	r6, [r4, #16]
 8003b44:	444e      	add	r6, r9
 8003b46:	6026      	str	r6, [r4, #0]
 8003b48:	463e      	mov	r6, r7
 8003b4a:	6165      	str	r5, [r4, #20]
 8003b4c:	eba5 0509 	sub.w	r5, r5, r9
 8003b50:	60a5      	str	r5, [r4, #8]
 8003b52:	42be      	cmp	r6, r7
 8003b54:	d900      	bls.n	8003b58 <__ssputs_r+0x70>
 8003b56:	463e      	mov	r6, r7
 8003b58:	4632      	mov	r2, r6
 8003b5a:	4641      	mov	r1, r8
 8003b5c:	6820      	ldr	r0, [r4, #0]
 8003b5e:	f000 faaf 	bl	80040c0 <memmove>
 8003b62:	2000      	movs	r0, #0
 8003b64:	68a3      	ldr	r3, [r4, #8]
 8003b66:	1b9b      	subs	r3, r3, r6
 8003b68:	60a3      	str	r3, [r4, #8]
 8003b6a:	6823      	ldr	r3, [r4, #0]
 8003b6c:	4433      	add	r3, r6
 8003b6e:	6023      	str	r3, [r4, #0]
 8003b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b74:	462a      	mov	r2, r5
 8003b76:	f000 fad9 	bl	800412c <_realloc_r>
 8003b7a:	4606      	mov	r6, r0
 8003b7c:	2800      	cmp	r0, #0
 8003b7e:	d1e0      	bne.n	8003b42 <__ssputs_r+0x5a>
 8003b80:	4650      	mov	r0, sl
 8003b82:	6921      	ldr	r1, [r4, #16]
 8003b84:	f7ff ff68 	bl	8003a58 <_free_r>
 8003b88:	230c      	movs	r3, #12
 8003b8a:	f8ca 3000 	str.w	r3, [sl]
 8003b8e:	89a3      	ldrh	r3, [r4, #12]
 8003b90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b98:	81a3      	strh	r3, [r4, #12]
 8003b9a:	e7e9      	b.n	8003b70 <__ssputs_r+0x88>

08003b9c <_svfiprintf_r>:
 8003b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ba0:	4698      	mov	r8, r3
 8003ba2:	898b      	ldrh	r3, [r1, #12]
 8003ba4:	4607      	mov	r7, r0
 8003ba6:	061b      	lsls	r3, r3, #24
 8003ba8:	460d      	mov	r5, r1
 8003baa:	4614      	mov	r4, r2
 8003bac:	b09d      	sub	sp, #116	; 0x74
 8003bae:	d50e      	bpl.n	8003bce <_svfiprintf_r+0x32>
 8003bb0:	690b      	ldr	r3, [r1, #16]
 8003bb2:	b963      	cbnz	r3, 8003bce <_svfiprintf_r+0x32>
 8003bb4:	2140      	movs	r1, #64	; 0x40
 8003bb6:	f7ff fe5f 	bl	8003878 <_malloc_r>
 8003bba:	6028      	str	r0, [r5, #0]
 8003bbc:	6128      	str	r0, [r5, #16]
 8003bbe:	b920      	cbnz	r0, 8003bca <_svfiprintf_r+0x2e>
 8003bc0:	230c      	movs	r3, #12
 8003bc2:	603b      	str	r3, [r7, #0]
 8003bc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003bc8:	e0d0      	b.n	8003d6c <_svfiprintf_r+0x1d0>
 8003bca:	2340      	movs	r3, #64	; 0x40
 8003bcc:	616b      	str	r3, [r5, #20]
 8003bce:	2300      	movs	r3, #0
 8003bd0:	9309      	str	r3, [sp, #36]	; 0x24
 8003bd2:	2320      	movs	r3, #32
 8003bd4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003bd8:	2330      	movs	r3, #48	; 0x30
 8003bda:	f04f 0901 	mov.w	r9, #1
 8003bde:	f8cd 800c 	str.w	r8, [sp, #12]
 8003be2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003d84 <_svfiprintf_r+0x1e8>
 8003be6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003bea:	4623      	mov	r3, r4
 8003bec:	469a      	mov	sl, r3
 8003bee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003bf2:	b10a      	cbz	r2, 8003bf8 <_svfiprintf_r+0x5c>
 8003bf4:	2a25      	cmp	r2, #37	; 0x25
 8003bf6:	d1f9      	bne.n	8003bec <_svfiprintf_r+0x50>
 8003bf8:	ebba 0b04 	subs.w	fp, sl, r4
 8003bfc:	d00b      	beq.n	8003c16 <_svfiprintf_r+0x7a>
 8003bfe:	465b      	mov	r3, fp
 8003c00:	4622      	mov	r2, r4
 8003c02:	4629      	mov	r1, r5
 8003c04:	4638      	mov	r0, r7
 8003c06:	f7ff ff6f 	bl	8003ae8 <__ssputs_r>
 8003c0a:	3001      	adds	r0, #1
 8003c0c:	f000 80a9 	beq.w	8003d62 <_svfiprintf_r+0x1c6>
 8003c10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c12:	445a      	add	r2, fp
 8003c14:	9209      	str	r2, [sp, #36]	; 0x24
 8003c16:	f89a 3000 	ldrb.w	r3, [sl]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 80a1 	beq.w	8003d62 <_svfiprintf_r+0x1c6>
 8003c20:	2300      	movs	r3, #0
 8003c22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c2a:	f10a 0a01 	add.w	sl, sl, #1
 8003c2e:	9304      	str	r3, [sp, #16]
 8003c30:	9307      	str	r3, [sp, #28]
 8003c32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c36:	931a      	str	r3, [sp, #104]	; 0x68
 8003c38:	4654      	mov	r4, sl
 8003c3a:	2205      	movs	r2, #5
 8003c3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c40:	4850      	ldr	r0, [pc, #320]	; (8003d84 <_svfiprintf_r+0x1e8>)
 8003c42:	f000 fa57 	bl	80040f4 <memchr>
 8003c46:	9a04      	ldr	r2, [sp, #16]
 8003c48:	b9d8      	cbnz	r0, 8003c82 <_svfiprintf_r+0xe6>
 8003c4a:	06d0      	lsls	r0, r2, #27
 8003c4c:	bf44      	itt	mi
 8003c4e:	2320      	movmi	r3, #32
 8003c50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c54:	0711      	lsls	r1, r2, #28
 8003c56:	bf44      	itt	mi
 8003c58:	232b      	movmi	r3, #43	; 0x2b
 8003c5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c5e:	f89a 3000 	ldrb.w	r3, [sl]
 8003c62:	2b2a      	cmp	r3, #42	; 0x2a
 8003c64:	d015      	beq.n	8003c92 <_svfiprintf_r+0xf6>
 8003c66:	4654      	mov	r4, sl
 8003c68:	2000      	movs	r0, #0
 8003c6a:	f04f 0c0a 	mov.w	ip, #10
 8003c6e:	9a07      	ldr	r2, [sp, #28]
 8003c70:	4621      	mov	r1, r4
 8003c72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c76:	3b30      	subs	r3, #48	; 0x30
 8003c78:	2b09      	cmp	r3, #9
 8003c7a:	d94d      	bls.n	8003d18 <_svfiprintf_r+0x17c>
 8003c7c:	b1b0      	cbz	r0, 8003cac <_svfiprintf_r+0x110>
 8003c7e:	9207      	str	r2, [sp, #28]
 8003c80:	e014      	b.n	8003cac <_svfiprintf_r+0x110>
 8003c82:	eba0 0308 	sub.w	r3, r0, r8
 8003c86:	fa09 f303 	lsl.w	r3, r9, r3
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	46a2      	mov	sl, r4
 8003c8e:	9304      	str	r3, [sp, #16]
 8003c90:	e7d2      	b.n	8003c38 <_svfiprintf_r+0x9c>
 8003c92:	9b03      	ldr	r3, [sp, #12]
 8003c94:	1d19      	adds	r1, r3, #4
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	9103      	str	r1, [sp, #12]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	bfbb      	ittet	lt
 8003c9e:	425b      	neglt	r3, r3
 8003ca0:	f042 0202 	orrlt.w	r2, r2, #2
 8003ca4:	9307      	strge	r3, [sp, #28]
 8003ca6:	9307      	strlt	r3, [sp, #28]
 8003ca8:	bfb8      	it	lt
 8003caa:	9204      	strlt	r2, [sp, #16]
 8003cac:	7823      	ldrb	r3, [r4, #0]
 8003cae:	2b2e      	cmp	r3, #46	; 0x2e
 8003cb0:	d10c      	bne.n	8003ccc <_svfiprintf_r+0x130>
 8003cb2:	7863      	ldrb	r3, [r4, #1]
 8003cb4:	2b2a      	cmp	r3, #42	; 0x2a
 8003cb6:	d134      	bne.n	8003d22 <_svfiprintf_r+0x186>
 8003cb8:	9b03      	ldr	r3, [sp, #12]
 8003cba:	3402      	adds	r4, #2
 8003cbc:	1d1a      	adds	r2, r3, #4
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	9203      	str	r2, [sp, #12]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	bfb8      	it	lt
 8003cc6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003cca:	9305      	str	r3, [sp, #20]
 8003ccc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003d88 <_svfiprintf_r+0x1ec>
 8003cd0:	2203      	movs	r2, #3
 8003cd2:	4650      	mov	r0, sl
 8003cd4:	7821      	ldrb	r1, [r4, #0]
 8003cd6:	f000 fa0d 	bl	80040f4 <memchr>
 8003cda:	b138      	cbz	r0, 8003cec <_svfiprintf_r+0x150>
 8003cdc:	2240      	movs	r2, #64	; 0x40
 8003cde:	9b04      	ldr	r3, [sp, #16]
 8003ce0:	eba0 000a 	sub.w	r0, r0, sl
 8003ce4:	4082      	lsls	r2, r0
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	3401      	adds	r4, #1
 8003cea:	9304      	str	r3, [sp, #16]
 8003cec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cf0:	2206      	movs	r2, #6
 8003cf2:	4826      	ldr	r0, [pc, #152]	; (8003d8c <_svfiprintf_r+0x1f0>)
 8003cf4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003cf8:	f000 f9fc 	bl	80040f4 <memchr>
 8003cfc:	2800      	cmp	r0, #0
 8003cfe:	d038      	beq.n	8003d72 <_svfiprintf_r+0x1d6>
 8003d00:	4b23      	ldr	r3, [pc, #140]	; (8003d90 <_svfiprintf_r+0x1f4>)
 8003d02:	bb1b      	cbnz	r3, 8003d4c <_svfiprintf_r+0x1b0>
 8003d04:	9b03      	ldr	r3, [sp, #12]
 8003d06:	3307      	adds	r3, #7
 8003d08:	f023 0307 	bic.w	r3, r3, #7
 8003d0c:	3308      	adds	r3, #8
 8003d0e:	9303      	str	r3, [sp, #12]
 8003d10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d12:	4433      	add	r3, r6
 8003d14:	9309      	str	r3, [sp, #36]	; 0x24
 8003d16:	e768      	b.n	8003bea <_svfiprintf_r+0x4e>
 8003d18:	460c      	mov	r4, r1
 8003d1a:	2001      	movs	r0, #1
 8003d1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d20:	e7a6      	b.n	8003c70 <_svfiprintf_r+0xd4>
 8003d22:	2300      	movs	r3, #0
 8003d24:	f04f 0c0a 	mov.w	ip, #10
 8003d28:	4619      	mov	r1, r3
 8003d2a:	3401      	adds	r4, #1
 8003d2c:	9305      	str	r3, [sp, #20]
 8003d2e:	4620      	mov	r0, r4
 8003d30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d34:	3a30      	subs	r2, #48	; 0x30
 8003d36:	2a09      	cmp	r2, #9
 8003d38:	d903      	bls.n	8003d42 <_svfiprintf_r+0x1a6>
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d0c6      	beq.n	8003ccc <_svfiprintf_r+0x130>
 8003d3e:	9105      	str	r1, [sp, #20]
 8003d40:	e7c4      	b.n	8003ccc <_svfiprintf_r+0x130>
 8003d42:	4604      	mov	r4, r0
 8003d44:	2301      	movs	r3, #1
 8003d46:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d4a:	e7f0      	b.n	8003d2e <_svfiprintf_r+0x192>
 8003d4c:	ab03      	add	r3, sp, #12
 8003d4e:	9300      	str	r3, [sp, #0]
 8003d50:	462a      	mov	r2, r5
 8003d52:	4638      	mov	r0, r7
 8003d54:	4b0f      	ldr	r3, [pc, #60]	; (8003d94 <_svfiprintf_r+0x1f8>)
 8003d56:	a904      	add	r1, sp, #16
 8003d58:	f3af 8000 	nop.w
 8003d5c:	1c42      	adds	r2, r0, #1
 8003d5e:	4606      	mov	r6, r0
 8003d60:	d1d6      	bne.n	8003d10 <_svfiprintf_r+0x174>
 8003d62:	89ab      	ldrh	r3, [r5, #12]
 8003d64:	065b      	lsls	r3, r3, #25
 8003d66:	f53f af2d 	bmi.w	8003bc4 <_svfiprintf_r+0x28>
 8003d6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d6c:	b01d      	add	sp, #116	; 0x74
 8003d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d72:	ab03      	add	r3, sp, #12
 8003d74:	9300      	str	r3, [sp, #0]
 8003d76:	462a      	mov	r2, r5
 8003d78:	4638      	mov	r0, r7
 8003d7a:	4b06      	ldr	r3, [pc, #24]	; (8003d94 <_svfiprintf_r+0x1f8>)
 8003d7c:	a904      	add	r1, sp, #16
 8003d7e:	f000 f87d 	bl	8003e7c <_printf_i>
 8003d82:	e7eb      	b.n	8003d5c <_svfiprintf_r+0x1c0>
 8003d84:	08005732 	.word	0x08005732
 8003d88:	08005738 	.word	0x08005738
 8003d8c:	0800573c 	.word	0x0800573c
 8003d90:	00000000 	.word	0x00000000
 8003d94:	08003ae9 	.word	0x08003ae9

08003d98 <_printf_common>:
 8003d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d9c:	4616      	mov	r6, r2
 8003d9e:	4699      	mov	r9, r3
 8003da0:	688a      	ldr	r2, [r1, #8]
 8003da2:	690b      	ldr	r3, [r1, #16]
 8003da4:	4607      	mov	r7, r0
 8003da6:	4293      	cmp	r3, r2
 8003da8:	bfb8      	it	lt
 8003daa:	4613      	movlt	r3, r2
 8003dac:	6033      	str	r3, [r6, #0]
 8003dae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003db2:	460c      	mov	r4, r1
 8003db4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003db8:	b10a      	cbz	r2, 8003dbe <_printf_common+0x26>
 8003dba:	3301      	adds	r3, #1
 8003dbc:	6033      	str	r3, [r6, #0]
 8003dbe:	6823      	ldr	r3, [r4, #0]
 8003dc0:	0699      	lsls	r1, r3, #26
 8003dc2:	bf42      	ittt	mi
 8003dc4:	6833      	ldrmi	r3, [r6, #0]
 8003dc6:	3302      	addmi	r3, #2
 8003dc8:	6033      	strmi	r3, [r6, #0]
 8003dca:	6825      	ldr	r5, [r4, #0]
 8003dcc:	f015 0506 	ands.w	r5, r5, #6
 8003dd0:	d106      	bne.n	8003de0 <_printf_common+0x48>
 8003dd2:	f104 0a19 	add.w	sl, r4, #25
 8003dd6:	68e3      	ldr	r3, [r4, #12]
 8003dd8:	6832      	ldr	r2, [r6, #0]
 8003dda:	1a9b      	subs	r3, r3, r2
 8003ddc:	42ab      	cmp	r3, r5
 8003dde:	dc2b      	bgt.n	8003e38 <_printf_common+0xa0>
 8003de0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003de4:	1e13      	subs	r3, r2, #0
 8003de6:	6822      	ldr	r2, [r4, #0]
 8003de8:	bf18      	it	ne
 8003dea:	2301      	movne	r3, #1
 8003dec:	0692      	lsls	r2, r2, #26
 8003dee:	d430      	bmi.n	8003e52 <_printf_common+0xba>
 8003df0:	4649      	mov	r1, r9
 8003df2:	4638      	mov	r0, r7
 8003df4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003df8:	47c0      	blx	r8
 8003dfa:	3001      	adds	r0, #1
 8003dfc:	d023      	beq.n	8003e46 <_printf_common+0xae>
 8003dfe:	6823      	ldr	r3, [r4, #0]
 8003e00:	6922      	ldr	r2, [r4, #16]
 8003e02:	f003 0306 	and.w	r3, r3, #6
 8003e06:	2b04      	cmp	r3, #4
 8003e08:	bf14      	ite	ne
 8003e0a:	2500      	movne	r5, #0
 8003e0c:	6833      	ldreq	r3, [r6, #0]
 8003e0e:	f04f 0600 	mov.w	r6, #0
 8003e12:	bf08      	it	eq
 8003e14:	68e5      	ldreq	r5, [r4, #12]
 8003e16:	f104 041a 	add.w	r4, r4, #26
 8003e1a:	bf08      	it	eq
 8003e1c:	1aed      	subeq	r5, r5, r3
 8003e1e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003e22:	bf08      	it	eq
 8003e24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	bfc4      	itt	gt
 8003e2c:	1a9b      	subgt	r3, r3, r2
 8003e2e:	18ed      	addgt	r5, r5, r3
 8003e30:	42b5      	cmp	r5, r6
 8003e32:	d11a      	bne.n	8003e6a <_printf_common+0xd2>
 8003e34:	2000      	movs	r0, #0
 8003e36:	e008      	b.n	8003e4a <_printf_common+0xb2>
 8003e38:	2301      	movs	r3, #1
 8003e3a:	4652      	mov	r2, sl
 8003e3c:	4649      	mov	r1, r9
 8003e3e:	4638      	mov	r0, r7
 8003e40:	47c0      	blx	r8
 8003e42:	3001      	adds	r0, #1
 8003e44:	d103      	bne.n	8003e4e <_printf_common+0xb6>
 8003e46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e4e:	3501      	adds	r5, #1
 8003e50:	e7c1      	b.n	8003dd6 <_printf_common+0x3e>
 8003e52:	2030      	movs	r0, #48	; 0x30
 8003e54:	18e1      	adds	r1, r4, r3
 8003e56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e5a:	1c5a      	adds	r2, r3, #1
 8003e5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e60:	4422      	add	r2, r4
 8003e62:	3302      	adds	r3, #2
 8003e64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e68:	e7c2      	b.n	8003df0 <_printf_common+0x58>
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	4622      	mov	r2, r4
 8003e6e:	4649      	mov	r1, r9
 8003e70:	4638      	mov	r0, r7
 8003e72:	47c0      	blx	r8
 8003e74:	3001      	adds	r0, #1
 8003e76:	d0e6      	beq.n	8003e46 <_printf_common+0xae>
 8003e78:	3601      	adds	r6, #1
 8003e7a:	e7d9      	b.n	8003e30 <_printf_common+0x98>

08003e7c <_printf_i>:
 8003e7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e80:	7e0f      	ldrb	r7, [r1, #24]
 8003e82:	4691      	mov	r9, r2
 8003e84:	2f78      	cmp	r7, #120	; 0x78
 8003e86:	4680      	mov	r8, r0
 8003e88:	460c      	mov	r4, r1
 8003e8a:	469a      	mov	sl, r3
 8003e8c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003e8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003e92:	d807      	bhi.n	8003ea4 <_printf_i+0x28>
 8003e94:	2f62      	cmp	r7, #98	; 0x62
 8003e96:	d80a      	bhi.n	8003eae <_printf_i+0x32>
 8003e98:	2f00      	cmp	r7, #0
 8003e9a:	f000 80d5 	beq.w	8004048 <_printf_i+0x1cc>
 8003e9e:	2f58      	cmp	r7, #88	; 0x58
 8003ea0:	f000 80c1 	beq.w	8004026 <_printf_i+0x1aa>
 8003ea4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ea8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003eac:	e03a      	b.n	8003f24 <_printf_i+0xa8>
 8003eae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003eb2:	2b15      	cmp	r3, #21
 8003eb4:	d8f6      	bhi.n	8003ea4 <_printf_i+0x28>
 8003eb6:	a101      	add	r1, pc, #4	; (adr r1, 8003ebc <_printf_i+0x40>)
 8003eb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ebc:	08003f15 	.word	0x08003f15
 8003ec0:	08003f29 	.word	0x08003f29
 8003ec4:	08003ea5 	.word	0x08003ea5
 8003ec8:	08003ea5 	.word	0x08003ea5
 8003ecc:	08003ea5 	.word	0x08003ea5
 8003ed0:	08003ea5 	.word	0x08003ea5
 8003ed4:	08003f29 	.word	0x08003f29
 8003ed8:	08003ea5 	.word	0x08003ea5
 8003edc:	08003ea5 	.word	0x08003ea5
 8003ee0:	08003ea5 	.word	0x08003ea5
 8003ee4:	08003ea5 	.word	0x08003ea5
 8003ee8:	0800402f 	.word	0x0800402f
 8003eec:	08003f55 	.word	0x08003f55
 8003ef0:	08003fe9 	.word	0x08003fe9
 8003ef4:	08003ea5 	.word	0x08003ea5
 8003ef8:	08003ea5 	.word	0x08003ea5
 8003efc:	08004051 	.word	0x08004051
 8003f00:	08003ea5 	.word	0x08003ea5
 8003f04:	08003f55 	.word	0x08003f55
 8003f08:	08003ea5 	.word	0x08003ea5
 8003f0c:	08003ea5 	.word	0x08003ea5
 8003f10:	08003ff1 	.word	0x08003ff1
 8003f14:	682b      	ldr	r3, [r5, #0]
 8003f16:	1d1a      	adds	r2, r3, #4
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	602a      	str	r2, [r5, #0]
 8003f1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f24:	2301      	movs	r3, #1
 8003f26:	e0a0      	b.n	800406a <_printf_i+0x1ee>
 8003f28:	6820      	ldr	r0, [r4, #0]
 8003f2a:	682b      	ldr	r3, [r5, #0]
 8003f2c:	0607      	lsls	r7, r0, #24
 8003f2e:	f103 0104 	add.w	r1, r3, #4
 8003f32:	6029      	str	r1, [r5, #0]
 8003f34:	d501      	bpl.n	8003f3a <_printf_i+0xbe>
 8003f36:	681e      	ldr	r6, [r3, #0]
 8003f38:	e003      	b.n	8003f42 <_printf_i+0xc6>
 8003f3a:	0646      	lsls	r6, r0, #25
 8003f3c:	d5fb      	bpl.n	8003f36 <_printf_i+0xba>
 8003f3e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003f42:	2e00      	cmp	r6, #0
 8003f44:	da03      	bge.n	8003f4e <_printf_i+0xd2>
 8003f46:	232d      	movs	r3, #45	; 0x2d
 8003f48:	4276      	negs	r6, r6
 8003f4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f4e:	230a      	movs	r3, #10
 8003f50:	4859      	ldr	r0, [pc, #356]	; (80040b8 <_printf_i+0x23c>)
 8003f52:	e012      	b.n	8003f7a <_printf_i+0xfe>
 8003f54:	682b      	ldr	r3, [r5, #0]
 8003f56:	6820      	ldr	r0, [r4, #0]
 8003f58:	1d19      	adds	r1, r3, #4
 8003f5a:	6029      	str	r1, [r5, #0]
 8003f5c:	0605      	lsls	r5, r0, #24
 8003f5e:	d501      	bpl.n	8003f64 <_printf_i+0xe8>
 8003f60:	681e      	ldr	r6, [r3, #0]
 8003f62:	e002      	b.n	8003f6a <_printf_i+0xee>
 8003f64:	0641      	lsls	r1, r0, #25
 8003f66:	d5fb      	bpl.n	8003f60 <_printf_i+0xe4>
 8003f68:	881e      	ldrh	r6, [r3, #0]
 8003f6a:	2f6f      	cmp	r7, #111	; 0x6f
 8003f6c:	bf0c      	ite	eq
 8003f6e:	2308      	moveq	r3, #8
 8003f70:	230a      	movne	r3, #10
 8003f72:	4851      	ldr	r0, [pc, #324]	; (80040b8 <_printf_i+0x23c>)
 8003f74:	2100      	movs	r1, #0
 8003f76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f7a:	6865      	ldr	r5, [r4, #4]
 8003f7c:	2d00      	cmp	r5, #0
 8003f7e:	bfa8      	it	ge
 8003f80:	6821      	ldrge	r1, [r4, #0]
 8003f82:	60a5      	str	r5, [r4, #8]
 8003f84:	bfa4      	itt	ge
 8003f86:	f021 0104 	bicge.w	r1, r1, #4
 8003f8a:	6021      	strge	r1, [r4, #0]
 8003f8c:	b90e      	cbnz	r6, 8003f92 <_printf_i+0x116>
 8003f8e:	2d00      	cmp	r5, #0
 8003f90:	d04b      	beq.n	800402a <_printf_i+0x1ae>
 8003f92:	4615      	mov	r5, r2
 8003f94:	fbb6 f1f3 	udiv	r1, r6, r3
 8003f98:	fb03 6711 	mls	r7, r3, r1, r6
 8003f9c:	5dc7      	ldrb	r7, [r0, r7]
 8003f9e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003fa2:	4637      	mov	r7, r6
 8003fa4:	42bb      	cmp	r3, r7
 8003fa6:	460e      	mov	r6, r1
 8003fa8:	d9f4      	bls.n	8003f94 <_printf_i+0x118>
 8003faa:	2b08      	cmp	r3, #8
 8003fac:	d10b      	bne.n	8003fc6 <_printf_i+0x14a>
 8003fae:	6823      	ldr	r3, [r4, #0]
 8003fb0:	07de      	lsls	r6, r3, #31
 8003fb2:	d508      	bpl.n	8003fc6 <_printf_i+0x14a>
 8003fb4:	6923      	ldr	r3, [r4, #16]
 8003fb6:	6861      	ldr	r1, [r4, #4]
 8003fb8:	4299      	cmp	r1, r3
 8003fba:	bfde      	ittt	le
 8003fbc:	2330      	movle	r3, #48	; 0x30
 8003fbe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003fc2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003fc6:	1b52      	subs	r2, r2, r5
 8003fc8:	6122      	str	r2, [r4, #16]
 8003fca:	464b      	mov	r3, r9
 8003fcc:	4621      	mov	r1, r4
 8003fce:	4640      	mov	r0, r8
 8003fd0:	f8cd a000 	str.w	sl, [sp]
 8003fd4:	aa03      	add	r2, sp, #12
 8003fd6:	f7ff fedf 	bl	8003d98 <_printf_common>
 8003fda:	3001      	adds	r0, #1
 8003fdc:	d14a      	bne.n	8004074 <_printf_i+0x1f8>
 8003fde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fe2:	b004      	add	sp, #16
 8003fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fe8:	6823      	ldr	r3, [r4, #0]
 8003fea:	f043 0320 	orr.w	r3, r3, #32
 8003fee:	6023      	str	r3, [r4, #0]
 8003ff0:	2778      	movs	r7, #120	; 0x78
 8003ff2:	4832      	ldr	r0, [pc, #200]	; (80040bc <_printf_i+0x240>)
 8003ff4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003ff8:	6823      	ldr	r3, [r4, #0]
 8003ffa:	6829      	ldr	r1, [r5, #0]
 8003ffc:	061f      	lsls	r7, r3, #24
 8003ffe:	f851 6b04 	ldr.w	r6, [r1], #4
 8004002:	d402      	bmi.n	800400a <_printf_i+0x18e>
 8004004:	065f      	lsls	r7, r3, #25
 8004006:	bf48      	it	mi
 8004008:	b2b6      	uxthmi	r6, r6
 800400a:	07df      	lsls	r7, r3, #31
 800400c:	bf48      	it	mi
 800400e:	f043 0320 	orrmi.w	r3, r3, #32
 8004012:	6029      	str	r1, [r5, #0]
 8004014:	bf48      	it	mi
 8004016:	6023      	strmi	r3, [r4, #0]
 8004018:	b91e      	cbnz	r6, 8004022 <_printf_i+0x1a6>
 800401a:	6823      	ldr	r3, [r4, #0]
 800401c:	f023 0320 	bic.w	r3, r3, #32
 8004020:	6023      	str	r3, [r4, #0]
 8004022:	2310      	movs	r3, #16
 8004024:	e7a6      	b.n	8003f74 <_printf_i+0xf8>
 8004026:	4824      	ldr	r0, [pc, #144]	; (80040b8 <_printf_i+0x23c>)
 8004028:	e7e4      	b.n	8003ff4 <_printf_i+0x178>
 800402a:	4615      	mov	r5, r2
 800402c:	e7bd      	b.n	8003faa <_printf_i+0x12e>
 800402e:	682b      	ldr	r3, [r5, #0]
 8004030:	6826      	ldr	r6, [r4, #0]
 8004032:	1d18      	adds	r0, r3, #4
 8004034:	6961      	ldr	r1, [r4, #20]
 8004036:	6028      	str	r0, [r5, #0]
 8004038:	0635      	lsls	r5, r6, #24
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	d501      	bpl.n	8004042 <_printf_i+0x1c6>
 800403e:	6019      	str	r1, [r3, #0]
 8004040:	e002      	b.n	8004048 <_printf_i+0x1cc>
 8004042:	0670      	lsls	r0, r6, #25
 8004044:	d5fb      	bpl.n	800403e <_printf_i+0x1c2>
 8004046:	8019      	strh	r1, [r3, #0]
 8004048:	2300      	movs	r3, #0
 800404a:	4615      	mov	r5, r2
 800404c:	6123      	str	r3, [r4, #16]
 800404e:	e7bc      	b.n	8003fca <_printf_i+0x14e>
 8004050:	682b      	ldr	r3, [r5, #0]
 8004052:	2100      	movs	r1, #0
 8004054:	1d1a      	adds	r2, r3, #4
 8004056:	602a      	str	r2, [r5, #0]
 8004058:	681d      	ldr	r5, [r3, #0]
 800405a:	6862      	ldr	r2, [r4, #4]
 800405c:	4628      	mov	r0, r5
 800405e:	f000 f849 	bl	80040f4 <memchr>
 8004062:	b108      	cbz	r0, 8004068 <_printf_i+0x1ec>
 8004064:	1b40      	subs	r0, r0, r5
 8004066:	6060      	str	r0, [r4, #4]
 8004068:	6863      	ldr	r3, [r4, #4]
 800406a:	6123      	str	r3, [r4, #16]
 800406c:	2300      	movs	r3, #0
 800406e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004072:	e7aa      	b.n	8003fca <_printf_i+0x14e>
 8004074:	462a      	mov	r2, r5
 8004076:	4649      	mov	r1, r9
 8004078:	4640      	mov	r0, r8
 800407a:	6923      	ldr	r3, [r4, #16]
 800407c:	47d0      	blx	sl
 800407e:	3001      	adds	r0, #1
 8004080:	d0ad      	beq.n	8003fde <_printf_i+0x162>
 8004082:	6823      	ldr	r3, [r4, #0]
 8004084:	079b      	lsls	r3, r3, #30
 8004086:	d413      	bmi.n	80040b0 <_printf_i+0x234>
 8004088:	68e0      	ldr	r0, [r4, #12]
 800408a:	9b03      	ldr	r3, [sp, #12]
 800408c:	4298      	cmp	r0, r3
 800408e:	bfb8      	it	lt
 8004090:	4618      	movlt	r0, r3
 8004092:	e7a6      	b.n	8003fe2 <_printf_i+0x166>
 8004094:	2301      	movs	r3, #1
 8004096:	4632      	mov	r2, r6
 8004098:	4649      	mov	r1, r9
 800409a:	4640      	mov	r0, r8
 800409c:	47d0      	blx	sl
 800409e:	3001      	adds	r0, #1
 80040a0:	d09d      	beq.n	8003fde <_printf_i+0x162>
 80040a2:	3501      	adds	r5, #1
 80040a4:	68e3      	ldr	r3, [r4, #12]
 80040a6:	9903      	ldr	r1, [sp, #12]
 80040a8:	1a5b      	subs	r3, r3, r1
 80040aa:	42ab      	cmp	r3, r5
 80040ac:	dcf2      	bgt.n	8004094 <_printf_i+0x218>
 80040ae:	e7eb      	b.n	8004088 <_printf_i+0x20c>
 80040b0:	2500      	movs	r5, #0
 80040b2:	f104 0619 	add.w	r6, r4, #25
 80040b6:	e7f5      	b.n	80040a4 <_printf_i+0x228>
 80040b8:	08005743 	.word	0x08005743
 80040bc:	08005754 	.word	0x08005754

080040c0 <memmove>:
 80040c0:	4288      	cmp	r0, r1
 80040c2:	b510      	push	{r4, lr}
 80040c4:	eb01 0402 	add.w	r4, r1, r2
 80040c8:	d902      	bls.n	80040d0 <memmove+0x10>
 80040ca:	4284      	cmp	r4, r0
 80040cc:	4623      	mov	r3, r4
 80040ce:	d807      	bhi.n	80040e0 <memmove+0x20>
 80040d0:	1e43      	subs	r3, r0, #1
 80040d2:	42a1      	cmp	r1, r4
 80040d4:	d008      	beq.n	80040e8 <memmove+0x28>
 80040d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80040da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80040de:	e7f8      	b.n	80040d2 <memmove+0x12>
 80040e0:	4601      	mov	r1, r0
 80040e2:	4402      	add	r2, r0
 80040e4:	428a      	cmp	r2, r1
 80040e6:	d100      	bne.n	80040ea <memmove+0x2a>
 80040e8:	bd10      	pop	{r4, pc}
 80040ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80040ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80040f2:	e7f7      	b.n	80040e4 <memmove+0x24>

080040f4 <memchr>:
 80040f4:	4603      	mov	r3, r0
 80040f6:	b510      	push	{r4, lr}
 80040f8:	b2c9      	uxtb	r1, r1
 80040fa:	4402      	add	r2, r0
 80040fc:	4293      	cmp	r3, r2
 80040fe:	4618      	mov	r0, r3
 8004100:	d101      	bne.n	8004106 <memchr+0x12>
 8004102:	2000      	movs	r0, #0
 8004104:	e003      	b.n	800410e <memchr+0x1a>
 8004106:	7804      	ldrb	r4, [r0, #0]
 8004108:	3301      	adds	r3, #1
 800410a:	428c      	cmp	r4, r1
 800410c:	d1f6      	bne.n	80040fc <memchr+0x8>
 800410e:	bd10      	pop	{r4, pc}

08004110 <memcpy>:
 8004110:	440a      	add	r2, r1
 8004112:	4291      	cmp	r1, r2
 8004114:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004118:	d100      	bne.n	800411c <memcpy+0xc>
 800411a:	4770      	bx	lr
 800411c:	b510      	push	{r4, lr}
 800411e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004122:	4291      	cmp	r1, r2
 8004124:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004128:	d1f9      	bne.n	800411e <memcpy+0xe>
 800412a:	bd10      	pop	{r4, pc}

0800412c <_realloc_r>:
 800412c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004130:	4680      	mov	r8, r0
 8004132:	4614      	mov	r4, r2
 8004134:	460e      	mov	r6, r1
 8004136:	b921      	cbnz	r1, 8004142 <_realloc_r+0x16>
 8004138:	4611      	mov	r1, r2
 800413a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800413e:	f7ff bb9b 	b.w	8003878 <_malloc_r>
 8004142:	b92a      	cbnz	r2, 8004150 <_realloc_r+0x24>
 8004144:	f7ff fc88 	bl	8003a58 <_free_r>
 8004148:	4625      	mov	r5, r4
 800414a:	4628      	mov	r0, r5
 800414c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004150:	f000 f81b 	bl	800418a <_malloc_usable_size_r>
 8004154:	4284      	cmp	r4, r0
 8004156:	4607      	mov	r7, r0
 8004158:	d802      	bhi.n	8004160 <_realloc_r+0x34>
 800415a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800415e:	d812      	bhi.n	8004186 <_realloc_r+0x5a>
 8004160:	4621      	mov	r1, r4
 8004162:	4640      	mov	r0, r8
 8004164:	f7ff fb88 	bl	8003878 <_malloc_r>
 8004168:	4605      	mov	r5, r0
 800416a:	2800      	cmp	r0, #0
 800416c:	d0ed      	beq.n	800414a <_realloc_r+0x1e>
 800416e:	42bc      	cmp	r4, r7
 8004170:	4622      	mov	r2, r4
 8004172:	4631      	mov	r1, r6
 8004174:	bf28      	it	cs
 8004176:	463a      	movcs	r2, r7
 8004178:	f7ff ffca 	bl	8004110 <memcpy>
 800417c:	4631      	mov	r1, r6
 800417e:	4640      	mov	r0, r8
 8004180:	f7ff fc6a 	bl	8003a58 <_free_r>
 8004184:	e7e1      	b.n	800414a <_realloc_r+0x1e>
 8004186:	4635      	mov	r5, r6
 8004188:	e7df      	b.n	800414a <_realloc_r+0x1e>

0800418a <_malloc_usable_size_r>:
 800418a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800418e:	1f18      	subs	r0, r3, #4
 8004190:	2b00      	cmp	r3, #0
 8004192:	bfbc      	itt	lt
 8004194:	580b      	ldrlt	r3, [r1, r0]
 8004196:	18c0      	addlt	r0, r0, r3
 8004198:	4770      	bx	lr
	...

0800419c <_init>:
 800419c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800419e:	bf00      	nop
 80041a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041a2:	bc08      	pop	{r3}
 80041a4:	469e      	mov	lr, r3
 80041a6:	4770      	bx	lr

080041a8 <_fini>:
 80041a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041aa:	bf00      	nop
 80041ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ae:	bc08      	pop	{r3}
 80041b0:	469e      	mov	lr, r3
 80041b2:	4770      	bx	lr
