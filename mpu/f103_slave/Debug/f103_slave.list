
f103_slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ec4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000da4  08003fd0  08003fd0  00013fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d74  08004d74  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08004d74  08004d74  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d74  08004d74  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d74  08004d74  00014d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d78  08004d78  00014d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08004d7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b4  2000001c  08004d98  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005d0  08004d98  000205d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f3f1  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000231e  00000000  00000000  0002f479  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f18  00000000  00000000  00031798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bd9  00000000  00000000  000326b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000183c0  00000000  00000000  00033289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010015  00000000  00000000  0004b649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c80e  00000000  00000000  0005b65e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003f40  00000000  00000000  000e7e6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000ebdac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003fb8 	.word	0x08003fb8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	08003fb8 	.word	0x08003fb8

0800014c <ILI9341_Write_Char>:
	ILI9341_Draw_Rectangle(MIN(x0,x1), MIN(y0,y1), abs((int)x1-(int)x0), abs((int)y1-(int)y0), colour);
}


void ILI9341_Write_Char(char ch, uint16_t x, uint16_t y, FontDef* font, uint16_t colour, uint16_t background_colour)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0
 8000152:	607b      	str	r3, [r7, #4]
 8000154:	4603      	mov	r3, r0
 8000156:	73fb      	strb	r3, [r7, #15]
 8000158:	460b      	mov	r3, r1
 800015a:	81bb      	strh	r3, [r7, #12]
 800015c:	4613      	mov	r3, r2
 800015e:	817b      	strh	r3, [r7, #10]
    uint32_t i, b, j;
	for(i = 0; i < font->height; i++) {
 8000160:	2300      	movs	r3, #0
 8000162:	61fb      	str	r3, [r7, #28]
 8000164:	e042      	b.n	80001ec <ILI9341_Write_Char+0xa0>
		b = font->data[(ch - 32) * font->height + i];
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	689a      	ldr	r2, [r3, #8]
 800016a:	7bfb      	ldrb	r3, [r7, #15]
 800016c:	3b20      	subs	r3, #32
 800016e:	6879      	ldr	r1, [r7, #4]
 8000170:	7849      	ldrb	r1, [r1, #1]
 8000172:	fb01 f303 	mul.w	r3, r1, r3
 8000176:	4619      	mov	r1, r3
 8000178:	69fb      	ldr	r3, [r7, #28]
 800017a:	440b      	add	r3, r1
 800017c:	005b      	lsls	r3, r3, #1
 800017e:	4413      	add	r3, r2
 8000180:	881b      	ldrh	r3, [r3, #0]
 8000182:	617b      	str	r3, [r7, #20]
		for(j = 0; j < font->width; j++) {
 8000184:	2300      	movs	r3, #0
 8000186:	61bb      	str	r3, [r7, #24]
 8000188:	e027      	b.n	80001da <ILI9341_Write_Char+0x8e>
			if((b << j) & 0x8000)  {
 800018a:	697a      	ldr	r2, [r7, #20]
 800018c:	69bb      	ldr	r3, [r7, #24]
 800018e:	fa02 f303 	lsl.w	r3, r2, r3
 8000192:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000196:	2b00      	cmp	r3, #0
 8000198:	d00e      	beq.n	80001b8 <ILI9341_Write_Char+0x6c>
				ILI9341_Draw_Pixel(x+j, y+i, colour);
 800019a:	69bb      	ldr	r3, [r7, #24]
 800019c:	b29a      	uxth	r2, r3
 800019e:	89bb      	ldrh	r3, [r7, #12]
 80001a0:	4413      	add	r3, r2
 80001a2:	b298      	uxth	r0, r3
 80001a4:	69fb      	ldr	r3, [r7, #28]
 80001a6:	b29a      	uxth	r2, r3
 80001a8:	897b      	ldrh	r3, [r7, #10]
 80001aa:	4413      	add	r3, r2
 80001ac:	b29b      	uxth	r3, r3
 80001ae:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80001b0:	4619      	mov	r1, r3
 80001b2:	f000 fb59 	bl	8000868 <ILI9341_Draw_Pixel>
 80001b6:	e00d      	b.n	80001d4 <ILI9341_Write_Char+0x88>
			} else {
				ILI9341_Draw_Pixel(x+j, y+i, background_colour);
 80001b8:	69bb      	ldr	r3, [r7, #24]
 80001ba:	b29a      	uxth	r2, r3
 80001bc:	89bb      	ldrh	r3, [r7, #12]
 80001be:	4413      	add	r3, r2
 80001c0:	b298      	uxth	r0, r3
 80001c2:	69fb      	ldr	r3, [r7, #28]
 80001c4:	b29a      	uxth	r2, r3
 80001c6:	897b      	ldrh	r3, [r7, #10]
 80001c8:	4413      	add	r3, r2
 80001ca:	b29b      	uxth	r3, r3
 80001cc:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80001ce:	4619      	mov	r1, r3
 80001d0:	f000 fb4a 	bl	8000868 <ILI9341_Draw_Pixel>
		for(j = 0; j < font->width; j++) {
 80001d4:	69bb      	ldr	r3, [r7, #24]
 80001d6:	3301      	adds	r3, #1
 80001d8:	61bb      	str	r3, [r7, #24]
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	781b      	ldrb	r3, [r3, #0]
 80001de:	461a      	mov	r2, r3
 80001e0:	69bb      	ldr	r3, [r7, #24]
 80001e2:	4293      	cmp	r3, r2
 80001e4:	d3d1      	bcc.n	800018a <ILI9341_Write_Char+0x3e>
	for(i = 0; i < font->height; i++) {
 80001e6:	69fb      	ldr	r3, [r7, #28]
 80001e8:	3301      	adds	r3, #1
 80001ea:	61fb      	str	r3, [r7, #28]
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	785b      	ldrb	r3, [r3, #1]
 80001f0:	461a      	mov	r2, r3
 80001f2:	69fb      	ldr	r3, [r7, #28]
 80001f4:	4293      	cmp	r3, r2
 80001f6:	d3b6      	bcc.n	8000166 <ILI9341_Write_Char+0x1a>
			}
		}
	}


}
 80001f8:	bf00      	nop
 80001fa:	bf00      	nop
 80001fc:	3720      	adds	r7, #32
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}

08000202 <ILI9341_Write_Text>:

void ILI9341_Write_Text(const char* text, uint16_t x, uint16_t y, FontDef* font_def,  uint16_t color, uint16_t background_color)
{
 8000202:	b580      	push	{r7, lr}
 8000204:	b086      	sub	sp, #24
 8000206:	af02      	add	r7, sp, #8
 8000208:	60f8      	str	r0, [r7, #12]
 800020a:	607b      	str	r3, [r7, #4]
 800020c:	460b      	mov	r3, r1
 800020e:	817b      	strh	r3, [r7, #10]
 8000210:	4613      	mov	r3, r2
 8000212:	813b      	strh	r3, [r7, #8]


    while(*text) {
 8000214:	e030      	b.n	8000278 <ILI9341_Write_Text+0x76>
        if(x + font_def->width >= ILI9341_SCREEN_WIDTH) {
 8000216:	897b      	ldrh	r3, [r7, #10]
 8000218:	687a      	ldr	r2, [r7, #4]
 800021a:	7812      	ldrb	r2, [r2, #0]
 800021c:	4413      	add	r3, r2
 800021e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000222:	db15      	blt.n	8000250 <ILI9341_Write_Text+0x4e>
            x = 0;
 8000224:	2300      	movs	r3, #0
 8000226:	817b      	strh	r3, [r7, #10]
            y += font_def->height;
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	785b      	ldrb	r3, [r3, #1]
 800022c:	b29a      	uxth	r2, r3
 800022e:	893b      	ldrh	r3, [r7, #8]
 8000230:	4413      	add	r3, r2
 8000232:	813b      	strh	r3, [r7, #8]
            if(y + font_def->height >= ILI9341_SCREEN_HEIGHT) {
 8000234:	893b      	ldrh	r3, [r7, #8]
 8000236:	687a      	ldr	r2, [r7, #4]
 8000238:	7852      	ldrb	r2, [r2, #1]
 800023a:	4413      	add	r3, r2
 800023c:	2bef      	cmp	r3, #239	; 0xef
 800023e:	dc20      	bgt.n	8000282 <ILI9341_Write_Text+0x80>
                break;
            }

            if(*text == ' ') {
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	781b      	ldrb	r3, [r3, #0]
 8000244:	2b20      	cmp	r3, #32
 8000246:	d103      	bne.n	8000250 <ILI9341_Write_Text+0x4e>
                // skip spaces in the beginning of the new line
            	text++;
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	3301      	adds	r3, #1
 800024c:	60fb      	str	r3, [r7, #12]
                continue;
 800024e:	e013      	b.n	8000278 <ILI9341_Write_Text+0x76>
            }
        }

        ILI9341_Write_Char(*text, x, y, font_def, color, background_color);
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	7818      	ldrb	r0, [r3, #0]
 8000254:	893a      	ldrh	r2, [r7, #8]
 8000256:	8979      	ldrh	r1, [r7, #10]
 8000258:	8bbb      	ldrh	r3, [r7, #28]
 800025a:	9301      	str	r3, [sp, #4]
 800025c:	8b3b      	ldrh	r3, [r7, #24]
 800025e:	9300      	str	r3, [sp, #0]
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	f7ff ff73 	bl	800014c <ILI9341_Write_Char>
        x += font_def->width;
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	b29a      	uxth	r2, r3
 800026c:	897b      	ldrh	r3, [r7, #10]
 800026e:	4413      	add	r3, r2
 8000270:	817b      	strh	r3, [r7, #10]
        text++;
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	3301      	adds	r3, #1
 8000276:	60fb      	str	r3, [r7, #12]
    while(*text) {
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d1ca      	bne.n	8000216 <ILI9341_Write_Text+0x14>
    }

}
 8000280:	e000      	b.n	8000284 <ILI9341_Write_Text+0x82>
                break;
 8000282:	bf00      	nop
}
 8000284:	bf00      	nop
 8000286:	3710      	adds	r7, #16
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}

0800028c <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
//MX_SPI5_Init();																							//SPI INIT
//MX_GPIO_Init();																							//GPIO INIT
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8000290:	2200      	movs	r2, #0
 8000292:	2102      	movs	r1, #2
 8000294:	4802      	ldr	r0, [pc, #8]	; (80002a0 <ILI9341_SPI_Init+0x14>)
 8000296:	f001 fd79 	bl	8001d8c <HAL_GPIO_WritePin>
}
 800029a:	bf00      	nop
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	40010800 	.word	0x40010800

080002a4 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&ILI9341_SPI, &SPI_Data, 1, 1);
 80002ae:	1df9      	adds	r1, r7, #7
 80002b0:	2301      	movs	r3, #1
 80002b2:	2201      	movs	r2, #1
 80002b4:	4803      	ldr	r0, [pc, #12]	; (80002c4 <ILI9341_SPI_Send+0x20>)
 80002b6:	f002 fa47 	bl	8002748 <HAL_SPI_Transmit>
}
 80002ba:	bf00      	nop
 80002bc:	3708      	adds	r7, #8
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	20000038 	.word	0x20000038

080002c8 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b082      	sub	sp, #8
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	4603      	mov	r3, r0
 80002d0:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80002d2:	2200      	movs	r2, #0
 80002d4:	2102      	movs	r1, #2
 80002d6:	480a      	ldr	r0, [pc, #40]	; (8000300 <ILI9341_Write_Command+0x38>)
 80002d8:	f001 fd58 	bl	8001d8c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80002dc:	2200      	movs	r2, #0
 80002de:	2140      	movs	r1, #64	; 0x40
 80002e0:	4807      	ldr	r0, [pc, #28]	; (8000300 <ILI9341_Write_Command+0x38>)
 80002e2:	f001 fd53 	bl	8001d8c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 80002e6:	79fb      	ldrb	r3, [r7, #7]
 80002e8:	4618      	mov	r0, r3
 80002ea:	f7ff ffdb 	bl	80002a4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80002ee:	2201      	movs	r2, #1
 80002f0:	2102      	movs	r1, #2
 80002f2:	4803      	ldr	r0, [pc, #12]	; (8000300 <ILI9341_Write_Command+0x38>)
 80002f4:	f001 fd4a 	bl	8001d8c <HAL_GPIO_WritePin>
}
 80002f8:	bf00      	nop
 80002fa:	3708      	adds	r7, #8
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	40010800 	.word	0x40010800

08000304 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	4603      	mov	r3, r0
 800030c:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800030e:	2201      	movs	r2, #1
 8000310:	2140      	movs	r1, #64	; 0x40
 8000312:	480a      	ldr	r0, [pc, #40]	; (800033c <ILI9341_Write_Data+0x38>)
 8000314:	f001 fd3a 	bl	8001d8c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000318:	2200      	movs	r2, #0
 800031a:	2102      	movs	r1, #2
 800031c:	4807      	ldr	r0, [pc, #28]	; (800033c <ILI9341_Write_Data+0x38>)
 800031e:	f001 fd35 	bl	8001d8c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	4618      	mov	r0, r3
 8000326:	f7ff ffbd 	bl	80002a4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800032a:	2201      	movs	r2, #1
 800032c:	2102      	movs	r1, #2
 800032e:	4803      	ldr	r0, [pc, #12]	; (800033c <ILI9341_Write_Data+0x38>)
 8000330:	f001 fd2c 	bl	8001d8c <HAL_GPIO_WritePin>
}
 8000334:	bf00      	nop
 8000336:	3708      	adds	r7, #8
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}
 800033c:	40010800 	.word	0x40010800

08000340 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8000340:	b590      	push	{r4, r7, lr}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0
 8000346:	4604      	mov	r4, r0
 8000348:	4608      	mov	r0, r1
 800034a:	4611      	mov	r1, r2
 800034c:	461a      	mov	r2, r3
 800034e:	4623      	mov	r3, r4
 8000350:	80fb      	strh	r3, [r7, #6]
 8000352:	4603      	mov	r3, r0
 8000354:	80bb      	strh	r3, [r7, #4]
 8000356:	460b      	mov	r3, r1
 8000358:	807b      	strh	r3, [r7, #2]
 800035a:	4613      	mov	r3, r2
 800035c:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 800035e:	202a      	movs	r0, #42	; 0x2a
 8000360:	f7ff ffb2 	bl	80002c8 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8000364:	88fb      	ldrh	r3, [r7, #6]
 8000366:	0a1b      	lsrs	r3, r3, #8
 8000368:	b29b      	uxth	r3, r3
 800036a:	b2db      	uxtb	r3, r3
 800036c:	4618      	mov	r0, r3
 800036e:	f7ff ffc9 	bl	8000304 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8000372:	88fb      	ldrh	r3, [r7, #6]
 8000374:	b2db      	uxtb	r3, r3
 8000376:	4618      	mov	r0, r3
 8000378:	f7ff ffc4 	bl	8000304 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 800037c:	887b      	ldrh	r3, [r7, #2]
 800037e:	0a1b      	lsrs	r3, r3, #8
 8000380:	b29b      	uxth	r3, r3
 8000382:	b2db      	uxtb	r3, r3
 8000384:	4618      	mov	r0, r3
 8000386:	f7ff ffbd 	bl	8000304 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 800038a:	887b      	ldrh	r3, [r7, #2]
 800038c:	b2db      	uxtb	r3, r3
 800038e:	4618      	mov	r0, r3
 8000390:	f7ff ffb8 	bl	8000304 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8000394:	202b      	movs	r0, #43	; 0x2b
 8000396:	f7ff ff97 	bl	80002c8 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 800039a:	88bb      	ldrh	r3, [r7, #4]
 800039c:	0a1b      	lsrs	r3, r3, #8
 800039e:	b29b      	uxth	r3, r3
 80003a0:	b2db      	uxtb	r3, r3
 80003a2:	4618      	mov	r0, r3
 80003a4:	f7ff ffae 	bl	8000304 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 80003a8:	88bb      	ldrh	r3, [r7, #4]
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	4618      	mov	r0, r3
 80003ae:	f7ff ffa9 	bl	8000304 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 80003b2:	883b      	ldrh	r3, [r7, #0]
 80003b4:	0a1b      	lsrs	r3, r3, #8
 80003b6:	b29b      	uxth	r3, r3
 80003b8:	b2db      	uxtb	r3, r3
 80003ba:	4618      	mov	r0, r3
 80003bc:	f7ff ffa2 	bl	8000304 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 80003c0:	883b      	ldrh	r3, [r7, #0]
 80003c2:	b2db      	uxtb	r3, r3
 80003c4:	4618      	mov	r0, r3
 80003c6:	f7ff ff9d 	bl	8000304 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 80003ca:	202c      	movs	r0, #44	; 0x2c
 80003cc:	f7ff ff7c 	bl	80002c8 <ILI9341_Write_Command>
}
 80003d0:	bf00      	nop
 80003d2:	370c      	adds	r7, #12
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd90      	pop	{r4, r7, pc}

080003d8 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 80003dc:	2200      	movs	r2, #0
 80003de:	2110      	movs	r1, #16
 80003e0:	480a      	ldr	r0, [pc, #40]	; (800040c <ILI9341_Reset+0x34>)
 80003e2:	f001 fcd3 	bl	8001d8c <HAL_GPIO_WritePin>
HAL_Delay(200);
 80003e6:	20c8      	movs	r0, #200	; 0xc8
 80003e8:	f001 f968 	bl	80016bc <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80003ec:	2200      	movs	r2, #0
 80003ee:	2102      	movs	r1, #2
 80003f0:	4806      	ldr	r0, [pc, #24]	; (800040c <ILI9341_Reset+0x34>)
 80003f2:	f001 fccb 	bl	8001d8c <HAL_GPIO_WritePin>
HAL_Delay(200);
 80003f6:	20c8      	movs	r0, #200	; 0xc8
 80003f8:	f001 f960 	bl	80016bc <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 80003fc:	2201      	movs	r2, #1
 80003fe:	2110      	movs	r1, #16
 8000400:	4802      	ldr	r0, [pc, #8]	; (800040c <ILI9341_Reset+0x34>)
 8000402:	f001 fcc3 	bl	8001d8c <HAL_GPIO_WritePin>
}
 8000406:	bf00      	nop
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	40010800 	.word	0x40010800

08000410 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b084      	sub	sp, #16
 8000414:	af00      	add	r7, sp, #0
 8000416:	4603      	mov	r3, r0
 8000418:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 800041a:	79fb      	ldrb	r3, [r7, #7]
 800041c:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 800041e:	2036      	movs	r0, #54	; 0x36
 8000420:	f7ff ff52 	bl	80002c8 <ILI9341_Write_Command>
HAL_Delay(1);
 8000424:	2001      	movs	r0, #1
 8000426:	f001 f949 	bl	80016bc <HAL_Delay>
	
switch(screen_rotation) 
 800042a:	7bfb      	ldrb	r3, [r7, #15]
 800042c:	2b03      	cmp	r3, #3
 800042e:	d837      	bhi.n	80004a0 <ILI9341_Set_Rotation+0x90>
 8000430:	a201      	add	r2, pc, #4	; (adr r2, 8000438 <ILI9341_Set_Rotation+0x28>)
 8000432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000436:	bf00      	nop
 8000438:	08000449 	.word	0x08000449
 800043c:	0800045f 	.word	0x0800045f
 8000440:	08000475 	.word	0x08000475
 8000444:	0800048b 	.word	0x0800048b
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8000448:	2048      	movs	r0, #72	; 0x48
 800044a:	f7ff ff5b 	bl	8000304 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 800044e:	4b17      	ldr	r3, [pc, #92]	; (80004ac <ILI9341_Set_Rotation+0x9c>)
 8000450:	22f0      	movs	r2, #240	; 0xf0
 8000452:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000454:	4b16      	ldr	r3, [pc, #88]	; (80004b0 <ILI9341_Set_Rotation+0xa0>)
 8000456:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800045a:	801a      	strh	r2, [r3, #0]
			break;
 800045c:	e021      	b.n	80004a2 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 800045e:	2028      	movs	r0, #40	; 0x28
 8000460:	f7ff ff50 	bl	8000304 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000464:	4b11      	ldr	r3, [pc, #68]	; (80004ac <ILI9341_Set_Rotation+0x9c>)
 8000466:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800046a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800046c:	4b10      	ldr	r3, [pc, #64]	; (80004b0 <ILI9341_Set_Rotation+0xa0>)
 800046e:	22f0      	movs	r2, #240	; 0xf0
 8000470:	801a      	strh	r2, [r3, #0]
			break;
 8000472:	e016      	b.n	80004a2 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8000474:	2088      	movs	r0, #136	; 0x88
 8000476:	f7ff ff45 	bl	8000304 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 800047a:	4b0c      	ldr	r3, [pc, #48]	; (80004ac <ILI9341_Set_Rotation+0x9c>)
 800047c:	22f0      	movs	r2, #240	; 0xf0
 800047e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000480:	4b0b      	ldr	r3, [pc, #44]	; (80004b0 <ILI9341_Set_Rotation+0xa0>)
 8000482:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000486:	801a      	strh	r2, [r3, #0]
			break;
 8000488:	e00b      	b.n	80004a2 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 800048a:	20e8      	movs	r0, #232	; 0xe8
 800048c:	f7ff ff3a 	bl	8000304 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000490:	4b06      	ldr	r3, [pc, #24]	; (80004ac <ILI9341_Set_Rotation+0x9c>)
 8000492:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000496:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000498:	4b05      	ldr	r3, [pc, #20]	; (80004b0 <ILI9341_Set_Rotation+0xa0>)
 800049a:	22f0      	movs	r2, #240	; 0xf0
 800049c:	801a      	strh	r2, [r3, #0]
			break;
 800049e:	e000      	b.n	80004a2 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 80004a0:	bf00      	nop
	}
}
 80004a2:	bf00      	nop
 80004a4:	3710      	adds	r7, #16
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	20000002 	.word	0x20000002
 80004b0:	20000000 	.word	0x20000000

080004b4 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80004b8:	2201      	movs	r2, #1
 80004ba:	2110      	movs	r1, #16
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <ILI9341_Enable+0x14>)
 80004be:	f001 fc65 	bl	8001d8c <HAL_GPIO_WritePin>
}
 80004c2:	bf00      	nop
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	40010800 	.word	0x40010800

080004cc <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0

ILI9341_Enable();
 80004d0:	f7ff fff0 	bl	80004b4 <ILI9341_Enable>
ILI9341_SPI_Init();
 80004d4:	f7ff feda 	bl	800028c <ILI9341_SPI_Init>
ILI9341_Reset();
 80004d8:	f7ff ff7e 	bl	80003d8 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 80004dc:	2001      	movs	r0, #1
 80004de:	f7ff fef3 	bl	80002c8 <ILI9341_Write_Command>
HAL_Delay(1000);
 80004e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004e6:	f001 f8e9 	bl	80016bc <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 80004ea:	20cb      	movs	r0, #203	; 0xcb
 80004ec:	f7ff feec 	bl	80002c8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 80004f0:	2039      	movs	r0, #57	; 0x39
 80004f2:	f7ff ff07 	bl	8000304 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 80004f6:	202c      	movs	r0, #44	; 0x2c
 80004f8:	f7ff ff04 	bl	8000304 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80004fc:	2000      	movs	r0, #0
 80004fe:	f7ff ff01 	bl	8000304 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8000502:	2034      	movs	r0, #52	; 0x34
 8000504:	f7ff fefe 	bl	8000304 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8000508:	2002      	movs	r0, #2
 800050a:	f7ff fefb 	bl	8000304 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 800050e:	20cf      	movs	r0, #207	; 0xcf
 8000510:	f7ff feda 	bl	80002c8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000514:	2000      	movs	r0, #0
 8000516:	f7ff fef5 	bl	8000304 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 800051a:	20c1      	movs	r0, #193	; 0xc1
 800051c:	f7ff fef2 	bl	8000304 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8000520:	2030      	movs	r0, #48	; 0x30
 8000522:	f7ff feef 	bl	8000304 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8000526:	20e8      	movs	r0, #232	; 0xe8
 8000528:	f7ff fece 	bl	80002c8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 800052c:	2085      	movs	r0, #133	; 0x85
 800052e:	f7ff fee9 	bl	8000304 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000532:	2000      	movs	r0, #0
 8000534:	f7ff fee6 	bl	8000304 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8000538:	2078      	movs	r0, #120	; 0x78
 800053a:	f7ff fee3 	bl	8000304 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 800053e:	20ea      	movs	r0, #234	; 0xea
 8000540:	f7ff fec2 	bl	80002c8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000544:	2000      	movs	r0, #0
 8000546:	f7ff fedd 	bl	8000304 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800054a:	2000      	movs	r0, #0
 800054c:	f7ff feda 	bl	8000304 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8000550:	20ed      	movs	r0, #237	; 0xed
 8000552:	f7ff feb9 	bl	80002c8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8000556:	2064      	movs	r0, #100	; 0x64
 8000558:	f7ff fed4 	bl	8000304 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800055c:	2003      	movs	r0, #3
 800055e:	f7ff fed1 	bl	8000304 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8000562:	2012      	movs	r0, #18
 8000564:	f7ff fece 	bl	8000304 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8000568:	2081      	movs	r0, #129	; 0x81
 800056a:	f7ff fecb 	bl	8000304 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 800056e:	20f7      	movs	r0, #247	; 0xf7
 8000570:	f7ff feaa 	bl	80002c8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8000574:	2020      	movs	r0, #32
 8000576:	f7ff fec5 	bl	8000304 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 800057a:	20c0      	movs	r0, #192	; 0xc0
 800057c:	f7ff fea4 	bl	80002c8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8000580:	2023      	movs	r0, #35	; 0x23
 8000582:	f7ff febf 	bl	8000304 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8000586:	20c1      	movs	r0, #193	; 0xc1
 8000588:	f7ff fe9e 	bl	80002c8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 800058c:	2010      	movs	r0, #16
 800058e:	f7ff feb9 	bl	8000304 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8000592:	20c5      	movs	r0, #197	; 0xc5
 8000594:	f7ff fe98 	bl	80002c8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8000598:	203e      	movs	r0, #62	; 0x3e
 800059a:	f7ff feb3 	bl	8000304 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 800059e:	2028      	movs	r0, #40	; 0x28
 80005a0:	f7ff feb0 	bl	8000304 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 80005a4:	20c7      	movs	r0, #199	; 0xc7
 80005a6:	f7ff fe8f 	bl	80002c8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 80005aa:	2086      	movs	r0, #134	; 0x86
 80005ac:	f7ff feaa 	bl	8000304 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 80005b0:	2036      	movs	r0, #54	; 0x36
 80005b2:	f7ff fe89 	bl	80002c8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 80005b6:	2048      	movs	r0, #72	; 0x48
 80005b8:	f7ff fea4 	bl	8000304 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 80005bc:	203a      	movs	r0, #58	; 0x3a
 80005be:	f7ff fe83 	bl	80002c8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 80005c2:	2055      	movs	r0, #85	; 0x55
 80005c4:	f7ff fe9e 	bl	8000304 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 80005c8:	20b1      	movs	r0, #177	; 0xb1
 80005ca:	f7ff fe7d 	bl	80002c8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80005ce:	2000      	movs	r0, #0
 80005d0:	f7ff fe98 	bl	8000304 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 80005d4:	2018      	movs	r0, #24
 80005d6:	f7ff fe95 	bl	8000304 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 80005da:	20b6      	movs	r0, #182	; 0xb6
 80005dc:	f7ff fe74 	bl	80002c8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 80005e0:	2008      	movs	r0, #8
 80005e2:	f7ff fe8f 	bl	8000304 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 80005e6:	2082      	movs	r0, #130	; 0x82
 80005e8:	f7ff fe8c 	bl	8000304 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 80005ec:	2027      	movs	r0, #39	; 0x27
 80005ee:	f7ff fe89 	bl	8000304 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 80005f2:	20f2      	movs	r0, #242	; 0xf2
 80005f4:	f7ff fe68 	bl	80002c8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80005f8:	2000      	movs	r0, #0
 80005fa:	f7ff fe83 	bl	8000304 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 80005fe:	2026      	movs	r0, #38	; 0x26
 8000600:	f7ff fe62 	bl	80002c8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8000604:	2001      	movs	r0, #1
 8000606:	f7ff fe7d 	bl	8000304 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 800060a:	20e0      	movs	r0, #224	; 0xe0
 800060c:	f7ff fe5c 	bl	80002c8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8000610:	200f      	movs	r0, #15
 8000612:	f7ff fe77 	bl	8000304 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000616:	2031      	movs	r0, #49	; 0x31
 8000618:	f7ff fe74 	bl	8000304 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 800061c:	202b      	movs	r0, #43	; 0x2b
 800061e:	f7ff fe71 	bl	8000304 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000622:	200c      	movs	r0, #12
 8000624:	f7ff fe6e 	bl	8000304 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000628:	200e      	movs	r0, #14
 800062a:	f7ff fe6b 	bl	8000304 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 800062e:	2008      	movs	r0, #8
 8000630:	f7ff fe68 	bl	8000304 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8000634:	204e      	movs	r0, #78	; 0x4e
 8000636:	f7ff fe65 	bl	8000304 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 800063a:	20f1      	movs	r0, #241	; 0xf1
 800063c:	f7ff fe62 	bl	8000304 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8000640:	2037      	movs	r0, #55	; 0x37
 8000642:	f7ff fe5f 	bl	8000304 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000646:	2007      	movs	r0, #7
 8000648:	f7ff fe5c 	bl	8000304 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 800064c:	2010      	movs	r0, #16
 800064e:	f7ff fe59 	bl	8000304 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000652:	2003      	movs	r0, #3
 8000654:	f7ff fe56 	bl	8000304 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000658:	200e      	movs	r0, #14
 800065a:	f7ff fe53 	bl	8000304 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 800065e:	2009      	movs	r0, #9
 8000660:	f7ff fe50 	bl	8000304 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000664:	2000      	movs	r0, #0
 8000666:	f7ff fe4d 	bl	8000304 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 800066a:	20e1      	movs	r0, #225	; 0xe1
 800066c:	f7ff fe2c 	bl	80002c8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000670:	2000      	movs	r0, #0
 8000672:	f7ff fe47 	bl	8000304 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000676:	200e      	movs	r0, #14
 8000678:	f7ff fe44 	bl	8000304 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 800067c:	2014      	movs	r0, #20
 800067e:	f7ff fe41 	bl	8000304 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000682:	2003      	movs	r0, #3
 8000684:	f7ff fe3e 	bl	8000304 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8000688:	2011      	movs	r0, #17
 800068a:	f7ff fe3b 	bl	8000304 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 800068e:	2007      	movs	r0, #7
 8000690:	f7ff fe38 	bl	8000304 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000694:	2031      	movs	r0, #49	; 0x31
 8000696:	f7ff fe35 	bl	8000304 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 800069a:	20c1      	movs	r0, #193	; 0xc1
 800069c:	f7ff fe32 	bl	8000304 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 80006a0:	2048      	movs	r0, #72	; 0x48
 80006a2:	f7ff fe2f 	bl	8000304 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80006a6:	2008      	movs	r0, #8
 80006a8:	f7ff fe2c 	bl	8000304 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80006ac:	200f      	movs	r0, #15
 80006ae:	f7ff fe29 	bl	8000304 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80006b2:	200c      	movs	r0, #12
 80006b4:	f7ff fe26 	bl	8000304 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80006b8:	2031      	movs	r0, #49	; 0x31
 80006ba:	f7ff fe23 	bl	8000304 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 80006be:	2036      	movs	r0, #54	; 0x36
 80006c0:	f7ff fe20 	bl	8000304 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80006c4:	200f      	movs	r0, #15
 80006c6:	f7ff fe1d 	bl	8000304 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 80006ca:	2011      	movs	r0, #17
 80006cc:	f7ff fdfc 	bl	80002c8 <ILI9341_Write_Command>
HAL_Delay(120);
 80006d0:	2078      	movs	r0, #120	; 0x78
 80006d2:	f000 fff3 	bl	80016bc <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 80006d6:	2029      	movs	r0, #41	; 0x29
 80006d8:	f7ff fdf6 	bl	80002c8 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 80006dc:	2000      	movs	r0, #0
 80006de:	f7ff fe97 	bl	8000410 <ILI9341_Set_Rotation>
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
	...

080006e8 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 80006e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80006ec:	b08d      	sub	sp, #52	; 0x34
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	4603      	mov	r3, r0
 80006f2:	6039      	str	r1, [r7, #0]
 80006f4:	80fb      	strh	r3, [r7, #6]
 80006f6:	466b      	mov	r3, sp
 80006f8:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	62fb      	str	r3, [r7, #44]	; 0x2c
if((Size*2) < BURST_MAX_SIZE)
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	005b      	lsls	r3, r3, #1
 8000702:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000706:	d202      	bcs.n	800070e <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800070c:	e002      	b.n	8000714 <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 800070e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000712:	62fb      	str	r3, [r7, #44]	; 0x2c
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000714:	2201      	movs	r2, #1
 8000716:	2140      	movs	r1, #64	; 0x40
 8000718:	483e      	ldr	r0, [pc, #248]	; (8000814 <ILI9341_Draw_Colour_Burst+0x12c>)
 800071a:	f001 fb37 	bl	8001d8c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800071e:	2200      	movs	r2, #0
 8000720:	2102      	movs	r1, #2
 8000722:	483c      	ldr	r0, [pc, #240]	; (8000814 <ILI9341_Draw_Colour_Burst+0x12c>)
 8000724:	f001 fb32 	bl	8001d8c <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8000728:	88fb      	ldrh	r3, [r7, #6]
 800072a:	0a1b      	lsrs	r3, r3, #8
 800072c:	b29b      	uxth	r3, r3
 800072e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8000732:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000734:	460b      	mov	r3, r1
 8000736:	3b01      	subs	r3, #1
 8000738:	61fb      	str	r3, [r7, #28]
 800073a:	2300      	movs	r3, #0
 800073c:	4688      	mov	r8, r1
 800073e:	4699      	mov	r9, r3
 8000740:	f04f 0200 	mov.w	r2, #0
 8000744:	f04f 0300 	mov.w	r3, #0
 8000748:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800074c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000750:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000754:	2300      	movs	r3, #0
 8000756:	460c      	mov	r4, r1
 8000758:	461d      	mov	r5, r3
 800075a:	f04f 0200 	mov.w	r2, #0
 800075e:	f04f 0300 	mov.w	r3, #0
 8000762:	00eb      	lsls	r3, r5, #3
 8000764:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000768:	00e2      	lsls	r2, r4, #3
 800076a:	1dcb      	adds	r3, r1, #7
 800076c:	08db      	lsrs	r3, r3, #3
 800076e:	00db      	lsls	r3, r3, #3
 8000770:	ebad 0d03 	sub.w	sp, sp, r3
 8000774:	466b      	mov	r3, sp
 8000776:	3300      	adds	r3, #0
 8000778:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 800077a:	2300      	movs	r3, #0
 800077c:	62bb      	str	r3, [r7, #40]	; 0x28
 800077e:	e00e      	b.n	800079e <ILI9341_Draw_Colour_Burst+0xb6>
	{
		burst_buffer[j] = 	chifted;
 8000780:	69ba      	ldr	r2, [r7, #24]
 8000782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000784:	4413      	add	r3, r2
 8000786:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800078a:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 800078c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800078e:	3301      	adds	r3, #1
 8000790:	88fa      	ldrh	r2, [r7, #6]
 8000792:	b2d1      	uxtb	r1, r2
 8000794:	69ba      	ldr	r2, [r7, #24]
 8000796:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800079a:	3302      	adds	r3, #2
 800079c:	62bb      	str	r3, [r7, #40]	; 0x28
 800079e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007a2:	429a      	cmp	r2, r3
 80007a4:	d3ec      	bcc.n	8000780 <ILI9341_Draw_Colour_Burst+0x98>
	}

uint32_t Sending_Size = Size*2;
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	005b      	lsls	r3, r3, #1
 80007aa:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 80007ac:	697a      	ldr	r2, [r7, #20]
 80007ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80007b4:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80007be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80007c0:	fb01 f202 	mul.w	r2, r1, r2
 80007c4:	1a9b      	subs	r3, r3, r2
 80007c6:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 80007c8:	693b      	ldr	r3, [r7, #16]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d010      	beq.n	80007f0 <ILI9341_Draw_Colour_Burst+0x108>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80007ce:	2300      	movs	r3, #0
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
 80007d2:	e009      	b.n	80007e8 <ILI9341_Draw_Colour_Burst+0x100>
	{
		HAL_SPI_Transmit(&ILI9341_SPI, (unsigned char *)burst_buffer, Buffer_Size, 10);
 80007d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007d6:	b29a      	uxth	r2, r3
 80007d8:	230a      	movs	r3, #10
 80007da:	69b9      	ldr	r1, [r7, #24]
 80007dc:	480e      	ldr	r0, [pc, #56]	; (8000818 <ILI9341_Draw_Colour_Burst+0x130>)
 80007de:	f001 ffb3 	bl	8002748 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80007e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e4:	3301      	adds	r3, #1
 80007e6:	627b      	str	r3, [r7, #36]	; 0x24
 80007e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007ea:	693b      	ldr	r3, [r7, #16]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d3f1      	bcc.n	80007d4 <ILI9341_Draw_Colour_Burst+0xec>
	}
}

//REMAINDER!
HAL_SPI_Transmit(&ILI9341_SPI, (unsigned char *)burst_buffer, Remainder_from_block, 10);
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	b29a      	uxth	r2, r3
 80007f4:	230a      	movs	r3, #10
 80007f6:	69b9      	ldr	r1, [r7, #24]
 80007f8:	4807      	ldr	r0, [pc, #28]	; (8000818 <ILI9341_Draw_Colour_Burst+0x130>)
 80007fa:	f001 ffa5 	bl	8002748 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80007fe:	2201      	movs	r2, #1
 8000800:	2102      	movs	r1, #2
 8000802:	4804      	ldr	r0, [pc, #16]	; (8000814 <ILI9341_Draw_Colour_Burst+0x12c>)
 8000804:	f001 fac2 	bl	8001d8c <HAL_GPIO_WritePin>
 8000808:	46b5      	mov	sp, r6
}
 800080a:	bf00      	nop
 800080c:	3734      	adds	r7, #52	; 0x34
 800080e:	46bd      	mov	sp, r7
 8000810:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000814:	40010800 	.word	0x40010800
 8000818:	20000038 	.word	0x20000038

0800081c <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <ILI9341_Fill_Screen+0x44>)
 8000828:	881b      	ldrh	r3, [r3, #0]
 800082a:	b29a      	uxth	r2, r3
 800082c:	4b0d      	ldr	r3, [pc, #52]	; (8000864 <ILI9341_Fill_Screen+0x48>)
 800082e:	881b      	ldrh	r3, [r3, #0]
 8000830:	b29b      	uxth	r3, r3
 8000832:	2100      	movs	r1, #0
 8000834:	2000      	movs	r0, #0
 8000836:	f7ff fd83 	bl	8000340 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <ILI9341_Fill_Screen+0x44>)
 800083c:	881b      	ldrh	r3, [r3, #0]
 800083e:	b29b      	uxth	r3, r3
 8000840:	461a      	mov	r2, r3
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <ILI9341_Fill_Screen+0x48>)
 8000844:	881b      	ldrh	r3, [r3, #0]
 8000846:	b29b      	uxth	r3, r3
 8000848:	fb02 f303 	mul.w	r3, r2, r3
 800084c:	461a      	mov	r2, r3
 800084e:	88fb      	ldrh	r3, [r7, #6]
 8000850:	4611      	mov	r1, r2
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff ff48 	bl	80006e8 <ILI9341_Draw_Colour_Burst>
}
 8000858:	bf00      	nop
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000002 	.word	0x20000002
 8000864:	20000000 	.word	0x20000000

08000868 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	80fb      	strh	r3, [r7, #6]
 8000872:	460b      	mov	r3, r1
 8000874:	80bb      	strh	r3, [r7, #4]
 8000876:	4613      	mov	r3, r2
 8000878:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800087a:	4b5b      	ldr	r3, [pc, #364]	; (80009e8 <ILI9341_Draw_Pixel+0x180>)
 800087c:	881b      	ldrh	r3, [r3, #0]
 800087e:	b29b      	uxth	r3, r3
 8000880:	88fa      	ldrh	r2, [r7, #6]
 8000882:	429a      	cmp	r2, r3
 8000884:	f080 80ac 	bcs.w	80009e0 <ILI9341_Draw_Pixel+0x178>
 8000888:	4b58      	ldr	r3, [pc, #352]	; (80009ec <ILI9341_Draw_Pixel+0x184>)
 800088a:	881b      	ldrh	r3, [r3, #0]
 800088c:	b29b      	uxth	r3, r3
 800088e:	88ba      	ldrh	r2, [r7, #4]
 8000890:	429a      	cmp	r2, r3
 8000892:	f080 80a5 	bcs.w	80009e0 <ILI9341_Draw_Pixel+0x178>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000896:	2200      	movs	r2, #0
 8000898:	2140      	movs	r1, #64	; 0x40
 800089a:	4855      	ldr	r0, [pc, #340]	; (80009f0 <ILI9341_Draw_Pixel+0x188>)
 800089c:	f001 fa76 	bl	8001d8c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2102      	movs	r1, #2
 80008a4:	4852      	ldr	r0, [pc, #328]	; (80009f0 <ILI9341_Draw_Pixel+0x188>)
 80008a6:	f001 fa71 	bl	8001d8c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 80008aa:	202a      	movs	r0, #42	; 0x2a
 80008ac:	f7ff fcfa 	bl	80002a4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80008b0:	2201      	movs	r2, #1
 80008b2:	2140      	movs	r1, #64	; 0x40
 80008b4:	484e      	ldr	r0, [pc, #312]	; (80009f0 <ILI9341_Draw_Pixel+0x188>)
 80008b6:	f001 fa69 	bl	8001d8c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80008ba:	2201      	movs	r2, #1
 80008bc:	2102      	movs	r1, #2
 80008be:	484c      	ldr	r0, [pc, #304]	; (80009f0 <ILI9341_Draw_Pixel+0x188>)
 80008c0:	f001 fa64 	bl	8001d8c <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80008c4:	2200      	movs	r2, #0
 80008c6:	2102      	movs	r1, #2
 80008c8:	4849      	ldr	r0, [pc, #292]	; (80009f0 <ILI9341_Draw_Pixel+0x188>)
 80008ca:	f001 fa5f 	bl	8001d8c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 80008ce:	88fb      	ldrh	r3, [r7, #6]
 80008d0:	0a1b      	lsrs	r3, r3, #8
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	753b      	strb	r3, [r7, #20]
 80008d8:	88fb      	ldrh	r3, [r7, #6]
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	757b      	strb	r3, [r7, #21]
 80008de:	88fb      	ldrh	r3, [r7, #6]
 80008e0:	3301      	adds	r3, #1
 80008e2:	121b      	asrs	r3, r3, #8
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	75bb      	strb	r3, [r7, #22]
 80008e8:	88fb      	ldrh	r3, [r7, #6]
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	3301      	adds	r3, #1
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(&ILI9341_SPI, Temp_Buffer, 4, 1);
 80008f2:	f107 0114 	add.w	r1, r7, #20
 80008f6:	2301      	movs	r3, #1
 80008f8:	2204      	movs	r2, #4
 80008fa:	483e      	ldr	r0, [pc, #248]	; (80009f4 <ILI9341_Draw_Pixel+0x18c>)
 80008fc:	f001 ff24 	bl	8002748 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000900:	2201      	movs	r2, #1
 8000902:	2102      	movs	r1, #2
 8000904:	483a      	ldr	r0, [pc, #232]	; (80009f0 <ILI9341_Draw_Pixel+0x188>)
 8000906:	f001 fa41 	bl	8001d8c <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800090a:	2200      	movs	r2, #0
 800090c:	2140      	movs	r1, #64	; 0x40
 800090e:	4838      	ldr	r0, [pc, #224]	; (80009f0 <ILI9341_Draw_Pixel+0x188>)
 8000910:	f001 fa3c 	bl	8001d8c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000914:	2200      	movs	r2, #0
 8000916:	2102      	movs	r1, #2
 8000918:	4835      	ldr	r0, [pc, #212]	; (80009f0 <ILI9341_Draw_Pixel+0x188>)
 800091a:	f001 fa37 	bl	8001d8c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 800091e:	202b      	movs	r0, #43	; 0x2b
 8000920:	f7ff fcc0 	bl	80002a4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8000924:	2201      	movs	r2, #1
 8000926:	2140      	movs	r1, #64	; 0x40
 8000928:	4831      	ldr	r0, [pc, #196]	; (80009f0 <ILI9341_Draw_Pixel+0x188>)
 800092a:	f001 fa2f 	bl	8001d8c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 800092e:	2201      	movs	r2, #1
 8000930:	2102      	movs	r1, #2
 8000932:	482f      	ldr	r0, [pc, #188]	; (80009f0 <ILI9341_Draw_Pixel+0x188>)
 8000934:	f001 fa2a 	bl	8001d8c <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	2102      	movs	r1, #2
 800093c:	482c      	ldr	r0, [pc, #176]	; (80009f0 <ILI9341_Draw_Pixel+0x188>)
 800093e:	f001 fa25 	bl	8001d8c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8000942:	88bb      	ldrh	r3, [r7, #4]
 8000944:	0a1b      	lsrs	r3, r3, #8
 8000946:	b29b      	uxth	r3, r3
 8000948:	b2db      	uxtb	r3, r3
 800094a:	743b      	strb	r3, [r7, #16]
 800094c:	88bb      	ldrh	r3, [r7, #4]
 800094e:	b2db      	uxtb	r3, r3
 8000950:	747b      	strb	r3, [r7, #17]
 8000952:	88bb      	ldrh	r3, [r7, #4]
 8000954:	3301      	adds	r3, #1
 8000956:	121b      	asrs	r3, r3, #8
 8000958:	b2db      	uxtb	r3, r3
 800095a:	74bb      	strb	r3, [r7, #18]
 800095c:	88bb      	ldrh	r3, [r7, #4]
 800095e:	b2db      	uxtb	r3, r3
 8000960:	3301      	adds	r3, #1
 8000962:	b2db      	uxtb	r3, r3
 8000964:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(&ILI9341_SPI, Temp_Buffer1, 4, 1);
 8000966:	f107 0110 	add.w	r1, r7, #16
 800096a:	2301      	movs	r3, #1
 800096c:	2204      	movs	r2, #4
 800096e:	4821      	ldr	r0, [pc, #132]	; (80009f4 <ILI9341_Draw_Pixel+0x18c>)
 8000970:	f001 feea 	bl	8002748 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000974:	2201      	movs	r2, #1
 8000976:	2102      	movs	r1, #2
 8000978:	481d      	ldr	r0, [pc, #116]	; (80009f0 <ILI9341_Draw_Pixel+0x188>)
 800097a:	f001 fa07 	bl	8001d8c <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800097e:	2200      	movs	r2, #0
 8000980:	2140      	movs	r1, #64	; 0x40
 8000982:	481b      	ldr	r0, [pc, #108]	; (80009f0 <ILI9341_Draw_Pixel+0x188>)
 8000984:	f001 fa02 	bl	8001d8c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000988:	2200      	movs	r2, #0
 800098a:	2102      	movs	r1, #2
 800098c:	4818      	ldr	r0, [pc, #96]	; (80009f0 <ILI9341_Draw_Pixel+0x188>)
 800098e:	f001 f9fd 	bl	8001d8c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8000992:	202c      	movs	r0, #44	; 0x2c
 8000994:	f7ff fc86 	bl	80002a4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8000998:	2201      	movs	r2, #1
 800099a:	2140      	movs	r1, #64	; 0x40
 800099c:	4814      	ldr	r0, [pc, #80]	; (80009f0 <ILI9341_Draw_Pixel+0x188>)
 800099e:	f001 f9f5 	bl	8001d8c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80009a2:	2201      	movs	r2, #1
 80009a4:	2102      	movs	r1, #2
 80009a6:	4812      	ldr	r0, [pc, #72]	; (80009f0 <ILI9341_Draw_Pixel+0x188>)
 80009a8:	f001 f9f0 	bl	8001d8c <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2102      	movs	r1, #2
 80009b0:	480f      	ldr	r0, [pc, #60]	; (80009f0 <ILI9341_Draw_Pixel+0x188>)
 80009b2:	f001 f9eb 	bl	8001d8c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 80009b6:	887b      	ldrh	r3, [r7, #2]
 80009b8:	0a1b      	lsrs	r3, r3, #8
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	733b      	strb	r3, [r7, #12]
 80009c0:	887b      	ldrh	r3, [r7, #2]
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(&ILI9341_SPI, Temp_Buffer2, 2, 1);
 80009c6:	f107 010c 	add.w	r1, r7, #12
 80009ca:	2301      	movs	r3, #1
 80009cc:	2202      	movs	r2, #2
 80009ce:	4809      	ldr	r0, [pc, #36]	; (80009f4 <ILI9341_Draw_Pixel+0x18c>)
 80009d0:	f001 feba 	bl	8002748 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80009d4:	2201      	movs	r2, #1
 80009d6:	2102      	movs	r1, #2
 80009d8:	4805      	ldr	r0, [pc, #20]	; (80009f0 <ILI9341_Draw_Pixel+0x188>)
 80009da:	f001 f9d7 	bl	8001d8c <HAL_GPIO_WritePin>
 80009de:	e000      	b.n	80009e2 <ILI9341_Draw_Pixel+0x17a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80009e0:	bf00      	nop
	
}
 80009e2:	3718      	adds	r7, #24
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000002 	.word	0x20000002
 80009ec:	20000000 	.word	0x20000000
 80009f0:	40010800 	.word	0x40010800
 80009f4:	20000038 	.word	0x20000038

080009f8 <DWT_Init>:

#define MIN(a,b) (((a)<(b))?(a):(b))
#define MAX(a,b) (((a)>(b))?(a):(b))

static inline void DWT_Init(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; //
 80009fc:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <DWT_Init+0x24>)
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	4a06      	ldr	r2, [pc, #24]	; (8000a1c <DWT_Init+0x24>)
 8000a02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a06:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   //
 8000a08:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <DWT_Init+0x28>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a04      	ldr	r2, [pc, #16]	; (8000a20 <DWT_Init+0x28>)
 8000a0e:	f043 0301 	orr.w	r3, r3, #1
 8000a12:	6013      	str	r3, [r2, #0]
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr
 8000a1c:	e000edf0 	.word	0xe000edf0
 8000a20:	e0001000 	.word	0xe0001000

08000a24 <micros>:
	uint32_t us_count_tic =  us * (SystemCoreClock / 1000000U);
	DWT->CYCCNT = 0U;
	while(DWT->CYCCNT < us_count_tic);
}

static inline uint32_t micros(void){
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
	return  DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <micros+0x20>)
 8000a2a:	685a      	ldr	r2, [r3, #4]
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <micros+0x24>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4906      	ldr	r1, [pc, #24]	; (8000a4c <micros+0x28>)
 8000a32:	fba1 1303 	umull	r1, r3, r1, r3
 8000a36:	0c9b      	lsrs	r3, r3, #18
 8000a38:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr
 8000a44:	e0001000 	.word	0xe0001000
 8000a48:	20000010 	.word	0x20000010
 8000a4c:	431bde83 	.word	0x431bde83

08000a50 <millis>:

static inline uint32_t millis(void){
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
	return  DWT->CYCCNT / (SystemCoreClock / 1000U);
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <millis+0x20>)
 8000a56:	685a      	ldr	r2, [r3, #4]
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <millis+0x24>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4906      	ldr	r1, [pc, #24]	; (8000a78 <millis+0x28>)
 8000a5e:	fba1 1303 	umull	r1, r3, r1, r3
 8000a62:	099b      	lsrs	r3, r3, #6
 8000a64:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bc80      	pop	{r7}
 8000a6e:	4770      	bx	lr
 8000a70:	e0001000 	.word	0xe0001000
 8000a74:	20000010 	.word	0x20000010
 8000a78:	10624dd3 	.word	0x10624dd3

08000a7c <HAL_GPIO_EXTI_Callback>:
//}
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000a7c:	b5b0      	push	{r4, r5, r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	80fb      	strh	r3, [r7, #6]

	uint8_t index;
	switch(GPIO_Pin){
 8000a86:	88fb      	ldrh	r3, [r7, #6]
 8000a88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000a8c:	f000 80b8 	beq.w	8000c00 <HAL_GPIO_EXTI_Callback+0x184>
 8000a90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000a94:	f300 80b7 	bgt.w	8000c06 <HAL_GPIO_EXTI_Callback+0x18a>
 8000a98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000a9c:	f000 80ad 	beq.w	8000bfa <HAL_GPIO_EXTI_Callback+0x17e>
 8000aa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000aa4:	f300 80af 	bgt.w	8000c06 <HAL_GPIO_EXTI_Callback+0x18a>
 8000aa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000aac:	f000 80a2 	beq.w	8000bf4 <HAL_GPIO_EXTI_Callback+0x178>
 8000ab0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ab4:	f300 80a7 	bgt.w	8000c06 <HAL_GPIO_EXTI_Callback+0x18a>
 8000ab8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000abc:	f000 8097 	beq.w	8000bee <HAL_GPIO_EXTI_Callback+0x172>
 8000ac0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ac4:	f300 809f 	bgt.w	8000c06 <HAL_GPIO_EXTI_Callback+0x18a>
 8000ac8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000acc:	f000 808c 	beq.w	8000be8 <HAL_GPIO_EXTI_Callback+0x16c>
 8000ad0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ad4:	f300 8097 	bgt.w	8000c06 <HAL_GPIO_EXTI_Callback+0x18a>
 8000ad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000adc:	f000 8081 	beq.w	8000be2 <HAL_GPIO_EXTI_Callback+0x166>
 8000ae0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ae4:	f300 808f 	bgt.w	8000c06 <HAL_GPIO_EXTI_Callback+0x18a>
 8000ae8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000aec:	d076      	beq.n	8000bdc <HAL_GPIO_EXTI_Callback+0x160>
 8000aee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000af2:	f300 8088 	bgt.w	8000c06 <HAL_GPIO_EXTI_Callback+0x18a>
 8000af6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000afa:	d06c      	beq.n	8000bd6 <HAL_GPIO_EXTI_Callback+0x15a>
 8000afc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b00:	f300 8081 	bgt.w	8000c06 <HAL_GPIO_EXTI_Callback+0x18a>
 8000b04:	2b80      	cmp	r3, #128	; 0x80
 8000b06:	d063      	beq.n	8000bd0 <HAL_GPIO_EXTI_Callback+0x154>
 8000b08:	2b80      	cmp	r3, #128	; 0x80
 8000b0a:	dc7c      	bgt.n	8000c06 <HAL_GPIO_EXTI_Callback+0x18a>
 8000b0c:	2b20      	cmp	r3, #32
 8000b0e:	dc47      	bgt.n	8000ba0 <HAL_GPIO_EXTI_Callback+0x124>
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	dd78      	ble.n	8000c06 <HAL_GPIO_EXTI_Callback+0x18a>
 8000b14:	3b01      	subs	r3, #1
 8000b16:	2b1f      	cmp	r3, #31
 8000b18:	d875      	bhi.n	8000c06 <HAL_GPIO_EXTI_Callback+0x18a>
 8000b1a:	a201      	add	r2, pc, #4	; (adr r2, 8000b20 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b20:	08000ba7 	.word	0x08000ba7
 8000b24:	08000bad 	.word	0x08000bad
 8000b28:	08000c07 	.word	0x08000c07
 8000b2c:	08000bb3 	.word	0x08000bb3
 8000b30:	08000c07 	.word	0x08000c07
 8000b34:	08000c07 	.word	0x08000c07
 8000b38:	08000c07 	.word	0x08000c07
 8000b3c:	08000bb9 	.word	0x08000bb9
 8000b40:	08000c07 	.word	0x08000c07
 8000b44:	08000c07 	.word	0x08000c07
 8000b48:	08000c07 	.word	0x08000c07
 8000b4c:	08000c07 	.word	0x08000c07
 8000b50:	08000c07 	.word	0x08000c07
 8000b54:	08000c07 	.word	0x08000c07
 8000b58:	08000c07 	.word	0x08000c07
 8000b5c:	08000bbf 	.word	0x08000bbf
 8000b60:	08000c07 	.word	0x08000c07
 8000b64:	08000c07 	.word	0x08000c07
 8000b68:	08000c07 	.word	0x08000c07
 8000b6c:	08000c07 	.word	0x08000c07
 8000b70:	08000c07 	.word	0x08000c07
 8000b74:	08000c07 	.word	0x08000c07
 8000b78:	08000c07 	.word	0x08000c07
 8000b7c:	08000c07 	.word	0x08000c07
 8000b80:	08000c07 	.word	0x08000c07
 8000b84:	08000c07 	.word	0x08000c07
 8000b88:	08000c07 	.word	0x08000c07
 8000b8c:	08000c07 	.word	0x08000c07
 8000b90:	08000c07 	.word	0x08000c07
 8000b94:	08000c07 	.word	0x08000c07
 8000b98:	08000c07 	.word	0x08000c07
 8000b9c:	08000bc5 	.word	0x08000bc5
 8000ba0:	2b40      	cmp	r3, #64	; 0x40
 8000ba2:	d012      	beq.n	8000bca <HAL_GPIO_EXTI_Callback+0x14e>
 8000ba4:	e02f      	b.n	8000c06 <HAL_GPIO_EXTI_Callback+0x18a>
	case S00_Pin:
		index = 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	73fb      	strb	r3, [r7, #15]
		break;
 8000baa:	e02c      	b.n	8000c06 <HAL_GPIO_EXTI_Callback+0x18a>
	case S01_Pin:
		index=1;
 8000bac:	2301      	movs	r3, #1
 8000bae:	73fb      	strb	r3, [r7, #15]
		break;
 8000bb0:	e029      	b.n	8000c06 <HAL_GPIO_EXTI_Callback+0x18a>
	case S02_Pin:
		index = 2;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	73fb      	strb	r3, [r7, #15]
		break;
 8000bb6:	e026      	b.n	8000c06 <HAL_GPIO_EXTI_Callback+0x18a>
	case S03_Pin:
		index = 3;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	73fb      	strb	r3, [r7, #15]
		break;
 8000bbc:	e023      	b.n	8000c06 <HAL_GPIO_EXTI_Callback+0x18a>
	case S04_Pin:
		index = 4;
 8000bbe:	2304      	movs	r3, #4
 8000bc0:	73fb      	strb	r3, [r7, #15]
		break;
 8000bc2:	e020      	b.n	8000c06 <HAL_GPIO_EXTI_Callback+0x18a>
	case S05_Pin:
		index = 5;
 8000bc4:	2305      	movs	r3, #5
 8000bc6:	73fb      	strb	r3, [r7, #15]
		break;
 8000bc8:	e01d      	b.n	8000c06 <HAL_GPIO_EXTI_Callback+0x18a>
	case S06_Pin:
		index = 6;
 8000bca:	2306      	movs	r3, #6
 8000bcc:	73fb      	strb	r3, [r7, #15]
		break;
 8000bce:	e01a      	b.n	8000c06 <HAL_GPIO_EXTI_Callback+0x18a>
	case S07_Pin:
		index = 7;
 8000bd0:	2307      	movs	r3, #7
 8000bd2:	73fb      	strb	r3, [r7, #15]
		break;
 8000bd4:	e017      	b.n	8000c06 <HAL_GPIO_EXTI_Callback+0x18a>
	case S08_Pin:
		index = 8;
 8000bd6:	2308      	movs	r3, #8
 8000bd8:	73fb      	strb	r3, [r7, #15]
		break;
 8000bda:	e014      	b.n	8000c06 <HAL_GPIO_EXTI_Callback+0x18a>
	case S09_Pin:
		index = 9;
 8000bdc:	2309      	movs	r3, #9
 8000bde:	73fb      	strb	r3, [r7, #15]
		break;
 8000be0:	e011      	b.n	8000c06 <HAL_GPIO_EXTI_Callback+0x18a>
	case S10_Pin:
		index = 10;
 8000be2:	230a      	movs	r3, #10
 8000be4:	73fb      	strb	r3, [r7, #15]
		break;
 8000be6:	e00e      	b.n	8000c06 <HAL_GPIO_EXTI_Callback+0x18a>
	case S11_Pin:
		index = 11;
 8000be8:	230b      	movs	r3, #11
 8000bea:	73fb      	strb	r3, [r7, #15]
		break;
 8000bec:	e00b      	b.n	8000c06 <HAL_GPIO_EXTI_Callback+0x18a>
	case S12_Pin:
		index = 12;
 8000bee:	230c      	movs	r3, #12
 8000bf0:	73fb      	strb	r3, [r7, #15]
		break;
 8000bf2:	e008      	b.n	8000c06 <HAL_GPIO_EXTI_Callback+0x18a>
	case S13_Pin:
		index = 13;
 8000bf4:	230d      	movs	r3, #13
 8000bf6:	73fb      	strb	r3, [r7, #15]
		break;
 8000bf8:	e005      	b.n	8000c06 <HAL_GPIO_EXTI_Callback+0x18a>
	case S14_Pin:
		index = 14;
 8000bfa:	230e      	movs	r3, #14
 8000bfc:	73fb      	strb	r3, [r7, #15]
		break;
 8000bfe:	e002      	b.n	8000c06 <HAL_GPIO_EXTI_Callback+0x18a>
	case S15_Pin:
		index = 15;
 8000c00:	230f      	movs	r3, #15
 8000c02:	73fb      	strb	r3, [r7, #15]
		break;
 8000c04:	bf00      	nop
	}
	pulse[index][pulse_pointer[index]]=micros();
 8000c06:	7bfc      	ldrb	r4, [r7, #15]
 8000c08:	7bfb      	ldrb	r3, [r7, #15]
 8000c0a:	4a11      	ldr	r2, [pc, #68]	; (8000c50 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000c0c:	5cd3      	ldrb	r3, [r2, r3]
 8000c0e:	461d      	mov	r5, r3
 8000c10:	f7ff ff08 	bl	8000a24 <micros>
 8000c14:	4602      	mov	r2, r0
 8000c16:	490f      	ldr	r1, [pc, #60]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8000c18:	0123      	lsls	r3, r4, #4
 8000c1a:	442b      	add	r3, r5
 8000c1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	++pulse_pointer[index];
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
 8000c22:	4a0b      	ldr	r2, [pc, #44]	; (8000c50 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000c24:	5cd2      	ldrb	r2, [r2, r3]
 8000c26:	3201      	adds	r2, #1
 8000c28:	b2d1      	uxtb	r1, r2
 8000c2a:	4a09      	ldr	r2, [pc, #36]	; (8000c50 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000c2c:	54d1      	strb	r1, [r2, r3]
	pulse_pointer[index]%=SPEED_BUFFER_SIZE;
 8000c2e:	7bfb      	ldrb	r3, [r7, #15]
 8000c30:	4a07      	ldr	r2, [pc, #28]	; (8000c50 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000c32:	5cd2      	ldrb	r2, [r2, r3]
 8000c34:	7bfb      	ldrb	r3, [r7, #15]
 8000c36:	f002 020f 	and.w	r2, r2, #15
 8000c3a:	b2d1      	uxtb	r1, r2
 8000c3c:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000c3e:	54d1      	strb	r1, [r2, r3]
	increment_count[index]=0;
 8000c40:	7bfb      	ldrb	r3, [r7, #15]
 8000c42:	4a05      	ldr	r2, [pc, #20]	; (8000c58 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8000c44:	2100      	movs	r1, #0
 8000c46:	54d1      	strb	r1, [r2, r3]
}
 8000c48:	bf00      	nop
 8000c4a:	3710      	adds	r7, #16
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bdb0      	pop	{r4, r5, r7, pc}
 8000c50:	20000168 	.word	0x20000168
 8000c54:	200001cc 	.word	0x200001cc
 8000c58:	20000178 	.word	0x20000178

08000c5c <calcVelocity>:

void calcVelocity(){
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0

	for(uint8_t i=0;i<SPEED_PIN_COUNT;++i){
 8000c62:	2300      	movs	r3, #0
 8000c64:	71fb      	strb	r3, [r7, #7]
 8000c66:	e03e      	b.n	8000ce6 <calcVelocity+0x8a>
		if(increment_count[i]>=SPEED_MAX_INCREMENT){
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	4a23      	ldr	r2, [pc, #140]	; (8000cf8 <calcVelocity+0x9c>)
 8000c6c:	5cd3      	ldrb	r3, [r2, r3]
 8000c6e:	2b04      	cmp	r3, #4
 8000c70:	d906      	bls.n	8000c80 <calcVelocity+0x24>
			speed_on_single_pin[i+1]=0;
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	3301      	adds	r3, #1
 8000c76:	4a21      	ldr	r2, [pc, #132]	; (8000cfc <calcVelocity+0xa0>)
 8000c78:	2100      	movs	r1, #0
 8000c7a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			continue;
 8000c7e:	e02f      	b.n	8000ce0 <calcVelocity+0x84>
		}
		uint32_t s=pulse[i][(pulse_pointer[i]+SPEED_BUFFER_SIZE-1)%SPEED_BUFFER_SIZE]-pulse[i][pulse_pointer[i]];
 8000c80:	79fa      	ldrb	r2, [r7, #7]
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	491e      	ldr	r1, [pc, #120]	; (8000d00 <calcVelocity+0xa4>)
 8000c86:	5ccb      	ldrb	r3, [r1, r3]
 8000c88:	330f      	adds	r3, #15
 8000c8a:	4259      	negs	r1, r3
 8000c8c:	f003 030f 	and.w	r3, r3, #15
 8000c90:	f001 010f 	and.w	r1, r1, #15
 8000c94:	bf58      	it	pl
 8000c96:	424b      	negpl	r3, r1
 8000c98:	491a      	ldr	r1, [pc, #104]	; (8000d04 <calcVelocity+0xa8>)
 8000c9a:	0112      	lsls	r2, r2, #4
 8000c9c:	4413      	add	r3, r2
 8000c9e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	79f9      	ldrb	r1, [r7, #7]
 8000ca6:	4816      	ldr	r0, [pc, #88]	; (8000d00 <calcVelocity+0xa4>)
 8000ca8:	5c41      	ldrb	r1, [r0, r1]
 8000caa:	4608      	mov	r0, r1
 8000cac:	4915      	ldr	r1, [pc, #84]	; (8000d04 <calcVelocity+0xa8>)
 8000cae:	011b      	lsls	r3, r3, #4
 8000cb0:	4403      	add	r3, r0
 8000cb2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000cb6:	1ad3      	subs	r3, r2, r3
 8000cb8:	603b      	str	r3, [r7, #0]
		if(s==0){
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d106      	bne.n	8000cce <calcVelocity+0x72>
			speed_on_single_pin[i+1]=0;
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	4a0d      	ldr	r2, [pc, #52]	; (8000cfc <calcVelocity+0xa0>)
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000ccc:	e008      	b.n	8000ce0 <calcVelocity+0x84>
		}
		else{
			speed_on_single_pin[i+1] = (SPEED_BUFFER_SIZE-1)*1000000U/s;
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	490d      	ldr	r1, [pc, #52]	; (8000d08 <calcVelocity+0xac>)
 8000cd4:	683a      	ldr	r2, [r7, #0]
 8000cd6:	fbb1 f2f2 	udiv	r2, r1, r2
 8000cda:	4908      	ldr	r1, [pc, #32]	; (8000cfc <calcVelocity+0xa0>)
 8000cdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(uint8_t i=0;i<SPEED_PIN_COUNT;++i){
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	71fb      	strb	r3, [r7, #7]
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	2b0f      	cmp	r3, #15
 8000cea:	d9bd      	bls.n	8000c68 <calcVelocity+0xc>
		}
	}
}
 8000cec:	bf00      	nop
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr
 8000cf8:	20000178 	.word	0x20000178
 8000cfc:	20000188 	.word	0x20000188
 8000d00:	20000168 	.word	0x20000168
 8000d04:	200001cc 	.word	0x200001cc
 8000d08:	00e4e1c0 	.word	0x00e4e1c0

08000d0c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
	calcVelocity();
 8000d14:	f7ff ffa2 	bl	8000c5c <calcVelocity>
//	HAL_UART_Transmit(&huart1, (uint8_t*)"hello", 5);
	HAL_UART_Transmit(&huart1, (uint8_t*)speed_on_single_pin, sizeof(uint32_t)*(SPEED_PIN_COUNT+1),10);
 8000d18:	230a      	movs	r3, #10
 8000d1a:	2244      	movs	r2, #68	; 0x44
 8000d1c:	4903      	ldr	r1, [pc, #12]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d1e:	4804      	ldr	r0, [pc, #16]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000d20:	f002 fb4a 	bl	80033b8 <HAL_UART_Transmit>

//	__NOP();
}
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000188 	.word	0x20000188
 8000d30:	200000d8 	.word	0x200000d8

08000d34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d3a:	f000 fc5d 	bl	80015f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d3e:	f000 f86d 	bl	8000e1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d42:	f000 f98b 	bl	800105c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000d46:	f000 f8af 	bl	8000ea8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000d4a:	f000 f933 	bl	8000fb4 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000d4e:	f000 f8e1 	bl	8000f14 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000d52:	f000 f959 	bl	8001008 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  speed_on_single_pin[0]=acsr;
 8000d56:	4a29      	ldr	r2, [pc, #164]	; (8000dfc <main+0xc8>)
 8000d58:	4b29      	ldr	r3, [pc, #164]	; (8000e00 <main+0xcc>)
 8000d5a:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d62:	4828      	ldr	r0, [pc, #160]	; (8000e04 <main+0xd0>)
 8000d64:	f001 f812 	bl	8001d8c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_LED_GPIO_Port, LCD_LED_Pin, GPIO_PIN_SET);
 8000d68:	2201      	movs	r2, #1
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	4826      	ldr	r0, [pc, #152]	; (8000e08 <main+0xd4>)
 8000d6e:	f001 f80d 	bl	8001d8c <HAL_GPIO_WritePin>
  DWT_Init();
 8000d72:	f7ff fe41 	bl	80009f8 <DWT_Init>
  //ST7735_Init();
  //ST7735_FillScreen(ST7735_BLACK);
  ILI9341_Init();
 8000d76:	f7ff fba9 	bl	80004cc <ILI9341_Init>
  ILI9341_Fill_Screen(WHITE);
 8000d7a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000d7e:	f7ff fd4d 	bl	800081c <ILI9341_Fill_Screen>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000d82:	2003      	movs	r0, #3
 8000d84:	f7ff fb44 	bl	8000410 <ILI9341_Set_Rotation>
  //ILI9341_Draw_Text("FPS TEST, 40 loop 2 screens", 10, 10, BLACK, 2, WHITE);
  ILI9341_Write_Text("FPS TEST, 40 loop 2 screens", 10, 10, &Font_11x18, BLACK, WHITE);
 8000d88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d8c:	9301      	str	r3, [sp, #4]
 8000d8e:	2300      	movs	r3, #0
 8000d90:	9300      	str	r3, [sp, #0]
 8000d92:	4b1e      	ldr	r3, [pc, #120]	; (8000e0c <main+0xd8>)
 8000d94:	220a      	movs	r2, #10
 8000d96:	210a      	movs	r1, #10
 8000d98:	481d      	ldr	r0, [pc, #116]	; (8000e10 <main+0xdc>)
 8000d9a:	f7ff fa32 	bl	8000202 <ILI9341_Write_Text>
  HAL_TIM_Base_Start_IT(&htim1);
 8000d9e:	481d      	ldr	r0, [pc, #116]	; (8000e14 <main+0xe0>)
 8000da0:	f001 ff0c 	bl	8002bbc <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t t = millis();
 8000da4:	f7ff fe54 	bl	8000a50 <millis>
 8000da8:	60f8      	str	r0, [r7, #12]
  while (1)
  {
	for(uint8_t i=0;i<SPEED_PIN_COUNT;++i){
 8000daa:	2300      	movs	r3, #0
 8000dac:	72fb      	strb	r3, [r7, #11]
 8000dae:	e009      	b.n	8000dc4 <main+0x90>
		increment_count[i]++;
 8000db0:	7afb      	ldrb	r3, [r7, #11]
 8000db2:	4a19      	ldr	r2, [pc, #100]	; (8000e18 <main+0xe4>)
 8000db4:	5cd2      	ldrb	r2, [r2, r3]
 8000db6:	3201      	adds	r2, #1
 8000db8:	b2d1      	uxtb	r1, r2
 8000dba:	4a17      	ldr	r2, [pc, #92]	; (8000e18 <main+0xe4>)
 8000dbc:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0;i<SPEED_PIN_COUNT;++i){
 8000dbe:	7afb      	ldrb	r3, [r7, #11]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	72fb      	strb	r3, [r7, #11]
 8000dc4:	7afb      	ldrb	r3, [r7, #11]
 8000dc6:	2b0f      	cmp	r3, #15
 8000dc8:	d9f2      	bls.n	8000db0 <main+0x7c>
	}
    HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000dca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dce:	480d      	ldr	r0, [pc, #52]	; (8000e04 <main+0xd0>)
 8000dd0:	f000 fff4 	bl	8001dbc <HAL_GPIO_TogglePin>
    for(uint8_t i=0;i<8;++i){
		sprintf(str,"%03d", speed_on_single_pin[2*i+2]);
		ST7735_WriteString(64+5, 18+i*10, str, Font_7x10, ST7735_GREEN, ST7735_BLACK);
    }*/

    uint32_t h = millis();
 8000dd4:	f7ff fe3c 	bl	8000a50 <millis>
 8000dd8:	6078      	str	r0, [r7, #4]
    while(h-t<500){
 8000dda:	e005      	b.n	8000de8 <main+0xb4>
    	h = millis();
 8000ddc:	f7ff fe38 	bl	8000a50 <millis>
 8000de0:	6078      	str	r0, [r7, #4]
    	HAL_Delay(1);
 8000de2:	2001      	movs	r0, #1
 8000de4:	f000 fc6a 	bl	80016bc <HAL_Delay>
    while(h-t<500){
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000df2:	d3f3      	bcc.n	8000ddc <main+0xa8>
    }
    t = h;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	60fb      	str	r3, [r7, #12]
  {
 8000df8:	e7d7      	b.n	8000daa <main+0x76>
 8000dfa:	bf00      	nop
 8000dfc:	41435352 	.word	0x41435352
 8000e00:	20000188 	.word	0x20000188
 8000e04:	40011000 	.word	0x40011000
 8000e08:	40010800 	.word	0x40010800
 8000e0c:	20000004 	.word	0x20000004
 8000e10:	08003fd0 	.word	0x08003fd0
 8000e14:	20000090 	.word	0x20000090
 8000e18:	20000178 	.word	0x20000178

08000e1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b090      	sub	sp, #64	; 0x40
 8000e20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e22:	f107 0318 	add.w	r3, r7, #24
 8000e26:	2228      	movs	r2, #40	; 0x28
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f003 f898 	bl	8003f60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e30:	1d3b      	adds	r3, r7, #4
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	605a      	str	r2, [r3, #4]
 8000e38:	609a      	str	r2, [r3, #8]
 8000e3a:	60da      	str	r2, [r3, #12]
 8000e3c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e46:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e50:	2302      	movs	r3, #2
 8000e52:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e5a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e60:	f107 0318 	add.w	r3, r7, #24
 8000e64:	4618      	mov	r0, r3
 8000e66:	f000 ffdb 	bl	8001e20 <HAL_RCC_OscConfig>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e70:	f000 f9cc 	bl	800120c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e74:	230f      	movs	r3, #15
 8000e76:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e80:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000e84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000e86:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000e8a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e8c:	1d3b      	adds	r3, r7, #4
 8000e8e:	2102      	movs	r1, #2
 8000e90:	4618      	mov	r0, r3
 8000e92:	f001 fa47 	bl	8002324 <HAL_RCC_ClockConfig>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000e9c:	f000 f9b6 	bl	800120c <Error_Handler>
  }
}
 8000ea0:	bf00      	nop
 8000ea2:	3740      	adds	r7, #64	; 0x40
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000eac:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <MX_SPI1_Init+0x64>)
 8000eae:	4a18      	ldr	r2, [pc, #96]	; (8000f10 <MX_SPI1_Init+0x68>)
 8000eb0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000eb2:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <MX_SPI1_Init+0x64>)
 8000eb4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000eb8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000eba:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <MX_SPI1_Init+0x64>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <MX_SPI1_Init+0x64>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ec6:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <MX_SPI1_Init+0x64>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ecc:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <MX_SPI1_Init+0x64>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <MX_SPI1_Init+0x64>)
 8000ed4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ed8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000eda:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <MX_SPI1_Init+0x64>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ee0:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <MX_SPI1_Init+0x64>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ee6:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <MX_SPI1_Init+0x64>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000eec:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <MX_SPI1_Init+0x64>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ef2:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <MX_SPI1_Init+0x64>)
 8000ef4:	220a      	movs	r2, #10
 8000ef6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ef8:	4804      	ldr	r0, [pc, #16]	; (8000f0c <MX_SPI1_Init+0x64>)
 8000efa:	f001 fba1 	bl	8002640 <HAL_SPI_Init>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f04:	f000 f982 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000038 	.word	0x20000038
 8000f10:	40013000 	.word	0x40013000

08000f14 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f1a:	f107 0308 	add.w	r3, r7, #8
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
 8000f26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f28:	463b      	mov	r3, r7
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f30:	4b1e      	ldr	r3, [pc, #120]	; (8000fac <MX_TIM1_Init+0x98>)
 8000f32:	4a1f      	ldr	r2, [pc, #124]	; (8000fb0 <MX_TIM1_Init+0x9c>)
 8000f34:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35;
 8000f36:	4b1d      	ldr	r3, [pc, #116]	; (8000fac <MX_TIM1_Init+0x98>)
 8000f38:	2223      	movs	r2, #35	; 0x23
 8000f3a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f3c:	4b1b      	ldr	r3, [pc, #108]	; (8000fac <MX_TIM1_Init+0x98>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000-1;
 8000f42:	4b1a      	ldr	r3, [pc, #104]	; (8000fac <MX_TIM1_Init+0x98>)
 8000f44:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000f48:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f4a:	4b18      	ldr	r3, [pc, #96]	; (8000fac <MX_TIM1_Init+0x98>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f50:	4b16      	ldr	r3, [pc, #88]	; (8000fac <MX_TIM1_Init+0x98>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f56:	4b15      	ldr	r3, [pc, #84]	; (8000fac <MX_TIM1_Init+0x98>)
 8000f58:	2280      	movs	r2, #128	; 0x80
 8000f5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f5c:	4813      	ldr	r0, [pc, #76]	; (8000fac <MX_TIM1_Init+0x98>)
 8000f5e:	f001 fddd 	bl	8002b1c <HAL_TIM_Base_Init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000f68:	f000 f950 	bl	800120c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f72:	f107 0308 	add.w	r3, r7, #8
 8000f76:	4619      	mov	r1, r3
 8000f78:	480c      	ldr	r0, [pc, #48]	; (8000fac <MX_TIM1_Init+0x98>)
 8000f7a:	f001 ff79 	bl	8002e70 <HAL_TIM_ConfigClockSource>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000f84:	f000 f942 	bl	800120c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f90:	463b      	mov	r3, r7
 8000f92:	4619      	mov	r1, r3
 8000f94:	4805      	ldr	r0, [pc, #20]	; (8000fac <MX_TIM1_Init+0x98>)
 8000f96:	f002 f94f 	bl	8003238 <HAL_TIMEx_MasterConfigSynchronization>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000fa0:	f000 f934 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000fa4:	bf00      	nop
 8000fa6:	3718      	adds	r7, #24
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000090 	.word	0x20000090
 8000fb0:	40012c00 	.word	0x40012c00

08000fb4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fb8:	4b11      	ldr	r3, [pc, #68]	; (8001000 <MX_USART1_UART_Init+0x4c>)
 8000fba:	4a12      	ldr	r2, [pc, #72]	; (8001004 <MX_USART1_UART_Init+0x50>)
 8000fbc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fbe:	4b10      	ldr	r3, [pc, #64]	; (8001000 <MX_USART1_UART_Init+0x4c>)
 8000fc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fc4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <MX_USART1_UART_Init+0x4c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <MX_USART1_UART_Init+0x4c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fd2:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <MX_USART1_UART_Init+0x4c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fd8:	4b09      	ldr	r3, [pc, #36]	; (8001000 <MX_USART1_UART_Init+0x4c>)
 8000fda:	220c      	movs	r2, #12
 8000fdc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fde:	4b08      	ldr	r3, [pc, #32]	; (8001000 <MX_USART1_UART_Init+0x4c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <MX_USART1_UART_Init+0x4c>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fea:	4805      	ldr	r0, [pc, #20]	; (8001000 <MX_USART1_UART_Init+0x4c>)
 8000fec:	f002 f994 	bl	8003318 <HAL_UART_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ff6:	f000 f909 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	200000d8 	.word	0x200000d8
 8001004:	40013800 	.word	0x40013800

08001008 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800100c:	4b11      	ldr	r3, [pc, #68]	; (8001054 <MX_USART2_UART_Init+0x4c>)
 800100e:	4a12      	ldr	r2, [pc, #72]	; (8001058 <MX_USART2_UART_Init+0x50>)
 8001010:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <MX_USART2_UART_Init+0x4c>)
 8001014:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001018:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <MX_USART2_UART_Init+0x4c>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <MX_USART2_UART_Init+0x4c>)
 8001022:	2200      	movs	r2, #0
 8001024:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001026:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <MX_USART2_UART_Init+0x4c>)
 8001028:	2200      	movs	r2, #0
 800102a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800102c:	4b09      	ldr	r3, [pc, #36]	; (8001054 <MX_USART2_UART_Init+0x4c>)
 800102e:	220c      	movs	r2, #12
 8001030:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001032:	4b08      	ldr	r3, [pc, #32]	; (8001054 <MX_USART2_UART_Init+0x4c>)
 8001034:	2200      	movs	r2, #0
 8001036:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <MX_USART2_UART_Init+0x4c>)
 800103a:	2200      	movs	r2, #0
 800103c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800103e:	4805      	ldr	r0, [pc, #20]	; (8001054 <MX_USART2_UART_Init+0x4c>)
 8001040:	f002 f96a 	bl	8003318 <HAL_UART_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800104a:	f000 f8df 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000120 	.word	0x20000120
 8001058:	40004400 	.word	0x40004400

0800105c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001062:	f107 0310 	add.w	r3, r7, #16
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001070:	4b61      	ldr	r3, [pc, #388]	; (80011f8 <MX_GPIO_Init+0x19c>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	4a60      	ldr	r2, [pc, #384]	; (80011f8 <MX_GPIO_Init+0x19c>)
 8001076:	f043 0310 	orr.w	r3, r3, #16
 800107a:	6193      	str	r3, [r2, #24]
 800107c:	4b5e      	ldr	r3, [pc, #376]	; (80011f8 <MX_GPIO_Init+0x19c>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	f003 0310 	and.w	r3, r3, #16
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001088:	4b5b      	ldr	r3, [pc, #364]	; (80011f8 <MX_GPIO_Init+0x19c>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	4a5a      	ldr	r2, [pc, #360]	; (80011f8 <MX_GPIO_Init+0x19c>)
 800108e:	f043 0320 	orr.w	r3, r3, #32
 8001092:	6193      	str	r3, [r2, #24]
 8001094:	4b58      	ldr	r3, [pc, #352]	; (80011f8 <MX_GPIO_Init+0x19c>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	f003 0320 	and.w	r3, r3, #32
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a0:	4b55      	ldr	r3, [pc, #340]	; (80011f8 <MX_GPIO_Init+0x19c>)
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	4a54      	ldr	r2, [pc, #336]	; (80011f8 <MX_GPIO_Init+0x19c>)
 80010a6:	f043 0304 	orr.w	r3, r3, #4
 80010aa:	6193      	str	r3, [r2, #24]
 80010ac:	4b52      	ldr	r3, [pc, #328]	; (80011f8 <MX_GPIO_Init+0x19c>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	f003 0304 	and.w	r3, r3, #4
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b8:	4b4f      	ldr	r3, [pc, #316]	; (80011f8 <MX_GPIO_Init+0x19c>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	4a4e      	ldr	r2, [pc, #312]	; (80011f8 <MX_GPIO_Init+0x19c>)
 80010be:	f043 0308 	orr.w	r3, r3, #8
 80010c2:	6193      	str	r3, [r2, #24]
 80010c4:	4b4c      	ldr	r3, [pc, #304]	; (80011f8 <MX_GPIO_Init+0x19c>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	f003 0308 	and.w	r3, r3, #8
 80010cc:	603b      	str	r3, [r7, #0]
 80010ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80010d0:	2200      	movs	r2, #0
 80010d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010d6:	4849      	ldr	r0, [pc, #292]	; (80011fc <MX_GPIO_Init+0x1a0>)
 80010d8:	f000 fe58 	bl	8001d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_LED_Pin|LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 80010dc:	2200      	movs	r2, #0
 80010de:	2153      	movs	r1, #83	; 0x53
 80010e0:	4847      	ldr	r0, [pc, #284]	; (8001200 <MX_GPIO_Init+0x1a4>)
 80010e2:	f000 fe53 	bl	8001d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDB12_GPIO_Port, LEDB12_Pin, GPIO_PIN_RESET);
 80010e6:	2200      	movs	r2, #0
 80010e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010ec:	4845      	ldr	r0, [pc, #276]	; (8001204 <MX_GPIO_Init+0x1a8>)
 80010ee:	f000 fe4d 	bl	8001d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80010f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f8:	2301      	movs	r3, #1
 80010fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001100:	2302      	movs	r3, #2
 8001102:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001104:	f107 0310 	add.w	r3, r7, #16
 8001108:	4619      	mov	r1, r3
 800110a:	483c      	ldr	r0, [pc, #240]	; (80011fc <MX_GPIO_Init+0x1a0>)
 800110c:	f000 fcba 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_LED_Pin LCD_CS_Pin LCD_RST_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_LED_Pin|LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin;
 8001110:	2353      	movs	r3, #83	; 0x53
 8001112:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001114:	2301      	movs	r3, #1
 8001116:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111c:	2302      	movs	r3, #2
 800111e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001120:	f107 0310 	add.w	r3, r7, #16
 8001124:	4619      	mov	r1, r3
 8001126:	4836      	ldr	r0, [pc, #216]	; (8001200 <MX_GPIO_Init+0x1a4>)
 8001128:	f000 fcac 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : S00_Pin S01_Pin S02_Pin S10_Pin
                           S11_Pin S13_Pin S14_Pin S15_Pin
                           S03_Pin S04_Pin S05_Pin S06_Pin
                           S07_Pin S08_Pin S09_Pin */
  GPIO_InitStruct.Pin = S00_Pin|S01_Pin|S02_Pin|S10_Pin
 800112c:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001130:	613b      	str	r3, [r7, #16]
                          |S11_Pin|S13_Pin|S14_Pin|S15_Pin
                          |S03_Pin|S04_Pin|S05_Pin|S06_Pin
                          |S07_Pin|S08_Pin|S09_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001132:	4b35      	ldr	r3, [pc, #212]	; (8001208 <MX_GPIO_Init+0x1ac>)
 8001134:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113a:	f107 0310 	add.w	r3, r7, #16
 800113e:	4619      	mov	r1, r3
 8001140:	4830      	ldr	r0, [pc, #192]	; (8001204 <MX_GPIO_Init+0x1a8>)
 8001142:	f000 fc9f 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LEDB12_Pin */
  GPIO_InitStruct.Pin = LEDB12_Pin;
 8001146:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800114a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114c:	2301      	movs	r3, #1
 800114e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001154:	2302      	movs	r3, #2
 8001156:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LEDB12_GPIO_Port, &GPIO_InitStruct);
 8001158:	f107 0310 	add.w	r3, r7, #16
 800115c:	4619      	mov	r1, r3
 800115e:	4829      	ldr	r0, [pc, #164]	; (8001204 <MX_GPIO_Init+0x1a8>)
 8001160:	f000 fc90 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : S12_Pin */
  GPIO_InitStruct.Pin = S12_Pin;
 8001164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001168:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800116a:	4b27      	ldr	r3, [pc, #156]	; (8001208 <MX_GPIO_Init+0x1ac>)
 800116c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(S12_GPIO_Port, &GPIO_InitStruct);
 8001172:	f107 0310 	add.w	r3, r7, #16
 8001176:	4619      	mov	r1, r3
 8001178:	4821      	ldr	r0, [pc, #132]	; (8001200 <MX_GPIO_Init+0x1a4>)
 800117a:	f000 fc83 	bl	8001a84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800117e:	2200      	movs	r2, #0
 8001180:	2100      	movs	r1, #0
 8001182:	2006      	movs	r0, #6
 8001184:	f000 fb95 	bl	80018b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001188:	2006      	movs	r0, #6
 800118a:	f000 fbae 	bl	80018ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	2100      	movs	r1, #0
 8001192:	2007      	movs	r0, #7
 8001194:	f000 fb8d 	bl	80018b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001198:	2007      	movs	r0, #7
 800119a:	f000 fba6 	bl	80018ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800119e:	2200      	movs	r2, #0
 80011a0:	2100      	movs	r1, #0
 80011a2:	2008      	movs	r0, #8
 80011a4:	f000 fb85 	bl	80018b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80011a8:	2008      	movs	r0, #8
 80011aa:	f000 fb9e 	bl	80018ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2100      	movs	r1, #0
 80011b2:	2009      	movs	r0, #9
 80011b4:	f000 fb7d 	bl	80018b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80011b8:	2009      	movs	r0, #9
 80011ba:	f000 fb96 	bl	80018ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2100      	movs	r1, #0
 80011c2:	200a      	movs	r0, #10
 80011c4:	f000 fb75 	bl	80018b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80011c8:	200a      	movs	r0, #10
 80011ca:	f000 fb8e 	bl	80018ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2100      	movs	r1, #0
 80011d2:	2017      	movs	r0, #23
 80011d4:	f000 fb6d 	bl	80018b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011d8:	2017      	movs	r0, #23
 80011da:	f000 fb86 	bl	80018ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011de:	2200      	movs	r2, #0
 80011e0:	2100      	movs	r1, #0
 80011e2:	2028      	movs	r0, #40	; 0x28
 80011e4:	f000 fb65 	bl	80018b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011e8:	2028      	movs	r0, #40	; 0x28
 80011ea:	f000 fb7e 	bl	80018ea <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011ee:	bf00      	nop
 80011f0:	3720      	adds	r7, #32
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40021000 	.word	0x40021000
 80011fc:	40011000 	.word	0x40011000
 8001200:	40010800 	.word	0x40010800
 8001204:	40010c00 	.word	0x40010c00
 8001208:	10110000 	.word	0x10110000

0800120c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001210:	b672      	cpsid	i
}
 8001212:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001214:	e7fe      	b.n	8001214 <Error_Handler+0x8>
	...

08001218 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800121e:	4b15      	ldr	r3, [pc, #84]	; (8001274 <HAL_MspInit+0x5c>)
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	4a14      	ldr	r2, [pc, #80]	; (8001274 <HAL_MspInit+0x5c>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	6193      	str	r3, [r2, #24]
 800122a:	4b12      	ldr	r3, [pc, #72]	; (8001274 <HAL_MspInit+0x5c>)
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001236:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <HAL_MspInit+0x5c>)
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	4a0e      	ldr	r2, [pc, #56]	; (8001274 <HAL_MspInit+0x5c>)
 800123c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001240:	61d3      	str	r3, [r2, #28]
 8001242:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <HAL_MspInit+0x5c>)
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800124e:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <HAL_MspInit+0x60>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	4a04      	ldr	r2, [pc, #16]	; (8001278 <HAL_MspInit+0x60>)
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800126a:	bf00      	nop
 800126c:	3714      	adds	r7, #20
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr
 8001274:	40021000 	.word	0x40021000
 8001278:	40010000 	.word	0x40010000

0800127c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b088      	sub	sp, #32
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 0310 	add.w	r3, r7, #16
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a15      	ldr	r2, [pc, #84]	; (80012ec <HAL_SPI_MspInit+0x70>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d123      	bne.n	80012e4 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800129c:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <HAL_SPI_MspInit+0x74>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	4a13      	ldr	r2, [pc, #76]	; (80012f0 <HAL_SPI_MspInit+0x74>)
 80012a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012a6:	6193      	str	r3, [r2, #24]
 80012a8:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <HAL_SPI_MspInit+0x74>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b4:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <HAL_SPI_MspInit+0x74>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	4a0d      	ldr	r2, [pc, #52]	; (80012f0 <HAL_SPI_MspInit+0x74>)
 80012ba:	f043 0304 	orr.w	r3, r3, #4
 80012be:	6193      	str	r3, [r2, #24]
 80012c0:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <HAL_SPI_MspInit+0x74>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	f003 0304 	and.w	r3, r3, #4
 80012c8:	60bb      	str	r3, [r7, #8]
 80012ca:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MOSI_Pin;
 80012cc:	23a0      	movs	r3, #160	; 0xa0
 80012ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d0:	2302      	movs	r3, #2
 80012d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012d4:	2303      	movs	r3, #3
 80012d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d8:	f107 0310 	add.w	r3, r7, #16
 80012dc:	4619      	mov	r1, r3
 80012de:	4805      	ldr	r0, [pc, #20]	; (80012f4 <HAL_SPI_MspInit+0x78>)
 80012e0:	f000 fbd0 	bl	8001a84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012e4:	bf00      	nop
 80012e6:	3720      	adds	r7, #32
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40013000 	.word	0x40013000
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40010800 	.word	0x40010800

080012f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a11      	ldr	r2, [pc, #68]	; (800134c <HAL_TIM_Base_MspInit+0x54>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d11b      	bne.n	8001342 <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800130a:	4b11      	ldr	r3, [pc, #68]	; (8001350 <HAL_TIM_Base_MspInit+0x58>)
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	4a10      	ldr	r2, [pc, #64]	; (8001350 <HAL_TIM_Base_MspInit+0x58>)
 8001310:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001314:	6193      	str	r3, [r2, #24]
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <HAL_TIM_Base_MspInit+0x58>)
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8001322:	2200      	movs	r2, #0
 8001324:	2100      	movs	r1, #0
 8001326:	2018      	movs	r0, #24
 8001328:	f000 fac3 	bl	80018b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800132c:	2018      	movs	r0, #24
 800132e:	f000 fadc 	bl	80018ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001332:	2200      	movs	r2, #0
 8001334:	2100      	movs	r1, #0
 8001336:	2019      	movs	r0, #25
 8001338:	f000 fabb 	bl	80018b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800133c:	2019      	movs	r0, #25
 800133e:	f000 fad4 	bl	80018ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001342:	bf00      	nop
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40012c00 	.word	0x40012c00
 8001350:	40021000 	.word	0x40021000

08001354 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08a      	sub	sp, #40	; 0x28
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 0318 	add.w	r3, r7, #24
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a3b      	ldr	r2, [pc, #236]	; (800145c <HAL_UART_MspInit+0x108>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d132      	bne.n	80013da <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001374:	4b3a      	ldr	r3, [pc, #232]	; (8001460 <HAL_UART_MspInit+0x10c>)
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	4a39      	ldr	r2, [pc, #228]	; (8001460 <HAL_UART_MspInit+0x10c>)
 800137a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800137e:	6193      	str	r3, [r2, #24]
 8001380:	4b37      	ldr	r3, [pc, #220]	; (8001460 <HAL_UART_MspInit+0x10c>)
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138c:	4b34      	ldr	r3, [pc, #208]	; (8001460 <HAL_UART_MspInit+0x10c>)
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	4a33      	ldr	r2, [pc, #204]	; (8001460 <HAL_UART_MspInit+0x10c>)
 8001392:	f043 0304 	orr.w	r3, r3, #4
 8001396:	6193      	str	r3, [r2, #24]
 8001398:	4b31      	ldr	r3, [pc, #196]	; (8001460 <HAL_UART_MspInit+0x10c>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	f003 0304 	and.w	r3, r3, #4
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013aa:	2302      	movs	r3, #2
 80013ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013ae:	2303      	movs	r3, #3
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b2:	f107 0318 	add.w	r3, r7, #24
 80013b6:	4619      	mov	r1, r3
 80013b8:	482a      	ldr	r0, [pc, #168]	; (8001464 <HAL_UART_MspInit+0x110>)
 80013ba:	f000 fb63 	bl	8001a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013cc:	f107 0318 	add.w	r3, r7, #24
 80013d0:	4619      	mov	r1, r3
 80013d2:	4824      	ldr	r0, [pc, #144]	; (8001464 <HAL_UART_MspInit+0x110>)
 80013d4:	f000 fb56 	bl	8001a84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013d8:	e03c      	b.n	8001454 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a22      	ldr	r2, [pc, #136]	; (8001468 <HAL_UART_MspInit+0x114>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d137      	bne.n	8001454 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80013e4:	4b1e      	ldr	r3, [pc, #120]	; (8001460 <HAL_UART_MspInit+0x10c>)
 80013e6:	69db      	ldr	r3, [r3, #28]
 80013e8:	4a1d      	ldr	r2, [pc, #116]	; (8001460 <HAL_UART_MspInit+0x10c>)
 80013ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ee:	61d3      	str	r3, [r2, #28]
 80013f0:	4b1b      	ldr	r3, [pc, #108]	; (8001460 <HAL_UART_MspInit+0x10c>)
 80013f2:	69db      	ldr	r3, [r3, #28]
 80013f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fc:	4b18      	ldr	r3, [pc, #96]	; (8001460 <HAL_UART_MspInit+0x10c>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	4a17      	ldr	r2, [pc, #92]	; (8001460 <HAL_UART_MspInit+0x10c>)
 8001402:	f043 0304 	orr.w	r3, r3, #4
 8001406:	6193      	str	r3, [r2, #24]
 8001408:	4b15      	ldr	r3, [pc, #84]	; (8001460 <HAL_UART_MspInit+0x10c>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	f003 0304 	and.w	r3, r3, #4
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001414:	2304      	movs	r3, #4
 8001416:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001418:	2302      	movs	r3, #2
 800141a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800141c:	2303      	movs	r3, #3
 800141e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001420:	f107 0318 	add.w	r3, r7, #24
 8001424:	4619      	mov	r1, r3
 8001426:	480f      	ldr	r0, [pc, #60]	; (8001464 <HAL_UART_MspInit+0x110>)
 8001428:	f000 fb2c 	bl	8001a84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800142c:	2308      	movs	r3, #8
 800142e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001430:	2300      	movs	r3, #0
 8001432:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001438:	f107 0318 	add.w	r3, r7, #24
 800143c:	4619      	mov	r1, r3
 800143e:	4809      	ldr	r0, [pc, #36]	; (8001464 <HAL_UART_MspInit+0x110>)
 8001440:	f000 fb20 	bl	8001a84 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001444:	2200      	movs	r2, #0
 8001446:	2100      	movs	r1, #0
 8001448:	2026      	movs	r0, #38	; 0x26
 800144a:	f000 fa32 	bl	80018b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800144e:	2026      	movs	r0, #38	; 0x26
 8001450:	f000 fa4b 	bl	80018ea <HAL_NVIC_EnableIRQ>
}
 8001454:	bf00      	nop
 8001456:	3728      	adds	r7, #40	; 0x28
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40013800 	.word	0x40013800
 8001460:	40021000 	.word	0x40021000
 8001464:	40010800 	.word	0x40010800
 8001468:	40004400 	.word	0x40004400

0800146c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001470:	e7fe      	b.n	8001470 <NMI_Handler+0x4>

08001472 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001476:	e7fe      	b.n	8001476 <HardFault_Handler+0x4>

08001478 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800147c:	e7fe      	b.n	800147c <MemManage_Handler+0x4>

0800147e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001482:	e7fe      	b.n	8001482 <BusFault_Handler+0x4>

08001484 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <UsageFault_Handler+0x4>

0800148a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr

08001496 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	bc80      	pop	{r7}
 80014a0:	4770      	bx	lr

080014a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr

080014ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014b2:	f000 f8e7 	bl	8001684 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}

080014ba <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S00_Pin);
 80014be:	2001      	movs	r0, #1
 80014c0:	f000 fc96 	bl	8001df0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80014c4:	bf00      	nop
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S01_Pin);
 80014cc:	2002      	movs	r0, #2
 80014ce:	f000 fc8f 	bl	8001df0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S02_Pin);
 80014da:	2004      	movs	r0, #4
 80014dc:	f000 fc88 	bl	8001df0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S03_Pin);
 80014e8:	2008      	movs	r0, #8
 80014ea:	f000 fc81 	bl	8001df0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S04_Pin);
 80014f6:	2010      	movs	r0, #16
 80014f8:	f000 fc7a 	bl	8001df0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}

08001500 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S05_Pin);
 8001504:	2020      	movs	r0, #32
 8001506:	f000 fc73 	bl	8001df0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S06_Pin);
 800150a:	2040      	movs	r0, #64	; 0x40
 800150c:	f000 fc70 	bl	8001df0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S07_Pin);
 8001510:	2080      	movs	r0, #128	; 0x80
 8001512:	f000 fc6d 	bl	8001df0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S08_Pin);
 8001516:	f44f 7080 	mov.w	r0, #256	; 0x100
 800151a:	f000 fc69 	bl	8001df0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S09_Pin);
 800151e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001522:	f000 fc65 	bl	8001df0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001530:	4802      	ldr	r0, [pc, #8]	; (800153c <TIM1_BRK_IRQHandler+0x10>)
 8001532:	f001 fb95 	bl	8002c60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000090 	.word	0x20000090

08001540 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001544:	4802      	ldr	r0, [pc, #8]	; (8001550 <TIM1_UP_IRQHandler+0x10>)
 8001546:	f001 fb8b 	bl	8002c60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000090 	.word	0x20000090

08001554 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001558:	4802      	ldr	r0, [pc, #8]	; (8001564 <USART2_IRQHandler+0x10>)
 800155a:	f001 ffb1 	bl	80034c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000120 	.word	0x20000120

08001568 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S10_Pin);
 800156c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001570:	f000 fc3e 	bl	8001df0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S11_Pin);
 8001574:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001578:	f000 fc3a 	bl	8001df0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S12_Pin);
 800157c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001580:	f000 fc36 	bl	8001df0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S13_Pin);
 8001584:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001588:	f000 fc32 	bl	8001df0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S14_Pin);
 800158c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001590:	f000 fc2e 	bl	8001df0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S15_Pin);
 8001594:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001598:	f000 fc2a 	bl	8001df0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800159c:	bf00      	nop
 800159e:	bd80      	pop	{r7, pc}

080015a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr

080015ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015ac:	f7ff fff8 	bl	80015a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015b0:	480b      	ldr	r0, [pc, #44]	; (80015e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015b2:	490c      	ldr	r1, [pc, #48]	; (80015e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015b4:	4a0c      	ldr	r2, [pc, #48]	; (80015e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80015b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015b8:	e002      	b.n	80015c0 <LoopCopyDataInit>

080015ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015be:	3304      	adds	r3, #4

080015c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c4:	d3f9      	bcc.n	80015ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015c6:	4a09      	ldr	r2, [pc, #36]	; (80015ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015c8:	4c09      	ldr	r4, [pc, #36]	; (80015f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015cc:	e001      	b.n	80015d2 <LoopFillZerobss>

080015ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015d0:	3204      	adds	r2, #4

080015d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d4:	d3fb      	bcc.n	80015ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015d6:	f002 fccb 	bl	8003f70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015da:	f7ff fbab 	bl	8000d34 <main>
  bx lr
 80015de:	4770      	bx	lr
  ldr r0, =_sdata
 80015e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015e4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80015e8:	08004d7c 	.word	0x08004d7c
  ldr r2, =_sbss
 80015ec:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80015f0:	200005d0 	.word	0x200005d0

080015f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015f4:	e7fe      	b.n	80015f4 <ADC1_2_IRQHandler>
	...

080015f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015fc:	4b08      	ldr	r3, [pc, #32]	; (8001620 <HAL_Init+0x28>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a07      	ldr	r2, [pc, #28]	; (8001620 <HAL_Init+0x28>)
 8001602:	f043 0310 	orr.w	r3, r3, #16
 8001606:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001608:	2003      	movs	r0, #3
 800160a:	f000 f947 	bl	800189c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800160e:	200f      	movs	r0, #15
 8001610:	f000 f808 	bl	8001624 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001614:	f7ff fe00 	bl	8001218 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40022000 	.word	0x40022000

08001624 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800162c:	4b12      	ldr	r3, [pc, #72]	; (8001678 <HAL_InitTick+0x54>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4b12      	ldr	r3, [pc, #72]	; (800167c <HAL_InitTick+0x58>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	4619      	mov	r1, r3
 8001636:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800163a:	fbb3 f3f1 	udiv	r3, r3, r1
 800163e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001642:	4618      	mov	r0, r3
 8001644:	f000 f95f 	bl	8001906 <HAL_SYSTICK_Config>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e00e      	b.n	8001670 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b0f      	cmp	r3, #15
 8001656:	d80a      	bhi.n	800166e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001658:	2200      	movs	r2, #0
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001660:	f000 f927 	bl	80018b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001664:	4a06      	ldr	r2, [pc, #24]	; (8001680 <HAL_InitTick+0x5c>)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800166a:	2300      	movs	r3, #0
 800166c:	e000      	b.n	8001670 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
}
 8001670:	4618      	mov	r0, r3
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000010 	.word	0x20000010
 800167c:	20000018 	.word	0x20000018
 8001680:	20000014 	.word	0x20000014

08001684 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001688:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <HAL_IncTick+0x1c>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	461a      	mov	r2, r3
 800168e:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <HAL_IncTick+0x20>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4413      	add	r3, r2
 8001694:	4a03      	ldr	r2, [pc, #12]	; (80016a4 <HAL_IncTick+0x20>)
 8001696:	6013      	str	r3, [r2, #0]
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr
 80016a0:	20000018 	.word	0x20000018
 80016a4:	200005cc 	.word	0x200005cc

080016a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return uwTick;
 80016ac:	4b02      	ldr	r3, [pc, #8]	; (80016b8 <HAL_GetTick+0x10>)
 80016ae:	681b      	ldr	r3, [r3, #0]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr
 80016b8:	200005cc 	.word	0x200005cc

080016bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016c4:	f7ff fff0 	bl	80016a8 <HAL_GetTick>
 80016c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016d4:	d005      	beq.n	80016e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016d6:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <HAL_Delay+0x44>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	461a      	mov	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	4413      	add	r3, r2
 80016e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016e2:	bf00      	nop
 80016e4:	f7ff ffe0 	bl	80016a8 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d8f7      	bhi.n	80016e4 <HAL_Delay+0x28>
  {
  }
}
 80016f4:	bf00      	nop
 80016f6:	bf00      	nop
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000018 	.word	0x20000018

08001704 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001714:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <__NVIC_SetPriorityGrouping+0x44>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800171a:	68ba      	ldr	r2, [r7, #8]
 800171c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001720:	4013      	ands	r3, r2
 8001722:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800172c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001734:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001736:	4a04      	ldr	r2, [pc, #16]	; (8001748 <__NVIC_SetPriorityGrouping+0x44>)
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	60d3      	str	r3, [r2, #12]
}
 800173c:	bf00      	nop
 800173e:	3714      	adds	r7, #20
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001750:	4b04      	ldr	r3, [pc, #16]	; (8001764 <__NVIC_GetPriorityGrouping+0x18>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	0a1b      	lsrs	r3, r3, #8
 8001756:	f003 0307 	and.w	r3, r3, #7
}
 800175a:	4618      	mov	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001776:	2b00      	cmp	r3, #0
 8001778:	db0b      	blt.n	8001792 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	f003 021f 	and.w	r2, r3, #31
 8001780:	4906      	ldr	r1, [pc, #24]	; (800179c <__NVIC_EnableIRQ+0x34>)
 8001782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001786:	095b      	lsrs	r3, r3, #5
 8001788:	2001      	movs	r0, #1
 800178a:	fa00 f202 	lsl.w	r2, r0, r2
 800178e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr
 800179c:	e000e100 	.word	0xe000e100

080017a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	6039      	str	r1, [r7, #0]
 80017aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	db0a      	blt.n	80017ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	490c      	ldr	r1, [pc, #48]	; (80017ec <__NVIC_SetPriority+0x4c>)
 80017ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017be:	0112      	lsls	r2, r2, #4
 80017c0:	b2d2      	uxtb	r2, r2
 80017c2:	440b      	add	r3, r1
 80017c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017c8:	e00a      	b.n	80017e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	4908      	ldr	r1, [pc, #32]	; (80017f0 <__NVIC_SetPriority+0x50>)
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	f003 030f 	and.w	r3, r3, #15
 80017d6:	3b04      	subs	r3, #4
 80017d8:	0112      	lsls	r2, r2, #4
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	440b      	add	r3, r1
 80017de:	761a      	strb	r2, [r3, #24]
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e000e100 	.word	0xe000e100
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b089      	sub	sp, #36	; 0x24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	f1c3 0307 	rsb	r3, r3, #7
 800180e:	2b04      	cmp	r3, #4
 8001810:	bf28      	it	cs
 8001812:	2304      	movcs	r3, #4
 8001814:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	3304      	adds	r3, #4
 800181a:	2b06      	cmp	r3, #6
 800181c:	d902      	bls.n	8001824 <NVIC_EncodePriority+0x30>
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	3b03      	subs	r3, #3
 8001822:	e000      	b.n	8001826 <NVIC_EncodePriority+0x32>
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001828:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	43da      	mvns	r2, r3
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	401a      	ands	r2, r3
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800183c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	fa01 f303 	lsl.w	r3, r1, r3
 8001846:	43d9      	mvns	r1, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800184c:	4313      	orrs	r3, r2
         );
}
 800184e:	4618      	mov	r0, r3
 8001850:	3724      	adds	r7, #36	; 0x24
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr

08001858 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3b01      	subs	r3, #1
 8001864:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001868:	d301      	bcc.n	800186e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800186a:	2301      	movs	r3, #1
 800186c:	e00f      	b.n	800188e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800186e:	4a0a      	ldr	r2, [pc, #40]	; (8001898 <SysTick_Config+0x40>)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3b01      	subs	r3, #1
 8001874:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001876:	210f      	movs	r1, #15
 8001878:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800187c:	f7ff ff90 	bl	80017a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001880:	4b05      	ldr	r3, [pc, #20]	; (8001898 <SysTick_Config+0x40>)
 8001882:	2200      	movs	r2, #0
 8001884:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001886:	4b04      	ldr	r3, [pc, #16]	; (8001898 <SysTick_Config+0x40>)
 8001888:	2207      	movs	r2, #7
 800188a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	e000e010 	.word	0xe000e010

0800189c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff ff2d 	bl	8001704 <__NVIC_SetPriorityGrouping>
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b086      	sub	sp, #24
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	4603      	mov	r3, r0
 80018ba:	60b9      	str	r1, [r7, #8]
 80018bc:	607a      	str	r2, [r7, #4]
 80018be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018c4:	f7ff ff42 	bl	800174c <__NVIC_GetPriorityGrouping>
 80018c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	68b9      	ldr	r1, [r7, #8]
 80018ce:	6978      	ldr	r0, [r7, #20]
 80018d0:	f7ff ff90 	bl	80017f4 <NVIC_EncodePriority>
 80018d4:	4602      	mov	r2, r0
 80018d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018da:	4611      	mov	r1, r2
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff ff5f 	bl	80017a0 <__NVIC_SetPriority>
}
 80018e2:	bf00      	nop
 80018e4:	3718      	adds	r7, #24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b082      	sub	sp, #8
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	4603      	mov	r3, r0
 80018f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff ff35 	bl	8001768 <__NVIC_EnableIRQ>
}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b082      	sub	sp, #8
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff ffa2 	bl	8001858 <SysTick_Config>
 8001914:	4603      	mov	r3, r0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800191e:	b480      	push	{r7}
 8001920:	b085      	sub	sp, #20
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001926:	2300      	movs	r3, #0
 8001928:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d008      	beq.n	8001948 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2204      	movs	r2, #4
 800193a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e020      	b.n	800198a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f022 020e 	bic.w	r2, r2, #14
 8001956:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f022 0201 	bic.w	r2, r2, #1
 8001966:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001970:	2101      	movs	r1, #1
 8001972:	fa01 f202 	lsl.w	r2, r1, r2
 8001976:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001988:	7bfb      	ldrb	r3, [r7, #15]
}
 800198a:	4618      	mov	r0, r3
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr

08001994 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800199c:	2300      	movs	r3, #0
 800199e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d005      	beq.n	80019b8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2204      	movs	r2, #4
 80019b0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	73fb      	strb	r3, [r7, #15]
 80019b6:	e051      	b.n	8001a5c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 020e 	bic.w	r2, r2, #14
 80019c6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f022 0201 	bic.w	r2, r2, #1
 80019d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a22      	ldr	r2, [pc, #136]	; (8001a68 <HAL_DMA_Abort_IT+0xd4>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d029      	beq.n	8001a36 <HAL_DMA_Abort_IT+0xa2>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a21      	ldr	r2, [pc, #132]	; (8001a6c <HAL_DMA_Abort_IT+0xd8>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d022      	beq.n	8001a32 <HAL_DMA_Abort_IT+0x9e>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a1f      	ldr	r2, [pc, #124]	; (8001a70 <HAL_DMA_Abort_IT+0xdc>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d01a      	beq.n	8001a2c <HAL_DMA_Abort_IT+0x98>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a1e      	ldr	r2, [pc, #120]	; (8001a74 <HAL_DMA_Abort_IT+0xe0>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d012      	beq.n	8001a26 <HAL_DMA_Abort_IT+0x92>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a1c      	ldr	r2, [pc, #112]	; (8001a78 <HAL_DMA_Abort_IT+0xe4>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d00a      	beq.n	8001a20 <HAL_DMA_Abort_IT+0x8c>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a1b      	ldr	r2, [pc, #108]	; (8001a7c <HAL_DMA_Abort_IT+0xe8>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d102      	bne.n	8001a1a <HAL_DMA_Abort_IT+0x86>
 8001a14:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001a18:	e00e      	b.n	8001a38 <HAL_DMA_Abort_IT+0xa4>
 8001a1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a1e:	e00b      	b.n	8001a38 <HAL_DMA_Abort_IT+0xa4>
 8001a20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a24:	e008      	b.n	8001a38 <HAL_DMA_Abort_IT+0xa4>
 8001a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a2a:	e005      	b.n	8001a38 <HAL_DMA_Abort_IT+0xa4>
 8001a2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a30:	e002      	b.n	8001a38 <HAL_DMA_Abort_IT+0xa4>
 8001a32:	2310      	movs	r3, #16
 8001a34:	e000      	b.n	8001a38 <HAL_DMA_Abort_IT+0xa4>
 8001a36:	2301      	movs	r3, #1
 8001a38:	4a11      	ldr	r2, [pc, #68]	; (8001a80 <HAL_DMA_Abort_IT+0xec>)
 8001a3a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	4798      	blx	r3
    } 
  }
  return status;
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40020008 	.word	0x40020008
 8001a6c:	4002001c 	.word	0x4002001c
 8001a70:	40020030 	.word	0x40020030
 8001a74:	40020044 	.word	0x40020044
 8001a78:	40020058 	.word	0x40020058
 8001a7c:	4002006c 	.word	0x4002006c
 8001a80:	40020000 	.word	0x40020000

08001a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b08b      	sub	sp, #44	; 0x2c
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a92:	2300      	movs	r3, #0
 8001a94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a96:	e169      	b.n	8001d6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a98:	2201      	movs	r2, #1
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	69fa      	ldr	r2, [r7, #28]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	f040 8158 	bne.w	8001d66 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	4a9a      	ldr	r2, [pc, #616]	; (8001d24 <HAL_GPIO_Init+0x2a0>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d05e      	beq.n	8001b7e <HAL_GPIO_Init+0xfa>
 8001ac0:	4a98      	ldr	r2, [pc, #608]	; (8001d24 <HAL_GPIO_Init+0x2a0>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d875      	bhi.n	8001bb2 <HAL_GPIO_Init+0x12e>
 8001ac6:	4a98      	ldr	r2, [pc, #608]	; (8001d28 <HAL_GPIO_Init+0x2a4>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d058      	beq.n	8001b7e <HAL_GPIO_Init+0xfa>
 8001acc:	4a96      	ldr	r2, [pc, #600]	; (8001d28 <HAL_GPIO_Init+0x2a4>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d86f      	bhi.n	8001bb2 <HAL_GPIO_Init+0x12e>
 8001ad2:	4a96      	ldr	r2, [pc, #600]	; (8001d2c <HAL_GPIO_Init+0x2a8>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d052      	beq.n	8001b7e <HAL_GPIO_Init+0xfa>
 8001ad8:	4a94      	ldr	r2, [pc, #592]	; (8001d2c <HAL_GPIO_Init+0x2a8>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d869      	bhi.n	8001bb2 <HAL_GPIO_Init+0x12e>
 8001ade:	4a94      	ldr	r2, [pc, #592]	; (8001d30 <HAL_GPIO_Init+0x2ac>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d04c      	beq.n	8001b7e <HAL_GPIO_Init+0xfa>
 8001ae4:	4a92      	ldr	r2, [pc, #584]	; (8001d30 <HAL_GPIO_Init+0x2ac>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d863      	bhi.n	8001bb2 <HAL_GPIO_Init+0x12e>
 8001aea:	4a92      	ldr	r2, [pc, #584]	; (8001d34 <HAL_GPIO_Init+0x2b0>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d046      	beq.n	8001b7e <HAL_GPIO_Init+0xfa>
 8001af0:	4a90      	ldr	r2, [pc, #576]	; (8001d34 <HAL_GPIO_Init+0x2b0>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d85d      	bhi.n	8001bb2 <HAL_GPIO_Init+0x12e>
 8001af6:	2b12      	cmp	r3, #18
 8001af8:	d82a      	bhi.n	8001b50 <HAL_GPIO_Init+0xcc>
 8001afa:	2b12      	cmp	r3, #18
 8001afc:	d859      	bhi.n	8001bb2 <HAL_GPIO_Init+0x12e>
 8001afe:	a201      	add	r2, pc, #4	; (adr r2, 8001b04 <HAL_GPIO_Init+0x80>)
 8001b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b04:	08001b7f 	.word	0x08001b7f
 8001b08:	08001b59 	.word	0x08001b59
 8001b0c:	08001b6b 	.word	0x08001b6b
 8001b10:	08001bad 	.word	0x08001bad
 8001b14:	08001bb3 	.word	0x08001bb3
 8001b18:	08001bb3 	.word	0x08001bb3
 8001b1c:	08001bb3 	.word	0x08001bb3
 8001b20:	08001bb3 	.word	0x08001bb3
 8001b24:	08001bb3 	.word	0x08001bb3
 8001b28:	08001bb3 	.word	0x08001bb3
 8001b2c:	08001bb3 	.word	0x08001bb3
 8001b30:	08001bb3 	.word	0x08001bb3
 8001b34:	08001bb3 	.word	0x08001bb3
 8001b38:	08001bb3 	.word	0x08001bb3
 8001b3c:	08001bb3 	.word	0x08001bb3
 8001b40:	08001bb3 	.word	0x08001bb3
 8001b44:	08001bb3 	.word	0x08001bb3
 8001b48:	08001b61 	.word	0x08001b61
 8001b4c:	08001b75 	.word	0x08001b75
 8001b50:	4a79      	ldr	r2, [pc, #484]	; (8001d38 <HAL_GPIO_Init+0x2b4>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d013      	beq.n	8001b7e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b56:	e02c      	b.n	8001bb2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	623b      	str	r3, [r7, #32]
          break;
 8001b5e:	e029      	b.n	8001bb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	3304      	adds	r3, #4
 8001b66:	623b      	str	r3, [r7, #32]
          break;
 8001b68:	e024      	b.n	8001bb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	3308      	adds	r3, #8
 8001b70:	623b      	str	r3, [r7, #32]
          break;
 8001b72:	e01f      	b.n	8001bb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	330c      	adds	r3, #12
 8001b7a:	623b      	str	r3, [r7, #32]
          break;
 8001b7c:	e01a      	b.n	8001bb4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d102      	bne.n	8001b8c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b86:	2304      	movs	r3, #4
 8001b88:	623b      	str	r3, [r7, #32]
          break;
 8001b8a:	e013      	b.n	8001bb4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d105      	bne.n	8001ba0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b94:	2308      	movs	r3, #8
 8001b96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	69fa      	ldr	r2, [r7, #28]
 8001b9c:	611a      	str	r2, [r3, #16]
          break;
 8001b9e:	e009      	b.n	8001bb4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ba0:	2308      	movs	r3, #8
 8001ba2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	69fa      	ldr	r2, [r7, #28]
 8001ba8:	615a      	str	r2, [r3, #20]
          break;
 8001baa:	e003      	b.n	8001bb4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bac:	2300      	movs	r3, #0
 8001bae:	623b      	str	r3, [r7, #32]
          break;
 8001bb0:	e000      	b.n	8001bb4 <HAL_GPIO_Init+0x130>
          break;
 8001bb2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	2bff      	cmp	r3, #255	; 0xff
 8001bb8:	d801      	bhi.n	8001bbe <HAL_GPIO_Init+0x13a>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	e001      	b.n	8001bc2 <HAL_GPIO_Init+0x13e>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	3304      	adds	r3, #4
 8001bc2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	2bff      	cmp	r3, #255	; 0xff
 8001bc8:	d802      	bhi.n	8001bd0 <HAL_GPIO_Init+0x14c>
 8001bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	e002      	b.n	8001bd6 <HAL_GPIO_Init+0x152>
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd2:	3b08      	subs	r3, #8
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	210f      	movs	r1, #15
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	fa01 f303 	lsl.w	r3, r1, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	401a      	ands	r2, r3
 8001be8:	6a39      	ldr	r1, [r7, #32]
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf0:	431a      	orrs	r2, r3
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f000 80b1 	beq.w	8001d66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c04:	4b4d      	ldr	r3, [pc, #308]	; (8001d3c <HAL_GPIO_Init+0x2b8>)
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	4a4c      	ldr	r2, [pc, #304]	; (8001d3c <HAL_GPIO_Init+0x2b8>)
 8001c0a:	f043 0301 	orr.w	r3, r3, #1
 8001c0e:	6193      	str	r3, [r2, #24]
 8001c10:	4b4a      	ldr	r3, [pc, #296]	; (8001d3c <HAL_GPIO_Init+0x2b8>)
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	60bb      	str	r3, [r7, #8]
 8001c1a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c1c:	4a48      	ldr	r2, [pc, #288]	; (8001d40 <HAL_GPIO_Init+0x2bc>)
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	089b      	lsrs	r3, r3, #2
 8001c22:	3302      	adds	r3, #2
 8001c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c28:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	f003 0303 	and.w	r3, r3, #3
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	220f      	movs	r2, #15
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a40      	ldr	r2, [pc, #256]	; (8001d44 <HAL_GPIO_Init+0x2c0>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d013      	beq.n	8001c70 <HAL_GPIO_Init+0x1ec>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a3f      	ldr	r2, [pc, #252]	; (8001d48 <HAL_GPIO_Init+0x2c4>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d00d      	beq.n	8001c6c <HAL_GPIO_Init+0x1e8>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a3e      	ldr	r2, [pc, #248]	; (8001d4c <HAL_GPIO_Init+0x2c8>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d007      	beq.n	8001c68 <HAL_GPIO_Init+0x1e4>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4a3d      	ldr	r2, [pc, #244]	; (8001d50 <HAL_GPIO_Init+0x2cc>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d101      	bne.n	8001c64 <HAL_GPIO_Init+0x1e0>
 8001c60:	2303      	movs	r3, #3
 8001c62:	e006      	b.n	8001c72 <HAL_GPIO_Init+0x1ee>
 8001c64:	2304      	movs	r3, #4
 8001c66:	e004      	b.n	8001c72 <HAL_GPIO_Init+0x1ee>
 8001c68:	2302      	movs	r3, #2
 8001c6a:	e002      	b.n	8001c72 <HAL_GPIO_Init+0x1ee>
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e000      	b.n	8001c72 <HAL_GPIO_Init+0x1ee>
 8001c70:	2300      	movs	r3, #0
 8001c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c74:	f002 0203 	and.w	r2, r2, #3
 8001c78:	0092      	lsls	r2, r2, #2
 8001c7a:	4093      	lsls	r3, r2
 8001c7c:	68fa      	ldr	r2, [r7, #12]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c82:	492f      	ldr	r1, [pc, #188]	; (8001d40 <HAL_GPIO_Init+0x2bc>)
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	089b      	lsrs	r3, r3, #2
 8001c88:	3302      	adds	r3, #2
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d006      	beq.n	8001caa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c9c:	4b2d      	ldr	r3, [pc, #180]	; (8001d54 <HAL_GPIO_Init+0x2d0>)
 8001c9e:	689a      	ldr	r2, [r3, #8]
 8001ca0:	492c      	ldr	r1, [pc, #176]	; (8001d54 <HAL_GPIO_Init+0x2d0>)
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	608b      	str	r3, [r1, #8]
 8001ca8:	e006      	b.n	8001cb8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001caa:	4b2a      	ldr	r3, [pc, #168]	; (8001d54 <HAL_GPIO_Init+0x2d0>)
 8001cac:	689a      	ldr	r2, [r3, #8]
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	4928      	ldr	r1, [pc, #160]	; (8001d54 <HAL_GPIO_Init+0x2d0>)
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d006      	beq.n	8001cd2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cc4:	4b23      	ldr	r3, [pc, #140]	; (8001d54 <HAL_GPIO_Init+0x2d0>)
 8001cc6:	68da      	ldr	r2, [r3, #12]
 8001cc8:	4922      	ldr	r1, [pc, #136]	; (8001d54 <HAL_GPIO_Init+0x2d0>)
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	60cb      	str	r3, [r1, #12]
 8001cd0:	e006      	b.n	8001ce0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cd2:	4b20      	ldr	r3, [pc, #128]	; (8001d54 <HAL_GPIO_Init+0x2d0>)
 8001cd4:	68da      	ldr	r2, [r3, #12]
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	491e      	ldr	r1, [pc, #120]	; (8001d54 <HAL_GPIO_Init+0x2d0>)
 8001cdc:	4013      	ands	r3, r2
 8001cde:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d006      	beq.n	8001cfa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cec:	4b19      	ldr	r3, [pc, #100]	; (8001d54 <HAL_GPIO_Init+0x2d0>)
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	4918      	ldr	r1, [pc, #96]	; (8001d54 <HAL_GPIO_Init+0x2d0>)
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	604b      	str	r3, [r1, #4]
 8001cf8:	e006      	b.n	8001d08 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001cfa:	4b16      	ldr	r3, [pc, #88]	; (8001d54 <HAL_GPIO_Init+0x2d0>)
 8001cfc:	685a      	ldr	r2, [r3, #4]
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	43db      	mvns	r3, r3
 8001d02:	4914      	ldr	r1, [pc, #80]	; (8001d54 <HAL_GPIO_Init+0x2d0>)
 8001d04:	4013      	ands	r3, r2
 8001d06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d021      	beq.n	8001d58 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d14:	4b0f      	ldr	r3, [pc, #60]	; (8001d54 <HAL_GPIO_Init+0x2d0>)
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	490e      	ldr	r1, [pc, #56]	; (8001d54 <HAL_GPIO_Init+0x2d0>)
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	600b      	str	r3, [r1, #0]
 8001d20:	e021      	b.n	8001d66 <HAL_GPIO_Init+0x2e2>
 8001d22:	bf00      	nop
 8001d24:	10320000 	.word	0x10320000
 8001d28:	10310000 	.word	0x10310000
 8001d2c:	10220000 	.word	0x10220000
 8001d30:	10210000 	.word	0x10210000
 8001d34:	10120000 	.word	0x10120000
 8001d38:	10110000 	.word	0x10110000
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	40010000 	.word	0x40010000
 8001d44:	40010800 	.word	0x40010800
 8001d48:	40010c00 	.word	0x40010c00
 8001d4c:	40011000 	.word	0x40011000
 8001d50:	40011400 	.word	0x40011400
 8001d54:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d58:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <HAL_GPIO_Init+0x304>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	4909      	ldr	r1, [pc, #36]	; (8001d88 <HAL_GPIO_Init+0x304>)
 8001d62:	4013      	ands	r3, r2
 8001d64:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d68:	3301      	adds	r3, #1
 8001d6a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d72:	fa22 f303 	lsr.w	r3, r2, r3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f47f ae8e 	bne.w	8001a98 <HAL_GPIO_Init+0x14>
  }
}
 8001d7c:	bf00      	nop
 8001d7e:	bf00      	nop
 8001d80:	372c      	adds	r7, #44	; 0x2c
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr
 8001d88:	40010400 	.word	0x40010400

08001d8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	460b      	mov	r3, r1
 8001d96:	807b      	strh	r3, [r7, #2]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d9c:	787b      	ldrb	r3, [r7, #1]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001da2:	887a      	ldrh	r2, [r7, #2]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001da8:	e003      	b.n	8001db2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001daa:	887b      	ldrh	r3, [r7, #2]
 8001dac:	041a      	lsls	r2, r3, #16
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	611a      	str	r2, [r3, #16]
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr

08001dbc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dce:	887a      	ldrh	r2, [r7, #2]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	041a      	lsls	r2, r3, #16
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	43d9      	mvns	r1, r3
 8001dda:	887b      	ldrh	r3, [r7, #2]
 8001ddc:	400b      	ands	r3, r1
 8001dde:	431a      	orrs	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	611a      	str	r2, [r3, #16]
}
 8001de4:	bf00      	nop
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc80      	pop	{r7}
 8001dec:	4770      	bx	lr
	...

08001df0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001dfa:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dfc:	695a      	ldr	r2, [r3, #20]
 8001dfe:	88fb      	ldrh	r3, [r7, #6]
 8001e00:	4013      	ands	r3, r2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d006      	beq.n	8001e14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e06:	4a05      	ldr	r2, [pc, #20]	; (8001e1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e08:	88fb      	ldrh	r3, [r7, #6]
 8001e0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e0c:	88fb      	ldrh	r3, [r7, #6]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7fe fe34 	bl	8000a7c <HAL_GPIO_EXTI_Callback>
  }
}
 8001e14:	bf00      	nop
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40010400 	.word	0x40010400

08001e20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e272      	b.n	8002318 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f000 8087 	beq.w	8001f4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e40:	4b92      	ldr	r3, [pc, #584]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f003 030c 	and.w	r3, r3, #12
 8001e48:	2b04      	cmp	r3, #4
 8001e4a:	d00c      	beq.n	8001e66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e4c:	4b8f      	ldr	r3, [pc, #572]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 030c 	and.w	r3, r3, #12
 8001e54:	2b08      	cmp	r3, #8
 8001e56:	d112      	bne.n	8001e7e <HAL_RCC_OscConfig+0x5e>
 8001e58:	4b8c      	ldr	r3, [pc, #560]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e64:	d10b      	bne.n	8001e7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e66:	4b89      	ldr	r3, [pc, #548]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d06c      	beq.n	8001f4c <HAL_RCC_OscConfig+0x12c>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d168      	bne.n	8001f4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e24c      	b.n	8002318 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e86:	d106      	bne.n	8001e96 <HAL_RCC_OscConfig+0x76>
 8001e88:	4b80      	ldr	r3, [pc, #512]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a7f      	ldr	r2, [pc, #508]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001e8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e92:	6013      	str	r3, [r2, #0]
 8001e94:	e02e      	b.n	8001ef4 <HAL_RCC_OscConfig+0xd4>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10c      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x98>
 8001e9e:	4b7b      	ldr	r3, [pc, #492]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a7a      	ldr	r2, [pc, #488]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	4b78      	ldr	r3, [pc, #480]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a77      	ldr	r2, [pc, #476]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	e01d      	b.n	8001ef4 <HAL_RCC_OscConfig+0xd4>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ec0:	d10c      	bne.n	8001edc <HAL_RCC_OscConfig+0xbc>
 8001ec2:	4b72      	ldr	r3, [pc, #456]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a71      	ldr	r2, [pc, #452]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	4b6f      	ldr	r3, [pc, #444]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a6e      	ldr	r2, [pc, #440]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed8:	6013      	str	r3, [r2, #0]
 8001eda:	e00b      	b.n	8001ef4 <HAL_RCC_OscConfig+0xd4>
 8001edc:	4b6b      	ldr	r3, [pc, #428]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a6a      	ldr	r2, [pc, #424]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001ee2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ee6:	6013      	str	r3, [r2, #0]
 8001ee8:	4b68      	ldr	r3, [pc, #416]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a67      	ldr	r2, [pc, #412]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001eee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ef2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d013      	beq.n	8001f24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efc:	f7ff fbd4 	bl	80016a8 <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f04:	f7ff fbd0 	bl	80016a8 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b64      	cmp	r3, #100	; 0x64
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e200      	b.n	8002318 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f16:	4b5d      	ldr	r3, [pc, #372]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0f0      	beq.n	8001f04 <HAL_RCC_OscConfig+0xe4>
 8001f22:	e014      	b.n	8001f4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f24:	f7ff fbc0 	bl	80016a8 <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f2c:	f7ff fbbc 	bl	80016a8 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b64      	cmp	r3, #100	; 0x64
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e1ec      	b.n	8002318 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f3e:	4b53      	ldr	r3, [pc, #332]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1f0      	bne.n	8001f2c <HAL_RCC_OscConfig+0x10c>
 8001f4a:	e000      	b.n	8001f4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d063      	beq.n	8002022 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f5a:	4b4c      	ldr	r3, [pc, #304]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f003 030c 	and.w	r3, r3, #12
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d00b      	beq.n	8001f7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f66:	4b49      	ldr	r3, [pc, #292]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f003 030c 	and.w	r3, r3, #12
 8001f6e:	2b08      	cmp	r3, #8
 8001f70:	d11c      	bne.n	8001fac <HAL_RCC_OscConfig+0x18c>
 8001f72:	4b46      	ldr	r3, [pc, #280]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d116      	bne.n	8001fac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f7e:	4b43      	ldr	r3, [pc, #268]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d005      	beq.n	8001f96 <HAL_RCC_OscConfig+0x176>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d001      	beq.n	8001f96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e1c0      	b.n	8002318 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f96:	4b3d      	ldr	r3, [pc, #244]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	4939      	ldr	r1, [pc, #228]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001faa:	e03a      	b.n	8002022 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d020      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fb4:	4b36      	ldr	r3, [pc, #216]	; (8002090 <HAL_RCC_OscConfig+0x270>)
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fba:	f7ff fb75 	bl	80016a8 <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc0:	e008      	b.n	8001fd4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fc2:	f7ff fb71 	bl	80016a8 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e1a1      	b.n	8002318 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd4:	4b2d      	ldr	r3, [pc, #180]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0f0      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe0:	4b2a      	ldr	r3, [pc, #168]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	695b      	ldr	r3, [r3, #20]
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	4927      	ldr	r1, [pc, #156]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	600b      	str	r3, [r1, #0]
 8001ff4:	e015      	b.n	8002022 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ff6:	4b26      	ldr	r3, [pc, #152]	; (8002090 <HAL_RCC_OscConfig+0x270>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffc:	f7ff fb54 	bl	80016a8 <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002004:	f7ff fb50 	bl	80016a8 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e180      	b.n	8002318 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002016:	4b1d      	ldr	r3, [pc, #116]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1f0      	bne.n	8002004 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0308 	and.w	r3, r3, #8
 800202a:	2b00      	cmp	r3, #0
 800202c:	d03a      	beq.n	80020a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d019      	beq.n	800206a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002036:	4b17      	ldr	r3, [pc, #92]	; (8002094 <HAL_RCC_OscConfig+0x274>)
 8002038:	2201      	movs	r2, #1
 800203a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800203c:	f7ff fb34 	bl	80016a8 <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002044:	f7ff fb30 	bl	80016a8 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e160      	b.n	8002318 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002056:	4b0d      	ldr	r3, [pc, #52]	; (800208c <HAL_RCC_OscConfig+0x26c>)
 8002058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d0f0      	beq.n	8002044 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002062:	2001      	movs	r0, #1
 8002064:	f000 face 	bl	8002604 <RCC_Delay>
 8002068:	e01c      	b.n	80020a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800206a:	4b0a      	ldr	r3, [pc, #40]	; (8002094 <HAL_RCC_OscConfig+0x274>)
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002070:	f7ff fb1a 	bl	80016a8 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002076:	e00f      	b.n	8002098 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002078:	f7ff fb16 	bl	80016a8 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d908      	bls.n	8002098 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e146      	b.n	8002318 <HAL_RCC_OscConfig+0x4f8>
 800208a:	bf00      	nop
 800208c:	40021000 	.word	0x40021000
 8002090:	42420000 	.word	0x42420000
 8002094:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002098:	4b92      	ldr	r3, [pc, #584]	; (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d1e9      	bne.n	8002078 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 80a6 	beq.w	80021fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020b2:	2300      	movs	r3, #0
 80020b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020b6:	4b8b      	ldr	r3, [pc, #556]	; (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10d      	bne.n	80020de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020c2:	4b88      	ldr	r3, [pc, #544]	; (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	4a87      	ldr	r2, [pc, #540]	; (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 80020c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020cc:	61d3      	str	r3, [r2, #28]
 80020ce:	4b85      	ldr	r3, [pc, #532]	; (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d6:	60bb      	str	r3, [r7, #8]
 80020d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020da:	2301      	movs	r3, #1
 80020dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020de:	4b82      	ldr	r3, [pc, #520]	; (80022e8 <HAL_RCC_OscConfig+0x4c8>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d118      	bne.n	800211c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ea:	4b7f      	ldr	r3, [pc, #508]	; (80022e8 <HAL_RCC_OscConfig+0x4c8>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a7e      	ldr	r2, [pc, #504]	; (80022e8 <HAL_RCC_OscConfig+0x4c8>)
 80020f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020f6:	f7ff fad7 	bl	80016a8 <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020fc:	e008      	b.n	8002110 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020fe:	f7ff fad3 	bl	80016a8 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b64      	cmp	r3, #100	; 0x64
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e103      	b.n	8002318 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002110:	4b75      	ldr	r3, [pc, #468]	; (80022e8 <HAL_RCC_OscConfig+0x4c8>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0f0      	beq.n	80020fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d106      	bne.n	8002132 <HAL_RCC_OscConfig+0x312>
 8002124:	4b6f      	ldr	r3, [pc, #444]	; (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	4a6e      	ldr	r2, [pc, #440]	; (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 800212a:	f043 0301 	orr.w	r3, r3, #1
 800212e:	6213      	str	r3, [r2, #32]
 8002130:	e02d      	b.n	800218e <HAL_RCC_OscConfig+0x36e>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d10c      	bne.n	8002154 <HAL_RCC_OscConfig+0x334>
 800213a:	4b6a      	ldr	r3, [pc, #424]	; (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	4a69      	ldr	r2, [pc, #420]	; (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 8002140:	f023 0301 	bic.w	r3, r3, #1
 8002144:	6213      	str	r3, [r2, #32]
 8002146:	4b67      	ldr	r3, [pc, #412]	; (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	4a66      	ldr	r2, [pc, #408]	; (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 800214c:	f023 0304 	bic.w	r3, r3, #4
 8002150:	6213      	str	r3, [r2, #32]
 8002152:	e01c      	b.n	800218e <HAL_RCC_OscConfig+0x36e>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	2b05      	cmp	r3, #5
 800215a:	d10c      	bne.n	8002176 <HAL_RCC_OscConfig+0x356>
 800215c:	4b61      	ldr	r3, [pc, #388]	; (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	4a60      	ldr	r2, [pc, #384]	; (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 8002162:	f043 0304 	orr.w	r3, r3, #4
 8002166:	6213      	str	r3, [r2, #32]
 8002168:	4b5e      	ldr	r3, [pc, #376]	; (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	4a5d      	ldr	r2, [pc, #372]	; (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 800216e:	f043 0301 	orr.w	r3, r3, #1
 8002172:	6213      	str	r3, [r2, #32]
 8002174:	e00b      	b.n	800218e <HAL_RCC_OscConfig+0x36e>
 8002176:	4b5b      	ldr	r3, [pc, #364]	; (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	4a5a      	ldr	r2, [pc, #360]	; (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 800217c:	f023 0301 	bic.w	r3, r3, #1
 8002180:	6213      	str	r3, [r2, #32]
 8002182:	4b58      	ldr	r3, [pc, #352]	; (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	4a57      	ldr	r2, [pc, #348]	; (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 8002188:	f023 0304 	bic.w	r3, r3, #4
 800218c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d015      	beq.n	80021c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002196:	f7ff fa87 	bl	80016a8 <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800219c:	e00a      	b.n	80021b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800219e:	f7ff fa83 	bl	80016a8 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e0b1      	b.n	8002318 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b4:	4b4b      	ldr	r3, [pc, #300]	; (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d0ee      	beq.n	800219e <HAL_RCC_OscConfig+0x37e>
 80021c0:	e014      	b.n	80021ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c2:	f7ff fa71 	bl	80016a8 <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c8:	e00a      	b.n	80021e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ca:	f7ff fa6d 	bl	80016a8 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d8:	4293      	cmp	r3, r2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e09b      	b.n	8002318 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021e0:	4b40      	ldr	r3, [pc, #256]	; (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1ee      	bne.n	80021ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021ec:	7dfb      	ldrb	r3, [r7, #23]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d105      	bne.n	80021fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021f2:	4b3c      	ldr	r3, [pc, #240]	; (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	4a3b      	ldr	r2, [pc, #236]	; (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 80021f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	2b00      	cmp	r3, #0
 8002204:	f000 8087 	beq.w	8002316 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002208:	4b36      	ldr	r3, [pc, #216]	; (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f003 030c 	and.w	r3, r3, #12
 8002210:	2b08      	cmp	r3, #8
 8002212:	d061      	beq.n	80022d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	69db      	ldr	r3, [r3, #28]
 8002218:	2b02      	cmp	r3, #2
 800221a:	d146      	bne.n	80022aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800221c:	4b33      	ldr	r3, [pc, #204]	; (80022ec <HAL_RCC_OscConfig+0x4cc>)
 800221e:	2200      	movs	r2, #0
 8002220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002222:	f7ff fa41 	bl	80016a8 <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002228:	e008      	b.n	800223c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800222a:	f7ff fa3d 	bl	80016a8 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e06d      	b.n	8002318 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800223c:	4b29      	ldr	r3, [pc, #164]	; (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1f0      	bne.n	800222a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002250:	d108      	bne.n	8002264 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002252:	4b24      	ldr	r3, [pc, #144]	; (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	4921      	ldr	r1, [pc, #132]	; (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 8002260:	4313      	orrs	r3, r2
 8002262:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002264:	4b1f      	ldr	r3, [pc, #124]	; (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a19      	ldr	r1, [r3, #32]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002274:	430b      	orrs	r3, r1
 8002276:	491b      	ldr	r1, [pc, #108]	; (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 8002278:	4313      	orrs	r3, r2
 800227a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800227c:	4b1b      	ldr	r3, [pc, #108]	; (80022ec <HAL_RCC_OscConfig+0x4cc>)
 800227e:	2201      	movs	r2, #1
 8002280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002282:	f7ff fa11 	bl	80016a8 <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002288:	e008      	b.n	800229c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800228a:	f7ff fa0d 	bl	80016a8 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e03d      	b.n	8002318 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800229c:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0f0      	beq.n	800228a <HAL_RCC_OscConfig+0x46a>
 80022a8:	e035      	b.n	8002316 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022aa:	4b10      	ldr	r3, [pc, #64]	; (80022ec <HAL_RCC_OscConfig+0x4cc>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b0:	f7ff f9fa 	bl	80016a8 <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b8:	f7ff f9f6 	bl	80016a8 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e026      	b.n	8002318 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ca:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <HAL_RCC_OscConfig+0x4c4>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1f0      	bne.n	80022b8 <HAL_RCC_OscConfig+0x498>
 80022d6:	e01e      	b.n	8002316 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d107      	bne.n	80022f0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e019      	b.n	8002318 <HAL_RCC_OscConfig+0x4f8>
 80022e4:	40021000 	.word	0x40021000
 80022e8:	40007000 	.word	0x40007000
 80022ec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022f0:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <HAL_RCC_OscConfig+0x500>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	429a      	cmp	r2, r3
 8002302:	d106      	bne.n	8002312 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800230e:	429a      	cmp	r2, r3
 8002310:	d001      	beq.n	8002316 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e000      	b.n	8002318 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3718      	adds	r7, #24
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021000 	.word	0x40021000

08002324 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e0d0      	b.n	80024da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002338:	4b6a      	ldr	r3, [pc, #424]	; (80024e4 <HAL_RCC_ClockConfig+0x1c0>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	429a      	cmp	r2, r3
 8002344:	d910      	bls.n	8002368 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002346:	4b67      	ldr	r3, [pc, #412]	; (80024e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f023 0207 	bic.w	r2, r3, #7
 800234e:	4965      	ldr	r1, [pc, #404]	; (80024e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	4313      	orrs	r3, r2
 8002354:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002356:	4b63      	ldr	r3, [pc, #396]	; (80024e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	429a      	cmp	r2, r3
 8002362:	d001      	beq.n	8002368 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e0b8      	b.n	80024da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d020      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0304 	and.w	r3, r3, #4
 800237c:	2b00      	cmp	r3, #0
 800237e:	d005      	beq.n	800238c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002380:	4b59      	ldr	r3, [pc, #356]	; (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	4a58      	ldr	r2, [pc, #352]	; (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002386:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800238a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0308 	and.w	r3, r3, #8
 8002394:	2b00      	cmp	r3, #0
 8002396:	d005      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002398:	4b53      	ldr	r3, [pc, #332]	; (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	4a52      	ldr	r2, [pc, #328]	; (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 800239e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023a4:	4b50      	ldr	r3, [pc, #320]	; (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	494d      	ldr	r1, [pc, #308]	; (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d040      	beq.n	8002444 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d107      	bne.n	80023da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ca:	4b47      	ldr	r3, [pc, #284]	; (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d115      	bne.n	8002402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e07f      	b.n	80024da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d107      	bne.n	80023f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023e2:	4b41      	ldr	r3, [pc, #260]	; (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d109      	bne.n	8002402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e073      	b.n	80024da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f2:	4b3d      	ldr	r3, [pc, #244]	; (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e06b      	b.n	80024da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002402:	4b39      	ldr	r3, [pc, #228]	; (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f023 0203 	bic.w	r2, r3, #3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	4936      	ldr	r1, [pc, #216]	; (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002410:	4313      	orrs	r3, r2
 8002412:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002414:	f7ff f948 	bl	80016a8 <HAL_GetTick>
 8002418:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800241a:	e00a      	b.n	8002432 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800241c:	f7ff f944 	bl	80016a8 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	f241 3288 	movw	r2, #5000	; 0x1388
 800242a:	4293      	cmp	r3, r2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e053      	b.n	80024da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002432:	4b2d      	ldr	r3, [pc, #180]	; (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f003 020c 	and.w	r2, r3, #12
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	429a      	cmp	r2, r3
 8002442:	d1eb      	bne.n	800241c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002444:	4b27      	ldr	r3, [pc, #156]	; (80024e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	429a      	cmp	r2, r3
 8002450:	d210      	bcs.n	8002474 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002452:	4b24      	ldr	r3, [pc, #144]	; (80024e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f023 0207 	bic.w	r2, r3, #7
 800245a:	4922      	ldr	r1, [pc, #136]	; (80024e4 <HAL_RCC_ClockConfig+0x1c0>)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	4313      	orrs	r3, r2
 8002460:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002462:	4b20      	ldr	r3, [pc, #128]	; (80024e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	429a      	cmp	r2, r3
 800246e:	d001      	beq.n	8002474 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e032      	b.n	80024da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	d008      	beq.n	8002492 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002480:	4b19      	ldr	r3, [pc, #100]	; (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	4916      	ldr	r1, [pc, #88]	; (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 800248e:	4313      	orrs	r3, r2
 8002490:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0308 	and.w	r3, r3, #8
 800249a:	2b00      	cmp	r3, #0
 800249c:	d009      	beq.n	80024b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800249e:	4b12      	ldr	r3, [pc, #72]	; (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	490e      	ldr	r1, [pc, #56]	; (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024b2:	f000 f821 	bl	80024f8 <HAL_RCC_GetSysClockFreq>
 80024b6:	4602      	mov	r2, r0
 80024b8:	4b0b      	ldr	r3, [pc, #44]	; (80024e8 <HAL_RCC_ClockConfig+0x1c4>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	091b      	lsrs	r3, r3, #4
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	490a      	ldr	r1, [pc, #40]	; (80024ec <HAL_RCC_ClockConfig+0x1c8>)
 80024c4:	5ccb      	ldrb	r3, [r1, r3]
 80024c6:	fa22 f303 	lsr.w	r3, r2, r3
 80024ca:	4a09      	ldr	r2, [pc, #36]	; (80024f0 <HAL_RCC_ClockConfig+0x1cc>)
 80024cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024ce:	4b09      	ldr	r3, [pc, #36]	; (80024f4 <HAL_RCC_ClockConfig+0x1d0>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff f8a6 	bl	8001624 <HAL_InitTick>

  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40022000 	.word	0x40022000
 80024e8:	40021000 	.word	0x40021000
 80024ec:	08004d48 	.word	0x08004d48
 80024f0:	20000010 	.word	0x20000010
 80024f4:	20000014 	.word	0x20000014

080024f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b087      	sub	sp, #28
 80024fc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	2300      	movs	r3, #0
 8002504:	60bb      	str	r3, [r7, #8]
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]
 800250a:	2300      	movs	r3, #0
 800250c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800250e:	2300      	movs	r3, #0
 8002510:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002512:	4b1e      	ldr	r3, [pc, #120]	; (800258c <HAL_RCC_GetSysClockFreq+0x94>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f003 030c 	and.w	r3, r3, #12
 800251e:	2b04      	cmp	r3, #4
 8002520:	d002      	beq.n	8002528 <HAL_RCC_GetSysClockFreq+0x30>
 8002522:	2b08      	cmp	r3, #8
 8002524:	d003      	beq.n	800252e <HAL_RCC_GetSysClockFreq+0x36>
 8002526:	e027      	b.n	8002578 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002528:	4b19      	ldr	r3, [pc, #100]	; (8002590 <HAL_RCC_GetSysClockFreq+0x98>)
 800252a:	613b      	str	r3, [r7, #16]
      break;
 800252c:	e027      	b.n	800257e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	0c9b      	lsrs	r3, r3, #18
 8002532:	f003 030f 	and.w	r3, r3, #15
 8002536:	4a17      	ldr	r2, [pc, #92]	; (8002594 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002538:	5cd3      	ldrb	r3, [r2, r3]
 800253a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d010      	beq.n	8002568 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002546:	4b11      	ldr	r3, [pc, #68]	; (800258c <HAL_RCC_GetSysClockFreq+0x94>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	0c5b      	lsrs	r3, r3, #17
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	4a11      	ldr	r2, [pc, #68]	; (8002598 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002552:	5cd3      	ldrb	r3, [r2, r3]
 8002554:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a0d      	ldr	r2, [pc, #52]	; (8002590 <HAL_RCC_GetSysClockFreq+0x98>)
 800255a:	fb03 f202 	mul.w	r2, r3, r2
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	fbb2 f3f3 	udiv	r3, r2, r3
 8002564:	617b      	str	r3, [r7, #20]
 8002566:	e004      	b.n	8002572 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a0c      	ldr	r2, [pc, #48]	; (800259c <HAL_RCC_GetSysClockFreq+0xa4>)
 800256c:	fb02 f303 	mul.w	r3, r2, r3
 8002570:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	613b      	str	r3, [r7, #16]
      break;
 8002576:	e002      	b.n	800257e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002578:	4b05      	ldr	r3, [pc, #20]	; (8002590 <HAL_RCC_GetSysClockFreq+0x98>)
 800257a:	613b      	str	r3, [r7, #16]
      break;
 800257c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800257e:	693b      	ldr	r3, [r7, #16]
}
 8002580:	4618      	mov	r0, r3
 8002582:	371c      	adds	r7, #28
 8002584:	46bd      	mov	sp, r7
 8002586:	bc80      	pop	{r7}
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	40021000 	.word	0x40021000
 8002590:	007a1200 	.word	0x007a1200
 8002594:	08004d60 	.word	0x08004d60
 8002598:	08004d70 	.word	0x08004d70
 800259c:	003d0900 	.word	0x003d0900

080025a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025a4:	4b02      	ldr	r3, [pc, #8]	; (80025b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80025a6:	681b      	ldr	r3, [r3, #0]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr
 80025b0:	20000010 	.word	0x20000010

080025b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025b8:	f7ff fff2 	bl	80025a0 <HAL_RCC_GetHCLKFreq>
 80025bc:	4602      	mov	r2, r0
 80025be:	4b05      	ldr	r3, [pc, #20]	; (80025d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	0a1b      	lsrs	r3, r3, #8
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	4903      	ldr	r1, [pc, #12]	; (80025d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ca:	5ccb      	ldrb	r3, [r1, r3]
 80025cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40021000 	.word	0x40021000
 80025d8:	08004d58 	.word	0x08004d58

080025dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025e0:	f7ff ffde 	bl	80025a0 <HAL_RCC_GetHCLKFreq>
 80025e4:	4602      	mov	r2, r0
 80025e6:	4b05      	ldr	r3, [pc, #20]	; (80025fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	0adb      	lsrs	r3, r3, #11
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	4903      	ldr	r1, [pc, #12]	; (8002600 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025f2:	5ccb      	ldrb	r3, [r1, r3]
 80025f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40021000 	.word	0x40021000
 8002600:	08004d58 	.word	0x08004d58

08002604 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800260c:	4b0a      	ldr	r3, [pc, #40]	; (8002638 <RCC_Delay+0x34>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a0a      	ldr	r2, [pc, #40]	; (800263c <RCC_Delay+0x38>)
 8002612:	fba2 2303 	umull	r2, r3, r2, r3
 8002616:	0a5b      	lsrs	r3, r3, #9
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	fb02 f303 	mul.w	r3, r2, r3
 800261e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002620:	bf00      	nop
  }
  while (Delay --);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	1e5a      	subs	r2, r3, #1
 8002626:	60fa      	str	r2, [r7, #12]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1f9      	bne.n	8002620 <RCC_Delay+0x1c>
}
 800262c:	bf00      	nop
 800262e:	bf00      	nop
 8002630:	3714      	adds	r7, #20
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr
 8002638:	20000010 	.word	0x20000010
 800263c:	10624dd3 	.word	0x10624dd3

08002640 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e076      	b.n	8002740 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002656:	2b00      	cmp	r3, #0
 8002658:	d108      	bne.n	800266c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002662:	d009      	beq.n	8002678 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	61da      	str	r2, [r3, #28]
 800266a:	e005      	b.n	8002678 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d106      	bne.n	8002698 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7fe fdf2 	bl	800127c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2202      	movs	r2, #2
 800269c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80026c0:	431a      	orrs	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026ca:	431a      	orrs	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	431a      	orrs	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	431a      	orrs	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026e8:	431a      	orrs	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026f2:	431a      	orrs	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026fc:	ea42 0103 	orr.w	r1, r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002704:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	430a      	orrs	r2, r1
 800270e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	0c1a      	lsrs	r2, r3, #16
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f002 0204 	and.w	r2, r2, #4
 800271e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	69da      	ldr	r2, [r3, #28]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800272e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b088      	sub	sp, #32
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	603b      	str	r3, [r7, #0]
 8002754:	4613      	mov	r3, r2
 8002756:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002758:	2300      	movs	r3, #0
 800275a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002762:	2b01      	cmp	r3, #1
 8002764:	d101      	bne.n	800276a <HAL_SPI_Transmit+0x22>
 8002766:	2302      	movs	r3, #2
 8002768:	e12d      	b.n	80029c6 <HAL_SPI_Transmit+0x27e>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002772:	f7fe ff99 	bl	80016a8 <HAL_GetTick>
 8002776:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002778:	88fb      	ldrh	r3, [r7, #6]
 800277a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b01      	cmp	r3, #1
 8002786:	d002      	beq.n	800278e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002788:	2302      	movs	r3, #2
 800278a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800278c:	e116      	b.n	80029bc <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d002      	beq.n	800279a <HAL_SPI_Transmit+0x52>
 8002794:	88fb      	ldrh	r3, [r7, #6]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d102      	bne.n	80027a0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800279e:	e10d      	b.n	80029bc <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2203      	movs	r2, #3
 80027a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	68ba      	ldr	r2, [r7, #8]
 80027b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	88fa      	ldrh	r2, [r7, #6]
 80027b8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	88fa      	ldrh	r2, [r7, #6]
 80027be:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027e6:	d10f      	bne.n	8002808 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027f6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002806:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002812:	2b40      	cmp	r3, #64	; 0x40
 8002814:	d007      	beq.n	8002826 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002824:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800282e:	d14f      	bne.n	80028d0 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d002      	beq.n	800283e <HAL_SPI_Transmit+0xf6>
 8002838:	8afb      	ldrh	r3, [r7, #22]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d142      	bne.n	80028c4 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	881a      	ldrh	r2, [r3, #0]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	1c9a      	adds	r2, r3, #2
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002858:	b29b      	uxth	r3, r3
 800285a:	3b01      	subs	r3, #1
 800285c:	b29a      	uxth	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002862:	e02f      	b.n	80028c4 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b02      	cmp	r3, #2
 8002870:	d112      	bne.n	8002898 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	881a      	ldrh	r2, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	1c9a      	adds	r2, r3, #2
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800288c:	b29b      	uxth	r3, r3
 800288e:	3b01      	subs	r3, #1
 8002890:	b29a      	uxth	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	86da      	strh	r2, [r3, #54]	; 0x36
 8002896:	e015      	b.n	80028c4 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002898:	f7fe ff06 	bl	80016a8 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d803      	bhi.n	80028b0 <HAL_SPI_Transmit+0x168>
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028ae:	d102      	bne.n	80028b6 <HAL_SPI_Transmit+0x16e>
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d106      	bne.n	80028c4 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80028c2:	e07b      	b.n	80029bc <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1ca      	bne.n	8002864 <HAL_SPI_Transmit+0x11c>
 80028ce:	e050      	b.n	8002972 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d002      	beq.n	80028de <HAL_SPI_Transmit+0x196>
 80028d8:	8afb      	ldrh	r3, [r7, #22]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d144      	bne.n	8002968 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	330c      	adds	r3, #12
 80028e8:	7812      	ldrb	r2, [r2, #0]
 80028ea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f0:	1c5a      	adds	r2, r3, #1
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	3b01      	subs	r3, #1
 80028fe:	b29a      	uxth	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002904:	e030      	b.n	8002968 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b02      	cmp	r3, #2
 8002912:	d113      	bne.n	800293c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	330c      	adds	r3, #12
 800291e:	7812      	ldrb	r2, [r2, #0]
 8002920:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	1c5a      	adds	r2, r3, #1
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002930:	b29b      	uxth	r3, r3
 8002932:	3b01      	subs	r3, #1
 8002934:	b29a      	uxth	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	86da      	strh	r2, [r3, #54]	; 0x36
 800293a:	e015      	b.n	8002968 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800293c:	f7fe feb4 	bl	80016a8 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	429a      	cmp	r2, r3
 800294a:	d803      	bhi.n	8002954 <HAL_SPI_Transmit+0x20c>
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002952:	d102      	bne.n	800295a <HAL_SPI_Transmit+0x212>
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d106      	bne.n	8002968 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2201      	movs	r2, #1
 8002962:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002966:	e029      	b.n	80029bc <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800296c:	b29b      	uxth	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1c9      	bne.n	8002906 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	6839      	ldr	r1, [r7, #0]
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f000 f8b2 	bl	8002ae0 <SPI_EndRxTxTransaction>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d002      	beq.n	8002988 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2220      	movs	r2, #32
 8002986:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10a      	bne.n	80029a6 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002990:	2300      	movs	r3, #0
 8002992:	613b      	str	r3, [r7, #16]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	613b      	str	r3, [r7, #16]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	613b      	str	r3, [r7, #16]
 80029a4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d002      	beq.n	80029b4 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	77fb      	strb	r3, [r7, #31]
 80029b2:	e003      	b.n	80029bc <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80029c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3720      	adds	r7, #32
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
	...

080029d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b088      	sub	sp, #32
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	603b      	str	r3, [r7, #0]
 80029dc:	4613      	mov	r3, r2
 80029de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80029e0:	f7fe fe62 	bl	80016a8 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e8:	1a9b      	subs	r3, r3, r2
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	4413      	add	r3, r2
 80029ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80029f0:	f7fe fe5a 	bl	80016a8 <HAL_GetTick>
 80029f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80029f6:	4b39      	ldr	r3, [pc, #228]	; (8002adc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	015b      	lsls	r3, r3, #5
 80029fc:	0d1b      	lsrs	r3, r3, #20
 80029fe:	69fa      	ldr	r2, [r7, #28]
 8002a00:	fb02 f303 	mul.w	r3, r2, r3
 8002a04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a06:	e054      	b.n	8002ab2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a0e:	d050      	beq.n	8002ab2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a10:	f7fe fe4a 	bl	80016a8 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	69fa      	ldr	r2, [r7, #28]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d902      	bls.n	8002a26 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d13d      	bne.n	8002aa2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	685a      	ldr	r2, [r3, #4]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a3e:	d111      	bne.n	8002a64 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a48:	d004      	beq.n	8002a54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a52:	d107      	bne.n	8002a64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a6c:	d10f      	bne.n	8002a8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e017      	b.n	8002ad2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d101      	bne.n	8002aac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	4013      	ands	r3, r2
 8002abc:	68ba      	ldr	r2, [r7, #8]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	bf0c      	ite	eq
 8002ac2:	2301      	moveq	r3, #1
 8002ac4:	2300      	movne	r3, #0
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	461a      	mov	r2, r3
 8002aca:	79fb      	ldrb	r3, [r7, #7]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d19b      	bne.n	8002a08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3720      	adds	r7, #32
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	20000010 	.word	0x20000010

08002ae0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af02      	add	r7, sp, #8
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	2200      	movs	r2, #0
 8002af4:	2180      	movs	r1, #128	; 0x80
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f7ff ff6a 	bl	80029d0 <SPI_WaitFlagStateUntilTimeout>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d007      	beq.n	8002b12 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b06:	f043 0220 	orr.w	r2, r3, #32
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e000      	b.n	8002b14 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e041      	b.n	8002bb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d106      	bne.n	8002b48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f7fe fbd8 	bl	80012f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	3304      	adds	r3, #4
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4610      	mov	r0, r2
 8002b5c:	f000 fa74 	bl	8003048 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
	...

08002bbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d001      	beq.n	8002bd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e03a      	b.n	8002c4a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68da      	ldr	r2, [r3, #12]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 0201 	orr.w	r2, r2, #1
 8002bea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a18      	ldr	r2, [pc, #96]	; (8002c54 <HAL_TIM_Base_Start_IT+0x98>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d00e      	beq.n	8002c14 <HAL_TIM_Base_Start_IT+0x58>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bfe:	d009      	beq.n	8002c14 <HAL_TIM_Base_Start_IT+0x58>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a14      	ldr	r2, [pc, #80]	; (8002c58 <HAL_TIM_Base_Start_IT+0x9c>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d004      	beq.n	8002c14 <HAL_TIM_Base_Start_IT+0x58>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a13      	ldr	r2, [pc, #76]	; (8002c5c <HAL_TIM_Base_Start_IT+0xa0>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d111      	bne.n	8002c38 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2b06      	cmp	r3, #6
 8002c24:	d010      	beq.n	8002c48 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f042 0201 	orr.w	r2, r2, #1
 8002c34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c36:	e007      	b.n	8002c48 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0201 	orr.w	r2, r2, #1
 8002c46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3714      	adds	r7, #20
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bc80      	pop	{r7}
 8002c52:	4770      	bx	lr
 8002c54:	40012c00 	.word	0x40012c00
 8002c58:	40000400 	.word	0x40000400
 8002c5c:	40000800 	.word	0x40000800

08002c60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d122      	bne.n	8002cbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d11b      	bne.n	8002cbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f06f 0202 	mvn.w	r2, #2
 8002c8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	f003 0303 	and.w	r3, r3, #3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d003      	beq.n	8002caa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 f9b4 	bl	8003010 <HAL_TIM_IC_CaptureCallback>
 8002ca8:	e005      	b.n	8002cb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f9a7 	bl	8002ffe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 f9b6 	bl	8003022 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	f003 0304 	and.w	r3, r3, #4
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	d122      	bne.n	8002d10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f003 0304 	and.w	r3, r3, #4
 8002cd4:	2b04      	cmp	r3, #4
 8002cd6:	d11b      	bne.n	8002d10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f06f 0204 	mvn.w	r2, #4
 8002ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2202      	movs	r2, #2
 8002ce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 f98a 	bl	8003010 <HAL_TIM_IC_CaptureCallback>
 8002cfc:	e005      	b.n	8002d0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 f97d 	bl	8002ffe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 f98c 	bl	8003022 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	f003 0308 	and.w	r3, r3, #8
 8002d1a:	2b08      	cmp	r3, #8
 8002d1c:	d122      	bne.n	8002d64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	f003 0308 	and.w	r3, r3, #8
 8002d28:	2b08      	cmp	r3, #8
 8002d2a:	d11b      	bne.n	8002d64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f06f 0208 	mvn.w	r2, #8
 8002d34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2204      	movs	r2, #4
 8002d3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	69db      	ldr	r3, [r3, #28]
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f960 	bl	8003010 <HAL_TIM_IC_CaptureCallback>
 8002d50:	e005      	b.n	8002d5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f953 	bl	8002ffe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 f962 	bl	8003022 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	f003 0310 	and.w	r3, r3, #16
 8002d6e:	2b10      	cmp	r3, #16
 8002d70:	d122      	bne.n	8002db8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	f003 0310 	and.w	r3, r3, #16
 8002d7c:	2b10      	cmp	r3, #16
 8002d7e:	d11b      	bne.n	8002db8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f06f 0210 	mvn.w	r2, #16
 8002d88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2208      	movs	r2, #8
 8002d8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d003      	beq.n	8002da6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f936 	bl	8003010 <HAL_TIM_IC_CaptureCallback>
 8002da4:	e005      	b.n	8002db2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 f929 	bl	8002ffe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 f938 	bl	8003022 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d10e      	bne.n	8002de4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d107      	bne.n	8002de4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f06f 0201 	mvn.w	r2, #1
 8002ddc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f7fd ff94 	bl	8000d0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dee:	2b80      	cmp	r3, #128	; 0x80
 8002df0:	d10e      	bne.n	8002e10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dfc:	2b80      	cmp	r3, #128	; 0x80
 8002dfe:	d107      	bne.n	8002e10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 fa7b 	bl	8003306 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1a:	2b40      	cmp	r3, #64	; 0x40
 8002e1c:	d10e      	bne.n	8002e3c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e28:	2b40      	cmp	r3, #64	; 0x40
 8002e2a:	d107      	bne.n	8002e3c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f8fc 	bl	8003034 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	f003 0320 	and.w	r3, r3, #32
 8002e46:	2b20      	cmp	r3, #32
 8002e48:	d10e      	bne.n	8002e68 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	f003 0320 	and.w	r3, r3, #32
 8002e54:	2b20      	cmp	r3, #32
 8002e56:	d107      	bne.n	8002e68 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f06f 0220 	mvn.w	r2, #32
 8002e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 fa46 	bl	80032f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e68:	bf00      	nop
 8002e6a:	3708      	adds	r7, #8
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d101      	bne.n	8002e8c <HAL_TIM_ConfigClockSource+0x1c>
 8002e88:	2302      	movs	r3, #2
 8002e8a:	e0b4      	b.n	8002ff6 <HAL_TIM_ConfigClockSource+0x186>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2202      	movs	r2, #2
 8002e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002eaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002eb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68ba      	ldr	r2, [r7, #8]
 8002eba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ec4:	d03e      	beq.n	8002f44 <HAL_TIM_ConfigClockSource+0xd4>
 8002ec6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eca:	f200 8087 	bhi.w	8002fdc <HAL_TIM_ConfigClockSource+0x16c>
 8002ece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ed2:	f000 8086 	beq.w	8002fe2 <HAL_TIM_ConfigClockSource+0x172>
 8002ed6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eda:	d87f      	bhi.n	8002fdc <HAL_TIM_ConfigClockSource+0x16c>
 8002edc:	2b70      	cmp	r3, #112	; 0x70
 8002ede:	d01a      	beq.n	8002f16 <HAL_TIM_ConfigClockSource+0xa6>
 8002ee0:	2b70      	cmp	r3, #112	; 0x70
 8002ee2:	d87b      	bhi.n	8002fdc <HAL_TIM_ConfigClockSource+0x16c>
 8002ee4:	2b60      	cmp	r3, #96	; 0x60
 8002ee6:	d050      	beq.n	8002f8a <HAL_TIM_ConfigClockSource+0x11a>
 8002ee8:	2b60      	cmp	r3, #96	; 0x60
 8002eea:	d877      	bhi.n	8002fdc <HAL_TIM_ConfigClockSource+0x16c>
 8002eec:	2b50      	cmp	r3, #80	; 0x50
 8002eee:	d03c      	beq.n	8002f6a <HAL_TIM_ConfigClockSource+0xfa>
 8002ef0:	2b50      	cmp	r3, #80	; 0x50
 8002ef2:	d873      	bhi.n	8002fdc <HAL_TIM_ConfigClockSource+0x16c>
 8002ef4:	2b40      	cmp	r3, #64	; 0x40
 8002ef6:	d058      	beq.n	8002faa <HAL_TIM_ConfigClockSource+0x13a>
 8002ef8:	2b40      	cmp	r3, #64	; 0x40
 8002efa:	d86f      	bhi.n	8002fdc <HAL_TIM_ConfigClockSource+0x16c>
 8002efc:	2b30      	cmp	r3, #48	; 0x30
 8002efe:	d064      	beq.n	8002fca <HAL_TIM_ConfigClockSource+0x15a>
 8002f00:	2b30      	cmp	r3, #48	; 0x30
 8002f02:	d86b      	bhi.n	8002fdc <HAL_TIM_ConfigClockSource+0x16c>
 8002f04:	2b20      	cmp	r3, #32
 8002f06:	d060      	beq.n	8002fca <HAL_TIM_ConfigClockSource+0x15a>
 8002f08:	2b20      	cmp	r3, #32
 8002f0a:	d867      	bhi.n	8002fdc <HAL_TIM_ConfigClockSource+0x16c>
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d05c      	beq.n	8002fca <HAL_TIM_ConfigClockSource+0x15a>
 8002f10:	2b10      	cmp	r3, #16
 8002f12:	d05a      	beq.n	8002fca <HAL_TIM_ConfigClockSource+0x15a>
 8002f14:	e062      	b.n	8002fdc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f26:	f000 f968 	bl	80031fa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68ba      	ldr	r2, [r7, #8]
 8002f40:	609a      	str	r2, [r3, #8]
      break;
 8002f42:	e04f      	b.n	8002fe4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f54:	f000 f951 	bl	80031fa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689a      	ldr	r2, [r3, #8]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f66:	609a      	str	r2, [r3, #8]
      break;
 8002f68:	e03c      	b.n	8002fe4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f76:	461a      	mov	r2, r3
 8002f78:	f000 f8c8 	bl	800310c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2150      	movs	r1, #80	; 0x50
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 f91f 	bl	80031c6 <TIM_ITRx_SetConfig>
      break;
 8002f88:	e02c      	b.n	8002fe4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f96:	461a      	mov	r2, r3
 8002f98:	f000 f8e6 	bl	8003168 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2160      	movs	r1, #96	; 0x60
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 f90f 	bl	80031c6 <TIM_ITRx_SetConfig>
      break;
 8002fa8:	e01c      	b.n	8002fe4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	f000 f8a8 	bl	800310c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2140      	movs	r1, #64	; 0x40
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f000 f8ff 	bl	80031c6 <TIM_ITRx_SetConfig>
      break;
 8002fc8:	e00c      	b.n	8002fe4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	4610      	mov	r0, r2
 8002fd6:	f000 f8f6 	bl	80031c6 <TIM_ITRx_SetConfig>
      break;
 8002fda:	e003      	b.n	8002fe4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	73fb      	strb	r3, [r7, #15]
      break;
 8002fe0:	e000      	b.n	8002fe4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002fe2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b083      	sub	sp, #12
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	bc80      	pop	{r7}
 800300e:	4770      	bx	lr

08003010 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	bc80      	pop	{r7}
 8003020:	4770      	bx	lr

08003022 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003022:	b480      	push	{r7}
 8003024:	b083      	sub	sp, #12
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800302a:	bf00      	nop
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	bc80      	pop	{r7}
 8003032:	4770      	bx	lr

08003034 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	bc80      	pop	{r7}
 8003044:	4770      	bx	lr
	...

08003048 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a29      	ldr	r2, [pc, #164]	; (8003100 <TIM_Base_SetConfig+0xb8>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d00b      	beq.n	8003078 <TIM_Base_SetConfig+0x30>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003066:	d007      	beq.n	8003078 <TIM_Base_SetConfig+0x30>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a26      	ldr	r2, [pc, #152]	; (8003104 <TIM_Base_SetConfig+0xbc>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d003      	beq.n	8003078 <TIM_Base_SetConfig+0x30>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a25      	ldr	r2, [pc, #148]	; (8003108 <TIM_Base_SetConfig+0xc0>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d108      	bne.n	800308a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800307e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	4313      	orrs	r3, r2
 8003088:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a1c      	ldr	r2, [pc, #112]	; (8003100 <TIM_Base_SetConfig+0xb8>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d00b      	beq.n	80030aa <TIM_Base_SetConfig+0x62>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003098:	d007      	beq.n	80030aa <TIM_Base_SetConfig+0x62>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a19      	ldr	r2, [pc, #100]	; (8003104 <TIM_Base_SetConfig+0xbc>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d003      	beq.n	80030aa <TIM_Base_SetConfig+0x62>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a18      	ldr	r2, [pc, #96]	; (8003108 <TIM_Base_SetConfig+0xc0>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d108      	bne.n	80030bc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a07      	ldr	r2, [pc, #28]	; (8003100 <TIM_Base_SetConfig+0xb8>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d103      	bne.n	80030f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	691a      	ldr	r2, [r3, #16]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	615a      	str	r2, [r3, #20]
}
 80030f6:	bf00      	nop
 80030f8:	3714      	adds	r7, #20
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bc80      	pop	{r7}
 80030fe:	4770      	bx	lr
 8003100:	40012c00 	.word	0x40012c00
 8003104:	40000400 	.word	0x40000400
 8003108:	40000800 	.word	0x40000800

0800310c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800310c:	b480      	push	{r7}
 800310e:	b087      	sub	sp, #28
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	f023 0201 	bic.w	r2, r3, #1
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003136:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	011b      	lsls	r3, r3, #4
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	4313      	orrs	r3, r2
 8003140:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	f023 030a 	bic.w	r3, r3, #10
 8003148:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	4313      	orrs	r3, r2
 8003150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	621a      	str	r2, [r3, #32]
}
 800315e:	bf00      	nop
 8003160:	371c      	adds	r7, #28
 8003162:	46bd      	mov	sp, r7
 8003164:	bc80      	pop	{r7}
 8003166:	4770      	bx	lr

08003168 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003168:	b480      	push	{r7}
 800316a:	b087      	sub	sp, #28
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	f023 0210 	bic.w	r2, r3, #16
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003192:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	031b      	lsls	r3, r3, #12
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	4313      	orrs	r3, r2
 800319c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031a4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	011b      	lsls	r3, r3, #4
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	621a      	str	r2, [r3, #32]
}
 80031bc:	bf00      	nop
 80031be:	371c      	adds	r7, #28
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bc80      	pop	{r7}
 80031c4:	4770      	bx	lr

080031c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b085      	sub	sp, #20
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
 80031ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	f043 0307 	orr.w	r3, r3, #7
 80031e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	609a      	str	r2, [r3, #8]
}
 80031f0:	bf00      	nop
 80031f2:	3714      	adds	r7, #20
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bc80      	pop	{r7}
 80031f8:	4770      	bx	lr

080031fa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b087      	sub	sp, #28
 80031fe:	af00      	add	r7, sp, #0
 8003200:	60f8      	str	r0, [r7, #12]
 8003202:	60b9      	str	r1, [r7, #8]
 8003204:	607a      	str	r2, [r7, #4]
 8003206:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003214:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	021a      	lsls	r2, r3, #8
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	431a      	orrs	r2, r3
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	4313      	orrs	r3, r2
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	4313      	orrs	r3, r2
 8003226:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	609a      	str	r2, [r3, #8]
}
 800322e:	bf00      	nop
 8003230:	371c      	adds	r7, #28
 8003232:	46bd      	mov	sp, r7
 8003234:	bc80      	pop	{r7}
 8003236:	4770      	bx	lr

08003238 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003248:	2b01      	cmp	r3, #1
 800324a:	d101      	bne.n	8003250 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800324c:	2302      	movs	r3, #2
 800324e:	e046      	b.n	80032de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2202      	movs	r2, #2
 800325c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003276:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	4313      	orrs	r3, r2
 8003280:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a16      	ldr	r2, [pc, #88]	; (80032e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d00e      	beq.n	80032b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800329c:	d009      	beq.n	80032b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a12      	ldr	r2, [pc, #72]	; (80032ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d004      	beq.n	80032b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a10      	ldr	r2, [pc, #64]	; (80032f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d10c      	bne.n	80032cc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bc80      	pop	{r7}
 80032e6:	4770      	bx	lr
 80032e8:	40012c00 	.word	0x40012c00
 80032ec:	40000400 	.word	0x40000400
 80032f0:	40000800 	.word	0x40000800

080032f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	bc80      	pop	{r7}
 8003304:	4770      	bx	lr

08003306 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003306:	b480      	push	{r7}
 8003308:	b083      	sub	sp, #12
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800330e:	bf00      	nop
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	bc80      	pop	{r7}
 8003316:	4770      	bx	lr

08003318 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e042      	b.n	80033b0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d106      	bne.n	8003344 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7fe f808 	bl	8001354 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2224      	movs	r2, #36	; 0x24
 8003348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68da      	ldr	r2, [r3, #12]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800335a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 fd71 	bl	8003e44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	691a      	ldr	r2, [r3, #16]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003370:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	695a      	ldr	r2, [r3, #20]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003380:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68da      	ldr	r2, [r3, #12]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003390:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2220      	movs	r2, #32
 800339c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2220      	movs	r2, #32
 80033a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3708      	adds	r7, #8
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b08a      	sub	sp, #40	; 0x28
 80033bc:	af02      	add	r7, sp, #8
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	603b      	str	r3, [r7, #0]
 80033c4:	4613      	mov	r3, r2
 80033c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033c8:	2300      	movs	r3, #0
 80033ca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	2b20      	cmp	r3, #32
 80033d6:	d16d      	bne.n	80034b4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d002      	beq.n	80033e4 <HAL_UART_Transmit+0x2c>
 80033de:	88fb      	ldrh	r3, [r7, #6]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d101      	bne.n	80033e8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e066      	b.n	80034b6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2221      	movs	r2, #33	; 0x21
 80033f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033f6:	f7fe f957 	bl	80016a8 <HAL_GetTick>
 80033fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	88fa      	ldrh	r2, [r7, #6]
 8003400:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	88fa      	ldrh	r2, [r7, #6]
 8003406:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003410:	d108      	bne.n	8003424 <HAL_UART_Transmit+0x6c>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d104      	bne.n	8003424 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800341a:	2300      	movs	r3, #0
 800341c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	61bb      	str	r3, [r7, #24]
 8003422:	e003      	b.n	800342c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003428:	2300      	movs	r3, #0
 800342a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800342c:	e02a      	b.n	8003484 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	2200      	movs	r2, #0
 8003436:	2180      	movs	r1, #128	; 0x80
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f000 faf9 	bl	8003a30 <UART_WaitOnFlagUntilTimeout>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e036      	b.n	80034b6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10b      	bne.n	8003466 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	881b      	ldrh	r3, [r3, #0]
 8003452:	461a      	mov	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800345c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	3302      	adds	r3, #2
 8003462:	61bb      	str	r3, [r7, #24]
 8003464:	e007      	b.n	8003476 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	781a      	ldrb	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	3301      	adds	r3, #1
 8003474:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800347a:	b29b      	uxth	r3, r3
 800347c:	3b01      	subs	r3, #1
 800347e:	b29a      	uxth	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003488:	b29b      	uxth	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1cf      	bne.n	800342e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	2200      	movs	r2, #0
 8003496:	2140      	movs	r1, #64	; 0x40
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f000 fac9 	bl	8003a30 <UART_WaitOnFlagUntilTimeout>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e006      	b.n	80034b6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2220      	movs	r2, #32
 80034ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80034b0:	2300      	movs	r3, #0
 80034b2:	e000      	b.n	80034b6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80034b4:	2302      	movs	r3, #2
  }
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3720      	adds	r7, #32
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
	...

080034c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b0ba      	sub	sp, #232	; 0xe8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80034e6:	2300      	movs	r3, #0
 80034e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80034f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034f6:	f003 030f 	and.w	r3, r3, #15
 80034fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80034fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10f      	bne.n	8003526 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800350a:	f003 0320 	and.w	r3, r3, #32
 800350e:	2b00      	cmp	r3, #0
 8003510:	d009      	beq.n	8003526 <HAL_UART_IRQHandler+0x66>
 8003512:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003516:	f003 0320 	and.w	r3, r3, #32
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 fbd1 	bl	8003cc6 <UART_Receive_IT>
      return;
 8003524:	e25b      	b.n	80039de <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003526:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800352a:	2b00      	cmp	r3, #0
 800352c:	f000 80de 	beq.w	80036ec <HAL_UART_IRQHandler+0x22c>
 8003530:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	2b00      	cmp	r3, #0
 800353a:	d106      	bne.n	800354a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800353c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003540:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 80d1 	beq.w	80036ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800354a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00b      	beq.n	800356e <HAL_UART_IRQHandler+0xae>
 8003556:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800355a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355e:	2b00      	cmp	r3, #0
 8003560:	d005      	beq.n	800356e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003566:	f043 0201 	orr.w	r2, r3, #1
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800356e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003572:	f003 0304 	and.w	r3, r3, #4
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00b      	beq.n	8003592 <HAL_UART_IRQHandler+0xd2>
 800357a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	d005      	beq.n	8003592 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358a:	f043 0202 	orr.w	r2, r3, #2
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00b      	beq.n	80035b6 <HAL_UART_IRQHandler+0xf6>
 800359e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d005      	beq.n	80035b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ae:	f043 0204 	orr.w	r2, r3, #4
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80035b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035ba:	f003 0308 	and.w	r3, r3, #8
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d011      	beq.n	80035e6 <HAL_UART_IRQHandler+0x126>
 80035c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035c6:	f003 0320 	and.w	r3, r3, #32
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d105      	bne.n	80035da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80035ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d005      	beq.n	80035e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035de:	f043 0208 	orr.w	r2, r3, #8
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f000 81f2 	beq.w	80039d4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035f4:	f003 0320 	and.w	r3, r3, #32
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d008      	beq.n	800360e <HAL_UART_IRQHandler+0x14e>
 80035fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003600:	f003 0320 	and.w	r3, r3, #32
 8003604:	2b00      	cmp	r3, #0
 8003606:	d002      	beq.n	800360e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 fb5c 	bl	8003cc6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003618:	2b00      	cmp	r3, #0
 800361a:	bf14      	ite	ne
 800361c:	2301      	movne	r3, #1
 800361e:	2300      	moveq	r3, #0
 8003620:	b2db      	uxtb	r3, r3
 8003622:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362a:	f003 0308 	and.w	r3, r3, #8
 800362e:	2b00      	cmp	r3, #0
 8003630:	d103      	bne.n	800363a <HAL_UART_IRQHandler+0x17a>
 8003632:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003636:	2b00      	cmp	r3, #0
 8003638:	d04f      	beq.n	80036da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 fa66 	bl	8003b0c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800364a:	2b00      	cmp	r3, #0
 800364c:	d041      	beq.n	80036d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	3314      	adds	r3, #20
 8003654:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003658:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800365c:	e853 3f00 	ldrex	r3, [r3]
 8003660:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003664:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003668:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800366c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	3314      	adds	r3, #20
 8003676:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800367a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800367e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003682:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003686:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800368a:	e841 2300 	strex	r3, r2, [r1]
 800368e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003692:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1d9      	bne.n	800364e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d013      	beq.n	80036ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a6:	4a7e      	ldr	r2, [pc, #504]	; (80038a0 <HAL_UART_IRQHandler+0x3e0>)
 80036a8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fe f970 	bl	8001994 <HAL_DMA_Abort_IT>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d016      	beq.n	80036e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80036c4:	4610      	mov	r0, r2
 80036c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036c8:	e00e      	b.n	80036e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 f99c 	bl	8003a08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036d0:	e00a      	b.n	80036e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f998 	bl	8003a08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036d8:	e006      	b.n	80036e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f994 	bl	8003a08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80036e6:	e175      	b.n	80039d4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036e8:	bf00      	nop
    return;
 80036ea:	e173      	b.n	80039d4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	f040 814f 	bne.w	8003994 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80036f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036fa:	f003 0310 	and.w	r3, r3, #16
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f000 8148 	beq.w	8003994 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003708:	f003 0310 	and.w	r3, r3, #16
 800370c:	2b00      	cmp	r3, #0
 800370e:	f000 8141 	beq.w	8003994 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003712:	2300      	movs	r3, #0
 8003714:	60bb      	str	r3, [r7, #8]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	60bb      	str	r3, [r7, #8]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	60bb      	str	r3, [r7, #8]
 8003726:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003732:	2b00      	cmp	r3, #0
 8003734:	f000 80b6 	beq.w	80038a4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003744:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003748:	2b00      	cmp	r3, #0
 800374a:	f000 8145 	beq.w	80039d8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003752:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003756:	429a      	cmp	r2, r3
 8003758:	f080 813e 	bcs.w	80039d8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003762:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	2b20      	cmp	r3, #32
 800376c:	f000 8088 	beq.w	8003880 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	330c      	adds	r3, #12
 8003776:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800377e:	e853 3f00 	ldrex	r3, [r3]
 8003782:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003786:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800378a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800378e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	330c      	adds	r3, #12
 8003798:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800379c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80037a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80037a8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80037ac:	e841 2300 	strex	r3, r2, [r1]
 80037b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80037b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1d9      	bne.n	8003770 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	3314      	adds	r3, #20
 80037c2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037c6:	e853 3f00 	ldrex	r3, [r3]
 80037ca:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80037cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037ce:	f023 0301 	bic.w	r3, r3, #1
 80037d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	3314      	adds	r3, #20
 80037dc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80037e0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80037e4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80037e8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80037ec:	e841 2300 	strex	r3, r2, [r1]
 80037f0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80037f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1e1      	bne.n	80037bc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	3314      	adds	r3, #20
 80037fe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003800:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003802:	e853 3f00 	ldrex	r3, [r3]
 8003806:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003808:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800380a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800380e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	3314      	adds	r3, #20
 8003818:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800381c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800381e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003820:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003822:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003824:	e841 2300 	strex	r3, r2, [r1]
 8003828:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800382a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1e3      	bne.n	80037f8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2220      	movs	r2, #32
 8003834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	330c      	adds	r3, #12
 8003844:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003848:	e853 3f00 	ldrex	r3, [r3]
 800384c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800384e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003850:	f023 0310 	bic.w	r3, r3, #16
 8003854:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	330c      	adds	r3, #12
 800385e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003862:	65ba      	str	r2, [r7, #88]	; 0x58
 8003864:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003866:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003868:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800386a:	e841 2300 	strex	r3, r2, [r1]
 800386e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003870:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1e3      	bne.n	800383e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800387a:	4618      	mov	r0, r3
 800387c:	f7fe f84f 	bl	800191e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2202      	movs	r2, #2
 8003884:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800388e:	b29b      	uxth	r3, r3
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	b29b      	uxth	r3, r3
 8003894:	4619      	mov	r1, r3
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f8bf 	bl	8003a1a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800389c:	e09c      	b.n	80039d8 <HAL_UART_IRQHandler+0x518>
 800389e:	bf00      	nop
 80038a0:	08003bd1 	.word	0x08003bd1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f000 808e 	beq.w	80039dc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80038c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 8089 	beq.w	80039dc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	330c      	adds	r3, #12
 80038d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d4:	e853 3f00 	ldrex	r3, [r3]
 80038d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80038da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	330c      	adds	r3, #12
 80038ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80038ee:	647a      	str	r2, [r7, #68]	; 0x44
 80038f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80038f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038f6:	e841 2300 	strex	r3, r2, [r1]
 80038fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80038fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1e3      	bne.n	80038ca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	3314      	adds	r3, #20
 8003908:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390c:	e853 3f00 	ldrex	r3, [r3]
 8003910:	623b      	str	r3, [r7, #32]
   return(result);
 8003912:	6a3b      	ldr	r3, [r7, #32]
 8003914:	f023 0301 	bic.w	r3, r3, #1
 8003918:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	3314      	adds	r3, #20
 8003922:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003926:	633a      	str	r2, [r7, #48]	; 0x30
 8003928:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800392c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800392e:	e841 2300 	strex	r3, r2, [r1]
 8003932:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1e3      	bne.n	8003902 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2220      	movs	r2, #32
 800393e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	330c      	adds	r3, #12
 800394e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	e853 3f00 	ldrex	r3, [r3]
 8003956:	60fb      	str	r3, [r7, #12]
   return(result);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f023 0310 	bic.w	r3, r3, #16
 800395e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	330c      	adds	r3, #12
 8003968:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800396c:	61fa      	str	r2, [r7, #28]
 800396e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003970:	69b9      	ldr	r1, [r7, #24]
 8003972:	69fa      	ldr	r2, [r7, #28]
 8003974:	e841 2300 	strex	r3, r2, [r1]
 8003978:	617b      	str	r3, [r7, #20]
   return(result);
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1e3      	bne.n	8003948 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2202      	movs	r2, #2
 8003984:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003986:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800398a:	4619      	mov	r1, r3
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 f844 	bl	8003a1a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003992:	e023      	b.n	80039dc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399c:	2b00      	cmp	r3, #0
 800399e:	d009      	beq.n	80039b4 <HAL_UART_IRQHandler+0x4f4>
 80039a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d003      	beq.n	80039b4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 f923 	bl	8003bf8 <UART_Transmit_IT>
    return;
 80039b2:	e014      	b.n	80039de <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80039b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00e      	beq.n	80039de <HAL_UART_IRQHandler+0x51e>
 80039c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d008      	beq.n	80039de <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 f962 	bl	8003c96 <UART_EndTransmit_IT>
    return;
 80039d2:	e004      	b.n	80039de <HAL_UART_IRQHandler+0x51e>
    return;
 80039d4:	bf00      	nop
 80039d6:	e002      	b.n	80039de <HAL_UART_IRQHandler+0x51e>
      return;
 80039d8:	bf00      	nop
 80039da:	e000      	b.n	80039de <HAL_UART_IRQHandler+0x51e>
      return;
 80039dc:	bf00      	nop
  }
}
 80039de:	37e8      	adds	r7, #232	; 0xe8
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bc80      	pop	{r7}
 80039f4:	4770      	bx	lr

080039f6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b083      	sub	sp, #12
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bc80      	pop	{r7}
 8003a06:	4770      	bx	lr

08003a08 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bc80      	pop	{r7}
 8003a18:	4770      	bx	lr

08003a1a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b083      	sub	sp, #12
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
 8003a22:	460b      	mov	r3, r1
 8003a24:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a26:	bf00      	nop
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bc80      	pop	{r7}
 8003a2e:	4770      	bx	lr

08003a30 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b090      	sub	sp, #64	; 0x40
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	603b      	str	r3, [r7, #0]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a40:	e050      	b.n	8003ae4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a48:	d04c      	beq.n	8003ae4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d007      	beq.n	8003a60 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a50:	f7fd fe2a 	bl	80016a8 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d241      	bcs.n	8003ae4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	330c      	adds	r3, #12
 8003a66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6a:	e853 3f00 	ldrex	r3, [r3]
 8003a6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a72:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	330c      	adds	r3, #12
 8003a7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a80:	637a      	str	r2, [r7, #52]	; 0x34
 8003a82:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a88:	e841 2300 	strex	r3, r2, [r1]
 8003a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1e5      	bne.n	8003a60 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	3314      	adds	r3, #20
 8003a9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	e853 3f00 	ldrex	r3, [r3]
 8003aa2:	613b      	str	r3, [r7, #16]
   return(result);
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	f023 0301 	bic.w	r3, r3, #1
 8003aaa:	63bb      	str	r3, [r7, #56]	; 0x38
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	3314      	adds	r3, #20
 8003ab2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ab4:	623a      	str	r2, [r7, #32]
 8003ab6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab8:	69f9      	ldr	r1, [r7, #28]
 8003aba:	6a3a      	ldr	r2, [r7, #32]
 8003abc:	e841 2300 	strex	r3, r2, [r1]
 8003ac0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1e5      	bne.n	8003a94 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2220      	movs	r2, #32
 8003acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e00f      	b.n	8003b04 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	4013      	ands	r3, r2
 8003aee:	68ba      	ldr	r2, [r7, #8]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	bf0c      	ite	eq
 8003af4:	2301      	moveq	r3, #1
 8003af6:	2300      	movne	r3, #0
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	461a      	mov	r2, r3
 8003afc:	79fb      	ldrb	r3, [r7, #7]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d09f      	beq.n	8003a42 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3740      	adds	r7, #64	; 0x40
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b095      	sub	sp, #84	; 0x54
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	330c      	adds	r3, #12
 8003b1a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b1e:	e853 3f00 	ldrex	r3, [r3]
 8003b22:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	330c      	adds	r3, #12
 8003b32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b34:	643a      	str	r2, [r7, #64]	; 0x40
 8003b36:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b3c:	e841 2300 	strex	r3, r2, [r1]
 8003b40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1e5      	bne.n	8003b14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	3314      	adds	r3, #20
 8003b4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b50:	6a3b      	ldr	r3, [r7, #32]
 8003b52:	e853 3f00 	ldrex	r3, [r3]
 8003b56:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	f023 0301 	bic.w	r3, r3, #1
 8003b5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	3314      	adds	r3, #20
 8003b66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b68:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b70:	e841 2300 	strex	r3, r2, [r1]
 8003b74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1e5      	bne.n	8003b48 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d119      	bne.n	8003bb8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	330c      	adds	r3, #12
 8003b8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	e853 3f00 	ldrex	r3, [r3]
 8003b92:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	f023 0310 	bic.w	r3, r3, #16
 8003b9a:	647b      	str	r3, [r7, #68]	; 0x44
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	330c      	adds	r3, #12
 8003ba2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ba4:	61ba      	str	r2, [r7, #24]
 8003ba6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba8:	6979      	ldr	r1, [r7, #20]
 8003baa:	69ba      	ldr	r2, [r7, #24]
 8003bac:	e841 2300 	strex	r3, r2, [r1]
 8003bb0:	613b      	str	r3, [r7, #16]
   return(result);
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1e5      	bne.n	8003b84 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2220      	movs	r2, #32
 8003bbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003bc6:	bf00      	nop
 8003bc8:	3754      	adds	r7, #84	; 0x54
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bc80      	pop	{r7}
 8003bce:	4770      	bx	lr

08003bd0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bdc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f7ff ff0c 	bl	8003a08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bf0:	bf00      	nop
 8003bf2:	3710      	adds	r7, #16
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b21      	cmp	r3, #33	; 0x21
 8003c0a:	d13e      	bne.n	8003c8a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c14:	d114      	bne.n	8003c40 <UART_Transmit_IT+0x48>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d110      	bne.n	8003c40 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	881b      	ldrh	r3, [r3, #0]
 8003c28:	461a      	mov	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c32:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	1c9a      	adds	r2, r3, #2
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	621a      	str	r2, [r3, #32]
 8003c3e:	e008      	b.n	8003c52 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	1c59      	adds	r1, r3, #1
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	6211      	str	r1, [r2, #32]
 8003c4a:	781a      	ldrb	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	4619      	mov	r1, r3
 8003c60:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10f      	bne.n	8003c86 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68da      	ldr	r2, [r3, #12]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c74:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68da      	ldr	r2, [r3, #12]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c84:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c86:	2300      	movs	r3, #0
 8003c88:	e000      	b.n	8003c8c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003c8a:	2302      	movs	r3, #2
  }
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3714      	adds	r7, #20
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bc80      	pop	{r7}
 8003c94:	4770      	bx	lr

08003c96 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b082      	sub	sp, #8
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68da      	ldr	r2, [r3, #12]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f7ff fe94 	bl	80039e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b08c      	sub	sp, #48	; 0x30
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b22      	cmp	r3, #34	; 0x22
 8003cd8:	f040 80ae 	bne.w	8003e38 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ce4:	d117      	bne.n	8003d16 <UART_Receive_IT+0x50>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d113      	bne.n	8003d16 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d08:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0e:	1c9a      	adds	r2, r3, #2
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	629a      	str	r2, [r3, #40]	; 0x28
 8003d14:	e026      	b.n	8003d64 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d28:	d007      	beq.n	8003d3a <UART_Receive_IT+0x74>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10a      	bne.n	8003d48 <UART_Receive_IT+0x82>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d106      	bne.n	8003d48 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d44:	701a      	strb	r2, [r3, #0]
 8003d46:	e008      	b.n	8003d5a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d54:	b2da      	uxtb	r2, r3
 8003d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d58:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5e:	1c5a      	adds	r2, r3, #1
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	4619      	mov	r1, r3
 8003d72:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d15d      	bne.n	8003e34 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68da      	ldr	r2, [r3, #12]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 0220 	bic.w	r2, r2, #32
 8003d86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68da      	ldr	r2, [r3, #12]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	695a      	ldr	r2, [r3, #20]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 0201 	bic.w	r2, r2, #1
 8003da6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2220      	movs	r2, #32
 8003dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d135      	bne.n	8003e2a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	330c      	adds	r3, #12
 8003dca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	e853 3f00 	ldrex	r3, [r3]
 8003dd2:	613b      	str	r3, [r7, #16]
   return(result);
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	f023 0310 	bic.w	r3, r3, #16
 8003dda:	627b      	str	r3, [r7, #36]	; 0x24
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	330c      	adds	r3, #12
 8003de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003de4:	623a      	str	r2, [r7, #32]
 8003de6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de8:	69f9      	ldr	r1, [r7, #28]
 8003dea:	6a3a      	ldr	r2, [r7, #32]
 8003dec:	e841 2300 	strex	r3, r2, [r1]
 8003df0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1e5      	bne.n	8003dc4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0310 	and.w	r3, r3, #16
 8003e02:	2b10      	cmp	r3, #16
 8003e04:	d10a      	bne.n	8003e1c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e06:	2300      	movs	r3, #0
 8003e08:	60fb      	str	r3, [r7, #12]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	60fb      	str	r3, [r7, #12]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	60fb      	str	r3, [r7, #12]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e20:	4619      	mov	r1, r3
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7ff fdf9 	bl	8003a1a <HAL_UARTEx_RxEventCallback>
 8003e28:	e002      	b.n	8003e30 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7ff fde3 	bl	80039f6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003e30:	2300      	movs	r3, #0
 8003e32:	e002      	b.n	8003e3a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003e34:	2300      	movs	r3, #0
 8003e36:	e000      	b.n	8003e3a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003e38:	2302      	movs	r3, #2
  }
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3730      	adds	r7, #48	; 0x30
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
	...

08003e44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68da      	ldr	r2, [r3, #12]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689a      	ldr	r2, [r3, #8]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003e7e:	f023 030c 	bic.w	r3, r3, #12
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6812      	ldr	r2, [r2, #0]
 8003e86:	68b9      	ldr	r1, [r7, #8]
 8003e88:	430b      	orrs	r3, r1
 8003e8a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	699a      	ldr	r2, [r3, #24]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a2c      	ldr	r2, [pc, #176]	; (8003f58 <UART_SetConfig+0x114>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d103      	bne.n	8003eb4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003eac:	f7fe fb96 	bl	80025dc <HAL_RCC_GetPCLK2Freq>
 8003eb0:	60f8      	str	r0, [r7, #12]
 8003eb2:	e002      	b.n	8003eba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003eb4:	f7fe fb7e 	bl	80025b4 <HAL_RCC_GetPCLK1Freq>
 8003eb8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4413      	add	r3, r2
 8003ec2:	009a      	lsls	r2, r3, #2
 8003ec4:	441a      	add	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed0:	4a22      	ldr	r2, [pc, #136]	; (8003f5c <UART_SetConfig+0x118>)
 8003ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed6:	095b      	lsrs	r3, r3, #5
 8003ed8:	0119      	lsls	r1, r3, #4
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	4613      	mov	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	009a      	lsls	r2, r3, #2
 8003ee4:	441a      	add	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ef0:	4b1a      	ldr	r3, [pc, #104]	; (8003f5c <UART_SetConfig+0x118>)
 8003ef2:	fba3 0302 	umull	r0, r3, r3, r2
 8003ef6:	095b      	lsrs	r3, r3, #5
 8003ef8:	2064      	movs	r0, #100	; 0x64
 8003efa:	fb00 f303 	mul.w	r3, r0, r3
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	011b      	lsls	r3, r3, #4
 8003f02:	3332      	adds	r3, #50	; 0x32
 8003f04:	4a15      	ldr	r2, [pc, #84]	; (8003f5c <UART_SetConfig+0x118>)
 8003f06:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0a:	095b      	lsrs	r3, r3, #5
 8003f0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f10:	4419      	add	r1, r3
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	4613      	mov	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4413      	add	r3, r2
 8003f1a:	009a      	lsls	r2, r3, #2
 8003f1c:	441a      	add	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f28:	4b0c      	ldr	r3, [pc, #48]	; (8003f5c <UART_SetConfig+0x118>)
 8003f2a:	fba3 0302 	umull	r0, r3, r3, r2
 8003f2e:	095b      	lsrs	r3, r3, #5
 8003f30:	2064      	movs	r0, #100	; 0x64
 8003f32:	fb00 f303 	mul.w	r3, r0, r3
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	011b      	lsls	r3, r3, #4
 8003f3a:	3332      	adds	r3, #50	; 0x32
 8003f3c:	4a07      	ldr	r2, [pc, #28]	; (8003f5c <UART_SetConfig+0x118>)
 8003f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f42:	095b      	lsrs	r3, r3, #5
 8003f44:	f003 020f 	and.w	r2, r3, #15
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	440a      	add	r2, r1
 8003f4e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003f50:	bf00      	nop
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	40013800 	.word	0x40013800
 8003f5c:	51eb851f 	.word	0x51eb851f

08003f60 <memset>:
 8003f60:	4603      	mov	r3, r0
 8003f62:	4402      	add	r2, r0
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d100      	bne.n	8003f6a <memset+0xa>
 8003f68:	4770      	bx	lr
 8003f6a:	f803 1b01 	strb.w	r1, [r3], #1
 8003f6e:	e7f9      	b.n	8003f64 <memset+0x4>

08003f70 <__libc_init_array>:
 8003f70:	b570      	push	{r4, r5, r6, lr}
 8003f72:	2600      	movs	r6, #0
 8003f74:	4d0c      	ldr	r5, [pc, #48]	; (8003fa8 <__libc_init_array+0x38>)
 8003f76:	4c0d      	ldr	r4, [pc, #52]	; (8003fac <__libc_init_array+0x3c>)
 8003f78:	1b64      	subs	r4, r4, r5
 8003f7a:	10a4      	asrs	r4, r4, #2
 8003f7c:	42a6      	cmp	r6, r4
 8003f7e:	d109      	bne.n	8003f94 <__libc_init_array+0x24>
 8003f80:	f000 f81a 	bl	8003fb8 <_init>
 8003f84:	2600      	movs	r6, #0
 8003f86:	4d0a      	ldr	r5, [pc, #40]	; (8003fb0 <__libc_init_array+0x40>)
 8003f88:	4c0a      	ldr	r4, [pc, #40]	; (8003fb4 <__libc_init_array+0x44>)
 8003f8a:	1b64      	subs	r4, r4, r5
 8003f8c:	10a4      	asrs	r4, r4, #2
 8003f8e:	42a6      	cmp	r6, r4
 8003f90:	d105      	bne.n	8003f9e <__libc_init_array+0x2e>
 8003f92:	bd70      	pop	{r4, r5, r6, pc}
 8003f94:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f98:	4798      	blx	r3
 8003f9a:	3601      	adds	r6, #1
 8003f9c:	e7ee      	b.n	8003f7c <__libc_init_array+0xc>
 8003f9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fa2:	4798      	blx	r3
 8003fa4:	3601      	adds	r6, #1
 8003fa6:	e7f2      	b.n	8003f8e <__libc_init_array+0x1e>
 8003fa8:	08004d74 	.word	0x08004d74
 8003fac:	08004d74 	.word	0x08004d74
 8003fb0:	08004d74 	.word	0x08004d74
 8003fb4:	08004d78 	.word	0x08004d78

08003fb8 <_init>:
 8003fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fba:	bf00      	nop
 8003fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fbe:	bc08      	pop	{r3}
 8003fc0:	469e      	mov	lr, r3
 8003fc2:	4770      	bx	lr

08003fc4 <_fini>:
 8003fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fc6:	bf00      	nop
 8003fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fca:	bc08      	pop	{r3}
 8003fcc:	469e      	mov	lr, r3
 8003fce:	4770      	bx	lr
